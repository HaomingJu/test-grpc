// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/replay_log.proto

#include "tensorflow/core/protobuf/replay_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR NewReplaySession::NewReplaySession(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devices_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewReplaySessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewReplaySessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewReplaySessionDefaultTypeInternal() {}
  union {
    NewReplaySession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewReplaySessionDefaultTypeInternal _NewReplaySession_default_instance_;
PROTOBUF_CONSTEXPR ReplayOp::ReplayOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_time_us_)*/0
  , /*decltype(_impl_.end_time_us_)*/0
  , /*decltype(_impl_.op_)*/{}
  , /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReplayOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplayOpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplayOpDefaultTypeInternal() {}
  union {
    ReplayOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplayOpDefaultTypeInternal _ReplayOp_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, _impl_.devices_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, _impl_.session_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_.start_time_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_.end_time_us_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::NewReplaySession)},
  { 8, -1, -1, sizeof(::tensorflow::ReplayOp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_NewReplaySession_default_instance_._instance,
  &::tensorflow::_ReplayOp_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)tensorflow/core/protobuf/replay_log.pr"
  "oto\022\ntensorflow\032%tensorflow/core/protobu"
  "f/master.proto\"\\\n\020NewReplaySession\0220\n\007de"
  "vices\030\001 \001(\0132\037.tensorflow.ListDevicesResp"
  "onse\022\026\n\016session_handle\030\002 \001(\t\"\350\n\n\010ReplayO"
  "p\022\025\n\rstart_time_us\030\037 \001(\001\022\023\n\013end_time_us\030"
  "  \001(\001\022:\n\016create_session\030\001 \001(\0132 .tensorfl"
  "ow.CreateSessionRequestH\000\022:\n\016extend_sess"
  "ion\030\002 \001(\0132 .tensorflow.ExtendSessionRequ"
  "estH\000\022\?\n\021partial_run_setup\030\003 \001(\0132\".tenso"
  "rflow.PartialRunSetupRequestH\000\022.\n\010run_st"
  "ep\030\004 \001(\0132\032.tensorflow.RunStepRequestH\000\0228"
  "\n\rclose_session\030\005 \001(\0132\037.tensorflow.Close"
  "SessionRequestH\000\0226\n\014list_devices\030\006 \001(\0132\036"
  ".tensorflow.ListDevicesRequestH\000\0221\n\rrese"
  "t_request\030\007 \001(\0132\030.tensorflow.ResetReques"
  "tH\000\0228\n\rmake_callable\030\010 \001(\0132\037.tensorflow."
  "MakeCallableRequestH\000\0226\n\014run_callable\030\t "
  "\001(\0132\036.tensorflow.RunCallableRequestH\000\022>\n"
  "\020release_callable\030\n \001(\0132\".tensorflow.Rel"
  "easeCallableRequestH\000\022:\n\022new_replay_sess"
  "ion\030\013 \001(\0132\034.tensorflow.NewReplaySessionH"
  "\000\022D\n\027create_session_response\030\025 \001(\0132!.ten"
  "sorflow.CreateSessionResponseH\001\022D\n\027exten"
  "d_session_response\030\026 \001(\0132!.tensorflow.Ex"
  "tendSessionResponseH\001\022I\n\032partial_run_set"
  "up_response\030\027 \001(\0132#.tensorflow.PartialRu"
  "nSetupResponseH\001\0228\n\021run_step_response\030\030 "
  "\001(\0132\033.tensorflow.RunStepResponseH\001\022B\n\026cl"
  "ose_session_response\030\031 \001(\0132 .tensorflow."
  "CloseSessionResponseH\001\022@\n\025list_devices_r"
  "esponse\030\032 \001(\0132\037.tensorflow.ListDevicesRe"
  "sponseH\001\022;\n\026reset_request_response\030\033 \001(\013"
  "2\031.tensorflow.ResetResponseH\001\022B\n\026make_ca"
  "llable_response\030\034 \001(\0132 .tensorflow.MakeC"
  "allableResponseH\001\022@\n\025run_callable_respon"
  "se\030\035 \001(\0132\037.tensorflow.RunCallableRespons"
  "eH\001\022H\n\031release_callable_response\030\036 \001(\0132#"
  ".tensorflow.ReleaseCallableResponseH\001B\004\n"
  "\002opB\n\n\010responseBZZUgithub.com/tensorflow"
  "/tensorflow/tensorflow/go/core/protobuf/"
  "for_core_protos_go_proto\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = {
    false, false, 1675, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
    "tensorflow/core/protobuf/replay_log.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto);
namespace tensorflow {

// ===================================================================

class NewReplaySession::_Internal {
 public:
  static const ::tensorflow::ListDevicesResponse& devices(const NewReplaySession* msg);
};

const ::tensorflow::ListDevicesResponse&
NewReplaySession::_Internal::devices(const NewReplaySession* msg) {
  return *msg->_impl_.devices_;
}
void NewReplaySession::clear_devices() {
  if (GetArenaForAllocation() == nullptr && _impl_.devices_ != nullptr) {
    delete _impl_.devices_;
  }
  _impl_.devices_ = nullptr;
}
NewReplaySession::NewReplaySession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NewReplaySession)
}
NewReplaySession::NewReplaySession(const NewReplaySession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewReplaySession* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.devices_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_devices()) {
    _this->_impl_.devices_ = new ::tensorflow::ListDevicesResponse(*from._impl_.devices_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.NewReplaySession)
}

inline void NewReplaySession::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.devices_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewReplaySession::~NewReplaySession() {
  // @@protoc_insertion_point(destructor:tensorflow.NewReplaySession)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewReplaySession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_handle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.devices_;
}

void NewReplaySession::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewReplaySession::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NewReplaySession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_handle_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.devices_ != nullptr) {
    delete _impl_.devices_;
  }
  _impl_.devices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewReplaySession::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.ListDevicesResponse devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_devices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.NewReplaySession.session_handle"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewReplaySession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NewReplaySession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ListDevicesResponse devices = 1;
  if (this->_internal_has_devices()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::devices(this),
        _Internal::devices(this).GetCachedSize(), target, stream);
  }

  // string session_handle = 2;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewReplaySession.session_handle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NewReplaySession)
  return target;
}

size_t NewReplaySession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NewReplaySession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 2;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  // .tensorflow.ListDevicesResponse devices = 1;
  if (this->_internal_has_devices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.devices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewReplaySession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewReplaySession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewReplaySession::GetClassData() const { return &_class_data_; }


void NewReplaySession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewReplaySession*>(&to_msg);
  auto& from = static_cast<const NewReplaySession&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NewReplaySession)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  if (from._internal_has_devices()) {
    _this->_internal_mutable_devices()->::tensorflow::ListDevicesResponse::MergeFrom(
        from._internal_devices());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewReplaySession::CopyFrom(const NewReplaySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NewReplaySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewReplaySession::IsInitialized() const {
  return true;
}

void NewReplaySession::InternalSwap(NewReplaySession* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
  swap(_impl_.devices_, other->_impl_.devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewReplaySession::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto[0]);
}

// ===================================================================

class ReplayOp::_Internal {
 public:
  static const ::tensorflow::CreateSessionRequest& create_session(const ReplayOp* msg);
  static const ::tensorflow::ExtendSessionRequest& extend_session(const ReplayOp* msg);
  static const ::tensorflow::PartialRunSetupRequest& partial_run_setup(const ReplayOp* msg);
  static const ::tensorflow::RunStepRequest& run_step(const ReplayOp* msg);
  static const ::tensorflow::CloseSessionRequest& close_session(const ReplayOp* msg);
  static const ::tensorflow::ListDevicesRequest& list_devices(const ReplayOp* msg);
  static const ::tensorflow::ResetRequest& reset_request(const ReplayOp* msg);
  static const ::tensorflow::MakeCallableRequest& make_callable(const ReplayOp* msg);
  static const ::tensorflow::RunCallableRequest& run_callable(const ReplayOp* msg);
  static const ::tensorflow::ReleaseCallableRequest& release_callable(const ReplayOp* msg);
  static const ::tensorflow::NewReplaySession& new_replay_session(const ReplayOp* msg);
  static const ::tensorflow::CreateSessionResponse& create_session_response(const ReplayOp* msg);
  static const ::tensorflow::ExtendSessionResponse& extend_session_response(const ReplayOp* msg);
  static const ::tensorflow::PartialRunSetupResponse& partial_run_setup_response(const ReplayOp* msg);
  static const ::tensorflow::RunStepResponse& run_step_response(const ReplayOp* msg);
  static const ::tensorflow::CloseSessionResponse& close_session_response(const ReplayOp* msg);
  static const ::tensorflow::ListDevicesResponse& list_devices_response(const ReplayOp* msg);
  static const ::tensorflow::ResetResponse& reset_request_response(const ReplayOp* msg);
  static const ::tensorflow::MakeCallableResponse& make_callable_response(const ReplayOp* msg);
  static const ::tensorflow::RunCallableResponse& run_callable_response(const ReplayOp* msg);
  static const ::tensorflow::ReleaseCallableResponse& release_callable_response(const ReplayOp* msg);
};

const ::tensorflow::CreateSessionRequest&
ReplayOp::_Internal::create_session(const ReplayOp* msg) {
  return *msg->_impl_.op_.create_session_;
}
const ::tensorflow::ExtendSessionRequest&
ReplayOp::_Internal::extend_session(const ReplayOp* msg) {
  return *msg->_impl_.op_.extend_session_;
}
const ::tensorflow::PartialRunSetupRequest&
ReplayOp::_Internal::partial_run_setup(const ReplayOp* msg) {
  return *msg->_impl_.op_.partial_run_setup_;
}
const ::tensorflow::RunStepRequest&
ReplayOp::_Internal::run_step(const ReplayOp* msg) {
  return *msg->_impl_.op_.run_step_;
}
const ::tensorflow::CloseSessionRequest&
ReplayOp::_Internal::close_session(const ReplayOp* msg) {
  return *msg->_impl_.op_.close_session_;
}
const ::tensorflow::ListDevicesRequest&
ReplayOp::_Internal::list_devices(const ReplayOp* msg) {
  return *msg->_impl_.op_.list_devices_;
}
const ::tensorflow::ResetRequest&
ReplayOp::_Internal::reset_request(const ReplayOp* msg) {
  return *msg->_impl_.op_.reset_request_;
}
const ::tensorflow::MakeCallableRequest&
ReplayOp::_Internal::make_callable(const ReplayOp* msg) {
  return *msg->_impl_.op_.make_callable_;
}
const ::tensorflow::RunCallableRequest&
ReplayOp::_Internal::run_callable(const ReplayOp* msg) {
  return *msg->_impl_.op_.run_callable_;
}
const ::tensorflow::ReleaseCallableRequest&
ReplayOp::_Internal::release_callable(const ReplayOp* msg) {
  return *msg->_impl_.op_.release_callable_;
}
const ::tensorflow::NewReplaySession&
ReplayOp::_Internal::new_replay_session(const ReplayOp* msg) {
  return *msg->_impl_.op_.new_replay_session_;
}
const ::tensorflow::CreateSessionResponse&
ReplayOp::_Internal::create_session_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.create_session_response_;
}
const ::tensorflow::ExtendSessionResponse&
ReplayOp::_Internal::extend_session_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.extend_session_response_;
}
const ::tensorflow::PartialRunSetupResponse&
ReplayOp::_Internal::partial_run_setup_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.partial_run_setup_response_;
}
const ::tensorflow::RunStepResponse&
ReplayOp::_Internal::run_step_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.run_step_response_;
}
const ::tensorflow::CloseSessionResponse&
ReplayOp::_Internal::close_session_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.close_session_response_;
}
const ::tensorflow::ListDevicesResponse&
ReplayOp::_Internal::list_devices_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.list_devices_response_;
}
const ::tensorflow::ResetResponse&
ReplayOp::_Internal::reset_request_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.reset_request_response_;
}
const ::tensorflow::MakeCallableResponse&
ReplayOp::_Internal::make_callable_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.make_callable_response_;
}
const ::tensorflow::RunCallableResponse&
ReplayOp::_Internal::run_callable_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.run_callable_response_;
}
const ::tensorflow::ReleaseCallableResponse&
ReplayOp::_Internal::release_callable_response(const ReplayOp* msg) {
  return *msg->_impl_.response_.release_callable_response_;
}
void ReplayOp::set_allocated_create_session(::tensorflow::CreateSessionRequest* create_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (create_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_session));
    if (message_arena != submessage_arena) {
      create_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_session, submessage_arena);
    }
    set_has_create_session();
    _impl_.op_.create_session_ = create_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session)
}
void ReplayOp::clear_create_session() {
  if (_internal_has_create_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.create_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_extend_session(::tensorflow::ExtendSessionRequest* extend_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (extend_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extend_session));
    if (message_arena != submessage_arena) {
      extend_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extend_session, submessage_arena);
    }
    set_has_extend_session();
    _impl_.op_.extend_session_ = extend_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session)
}
void ReplayOp::clear_extend_session() {
  if (_internal_has_extend_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.extend_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* partial_run_setup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (partial_run_setup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partial_run_setup));
    if (message_arena != submessage_arena) {
      partial_run_setup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial_run_setup, submessage_arena);
    }
    set_has_partial_run_setup();
    _impl_.op_.partial_run_setup_ = partial_run_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup)
}
void ReplayOp::clear_partial_run_setup() {
  if (_internal_has_partial_run_setup()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.partial_run_setup_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_run_step(::tensorflow::RunStepRequest* run_step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (run_step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_step));
    if (message_arena != submessage_arena) {
      run_step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_step, submessage_arena);
    }
    set_has_run_step();
    _impl_.op_.run_step_ = run_step;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step)
}
void ReplayOp::clear_run_step() {
  if (_internal_has_run_step()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.run_step_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_close_session(::tensorflow::CloseSessionRequest* close_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (close_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(close_session));
    if (message_arena != submessage_arena) {
      close_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_session, submessage_arena);
    }
    set_has_close_session();
    _impl_.op_.close_session_ = close_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session)
}
void ReplayOp::clear_close_session() {
  if (_internal_has_close_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.close_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_list_devices(::tensorflow::ListDevicesRequest* list_devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (list_devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_devices));
    if (message_arena != submessage_arena) {
      list_devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_devices, submessage_arena);
    }
    set_has_list_devices();
    _impl_.op_.list_devices_ = list_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices)
}
void ReplayOp::clear_list_devices() {
  if (_internal_has_list_devices()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.list_devices_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_reset_request(::tensorflow::ResetRequest* reset_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (reset_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_request));
    if (message_arena != submessage_arena) {
      reset_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset_request, submessage_arena);
    }
    set_has_reset_request();
    _impl_.op_.reset_request_ = reset_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request)
}
void ReplayOp::clear_reset_request() {
  if (_internal_has_reset_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.reset_request_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_make_callable(::tensorflow::MakeCallableRequest* make_callable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (make_callable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(make_callable));
    if (message_arena != submessage_arena) {
      make_callable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_callable, submessage_arena);
    }
    set_has_make_callable();
    _impl_.op_.make_callable_ = make_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable)
}
void ReplayOp::clear_make_callable() {
  if (_internal_has_make_callable()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.make_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_run_callable(::tensorflow::RunCallableRequest* run_callable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (run_callable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_callable));
    if (message_arena != submessage_arena) {
      run_callable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_callable, submessage_arena);
    }
    set_has_run_callable();
    _impl_.op_.run_callable_ = run_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable)
}
void ReplayOp::clear_run_callable() {
  if (_internal_has_run_callable()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.run_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* release_callable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (release_callable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_callable));
    if (message_arena != submessage_arena) {
      release_callable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_callable, submessage_arena);
    }
    set_has_release_callable();
    _impl_.op_.release_callable_ = release_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable)
}
void ReplayOp::clear_release_callable() {
  if (_internal_has_release_callable()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.op_.release_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_new_replay_session(::tensorflow::NewReplaySession* new_replay_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (new_replay_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_replay_session);
    if (message_arena != submessage_arena) {
      new_replay_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_replay_session, submessage_arena);
    }
    set_has_new_replay_session();
    _impl_.op_.new_replay_session_ = new_replay_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.new_replay_session)
}
void ReplayOp::set_allocated_create_session_response(::tensorflow::CreateSessionResponse* create_session_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (create_session_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_session_response));
    if (message_arena != submessage_arena) {
      create_session_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_session_response, submessage_arena);
    }
    set_has_create_session_response();
    _impl_.response_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session_response)
}
void ReplayOp::clear_create_session_response() {
  if (_internal_has_create_session_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.create_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* extend_session_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (extend_session_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extend_session_response));
    if (message_arena != submessage_arena) {
      extend_session_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extend_session_response, submessage_arena);
    }
    set_has_extend_session_response();
    _impl_.response_.extend_session_response_ = extend_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session_response)
}
void ReplayOp::clear_extend_session_response() {
  if (_internal_has_extend_session_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.extend_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* partial_run_setup_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (partial_run_setup_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partial_run_setup_response));
    if (message_arena != submessage_arena) {
      partial_run_setup_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial_run_setup_response, submessage_arena);
    }
    set_has_partial_run_setup_response();
    _impl_.response_.partial_run_setup_response_ = partial_run_setup_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup_response)
}
void ReplayOp::clear_partial_run_setup_response() {
  if (_internal_has_partial_run_setup_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.partial_run_setup_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_run_step_response(::tensorflow::RunStepResponse* run_step_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (run_step_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_step_response));
    if (message_arena != submessage_arena) {
      run_step_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_step_response, submessage_arena);
    }
    set_has_run_step_response();
    _impl_.response_.run_step_response_ = run_step_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step_response)
}
void ReplayOp::clear_run_step_response() {
  if (_internal_has_run_step_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.run_step_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_close_session_response(::tensorflow::CloseSessionResponse* close_session_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (close_session_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(close_session_response));
    if (message_arena != submessage_arena) {
      close_session_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_session_response, submessage_arena);
    }
    set_has_close_session_response();
    _impl_.response_.close_session_response_ = close_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session_response)
}
void ReplayOp::clear_close_session_response() {
  if (_internal_has_close_session_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.close_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* list_devices_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (list_devices_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_devices_response));
    if (message_arena != submessage_arena) {
      list_devices_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_devices_response, submessage_arena);
    }
    set_has_list_devices_response();
    _impl_.response_.list_devices_response_ = list_devices_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices_response)
}
void ReplayOp::clear_list_devices_response() {
  if (_internal_has_list_devices_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.list_devices_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_reset_request_response(::tensorflow::ResetResponse* reset_request_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reset_request_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_request_response));
    if (message_arena != submessage_arena) {
      reset_request_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset_request_response, submessage_arena);
    }
    set_has_reset_request_response();
    _impl_.response_.reset_request_response_ = reset_request_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request_response)
}
void ReplayOp::clear_reset_request_response() {
  if (_internal_has_reset_request_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.reset_request_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* make_callable_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (make_callable_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(make_callable_response));
    if (message_arena != submessage_arena) {
      make_callable_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_callable_response, submessage_arena);
    }
    set_has_make_callable_response();
    _impl_.response_.make_callable_response_ = make_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable_response)
}
void ReplayOp::clear_make_callable_response() {
  if (_internal_has_make_callable_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.make_callable_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_run_callable_response(::tensorflow::RunCallableResponse* run_callable_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (run_callable_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_callable_response));
    if (message_arena != submessage_arena) {
      run_callable_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_callable_response, submessage_arena);
    }
    set_has_run_callable_response();
    _impl_.response_.run_callable_response_ = run_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable_response)
}
void ReplayOp::clear_run_callable_response() {
  if (_internal_has_run_callable_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.run_callable_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* release_callable_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (release_callable_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_callable_response));
    if (message_arena != submessage_arena) {
      release_callable_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_callable_response, submessage_arena);
    }
    set_has_release_callable_response();
    _impl_.response_.release_callable_response_ = release_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable_response)
}
void ReplayOp::clear_release_callable_response() {
  if (_internal_has_release_callable_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.release_callable_response_;
    }
    clear_has_response();
  }
}
ReplayOp::ReplayOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReplayOp)
}
ReplayOp::ReplayOp(const ReplayOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplayOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_us_){}
    , decltype(_impl_.end_time_us_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_time_us_, &from._impl_.start_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_us_) -
    reinterpret_cast<char*>(&_impl_.start_time_us_)) + sizeof(_impl_.end_time_us_));
  clear_has_op();
  switch (from.op_case()) {
    case kCreateSession: {
      _this->_internal_mutable_create_session()->::tensorflow::CreateSessionRequest::MergeFrom(
          from._internal_create_session());
      break;
    }
    case kExtendSession: {
      _this->_internal_mutable_extend_session()->::tensorflow::ExtendSessionRequest::MergeFrom(
          from._internal_extend_session());
      break;
    }
    case kPartialRunSetup: {
      _this->_internal_mutable_partial_run_setup()->::tensorflow::PartialRunSetupRequest::MergeFrom(
          from._internal_partial_run_setup());
      break;
    }
    case kRunStep: {
      _this->_internal_mutable_run_step()->::tensorflow::RunStepRequest::MergeFrom(
          from._internal_run_step());
      break;
    }
    case kCloseSession: {
      _this->_internal_mutable_close_session()->::tensorflow::CloseSessionRequest::MergeFrom(
          from._internal_close_session());
      break;
    }
    case kListDevices: {
      _this->_internal_mutable_list_devices()->::tensorflow::ListDevicesRequest::MergeFrom(
          from._internal_list_devices());
      break;
    }
    case kResetRequest: {
      _this->_internal_mutable_reset_request()->::tensorflow::ResetRequest::MergeFrom(
          from._internal_reset_request());
      break;
    }
    case kMakeCallable: {
      _this->_internal_mutable_make_callable()->::tensorflow::MakeCallableRequest::MergeFrom(
          from._internal_make_callable());
      break;
    }
    case kRunCallable: {
      _this->_internal_mutable_run_callable()->::tensorflow::RunCallableRequest::MergeFrom(
          from._internal_run_callable());
      break;
    }
    case kReleaseCallable: {
      _this->_internal_mutable_release_callable()->::tensorflow::ReleaseCallableRequest::MergeFrom(
          from._internal_release_callable());
      break;
    }
    case kNewReplaySession: {
      _this->_internal_mutable_new_replay_session()->::tensorflow::NewReplaySession::MergeFrom(
          from._internal_new_replay_session());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  clear_has_response();
  switch (from.response_case()) {
    case kCreateSessionResponse: {
      _this->_internal_mutable_create_session_response()->::tensorflow::CreateSessionResponse::MergeFrom(
          from._internal_create_session_response());
      break;
    }
    case kExtendSessionResponse: {
      _this->_internal_mutable_extend_session_response()->::tensorflow::ExtendSessionResponse::MergeFrom(
          from._internal_extend_session_response());
      break;
    }
    case kPartialRunSetupResponse: {
      _this->_internal_mutable_partial_run_setup_response()->::tensorflow::PartialRunSetupResponse::MergeFrom(
          from._internal_partial_run_setup_response());
      break;
    }
    case kRunStepResponse: {
      _this->_internal_mutable_run_step_response()->::tensorflow::RunStepResponse::MergeFrom(
          from._internal_run_step_response());
      break;
    }
    case kCloseSessionResponse: {
      _this->_internal_mutable_close_session_response()->::tensorflow::CloseSessionResponse::MergeFrom(
          from._internal_close_session_response());
      break;
    }
    case kListDevicesResponse: {
      _this->_internal_mutable_list_devices_response()->::tensorflow::ListDevicesResponse::MergeFrom(
          from._internal_list_devices_response());
      break;
    }
    case kResetRequestResponse: {
      _this->_internal_mutable_reset_request_response()->::tensorflow::ResetResponse::MergeFrom(
          from._internal_reset_request_response());
      break;
    }
    case kMakeCallableResponse: {
      _this->_internal_mutable_make_callable_response()->::tensorflow::MakeCallableResponse::MergeFrom(
          from._internal_make_callable_response());
      break;
    }
    case kRunCallableResponse: {
      _this->_internal_mutable_run_callable_response()->::tensorflow::RunCallableResponse::MergeFrom(
          from._internal_run_callable_response());
      break;
    }
    case kReleaseCallableResponse: {
      _this->_internal_mutable_release_callable_response()->::tensorflow::ReleaseCallableResponse::MergeFrom(
          from._internal_release_callable_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReplayOp)
}

inline void ReplayOp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_us_){0}
    , decltype(_impl_.end_time_us_){0}
    , decltype(_impl_.op_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_op();
  clear_has_response();
}

ReplayOp::~ReplayOp() {
  // @@protoc_insertion_point(destructor:tensorflow.ReplayOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplayOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_op()) {
    clear_op();
  }
  if (has_response()) {
    clear_response();
  }
}

void ReplayOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplayOp::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ReplayOp)
  switch (op_case()) {
    case kCreateSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.create_session_;
      }
      break;
    }
    case kExtendSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.extend_session_;
      }
      break;
    }
    case kPartialRunSetup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.partial_run_setup_;
      }
      break;
    }
    case kRunStep: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.run_step_;
      }
      break;
    }
    case kCloseSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.close_session_;
      }
      break;
    }
    case kListDevices: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.list_devices_;
      }
      break;
    }
    case kResetRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.reset_request_;
      }
      break;
    }
    case kMakeCallable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.make_callable_;
      }
      break;
    }
    case kRunCallable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.run_callable_;
      }
      break;
    }
    case kReleaseCallable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.release_callable_;
      }
      break;
    }
    case kNewReplaySession: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.new_replay_session_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OP_NOT_SET;
}

void ReplayOp::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ReplayOp)
  switch (response_case()) {
    case kCreateSessionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.create_session_response_;
      }
      break;
    }
    case kExtendSessionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.extend_session_response_;
      }
      break;
    }
    case kPartialRunSetupResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.partial_run_setup_response_;
      }
      break;
    }
    case kRunStepResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.run_step_response_;
      }
      break;
    }
    case kCloseSessionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.close_session_response_;
      }
      break;
    }
    case kListDevicesResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.list_devices_response_;
      }
      break;
    }
    case kResetRequestResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.reset_request_response_;
      }
      break;
    }
    case kMakeCallableResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.make_callable_response_;
      }
      break;
    }
    case kRunCallableResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.run_callable_response_;
      }
      break;
    }
    case kReleaseCallableResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.release_callable_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = RESPONSE_NOT_SET;
}


void ReplayOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReplayOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_time_us_) -
      reinterpret_cast<char*>(&_impl_.start_time_us_)) + sizeof(_impl_.end_time_us_));
  clear_op();
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.CreateSessionRequest create_session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ExtendSessionRequest extend_session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extend_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_run_setup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunStepRequest run_step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_step(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CloseSessionRequest close_session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ListDevicesRequest list_devices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_devices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ResetRequest reset_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.MakeCallableRequest make_callable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_callable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunCallableRequest run_callable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_callable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ReleaseCallableRequest release_callable = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_callable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.NewReplaySession new_replay_session = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_replay_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CreateSessionResponse create_session_response = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_session_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ExtendSessionResponse extend_session_response = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_extend_session_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_run_setup_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunStepResponse run_step_response = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_step_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CloseSessionResponse close_session_response = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_session_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ListDevicesResponse list_devices_response = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_devices_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ResetResponse reset_request_response = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset_request_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.MakeCallableResponse make_callable_response = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_callable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunCallableResponse run_callable_response = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_callable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_callable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double start_time_us = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.start_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_time_us = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.end_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplayOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReplayOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CreateSessionRequest create_session = 1;
  if (_internal_has_create_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::create_session(this),
        _Internal::create_session(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ExtendSessionRequest extend_session = 2;
  if (_internal_has_extend_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extend_session(this),
        _Internal::extend_session(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  if (_internal_has_partial_run_setup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::partial_run_setup(this),
        _Internal::partial_run_setup(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.RunStepRequest run_step = 4;
  if (_internal_has_run_step()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::run_step(this),
        _Internal::run_step(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.CloseSessionRequest close_session = 5;
  if (_internal_has_close_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::close_session(this),
        _Internal::close_session(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ListDevicesRequest list_devices = 6;
  if (_internal_has_list_devices()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::list_devices(this),
        _Internal::list_devices(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ResetRequest reset_request = 7;
  if (_internal_has_reset_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::reset_request(this),
        _Internal::reset_request(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.MakeCallableRequest make_callable = 8;
  if (_internal_has_make_callable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::make_callable(this),
        _Internal::make_callable(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.RunCallableRequest run_callable = 9;
  if (_internal_has_run_callable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::run_callable(this),
        _Internal::run_callable(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ReleaseCallableRequest release_callable = 10;
  if (_internal_has_release_callable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::release_callable(this),
        _Internal::release_callable(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.NewReplaySession new_replay_session = 11;
  if (_internal_has_new_replay_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::new_replay_session(this),
        _Internal::new_replay_session(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.CreateSessionResponse create_session_response = 21;
  if (_internal_has_create_session_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::create_session_response(this),
        _Internal::create_session_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ExtendSessionResponse extend_session_response = 22;
  if (_internal_has_extend_session_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::extend_session_response(this),
        _Internal::extend_session_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  if (_internal_has_partial_run_setup_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::partial_run_setup_response(this),
        _Internal::partial_run_setup_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.RunStepResponse run_step_response = 24;
  if (_internal_has_run_step_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::run_step_response(this),
        _Internal::run_step_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.CloseSessionResponse close_session_response = 25;
  if (_internal_has_close_session_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::close_session_response(this),
        _Internal::close_session_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ListDevicesResponse list_devices_response = 26;
  if (_internal_has_list_devices_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::list_devices_response(this),
        _Internal::list_devices_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ResetResponse reset_request_response = 27;
  if (_internal_has_reset_request_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::reset_request_response(this),
        _Internal::reset_request_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.MakeCallableResponse make_callable_response = 28;
  if (_internal_has_make_callable_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::make_callable_response(this),
        _Internal::make_callable_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.RunCallableResponse run_callable_response = 29;
  if (_internal_has_run_callable_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::run_callable_response(this),
        _Internal::run_callable_response(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
  if (_internal_has_release_callable_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::release_callable_response(this),
        _Internal::release_callable_response(this).GetCachedSize(), target, stream);
  }

  // double start_time_us = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time_us = this->_internal_start_time_us();
  uint64_t raw_start_time_us;
  memcpy(&raw_start_time_us, &tmp_start_time_us, sizeof(tmp_start_time_us));
  if (raw_start_time_us != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_start_time_us(), target);
  }

  // double end_time_us = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_time_us = this->_internal_end_time_us();
  uint64_t raw_end_time_us;
  memcpy(&raw_end_time_us, &tmp_end_time_us, sizeof(tmp_end_time_us));
  if (raw_end_time_us != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_end_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReplayOp)
  return target;
}

size_t ReplayOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ReplayOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start_time_us = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time_us = this->_internal_start_time_us();
  uint64_t raw_start_time_us;
  memcpy(&raw_start_time_us, &tmp_start_time_us, sizeof(tmp_start_time_us));
  if (raw_start_time_us != 0) {
    total_size += 2 + 8;
  }

  // double end_time_us = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_time_us = this->_internal_end_time_us();
  uint64_t raw_end_time_us;
  memcpy(&raw_end_time_us, &tmp_end_time_us, sizeof(tmp_end_time_us));
  if (raw_end_time_us != 0) {
    total_size += 2 + 8;
  }

  switch (op_case()) {
    // .tensorflow.CreateSessionRequest create_session = 1;
    case kCreateSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.create_session_);
      break;
    }
    // .tensorflow.ExtendSessionRequest extend_session = 2;
    case kExtendSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.extend_session_);
      break;
    }
    // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
    case kPartialRunSetup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.partial_run_setup_);
      break;
    }
    // .tensorflow.RunStepRequest run_step = 4;
    case kRunStep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.run_step_);
      break;
    }
    // .tensorflow.CloseSessionRequest close_session = 5;
    case kCloseSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.close_session_);
      break;
    }
    // .tensorflow.ListDevicesRequest list_devices = 6;
    case kListDevices: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.list_devices_);
      break;
    }
    // .tensorflow.ResetRequest reset_request = 7;
    case kResetRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.reset_request_);
      break;
    }
    // .tensorflow.MakeCallableRequest make_callable = 8;
    case kMakeCallable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.make_callable_);
      break;
    }
    // .tensorflow.RunCallableRequest run_callable = 9;
    case kRunCallable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.run_callable_);
      break;
    }
    // .tensorflow.ReleaseCallableRequest release_callable = 10;
    case kReleaseCallable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.release_callable_);
      break;
    }
    // .tensorflow.NewReplaySession new_replay_session = 11;
    case kNewReplaySession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.new_replay_session_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  switch (response_case()) {
    // .tensorflow.CreateSessionResponse create_session_response = 21;
    case kCreateSessionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.create_session_response_);
      break;
    }
    // .tensorflow.ExtendSessionResponse extend_session_response = 22;
    case kExtendSessionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.extend_session_response_);
      break;
    }
    // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
    case kPartialRunSetupResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.partial_run_setup_response_);
      break;
    }
    // .tensorflow.RunStepResponse run_step_response = 24;
    case kRunStepResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.run_step_response_);
      break;
    }
    // .tensorflow.CloseSessionResponse close_session_response = 25;
    case kCloseSessionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.close_session_response_);
      break;
    }
    // .tensorflow.ListDevicesResponse list_devices_response = 26;
    case kListDevicesResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.list_devices_response_);
      break;
    }
    // .tensorflow.ResetResponse reset_request_response = 27;
    case kResetRequestResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.reset_request_response_);
      break;
    }
    // .tensorflow.MakeCallableResponse make_callable_response = 28;
    case kMakeCallableResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.make_callable_response_);
      break;
    }
    // .tensorflow.RunCallableResponse run_callable_response = 29;
    case kRunCallableResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.run_callable_response_);
      break;
    }
    // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
    case kReleaseCallableResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.release_callable_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplayOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplayOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplayOp::GetClassData() const { return &_class_data_; }


void ReplayOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplayOp*>(&to_msg);
  auto& from = static_cast<const ReplayOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReplayOp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time_us = from._internal_start_time_us();
  uint64_t raw_start_time_us;
  memcpy(&raw_start_time_us, &tmp_start_time_us, sizeof(tmp_start_time_us));
  if (raw_start_time_us != 0) {
    _this->_internal_set_start_time_us(from._internal_start_time_us());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_time_us = from._internal_end_time_us();
  uint64_t raw_end_time_us;
  memcpy(&raw_end_time_us, &tmp_end_time_us, sizeof(tmp_end_time_us));
  if (raw_end_time_us != 0) {
    _this->_internal_set_end_time_us(from._internal_end_time_us());
  }
  switch (from.op_case()) {
    case kCreateSession: {
      _this->_internal_mutable_create_session()->::tensorflow::CreateSessionRequest::MergeFrom(
          from._internal_create_session());
      break;
    }
    case kExtendSession: {
      _this->_internal_mutable_extend_session()->::tensorflow::ExtendSessionRequest::MergeFrom(
          from._internal_extend_session());
      break;
    }
    case kPartialRunSetup: {
      _this->_internal_mutable_partial_run_setup()->::tensorflow::PartialRunSetupRequest::MergeFrom(
          from._internal_partial_run_setup());
      break;
    }
    case kRunStep: {
      _this->_internal_mutable_run_step()->::tensorflow::RunStepRequest::MergeFrom(
          from._internal_run_step());
      break;
    }
    case kCloseSession: {
      _this->_internal_mutable_close_session()->::tensorflow::CloseSessionRequest::MergeFrom(
          from._internal_close_session());
      break;
    }
    case kListDevices: {
      _this->_internal_mutable_list_devices()->::tensorflow::ListDevicesRequest::MergeFrom(
          from._internal_list_devices());
      break;
    }
    case kResetRequest: {
      _this->_internal_mutable_reset_request()->::tensorflow::ResetRequest::MergeFrom(
          from._internal_reset_request());
      break;
    }
    case kMakeCallable: {
      _this->_internal_mutable_make_callable()->::tensorflow::MakeCallableRequest::MergeFrom(
          from._internal_make_callable());
      break;
    }
    case kRunCallable: {
      _this->_internal_mutable_run_callable()->::tensorflow::RunCallableRequest::MergeFrom(
          from._internal_run_callable());
      break;
    }
    case kReleaseCallable: {
      _this->_internal_mutable_release_callable()->::tensorflow::ReleaseCallableRequest::MergeFrom(
          from._internal_release_callable());
      break;
    }
    case kNewReplaySession: {
      _this->_internal_mutable_new_replay_session()->::tensorflow::NewReplaySession::MergeFrom(
          from._internal_new_replay_session());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  switch (from.response_case()) {
    case kCreateSessionResponse: {
      _this->_internal_mutable_create_session_response()->::tensorflow::CreateSessionResponse::MergeFrom(
          from._internal_create_session_response());
      break;
    }
    case kExtendSessionResponse: {
      _this->_internal_mutable_extend_session_response()->::tensorflow::ExtendSessionResponse::MergeFrom(
          from._internal_extend_session_response());
      break;
    }
    case kPartialRunSetupResponse: {
      _this->_internal_mutable_partial_run_setup_response()->::tensorflow::PartialRunSetupResponse::MergeFrom(
          from._internal_partial_run_setup_response());
      break;
    }
    case kRunStepResponse: {
      _this->_internal_mutable_run_step_response()->::tensorflow::RunStepResponse::MergeFrom(
          from._internal_run_step_response());
      break;
    }
    case kCloseSessionResponse: {
      _this->_internal_mutable_close_session_response()->::tensorflow::CloseSessionResponse::MergeFrom(
          from._internal_close_session_response());
      break;
    }
    case kListDevicesResponse: {
      _this->_internal_mutable_list_devices_response()->::tensorflow::ListDevicesResponse::MergeFrom(
          from._internal_list_devices_response());
      break;
    }
    case kResetRequestResponse: {
      _this->_internal_mutable_reset_request_response()->::tensorflow::ResetResponse::MergeFrom(
          from._internal_reset_request_response());
      break;
    }
    case kMakeCallableResponse: {
      _this->_internal_mutable_make_callable_response()->::tensorflow::MakeCallableResponse::MergeFrom(
          from._internal_make_callable_response());
      break;
    }
    case kRunCallableResponse: {
      _this->_internal_mutable_run_callable_response()->::tensorflow::RunCallableResponse::MergeFrom(
          from._internal_run_callable_response());
      break;
    }
    case kReleaseCallableResponse: {
      _this->_internal_mutable_release_callable_response()->::tensorflow::ReleaseCallableResponse::MergeFrom(
          from._internal_release_callable_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplayOp::CopyFrom(const ReplayOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReplayOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayOp::IsInitialized() const {
  return true;
}

void ReplayOp::InternalSwap(ReplayOp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.end_time_us_)
      + sizeof(ReplayOp::_impl_.end_time_us_)
      - PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.start_time_us_)>(
          reinterpret_cast<char*>(&_impl_.start_time_us_),
          reinterpret_cast<char*>(&other->_impl_.start_time_us_));
  swap(_impl_.op_, other->_impl_.op_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::NewReplaySession*
Arena::CreateMaybeMessage< ::tensorflow::NewReplaySession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::NewReplaySession >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ReplayOp*
Arena::CreateMaybeMessage< ::tensorflow::ReplayOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ReplayOp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
