// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/protobuf/worker_service.proto

#include "tensorflow/core/protobuf/worker_service.pb.h"
#include "tensorflow/core/protobuf/worker_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tensorflow {
namespace grpc {

static const char* WorkerService_method_names[] = {
  "/tensorflow.grpc.WorkerService/GetStatus",
  "/tensorflow.grpc.WorkerService/CreateWorkerSession",
  "/tensorflow.grpc.WorkerService/DeleteWorkerSession",
  "/tensorflow.grpc.WorkerService/RegisterGraph",
  "/tensorflow.grpc.WorkerService/DeregisterGraph",
  "/tensorflow.grpc.WorkerService/RunGraph",
  "/tensorflow.grpc.WorkerService/CleanupGraph",
  "/tensorflow.grpc.WorkerService/CleanupAll",
  "/tensorflow.grpc.WorkerService/RecvTensor",
  "/tensorflow.grpc.WorkerService/MarkRecvFinished",
  "/tensorflow.grpc.WorkerService/Logging",
  "/tensorflow.grpc.WorkerService/Tracing",
  "/tensorflow.grpc.WorkerService/RecvBuf",
  "/tensorflow.grpc.WorkerService/GetStepSequence",
  "/tensorflow.grpc.WorkerService/CompleteGroup",
  "/tensorflow.grpc.WorkerService/CompleteInstance",
};

std::unique_ptr< WorkerService::Stub> WorkerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WorkerService::Stub> stub(new WorkerService::Stub(channel, options));
  return stub;
}

WorkerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetStatus_(WorkerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWorkerSession_(WorkerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteWorkerSession_(WorkerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterGraph_(WorkerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeregisterGraph_(WorkerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunGraph_(WorkerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CleanupGraph_(WorkerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CleanupAll_(WorkerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecvTensor_(WorkerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarkRecvFinished_(WorkerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logging_(WorkerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tracing_(WorkerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecvBuf_(WorkerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStepSequence_(WorkerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteGroup_(WorkerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteInstance_(WorkerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WorkerService::Stub::GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::tensorflow::GetStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

void WorkerService::Stub::async::GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>* WorkerService::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::GetStatusResponse, ::tensorflow::GetStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>* WorkerService::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::tensorflow::CreateWorkerSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateWorkerSession_, context, request, response);
}

void WorkerService::Stub::async::CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWorkerSession_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWorkerSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>* WorkerService::Stub::PrepareAsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::CreateWorkerSessionResponse, ::tensorflow::CreateWorkerSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateWorkerSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>* WorkerService::Stub::AsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateWorkerSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::tensorflow::DeleteWorkerSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteWorkerSession_, context, request, response);
}

void WorkerService::Stub::async::DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkerSession_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkerSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>* WorkerService::Stub::PrepareAsyncDeleteWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::DeleteWorkerSessionResponse, ::tensorflow::DeleteWorkerSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteWorkerSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>* WorkerService::Stub::AsyncDeleteWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteWorkerSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::tensorflow::RegisterGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterGraph_, context, request, response);
}

void WorkerService::Stub::async::RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterGraph_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>* WorkerService::Stub::PrepareAsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::RegisterGraphResponse, ::tensorflow::RegisterGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>* WorkerService::Stub::AsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::tensorflow::DeregisterGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeregisterGraph_, context, request, response);
}

void WorkerService::Stub::async::DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeregisterGraph_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeregisterGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>* WorkerService::Stub::PrepareAsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::DeregisterGraphResponse, ::tensorflow::DeregisterGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeregisterGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>* WorkerService::Stub::AsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeregisterGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::tensorflow::RunGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunGraph_, context, request, response);
}

void WorkerService::Stub::async::RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunGraph_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>* WorkerService::Stub::PrepareAsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::RunGraphResponse, ::tensorflow::RunGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>* WorkerService::Stub::AsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::tensorflow::CleanupGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CleanupGraph_, context, request, response);
}

void WorkerService::Stub::async::CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CleanupGraph_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CleanupGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>* WorkerService::Stub::PrepareAsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::CleanupGraphResponse, ::tensorflow::CleanupGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CleanupGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>* WorkerService::Stub::AsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCleanupGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::tensorflow::CleanupAllResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CleanupAll_, context, request, response);
}

void WorkerService::Stub::async::CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CleanupAll_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CleanupAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>* WorkerService::Stub::PrepareAsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::CleanupAllResponse, ::tensorflow::CleanupAllRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CleanupAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>* WorkerService::Stub::AsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCleanupAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::tensorflow::RecvTensorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecvTensor_, context, request, response);
}

void WorkerService::Stub::async::RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecvTensor_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecvTensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>* WorkerService::Stub::PrepareAsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::RecvTensorResponse, ::tensorflow::RecvTensorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecvTensor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>* WorkerService::Stub::AsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecvTensorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::MarkRecvFinished(::grpc::ClientContext* context, const ::tensorflow::MarkRecvFinishedRequest& request, ::tensorflow::MarkRecvFinishedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::MarkRecvFinishedRequest, ::tensorflow::MarkRecvFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarkRecvFinished_, context, request, response);
}

void WorkerService::Stub::async::MarkRecvFinished(::grpc::ClientContext* context, const ::tensorflow::MarkRecvFinishedRequest* request, ::tensorflow::MarkRecvFinishedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::MarkRecvFinishedRequest, ::tensorflow::MarkRecvFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkRecvFinished_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::MarkRecvFinished(::grpc::ClientContext* context, const ::tensorflow::MarkRecvFinishedRequest* request, ::tensorflow::MarkRecvFinishedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkRecvFinished_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::MarkRecvFinishedResponse>* WorkerService::Stub::PrepareAsyncMarkRecvFinishedRaw(::grpc::ClientContext* context, const ::tensorflow::MarkRecvFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::MarkRecvFinishedResponse, ::tensorflow::MarkRecvFinishedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarkRecvFinished_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::MarkRecvFinishedResponse>* WorkerService::Stub::AsyncMarkRecvFinishedRaw(::grpc::ClientContext* context, const ::tensorflow::MarkRecvFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarkRecvFinishedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::tensorflow::LoggingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logging_, context, request, response);
}

void WorkerService::Stub::async::Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logging_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>* WorkerService::Stub::PrepareAsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::LoggingResponse, ::tensorflow::LoggingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logging_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>* WorkerService::Stub::AsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoggingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::tensorflow::TracingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::TracingRequest, ::tensorflow::TracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Tracing_, context, request, response);
}

void WorkerService::Stub::async::Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::TracingRequest, ::tensorflow::TracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Tracing_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Tracing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>* WorkerService::Stub::PrepareAsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::TracingResponse, ::tensorflow::TracingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Tracing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>* WorkerService::Stub::AsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTracingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::tensorflow::RecvBufResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecvBuf_, context, request, response);
}

void WorkerService::Stub::async::RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecvBuf_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecvBuf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>* WorkerService::Stub::PrepareAsyncRecvBufRaw(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::RecvBufResponse, ::tensorflow::RecvBufRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecvBuf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>* WorkerService::Stub::AsyncRecvBufRaw(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecvBufRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::tensorflow::GetStepSequenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStepSequence_, context, request, response);
}

void WorkerService::Stub::async::GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStepSequence_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStepSequence_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>* WorkerService::Stub::PrepareAsyncGetStepSequenceRaw(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::GetStepSequenceResponse, ::tensorflow::GetStepSequenceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStepSequence_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>* WorkerService::Stub::AsyncGetStepSequenceRaw(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStepSequenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::tensorflow::CompleteGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CompleteGroup_, context, request, response);
}

void WorkerService::Stub::async::CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteGroup_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>* WorkerService::Stub::PrepareAsyncCompleteGroupRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::CompleteGroupResponse, ::tensorflow::CompleteGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CompleteGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>* WorkerService::Stub::AsyncCompleteGroupRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCompleteGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::tensorflow::CompleteInstanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CompleteInstance_, context, request, response);
}

void WorkerService::Stub::async::CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteInstance_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>* WorkerService::Stub::PrepareAsyncCompleteInstanceRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tensorflow::CompleteInstanceResponse, ::tensorflow::CompleteInstanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CompleteInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>* WorkerService::Stub::AsyncCompleteInstanceRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCompleteInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

WorkerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::GetStatusRequest* req,
             ::tensorflow::GetStatusResponse* resp) {
               return service->GetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::CreateWorkerSessionRequest* req,
             ::tensorflow::CreateWorkerSessionResponse* resp) {
               return service->CreateWorkerSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::DeleteWorkerSessionRequest* req,
             ::tensorflow::DeleteWorkerSessionResponse* resp) {
               return service->DeleteWorkerSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::RegisterGraphRequest* req,
             ::tensorflow::RegisterGraphResponse* resp) {
               return service->RegisterGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::DeregisterGraphRequest* req,
             ::tensorflow::DeregisterGraphResponse* resp) {
               return service->DeregisterGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::RunGraphRequest* req,
             ::tensorflow::RunGraphResponse* resp) {
               return service->RunGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::CleanupGraphRequest* req,
             ::tensorflow::CleanupGraphResponse* resp) {
               return service->CleanupGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::CleanupAllRequest* req,
             ::tensorflow::CleanupAllResponse* resp) {
               return service->CleanupAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::RecvTensorRequest* req,
             ::tensorflow::RecvTensorResponse* resp) {
               return service->RecvTensor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::MarkRecvFinishedRequest, ::tensorflow::MarkRecvFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::MarkRecvFinishedRequest* req,
             ::tensorflow::MarkRecvFinishedResponse* resp) {
               return service->MarkRecvFinished(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::LoggingRequest* req,
             ::tensorflow::LoggingResponse* resp) {
               return service->Logging(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::TracingRequest, ::tensorflow::TracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::TracingRequest* req,
             ::tensorflow::TracingResponse* resp) {
               return service->Tracing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::RecvBufRequest* req,
             ::tensorflow::RecvBufResponse* resp) {
               return service->RecvBuf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::GetStepSequenceRequest* req,
             ::tensorflow::GetStepSequenceResponse* resp) {
               return service->GetStepSequence(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::CompleteGroupRequest* req,
             ::tensorflow::CompleteGroupResponse* resp) {
               return service->CompleteGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tensorflow::CompleteInstanceRequest* req,
             ::tensorflow::CompleteInstanceResponse* resp) {
               return service->CompleteInstance(ctx, req, resp);
             }, this)));
}

WorkerService::Service::~Service() {
}

::grpc::Status WorkerService::Service::GetStatus(::grpc::ServerContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CreateWorkerSession(::grpc::ServerContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::DeleteWorkerSession(::grpc::ServerContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RegisterGraph(::grpc::ServerContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::DeregisterGraph(::grpc::ServerContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RunGraph(::grpc::ServerContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CleanupGraph(::grpc::ServerContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CleanupAll(::grpc::ServerContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RecvTensor(::grpc::ServerContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::MarkRecvFinished(::grpc::ServerContext* context, const ::tensorflow::MarkRecvFinishedRequest* request, ::tensorflow::MarkRecvFinishedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::Logging(::grpc::ServerContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::Tracing(::grpc::ServerContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RecvBuf(::grpc::ServerContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::GetStepSequence(::grpc::ServerContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CompleteGroup(::grpc::ServerContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CompleteInstance(::grpc::ServerContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tensorflow
}  // namespace grpc

