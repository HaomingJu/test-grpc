// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/critical_section.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcritical_5fsection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcritical_5fsection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fcritical_5fsection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2fcritical_5fsection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fcritical_5fsection_2eproto;
namespace tensorflow {
class CriticalSectionDef;
struct CriticalSectionDefDefaultTypeInternal;
extern CriticalSectionDefDefaultTypeInternal _CriticalSectionDef_default_instance_;
class CriticalSectionExecutionDef;
struct CriticalSectionExecutionDefDefaultTypeInternal;
extern CriticalSectionExecutionDefDefaultTypeInternal _CriticalSectionExecutionDef_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::CriticalSectionDef* Arena::CreateMaybeMessage<::tensorflow::CriticalSectionDef>(Arena*);
template<> ::tensorflow::CriticalSectionExecutionDef* Arena::CreateMaybeMessage<::tensorflow::CriticalSectionExecutionDef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class CriticalSectionDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.CriticalSectionDef) */ {
 public:
  inline CriticalSectionDef() : CriticalSectionDef(nullptr) {}
  ~CriticalSectionDef() override;
  explicit PROTOBUF_CONSTEXPR CriticalSectionDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CriticalSectionDef(const CriticalSectionDef& from);
  CriticalSectionDef(CriticalSectionDef&& from) noexcept
    : CriticalSectionDef() {
    *this = ::std::move(from);
  }

  inline CriticalSectionDef& operator=(const CriticalSectionDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CriticalSectionDef& operator=(CriticalSectionDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CriticalSectionDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CriticalSectionDef* internal_default_instance() {
    return reinterpret_cast<const CriticalSectionDef*>(
               &_CriticalSectionDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CriticalSectionDef& a, CriticalSectionDef& b) {
    a.Swap(&b);
  }
  inline void Swap(CriticalSectionDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CriticalSectionDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CriticalSectionDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CriticalSectionDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CriticalSectionDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CriticalSectionDef& from) {
    CriticalSectionDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CriticalSectionDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.CriticalSectionDef";
  }
  protected:
  explicit CriticalSectionDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCriticalSectionNameFieldNumber = 1,
  };
  // string critical_section_name = 1;
  void clear_critical_section_name();
  const std::string& critical_section_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_critical_section_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_critical_section_name();
  PROTOBUF_NODISCARD std::string* release_critical_section_name();
  void set_allocated_critical_section_name(std::string* critical_section_name);
  private:
  const std::string& _internal_critical_section_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_critical_section_name(const std::string& value);
  std::string* _internal_mutable_critical_section_name();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.CriticalSectionDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr critical_section_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fcritical_5fsection_2eproto;
};
// -------------------------------------------------------------------

class CriticalSectionExecutionDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.CriticalSectionExecutionDef) */ {
 public:
  inline CriticalSectionExecutionDef() : CriticalSectionExecutionDef(nullptr) {}
  ~CriticalSectionExecutionDef() override;
  explicit PROTOBUF_CONSTEXPR CriticalSectionExecutionDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CriticalSectionExecutionDef(const CriticalSectionExecutionDef& from);
  CriticalSectionExecutionDef(CriticalSectionExecutionDef&& from) noexcept
    : CriticalSectionExecutionDef() {
    *this = ::std::move(from);
  }

  inline CriticalSectionExecutionDef& operator=(const CriticalSectionExecutionDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CriticalSectionExecutionDef& operator=(CriticalSectionExecutionDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CriticalSectionExecutionDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CriticalSectionExecutionDef* internal_default_instance() {
    return reinterpret_cast<const CriticalSectionExecutionDef*>(
               &_CriticalSectionExecutionDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CriticalSectionExecutionDef& a, CriticalSectionExecutionDef& b) {
    a.Swap(&b);
  }
  inline void Swap(CriticalSectionExecutionDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CriticalSectionExecutionDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CriticalSectionExecutionDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CriticalSectionExecutionDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CriticalSectionExecutionDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CriticalSectionExecutionDef& from) {
    CriticalSectionExecutionDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CriticalSectionExecutionDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.CriticalSectionExecutionDef";
  }
  protected:
  explicit CriticalSectionExecutionDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecuteInCriticalSectionNameFieldNumber = 1,
    kExclusiveResourceAccessFieldNumber = 2,
  };
  // string execute_in_critical_section_name = 1;
  void clear_execute_in_critical_section_name();
  const std::string& execute_in_critical_section_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_execute_in_critical_section_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_execute_in_critical_section_name();
  PROTOBUF_NODISCARD std::string* release_execute_in_critical_section_name();
  void set_allocated_execute_in_critical_section_name(std::string* execute_in_critical_section_name);
  private:
  const std::string& _internal_execute_in_critical_section_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execute_in_critical_section_name(const std::string& value);
  std::string* _internal_mutable_execute_in_critical_section_name();
  public:

  // bool exclusive_resource_access = 2;
  void clear_exclusive_resource_access();
  bool exclusive_resource_access() const;
  void set_exclusive_resource_access(bool value);
  private:
  bool _internal_exclusive_resource_access() const;
  void _internal_set_exclusive_resource_access(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.CriticalSectionExecutionDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execute_in_critical_section_name_;
    bool exclusive_resource_access_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fcritical_5fsection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CriticalSectionDef

// string critical_section_name = 1;
inline void CriticalSectionDef::clear_critical_section_name() {
  _impl_.critical_section_name_.ClearToEmpty();
}
inline const std::string& CriticalSectionDef::critical_section_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CriticalSectionDef.critical_section_name)
  return _internal_critical_section_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CriticalSectionDef::set_critical_section_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.critical_section_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.CriticalSectionDef.critical_section_name)
}
inline std::string* CriticalSectionDef::mutable_critical_section_name() {
  std::string* _s = _internal_mutable_critical_section_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.CriticalSectionDef.critical_section_name)
  return _s;
}
inline const std::string& CriticalSectionDef::_internal_critical_section_name() const {
  return _impl_.critical_section_name_.Get();
}
inline void CriticalSectionDef::_internal_set_critical_section_name(const std::string& value) {
  
  _impl_.critical_section_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CriticalSectionDef::_internal_mutable_critical_section_name() {
  
  return _impl_.critical_section_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CriticalSectionDef::release_critical_section_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CriticalSectionDef.critical_section_name)
  return _impl_.critical_section_name_.Release();
}
inline void CriticalSectionDef::set_allocated_critical_section_name(std::string* critical_section_name) {
  if (critical_section_name != nullptr) {
    
  } else {
    
  }
  _impl_.critical_section_name_.SetAllocated(critical_section_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.critical_section_name_.IsDefault()) {
    _impl_.critical_section_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CriticalSectionDef.critical_section_name)
}

// -------------------------------------------------------------------

// CriticalSectionExecutionDef

// string execute_in_critical_section_name = 1;
inline void CriticalSectionExecutionDef::clear_execute_in_critical_section_name() {
  _impl_.execute_in_critical_section_name_.ClearToEmpty();
}
inline const std::string& CriticalSectionExecutionDef::execute_in_critical_section_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CriticalSectionExecutionDef.execute_in_critical_section_name)
  return _internal_execute_in_critical_section_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CriticalSectionExecutionDef::set_execute_in_critical_section_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.execute_in_critical_section_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.CriticalSectionExecutionDef.execute_in_critical_section_name)
}
inline std::string* CriticalSectionExecutionDef::mutable_execute_in_critical_section_name() {
  std::string* _s = _internal_mutable_execute_in_critical_section_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.CriticalSectionExecutionDef.execute_in_critical_section_name)
  return _s;
}
inline const std::string& CriticalSectionExecutionDef::_internal_execute_in_critical_section_name() const {
  return _impl_.execute_in_critical_section_name_.Get();
}
inline void CriticalSectionExecutionDef::_internal_set_execute_in_critical_section_name(const std::string& value) {
  
  _impl_.execute_in_critical_section_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CriticalSectionExecutionDef::_internal_mutable_execute_in_critical_section_name() {
  
  return _impl_.execute_in_critical_section_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CriticalSectionExecutionDef::release_execute_in_critical_section_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CriticalSectionExecutionDef.execute_in_critical_section_name)
  return _impl_.execute_in_critical_section_name_.Release();
}
inline void CriticalSectionExecutionDef::set_allocated_execute_in_critical_section_name(std::string* execute_in_critical_section_name) {
  if (execute_in_critical_section_name != nullptr) {
    
  } else {
    
  }
  _impl_.execute_in_critical_section_name_.SetAllocated(execute_in_critical_section_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.execute_in_critical_section_name_.IsDefault()) {
    _impl_.execute_in_critical_section_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CriticalSectionExecutionDef.execute_in_critical_section_name)
}

// bool exclusive_resource_access = 2;
inline void CriticalSectionExecutionDef::clear_exclusive_resource_access() {
  _impl_.exclusive_resource_access_ = false;
}
inline bool CriticalSectionExecutionDef::_internal_exclusive_resource_access() const {
  return _impl_.exclusive_resource_access_;
}
inline bool CriticalSectionExecutionDef::exclusive_resource_access() const {
  // @@protoc_insertion_point(field_get:tensorflow.CriticalSectionExecutionDef.exclusive_resource_access)
  return _internal_exclusive_resource_access();
}
inline void CriticalSectionExecutionDef::_internal_set_exclusive_resource_access(bool value) {
  
  _impl_.exclusive_resource_access_ = value;
}
inline void CriticalSectionExecutionDef::set_exclusive_resource_access(bool value) {
  _internal_set_exclusive_resource_access(value);
  // @@protoc_insertion_point(field_set:tensorflow.CriticalSectionExecutionDef.exclusive_resource_access)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcritical_5fsection_2eproto
