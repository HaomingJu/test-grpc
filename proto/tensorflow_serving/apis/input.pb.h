// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/input.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2finput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2finput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/example/example.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2finput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2finput_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2finput_2eproto;
namespace tensorflow {
namespace serving {
class ExampleList;
struct ExampleListDefaultTypeInternal;
extern ExampleListDefaultTypeInternal _ExampleList_default_instance_;
class ExampleListWithContext;
struct ExampleListWithContextDefaultTypeInternal;
extern ExampleListWithContextDefaultTypeInternal _ExampleListWithContext_default_instance_;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::ExampleList* Arena::CreateMaybeMessage<::tensorflow::serving::ExampleList>(Arena*);
template<> ::tensorflow::serving::ExampleListWithContext* Arena::CreateMaybeMessage<::tensorflow::serving::ExampleListWithContext>(Arena*);
template<> ::tensorflow::serving::Input* Arena::CreateMaybeMessage<::tensorflow::serving::Input>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class ExampleList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ExampleList) */ {
 public:
  inline ExampleList() : ExampleList(nullptr) {}
  ~ExampleList() override;
  explicit PROTOBUF_CONSTEXPR ExampleList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExampleList(const ExampleList& from);
  ExampleList(ExampleList&& from) noexcept
    : ExampleList() {
    *this = ::std::move(from);
  }

  inline ExampleList& operator=(const ExampleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleList& operator=(ExampleList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExampleList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExampleList* internal_default_instance() {
    return reinterpret_cast<const ExampleList*>(
               &_ExampleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExampleList& a, ExampleList& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExampleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExampleList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExampleList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExampleList& from) {
    ExampleList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ExampleList";
  }
  protected:
  explicit ExampleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExamplesFieldNumber = 1,
  };
  // repeated .tensorflow.Example examples = 1;
  int examples_size() const;
  private:
  int _internal_examples_size() const;
  public:
  void clear_examples();
  ::tensorflow::Example* mutable_examples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example >*
      mutable_examples();
  private:
  const ::tensorflow::Example& _internal_examples(int index) const;
  ::tensorflow::Example* _internal_add_examples();
  public:
  const ::tensorflow::Example& examples(int index) const;
  ::tensorflow::Example* add_examples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example >&
      examples() const;

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ExampleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example > examples_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2finput_2eproto;
};
// -------------------------------------------------------------------

class ExampleListWithContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ExampleListWithContext) */ {
 public:
  inline ExampleListWithContext() : ExampleListWithContext(nullptr) {}
  ~ExampleListWithContext() override;
  explicit PROTOBUF_CONSTEXPR ExampleListWithContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExampleListWithContext(const ExampleListWithContext& from);
  ExampleListWithContext(ExampleListWithContext&& from) noexcept
    : ExampleListWithContext() {
    *this = ::std::move(from);
  }

  inline ExampleListWithContext& operator=(const ExampleListWithContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleListWithContext& operator=(ExampleListWithContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExampleListWithContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExampleListWithContext* internal_default_instance() {
    return reinterpret_cast<const ExampleListWithContext*>(
               &_ExampleListWithContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExampleListWithContext& a, ExampleListWithContext& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleListWithContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleListWithContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExampleListWithContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExampleListWithContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExampleListWithContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExampleListWithContext& from) {
    ExampleListWithContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleListWithContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ExampleListWithContext";
  }
  protected:
  explicit ExampleListWithContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExamplesFieldNumber = 1,
    kContextFieldNumber = 2,
  };
  // repeated .tensorflow.Example examples = 1;
  int examples_size() const;
  private:
  int _internal_examples_size() const;
  public:
  void clear_examples();
  ::tensorflow::Example* mutable_examples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example >*
      mutable_examples();
  private:
  const ::tensorflow::Example& _internal_examples(int index) const;
  ::tensorflow::Example* _internal_add_examples();
  public:
  const ::tensorflow::Example& examples(int index) const;
  ::tensorflow::Example* add_examples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example >&
      examples() const;

  // .tensorflow.Example context = 2;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::tensorflow::Example& context() const;
  PROTOBUF_NODISCARD ::tensorflow::Example* release_context();
  ::tensorflow::Example* mutable_context();
  void set_allocated_context(::tensorflow::Example* context);
  private:
  const ::tensorflow::Example& _internal_context() const;
  ::tensorflow::Example* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::tensorflow::Example* context);
  ::tensorflow::Example* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ExampleListWithContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example > examples_;
    ::tensorflow::Example* context_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2finput_2eproto;
};
// -------------------------------------------------------------------

class Input final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() override;
  explicit PROTOBUF_CONSTEXPR Input(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kExampleList = 1,
    kExampleListWithContext = 2,
    KIND_NOT_SET = 0,
  };

  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Input& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Input& from) {
    Input::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExampleListFieldNumber = 1,
    kExampleListWithContextFieldNumber = 2,
  };
  // .tensorflow.serving.ExampleList example_list = 1 [lazy = true];
  bool has_example_list() const;
  private:
  bool _internal_has_example_list() const;
  public:
  void clear_example_list();
  const ::tensorflow::serving::ExampleList& example_list() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ExampleList* release_example_list();
  ::tensorflow::serving::ExampleList* mutable_example_list();
  void set_allocated_example_list(::tensorflow::serving::ExampleList* example_list);
  private:
  const ::tensorflow::serving::ExampleList& _internal_example_list() const;
  ::tensorflow::serving::ExampleList* _internal_mutable_example_list();
  public:
  void unsafe_arena_set_allocated_example_list(
      ::tensorflow::serving::ExampleList* example_list);
  ::tensorflow::serving::ExampleList* unsafe_arena_release_example_list();

  // .tensorflow.serving.ExampleListWithContext example_list_with_context = 2 [lazy = true];
  bool has_example_list_with_context() const;
  private:
  bool _internal_has_example_list_with_context() const;
  public:
  void clear_example_list_with_context();
  const ::tensorflow::serving::ExampleListWithContext& example_list_with_context() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ExampleListWithContext* release_example_list_with_context();
  ::tensorflow::serving::ExampleListWithContext* mutable_example_list_with_context();
  void set_allocated_example_list_with_context(::tensorflow::serving::ExampleListWithContext* example_list_with_context);
  private:
  const ::tensorflow::serving::ExampleListWithContext& _internal_example_list_with_context() const;
  ::tensorflow::serving::ExampleListWithContext* _internal_mutable_example_list_with_context();
  public:
  void unsafe_arena_set_allocated_example_list_with_context(
      ::tensorflow::serving::ExampleListWithContext* example_list_with_context);
  ::tensorflow::serving::ExampleListWithContext* unsafe_arena_release_example_list_with_context();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.Input)
 private:
  class _Internal;
  void set_has_example_list();
  void set_has_example_list_with_context();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tensorflow::serving::ExampleList* example_list_;
      ::tensorflow::serving::ExampleListWithContext* example_list_with_context_;
    } kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2finput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExampleList

// repeated .tensorflow.Example examples = 1;
inline int ExampleList::_internal_examples_size() const {
  return _impl_.examples_.size();
}
inline int ExampleList::examples_size() const {
  return _internal_examples_size();
}
inline ::tensorflow::Example* ExampleList::mutable_examples(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ExampleList.examples)
  return _impl_.examples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example >*
ExampleList::mutable_examples() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ExampleList.examples)
  return &_impl_.examples_;
}
inline const ::tensorflow::Example& ExampleList::_internal_examples(int index) const {
  return _impl_.examples_.Get(index);
}
inline const ::tensorflow::Example& ExampleList::examples(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ExampleList.examples)
  return _internal_examples(index);
}
inline ::tensorflow::Example* ExampleList::_internal_add_examples() {
  return _impl_.examples_.Add();
}
inline ::tensorflow::Example* ExampleList::add_examples() {
  ::tensorflow::Example* _add = _internal_add_examples();
  // @@protoc_insertion_point(field_add:tensorflow.serving.ExampleList.examples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example >&
ExampleList::examples() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ExampleList.examples)
  return _impl_.examples_;
}

// -------------------------------------------------------------------

// ExampleListWithContext

// repeated .tensorflow.Example examples = 1;
inline int ExampleListWithContext::_internal_examples_size() const {
  return _impl_.examples_.size();
}
inline int ExampleListWithContext::examples_size() const {
  return _internal_examples_size();
}
inline ::tensorflow::Example* ExampleListWithContext::mutable_examples(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ExampleListWithContext.examples)
  return _impl_.examples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example >*
ExampleListWithContext::mutable_examples() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ExampleListWithContext.examples)
  return &_impl_.examples_;
}
inline const ::tensorflow::Example& ExampleListWithContext::_internal_examples(int index) const {
  return _impl_.examples_.Get(index);
}
inline const ::tensorflow::Example& ExampleListWithContext::examples(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ExampleListWithContext.examples)
  return _internal_examples(index);
}
inline ::tensorflow::Example* ExampleListWithContext::_internal_add_examples() {
  return _impl_.examples_.Add();
}
inline ::tensorflow::Example* ExampleListWithContext::add_examples() {
  ::tensorflow::Example* _add = _internal_add_examples();
  // @@protoc_insertion_point(field_add:tensorflow.serving.ExampleListWithContext.examples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Example >&
ExampleListWithContext::examples() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ExampleListWithContext.examples)
  return _impl_.examples_;
}

// .tensorflow.Example context = 2;
inline bool ExampleListWithContext::_internal_has_context() const {
  return this != internal_default_instance() && _impl_.context_ != nullptr;
}
inline bool ExampleListWithContext::has_context() const {
  return _internal_has_context();
}
inline const ::tensorflow::Example& ExampleListWithContext::_internal_context() const {
  const ::tensorflow::Example* p = _impl_.context_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::Example&>(
      ::tensorflow::_Example_default_instance_);
}
inline const ::tensorflow::Example& ExampleListWithContext::context() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ExampleListWithContext.context)
  return _internal_context();
}
inline void ExampleListWithContext::unsafe_arena_set_allocated_context(
    ::tensorflow::Example* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  _impl_.context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ExampleListWithContext.context)
}
inline ::tensorflow::Example* ExampleListWithContext::release_context() {
  
  ::tensorflow::Example* temp = _impl_.context_;
  _impl_.context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::Example* ExampleListWithContext::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ExampleListWithContext.context)
  
  ::tensorflow::Example* temp = _impl_.context_;
  _impl_.context_ = nullptr;
  return temp;
}
inline ::tensorflow::Example* ExampleListWithContext::_internal_mutable_context() {
  
  if (_impl_.context_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::Example>(GetArenaForAllocation());
    _impl_.context_ = p;
  }
  return _impl_.context_;
}
inline ::tensorflow::Example* ExampleListWithContext::mutable_context() {
  ::tensorflow::Example* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ExampleListWithContext.context)
  return _msg;
}
inline void ExampleListWithContext::set_allocated_context(::tensorflow::Example* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.context_ = context;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ExampleListWithContext.context)
}

// -------------------------------------------------------------------

// Input

// .tensorflow.serving.ExampleList example_list = 1 [lazy = true];
inline bool Input::_internal_has_example_list() const {
  return kind_case() == kExampleList;
}
inline bool Input::has_example_list() const {
  return _internal_has_example_list();
}
inline void Input::set_has_example_list() {
  _impl_._oneof_case_[0] = kExampleList;
}
inline void Input::clear_example_list() {
  if (_internal_has_example_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.example_list_;
    }
    clear_has_kind();
  }
}
inline ::tensorflow::serving::ExampleList* Input::release_example_list() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Input.example_list)
  if (_internal_has_example_list()) {
    clear_has_kind();
    ::tensorflow::serving::ExampleList* temp = _impl_.kind_.example_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.example_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::ExampleList& Input::_internal_example_list() const {
  return _internal_has_example_list()
      ? *_impl_.kind_.example_list_
      : reinterpret_cast< ::tensorflow::serving::ExampleList&>(::tensorflow::serving::_ExampleList_default_instance_);
}
inline const ::tensorflow::serving::ExampleList& Input::example_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Input.example_list)
  return _internal_example_list();
}
inline ::tensorflow::serving::ExampleList* Input::unsafe_arena_release_example_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.Input.example_list)
  if (_internal_has_example_list()) {
    clear_has_kind();
    ::tensorflow::serving::ExampleList* temp = _impl_.kind_.example_list_;
    _impl_.kind_.example_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Input::unsafe_arena_set_allocated_example_list(::tensorflow::serving::ExampleList* example_list) {
  clear_kind();
  if (example_list) {
    set_has_example_list();
    _impl_.kind_.example_list_ = example_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.Input.example_list)
}
inline ::tensorflow::serving::ExampleList* Input::_internal_mutable_example_list() {
  if (!_internal_has_example_list()) {
    clear_kind();
    set_has_example_list();
    _impl_.kind_.example_list_ = CreateMaybeMessage< ::tensorflow::serving::ExampleList >(GetArenaForAllocation());
  }
  return _impl_.kind_.example_list_;
}
inline ::tensorflow::serving::ExampleList* Input::mutable_example_list() {
  ::tensorflow::serving::ExampleList* _msg = _internal_mutable_example_list();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Input.example_list)
  return _msg;
}

// .tensorflow.serving.ExampleListWithContext example_list_with_context = 2 [lazy = true];
inline bool Input::_internal_has_example_list_with_context() const {
  return kind_case() == kExampleListWithContext;
}
inline bool Input::has_example_list_with_context() const {
  return _internal_has_example_list_with_context();
}
inline void Input::set_has_example_list_with_context() {
  _impl_._oneof_case_[0] = kExampleListWithContext;
}
inline void Input::clear_example_list_with_context() {
  if (_internal_has_example_list_with_context()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.example_list_with_context_;
    }
    clear_has_kind();
  }
}
inline ::tensorflow::serving::ExampleListWithContext* Input::release_example_list_with_context() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Input.example_list_with_context)
  if (_internal_has_example_list_with_context()) {
    clear_has_kind();
    ::tensorflow::serving::ExampleListWithContext* temp = _impl_.kind_.example_list_with_context_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.example_list_with_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::ExampleListWithContext& Input::_internal_example_list_with_context() const {
  return _internal_has_example_list_with_context()
      ? *_impl_.kind_.example_list_with_context_
      : reinterpret_cast< ::tensorflow::serving::ExampleListWithContext&>(::tensorflow::serving::_ExampleListWithContext_default_instance_);
}
inline const ::tensorflow::serving::ExampleListWithContext& Input::example_list_with_context() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Input.example_list_with_context)
  return _internal_example_list_with_context();
}
inline ::tensorflow::serving::ExampleListWithContext* Input::unsafe_arena_release_example_list_with_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.Input.example_list_with_context)
  if (_internal_has_example_list_with_context()) {
    clear_has_kind();
    ::tensorflow::serving::ExampleListWithContext* temp = _impl_.kind_.example_list_with_context_;
    _impl_.kind_.example_list_with_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Input::unsafe_arena_set_allocated_example_list_with_context(::tensorflow::serving::ExampleListWithContext* example_list_with_context) {
  clear_kind();
  if (example_list_with_context) {
    set_has_example_list_with_context();
    _impl_.kind_.example_list_with_context_ = example_list_with_context;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.Input.example_list_with_context)
}
inline ::tensorflow::serving::ExampleListWithContext* Input::_internal_mutable_example_list_with_context() {
  if (!_internal_has_example_list_with_context()) {
    clear_kind();
    set_has_example_list_with_context();
    _impl_.kind_.example_list_with_context_ = CreateMaybeMessage< ::tensorflow::serving::ExampleListWithContext >(GetArenaForAllocation());
  }
  return _impl_.kind_.example_list_with_context_;
}
inline ::tensorflow::serving::ExampleListWithContext* Input::mutable_example_list_with_context() {
  ::tensorflow::serving::ExampleListWithContext* _msg = _internal_mutable_example_list_with_context();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Input.example_list_with_context)
  return _msg;
}

inline bool Input::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Input::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Input::KindCase Input::kind_case() const {
  return Input::KindCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2finput_2eproto
