// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/session_service.proto

#include "tensorflow_serving/apis/session_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace serving {
PROTOBUF_CONSTEXPR SessionRunRequest::SessionRunRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_)*/{}
  , /*decltype(_impl_.fetch_)*/{}
  , /*decltype(_impl_.target_)*/{}
  , /*decltype(_impl_.model_spec_)*/nullptr
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.tensor_name_is_alias_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionRunRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionRunRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionRunRequestDefaultTypeInternal() {}
  union {
    SessionRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionRunRequestDefaultTypeInternal _SessionRunRequest_default_instance_;
PROTOBUF_CONSTEXPR SessionRunResponse::SessionRunResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tensor_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.model_spec_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionRunResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionRunResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionRunResponseDefaultTypeInternal() {}
  union {
    SessionRunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionRunResponseDefaultTypeInternal _SessionRunResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.model_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.feed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.fetch_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.tensor_name_is_alias_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _impl_.model_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _impl_.tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _impl_.metadata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::serving::SessionRunRequest)},
  { 12, -1, -1, sizeof(::tensorflow::serving::SessionRunResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::serving::_SessionRunRequest_default_instance_._instance,
  &::tensorflow::serving::_SessionRunResponse_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-tensorflow_serving/apis/session_servic"
  "e.proto\022\022tensorflow.serving\032%tensorflow/"
  "core/protobuf/config.proto\032+tensorflow/c"
  "ore/protobuf/named_tensor.proto\032#tensorf"
  "low_serving/apis/model.proto\"\330\001\n\021Session"
  "RunRequest\0221\n\nmodel_spec\030\001 \001(\0132\035.tensorf"
  "low.serving.ModelSpec\022*\n\004feed\030\002 \003(\0132\034.te"
  "nsorflow.NamedTensorProto\022\r\n\005fetch\030\003 \003(\t"
  "\022\016\n\006target\030\004 \003(\t\022\034\n\024tensor_name_is_alias"
  "\030\006 \001(\010\022\'\n\007options\030\005 \001(\0132\026.tensorflow.Run"
  "Options\"\240\001\n\022SessionRunResponse\0221\n\nmodel_"
  "spec\030\003 \001(\0132\035.tensorflow.serving.ModelSpe"
  "c\022,\n\006tensor\030\001 \003(\0132\034.tensorflow.NamedTens"
  "orProto\022)\n\010metadata\030\002 \001(\0132\027.tensorflow.R"
  "unMetadata2m\n\016SessionService\022[\n\nSessionR"
  "un\022%.tensorflow.serving.SessionRunReques"
  "t\032&.tensorflow.serving.SessionRunRespons"
  "eB\003\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_deps[3] = {
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fapis_2fmodel_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto = {
    false, false, 694, descriptor_table_protodef_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto,
    "tensorflow_serving/apis/session_service.proto",
    &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_once, descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto::offsets,
    file_level_metadata_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto, file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto,
    file_level_service_descriptors_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_getter() {
  return &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto(&descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto);
namespace tensorflow {
namespace serving {

// ===================================================================

class SessionRunRequest::_Internal {
 public:
  static const ::tensorflow::serving::ModelSpec& model_spec(const SessionRunRequest* msg);
  static const ::tensorflow::RunOptions& options(const SessionRunRequest* msg);
};

const ::tensorflow::serving::ModelSpec&
SessionRunRequest::_Internal::model_spec(const SessionRunRequest* msg) {
  return *msg->_impl_.model_spec_;
}
const ::tensorflow::RunOptions&
SessionRunRequest::_Internal::options(const SessionRunRequest* msg) {
  return *msg->_impl_.options_;
}
void SessionRunRequest::clear_model_spec() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_spec_ != nullptr) {
    delete _impl_.model_spec_;
  }
  _impl_.model_spec_ = nullptr;
}
void SessionRunRequest::clear_feed() {
  _impl_.feed_.Clear();
}
void SessionRunRequest::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
SessionRunRequest::SessionRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.SessionRunRequest)
}
SessionRunRequest::SessionRunRequest(const SessionRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionRunRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_){from._impl_.feed_}
    , decltype(_impl_.fetch_){from._impl_.fetch_}
    , decltype(_impl_.target_){from._impl_.target_}
    , decltype(_impl_.model_spec_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.tensor_name_is_alias_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_model_spec()) {
    _this->_impl_.model_spec_ = new ::tensorflow::serving::ModelSpec(*from._impl_.model_spec_);
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::tensorflow::RunOptions(*from._impl_.options_);
  }
  _this->_impl_.tensor_name_is_alias_ = from._impl_.tensor_name_is_alias_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SessionRunRequest)
}

inline void SessionRunRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_){arena}
    , decltype(_impl_.fetch_){arena}
    , decltype(_impl_.target_){arena}
    , decltype(_impl_.model_spec_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.tensor_name_is_alias_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SessionRunRequest::~SessionRunRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SessionRunRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionRunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_.~RepeatedPtrField();
  _impl_.fetch_.~RepeatedPtrField();
  _impl_.target_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.model_spec_;
  if (this != internal_default_instance()) delete _impl_.options_;
}

void SessionRunRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionRunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SessionRunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_.Clear();
  _impl_.fetch_.Clear();
  _impl_.target_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.model_spec_ != nullptr) {
    delete _impl_.model_spec_;
  }
  _impl_.model_spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _impl_.tensor_name_is_alias_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRunRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.NamedTensorProto feed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string fetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fetch();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.SessionRunRequest.fetch"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.SessionRunRequest.target"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool tensor_name_is_alias = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tensor_name_is_alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionRunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SessionRunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->_internal_has_model_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_spec(this),
        _Internal::model_spec(this).GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.NamedTensorProto feed = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feed_size()); i < n; i++) {
    const auto& repfield = this->_internal_feed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string fetch = 3;
  for (int i = 0, n = this->_internal_fetch_size(); i < n; i++) {
    const auto& s = this->_internal_fetch(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SessionRunRequest.fetch");
    target = stream->WriteString(3, s, target);
  }

  // repeated string target = 4;
  for (int i = 0, n = this->_internal_target_size(); i < n; i++) {
    const auto& s = this->_internal_target(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SessionRunRequest.target");
    target = stream->WriteString(4, s, target);
  }

  // .tensorflow.RunOptions options = 5;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // bool tensor_name_is_alias = 6;
  if (this->_internal_tensor_name_is_alias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_tensor_name_is_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SessionRunRequest)
  return target;
}

size_t SessionRunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SessionRunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto feed = 2;
  total_size += 1UL * this->_internal_feed_size();
  for (const auto& msg : this->_impl_.feed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string fetch = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.fetch_.size());
  for (int i = 0, n = _impl_.fetch_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.fetch_.Get(i));
  }

  // repeated string target = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_.size());
  for (int i = 0, n = _impl_.target_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_.Get(i));
  }

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->_internal_has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_spec_);
  }

  // .tensorflow.RunOptions options = 5;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // bool tensor_name_is_alias = 6;
  if (this->_internal_tensor_name_is_alias() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionRunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionRunRequest::GetClassData() const { return &_class_data_; }


void SessionRunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionRunRequest*>(&to_msg);
  auto& from = static_cast<const SessionRunRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SessionRunRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feed_.MergeFrom(from._impl_.feed_);
  _this->_impl_.fetch_.MergeFrom(from._impl_.fetch_);
  _this->_impl_.target_.MergeFrom(from._impl_.target_);
  if (from._internal_has_model_spec()) {
    _this->_internal_mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(
        from._internal_model_spec());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::tensorflow::RunOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_tensor_name_is_alias() != 0) {
    _this->_internal_set_tensor_name_is_alias(from._internal_tensor_name_is_alias());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRunRequest::CopyFrom(const SessionRunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SessionRunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRunRequest::IsInitialized() const {
  return true;
}

void SessionRunRequest::InternalSwap(SessionRunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feed_.InternalSwap(&other->_impl_.feed_);
  _impl_.fetch_.InternalSwap(&other->_impl_.fetch_);
  _impl_.target_.InternalSwap(&other->_impl_.target_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.tensor_name_is_alias_)
      + sizeof(SessionRunRequest::_impl_.tensor_name_is_alias_)
      - PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.model_spec_)>(
          reinterpret_cast<char*>(&_impl_.model_spec_),
          reinterpret_cast<char*>(&other->_impl_.model_spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRunRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto[0]);
}

// ===================================================================

class SessionRunResponse::_Internal {
 public:
  static const ::tensorflow::serving::ModelSpec& model_spec(const SessionRunResponse* msg);
  static const ::tensorflow::RunMetadata& metadata(const SessionRunResponse* msg);
};

const ::tensorflow::serving::ModelSpec&
SessionRunResponse::_Internal::model_spec(const SessionRunResponse* msg) {
  return *msg->_impl_.model_spec_;
}
const ::tensorflow::RunMetadata&
SessionRunResponse::_Internal::metadata(const SessionRunResponse* msg) {
  return *msg->_impl_.metadata_;
}
void SessionRunResponse::clear_model_spec() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_spec_ != nullptr) {
    delete _impl_.model_spec_;
  }
  _impl_.model_spec_ = nullptr;
}
void SessionRunResponse::clear_tensor() {
  _impl_.tensor_.Clear();
}
void SessionRunResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
SessionRunResponse::SessionRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.SessionRunResponse)
}
SessionRunResponse::SessionRunResponse(const SessionRunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionRunResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_){from._impl_.tensor_}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.model_spec_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::tensorflow::RunMetadata(*from._impl_.metadata_);
  }
  if (from._internal_has_model_spec()) {
    _this->_impl_.model_spec_ = new ::tensorflow::serving::ModelSpec(*from._impl_.model_spec_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SessionRunResponse)
}

inline void SessionRunResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_){arena}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.model_spec_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SessionRunResponse::~SessionRunResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SessionRunResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionRunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tensor_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.model_spec_;
}

void SessionRunResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SessionRunResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensor_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_spec_ != nullptr) {
    delete _impl_.model_spec_;
  }
  _impl_.model_spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRunResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.NamedTensorProto tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.ModelSpec model_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionRunResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SessionRunResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto tensor = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.serving.ModelSpec model_spec = 3;
  if (this->_internal_has_model_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::model_spec(this),
        _Internal::model_spec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SessionRunResponse)
  return target;
}

size_t SessionRunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SessionRunResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto tensor = 1;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->_impl_.tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .tensorflow.serving.ModelSpec model_spec = 3;
  if (this->_internal_has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionRunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionRunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionRunResponse::GetClassData() const { return &_class_data_; }


void SessionRunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionRunResponse*>(&to_msg);
  auto& from = static_cast<const SessionRunResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SessionRunResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tensor_.MergeFrom(from._impl_.tensor_);
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::tensorflow::RunMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_model_spec()) {
    _this->_internal_mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(
        from._internal_model_spec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRunResponse::CopyFrom(const SessionRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SessionRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRunResponse::IsInitialized() const {
  return true;
}

void SessionRunResponse::InternalSwap(SessionRunResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tensor_.InternalSwap(&other->_impl_.tensor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.model_spec_)
      + sizeof(SessionRunResponse::_impl_.model_spec_)
      - PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRunResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::SessionRunRequest*
Arena::CreateMaybeMessage< ::tensorflow::serving::SessionRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::SessionRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::SessionRunResponse*
Arena::CreateMaybeMessage< ::tensorflow::serving::SessionRunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::SessionRunResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
