// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/logging.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2flogging_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2flogging_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/model.pb.h"
#include "tensorflow_serving/config/logging_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2flogging_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2flogging_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto;
namespace tensorflow {
namespace serving {
class LogMetadata;
struct LogMetadataDefaultTypeInternal;
extern LogMetadataDefaultTypeInternal _LogMetadata_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::LogMetadata* Arena::CreateMaybeMessage<::tensorflow::serving::LogMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class LogMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.LogMetadata) */ {
 public:
  inline LogMetadata() : LogMetadata(nullptr) {}
  ~LogMetadata() override;
  explicit PROTOBUF_CONSTEXPR LogMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogMetadata(const LogMetadata& from);
  LogMetadata(LogMetadata&& from) noexcept
    : LogMetadata() {
    *this = ::std::move(from);
  }

  inline LogMetadata& operator=(const LogMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMetadata& operator=(LogMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogMetadata* internal_default_instance() {
    return reinterpret_cast<const LogMetadata*>(
               &_LogMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogMetadata& a, LogMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogMetadata& from) {
    LogMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.LogMetadata";
  }
  protected:
  explicit LogMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSavedModelTagsFieldNumber = 3,
    kDcFieldNumber = 5,
    kRequestOriginFieldNumber = 6,
    kRequestCriticalityFieldNumber = 7,
    kModelSpecFieldNumber = 1,
    kSamplingConfigFieldNumber = 2,
    kTimestampSecsFieldNumber = 4,
  };
  // repeated string saved_model_tags = 3;
  int saved_model_tags_size() const;
  private:
  int _internal_saved_model_tags_size() const;
  public:
  void clear_saved_model_tags();
  const std::string& saved_model_tags(int index) const;
  std::string* mutable_saved_model_tags(int index);
  void set_saved_model_tags(int index, const std::string& value);
  void set_saved_model_tags(int index, std::string&& value);
  void set_saved_model_tags(int index, const char* value);
  void set_saved_model_tags(int index, const char* value, size_t size);
  std::string* add_saved_model_tags();
  void add_saved_model_tags(const std::string& value);
  void add_saved_model_tags(std::string&& value);
  void add_saved_model_tags(const char* value);
  void add_saved_model_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& saved_model_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_saved_model_tags();
  private:
  const std::string& _internal_saved_model_tags(int index) const;
  std::string* _internal_add_saved_model_tags();
  public:

  // string dc = 5;
  void clear_dc();
  const std::string& dc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dc();
  PROTOBUF_NODISCARD std::string* release_dc();
  void set_allocated_dc(std::string* dc);
  private:
  const std::string& _internal_dc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dc(const std::string& value);
  std::string* _internal_mutable_dc();
  public:

  // string request_origin = 6;
  void clear_request_origin();
  const std::string& request_origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_origin();
  PROTOBUF_NODISCARD std::string* release_request_origin();
  void set_allocated_request_origin(std::string* request_origin);
  private:
  const std::string& _internal_request_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_origin(const std::string& value);
  std::string* _internal_mutable_request_origin();
  public:

  // string request_criticality = 7;
  void clear_request_criticality();
  const std::string& request_criticality() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_criticality(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_criticality();
  PROTOBUF_NODISCARD std::string* release_request_criticality();
  void set_allocated_request_criticality(std::string* request_criticality);
  private:
  const std::string& _internal_request_criticality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_criticality(const std::string& value);
  std::string* _internal_mutable_request_criticality();
  public:

  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // .tensorflow.serving.SamplingConfig sampling_config = 2;
  bool has_sampling_config() const;
  private:
  bool _internal_has_sampling_config() const;
  public:
  void clear_sampling_config();
  const ::tensorflow::serving::SamplingConfig& sampling_config() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::SamplingConfig* release_sampling_config();
  ::tensorflow::serving::SamplingConfig* mutable_sampling_config();
  void set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config);
  private:
  const ::tensorflow::serving::SamplingConfig& _internal_sampling_config() const;
  ::tensorflow::serving::SamplingConfig* _internal_mutable_sampling_config();
  public:
  void unsafe_arena_set_allocated_sampling_config(
      ::tensorflow::serving::SamplingConfig* sampling_config);
  ::tensorflow::serving::SamplingConfig* unsafe_arena_release_sampling_config();

  // int64 timestamp_secs = 4;
  void clear_timestamp_secs();
  int64_t timestamp_secs() const;
  void set_timestamp_secs(int64_t value);
  private:
  int64_t _internal_timestamp_secs() const;
  void _internal_set_timestamp_secs(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.LogMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> saved_model_tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_origin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_criticality_;
    ::tensorflow::serving::ModelSpec* model_spec_;
    ::tensorflow::serving::SamplingConfig* sampling_config_;
    int64_t timestamp_secs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2flogging_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogMetadata

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool LogMetadata::_internal_has_model_spec() const {
  return this != internal_default_instance() && _impl_.model_spec_ != nullptr;
}
inline bool LogMetadata::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& LogMetadata::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = _impl_.model_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelSpec&>(
      ::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& LogMetadata::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.model_spec)
  return _internal_model_spec();
}
inline void LogMetadata::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_spec_);
  }
  _impl_.model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.LogMetadata.model_spec)
}
inline ::tensorflow::serving::ModelSpec* LogMetadata::release_model_spec() {
  
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::ModelSpec* LogMetadata::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* LogMetadata::_internal_mutable_model_spec() {
  
  if (_impl_.model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaForAllocation());
    _impl_.model_spec_ = p;
  }
  return _impl_.model_spec_;
}
inline ::tensorflow::serving::ModelSpec* LogMetadata::mutable_model_spec() {
  ::tensorflow::serving::ModelSpec* _msg = _internal_mutable_model_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.model_spec)
  return _msg;
}
inline void LogMetadata::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec));
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.model_spec)
}

// .tensorflow.serving.SamplingConfig sampling_config = 2;
inline bool LogMetadata::_internal_has_sampling_config() const {
  return this != internal_default_instance() && _impl_.sampling_config_ != nullptr;
}
inline bool LogMetadata::has_sampling_config() const {
  return _internal_has_sampling_config();
}
inline const ::tensorflow::serving::SamplingConfig& LogMetadata::_internal_sampling_config() const {
  const ::tensorflow::serving::SamplingConfig* p = _impl_.sampling_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::SamplingConfig&>(
      ::tensorflow::serving::_SamplingConfig_default_instance_);
}
inline const ::tensorflow::serving::SamplingConfig& LogMetadata::sampling_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.sampling_config)
  return _internal_sampling_config();
}
inline void LogMetadata::unsafe_arena_set_allocated_sampling_config(
    ::tensorflow::serving::SamplingConfig* sampling_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sampling_config_);
  }
  _impl_.sampling_config_ = sampling_config;
  if (sampling_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.LogMetadata.sampling_config)
}
inline ::tensorflow::serving::SamplingConfig* LogMetadata::release_sampling_config() {
  
  ::tensorflow::serving::SamplingConfig* temp = _impl_.sampling_config_;
  _impl_.sampling_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::SamplingConfig* LogMetadata::unsafe_arena_release_sampling_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.sampling_config)
  
  ::tensorflow::serving::SamplingConfig* temp = _impl_.sampling_config_;
  _impl_.sampling_config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::SamplingConfig* LogMetadata::_internal_mutable_sampling_config() {
  
  if (_impl_.sampling_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::SamplingConfig>(GetArenaForAllocation());
    _impl_.sampling_config_ = p;
  }
  return _impl_.sampling_config_;
}
inline ::tensorflow::serving::SamplingConfig* LogMetadata::mutable_sampling_config() {
  ::tensorflow::serving::SamplingConfig* _msg = _internal_mutable_sampling_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.sampling_config)
  return _msg;
}
inline void LogMetadata::set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sampling_config_);
  }
  if (sampling_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampling_config));
    if (message_arena != submessage_arena) {
      sampling_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampling_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sampling_config_ = sampling_config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.sampling_config)
}

// repeated string saved_model_tags = 3;
inline int LogMetadata::_internal_saved_model_tags_size() const {
  return _impl_.saved_model_tags_.size();
}
inline int LogMetadata::saved_model_tags_size() const {
  return _internal_saved_model_tags_size();
}
inline void LogMetadata::clear_saved_model_tags() {
  _impl_.saved_model_tags_.Clear();
}
inline std::string* LogMetadata::add_saved_model_tags() {
  std::string* _s = _internal_add_saved_model_tags();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.LogMetadata.saved_model_tags)
  return _s;
}
inline const std::string& LogMetadata::_internal_saved_model_tags(int index) const {
  return _impl_.saved_model_tags_.Get(index);
}
inline const std::string& LogMetadata::saved_model_tags(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.saved_model_tags)
  return _internal_saved_model_tags(index);
}
inline std::string* LogMetadata::mutable_saved_model_tags(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.saved_model_tags)
  return _impl_.saved_model_tags_.Mutable(index);
}
inline void LogMetadata::set_saved_model_tags(int index, const std::string& value) {
  _impl_.saved_model_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::set_saved_model_tags(int index, std::string&& value) {
  _impl_.saved_model_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::set_saved_model_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.saved_model_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::set_saved_model_tags(int index, const char* value, size_t size) {
  _impl_.saved_model_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline std::string* LogMetadata::_internal_add_saved_model_tags() {
  return _impl_.saved_model_tags_.Add();
}
inline void LogMetadata::add_saved_model_tags(const std::string& value) {
  _impl_.saved_model_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::add_saved_model_tags(std::string&& value) {
  _impl_.saved_model_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::add_saved_model_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.saved_model_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::add_saved_model_tags(const char* value, size_t size) {
  _impl_.saved_model_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogMetadata::saved_model_tags() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.LogMetadata.saved_model_tags)
  return _impl_.saved_model_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogMetadata::mutable_saved_model_tags() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.LogMetadata.saved_model_tags)
  return &_impl_.saved_model_tags_;
}

// int64 timestamp_secs = 4;
inline void LogMetadata::clear_timestamp_secs() {
  _impl_.timestamp_secs_ = int64_t{0};
}
inline int64_t LogMetadata::_internal_timestamp_secs() const {
  return _impl_.timestamp_secs_;
}
inline int64_t LogMetadata::timestamp_secs() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.timestamp_secs)
  return _internal_timestamp_secs();
}
inline void LogMetadata::_internal_set_timestamp_secs(int64_t value) {
  
  _impl_.timestamp_secs_ = value;
}
inline void LogMetadata::set_timestamp_secs(int64_t value) {
  _internal_set_timestamp_secs(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.timestamp_secs)
}

// string dc = 5;
inline void LogMetadata::clear_dc() {
  _impl_.dc_.ClearToEmpty();
}
inline const std::string& LogMetadata::dc() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.dc)
  return _internal_dc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogMetadata::set_dc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.dc)
}
inline std::string* LogMetadata::mutable_dc() {
  std::string* _s = _internal_mutable_dc();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.dc)
  return _s;
}
inline const std::string& LogMetadata::_internal_dc() const {
  return _impl_.dc_.Get();
}
inline void LogMetadata::_internal_set_dc(const std::string& value) {
  
  _impl_.dc_.Set(value, GetArenaForAllocation());
}
inline std::string* LogMetadata::_internal_mutable_dc() {
  
  return _impl_.dc_.Mutable(GetArenaForAllocation());
}
inline std::string* LogMetadata::release_dc() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.dc)
  return _impl_.dc_.Release();
}
inline void LogMetadata::set_allocated_dc(std::string* dc) {
  if (dc != nullptr) {
    
  } else {
    
  }
  _impl_.dc_.SetAllocated(dc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dc_.IsDefault()) {
    _impl_.dc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.dc)
}

// string request_origin = 6;
inline void LogMetadata::clear_request_origin() {
  _impl_.request_origin_.ClearToEmpty();
}
inline const std::string& LogMetadata::request_origin() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.request_origin)
  return _internal_request_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogMetadata::set_request_origin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_origin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.request_origin)
}
inline std::string* LogMetadata::mutable_request_origin() {
  std::string* _s = _internal_mutable_request_origin();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.request_origin)
  return _s;
}
inline const std::string& LogMetadata::_internal_request_origin() const {
  return _impl_.request_origin_.Get();
}
inline void LogMetadata::_internal_set_request_origin(const std::string& value) {
  
  _impl_.request_origin_.Set(value, GetArenaForAllocation());
}
inline std::string* LogMetadata::_internal_mutable_request_origin() {
  
  return _impl_.request_origin_.Mutable(GetArenaForAllocation());
}
inline std::string* LogMetadata::release_request_origin() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.request_origin)
  return _impl_.request_origin_.Release();
}
inline void LogMetadata::set_allocated_request_origin(std::string* request_origin) {
  if (request_origin != nullptr) {
    
  } else {
    
  }
  _impl_.request_origin_.SetAllocated(request_origin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_origin_.IsDefault()) {
    _impl_.request_origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.request_origin)
}

// string request_criticality = 7;
inline void LogMetadata::clear_request_criticality() {
  _impl_.request_criticality_.ClearToEmpty();
}
inline const std::string& LogMetadata::request_criticality() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.request_criticality)
  return _internal_request_criticality();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogMetadata::set_request_criticality(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_criticality_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.request_criticality)
}
inline std::string* LogMetadata::mutable_request_criticality() {
  std::string* _s = _internal_mutable_request_criticality();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.request_criticality)
  return _s;
}
inline const std::string& LogMetadata::_internal_request_criticality() const {
  return _impl_.request_criticality_.Get();
}
inline void LogMetadata::_internal_set_request_criticality(const std::string& value) {
  
  _impl_.request_criticality_.Set(value, GetArenaForAllocation());
}
inline std::string* LogMetadata::_internal_mutable_request_criticality() {
  
  return _impl_.request_criticality_.Mutable(GetArenaForAllocation());
}
inline std::string* LogMetadata::release_request_criticality() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.request_criticality)
  return _impl_.request_criticality_.Release();
}
inline void LogMetadata::set_allocated_request_criticality(std::string* request_criticality) {
  if (request_criticality != nullptr) {
    
  } else {
    
  }
  _impl_.request_criticality_.SetAllocated(request_criticality, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_criticality_.IsDefault()) {
    _impl_.request_criticality_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.request_criticality)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2flogging_2eproto
