// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/get_model_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/model.pb.h"
#include "tensorflow_serving/apis/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto;
namespace tensorflow {
namespace serving {
class GetModelStatusRequest;
struct GetModelStatusRequestDefaultTypeInternal;
extern GetModelStatusRequestDefaultTypeInternal _GetModelStatusRequest_default_instance_;
class GetModelStatusResponse;
struct GetModelStatusResponseDefaultTypeInternal;
extern GetModelStatusResponseDefaultTypeInternal _GetModelStatusResponse_default_instance_;
class ModelVersionStatus;
struct ModelVersionStatusDefaultTypeInternal;
extern ModelVersionStatusDefaultTypeInternal _ModelVersionStatus_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::GetModelStatusRequest* Arena::CreateMaybeMessage<::tensorflow::serving::GetModelStatusRequest>(Arena*);
template<> ::tensorflow::serving::GetModelStatusResponse* Arena::CreateMaybeMessage<::tensorflow::serving::GetModelStatusResponse>(Arena*);
template<> ::tensorflow::serving::ModelVersionStatus* Arena::CreateMaybeMessage<::tensorflow::serving::ModelVersionStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

enum ModelVersionStatus_State : int {
  ModelVersionStatus_State_UNKNOWN = 0,
  ModelVersionStatus_State_START = 10,
  ModelVersionStatus_State_LOADING = 20,
  ModelVersionStatus_State_AVAILABLE = 30,
  ModelVersionStatus_State_UNLOADING = 40,
  ModelVersionStatus_State_END = 50,
  ModelVersionStatus_State_ModelVersionStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ModelVersionStatus_State_ModelVersionStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ModelVersionStatus_State_IsValid(int value);
constexpr ModelVersionStatus_State ModelVersionStatus_State_State_MIN = ModelVersionStatus_State_UNKNOWN;
constexpr ModelVersionStatus_State ModelVersionStatus_State_State_MAX = ModelVersionStatus_State_END;
constexpr int ModelVersionStatus_State_State_ARRAYSIZE = ModelVersionStatus_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelVersionStatus_State_descriptor();
template<typename T>
inline const std::string& ModelVersionStatus_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelVersionStatus_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelVersionStatus_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelVersionStatus_State_descriptor(), enum_t_value);
}
inline bool ModelVersionStatus_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelVersionStatus_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelVersionStatus_State>(
    ModelVersionStatus_State_descriptor(), name, value);
}
// ===================================================================

class GetModelStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.GetModelStatusRequest) */ {
 public:
  inline GetModelStatusRequest() : GetModelStatusRequest(nullptr) {}
  ~GetModelStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR GetModelStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelStatusRequest(const GetModelStatusRequest& from);
  GetModelStatusRequest(GetModelStatusRequest&& from) noexcept
    : GetModelStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetModelStatusRequest& operator=(const GetModelStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelStatusRequest& operator=(GetModelStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelStatusRequest*>(
               &_GetModelStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetModelStatusRequest& a, GetModelStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModelStatusRequest& from) {
    GetModelStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.GetModelStatusRequest";
  }
  protected:
  explicit GetModelStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelSpecFieldNumber = 1,
  };
  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.GetModelStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tensorflow::serving::ModelSpec* model_spec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ModelVersionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ModelVersionStatus) */ {
 public:
  inline ModelVersionStatus() : ModelVersionStatus(nullptr) {}
  ~ModelVersionStatus() override;
  explicit PROTOBUF_CONSTEXPR ModelVersionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelVersionStatus(const ModelVersionStatus& from);
  ModelVersionStatus(ModelVersionStatus&& from) noexcept
    : ModelVersionStatus() {
    *this = ::std::move(from);
  }

  inline ModelVersionStatus& operator=(const ModelVersionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelVersionStatus& operator=(ModelVersionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelVersionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelVersionStatus* internal_default_instance() {
    return reinterpret_cast<const ModelVersionStatus*>(
               &_ModelVersionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelVersionStatus& a, ModelVersionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelVersionStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelVersionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelVersionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelVersionStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelVersionStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelVersionStatus& from) {
    ModelVersionStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelVersionStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ModelVersionStatus";
  }
  protected:
  explicit ModelVersionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModelVersionStatus_State State;
  static constexpr State UNKNOWN =
    ModelVersionStatus_State_UNKNOWN;
  static constexpr State START =
    ModelVersionStatus_State_START;
  static constexpr State LOADING =
    ModelVersionStatus_State_LOADING;
  static constexpr State AVAILABLE =
    ModelVersionStatus_State_AVAILABLE;
  static constexpr State UNLOADING =
    ModelVersionStatus_State_UNLOADING;
  static constexpr State END =
    ModelVersionStatus_State_END;
  static inline bool State_IsValid(int value) {
    return ModelVersionStatus_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ModelVersionStatus_State_State_MIN;
  static constexpr State State_MAX =
    ModelVersionStatus_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ModelVersionStatus_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ModelVersionStatus_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ModelVersionStatus_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ModelVersionStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 3,
    kVersionFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .tensorflow.serving.StatusProto status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::tensorflow::serving::StatusProto& status() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::StatusProto* release_status();
  ::tensorflow::serving::StatusProto* mutable_status();
  void set_allocated_status(::tensorflow::serving::StatusProto* status);
  private:
  const ::tensorflow::serving::StatusProto& _internal_status() const;
  ::tensorflow::serving::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::tensorflow::serving::StatusProto* status);
  ::tensorflow::serving::StatusProto* unsafe_arena_release_status();

  // int64 version = 1;
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // .tensorflow.serving.ModelVersionStatus.State state = 2;
  void clear_state();
  ::tensorflow::serving::ModelVersionStatus_State state() const;
  void set_state(::tensorflow::serving::ModelVersionStatus_State value);
  private:
  ::tensorflow::serving::ModelVersionStatus_State _internal_state() const;
  void _internal_set_state(::tensorflow::serving::ModelVersionStatus_State value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelVersionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tensorflow::serving::StatusProto* status_;
    int64_t version_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class GetModelStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.GetModelStatusResponse) */ {
 public:
  inline GetModelStatusResponse() : GetModelStatusResponse(nullptr) {}
  ~GetModelStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetModelStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelStatusResponse(const GetModelStatusResponse& from);
  GetModelStatusResponse(GetModelStatusResponse&& from) noexcept
    : GetModelStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetModelStatusResponse& operator=(const GetModelStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelStatusResponse& operator=(GetModelStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetModelStatusResponse*>(
               &_GetModelStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetModelStatusResponse& a, GetModelStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModelStatusResponse& from) {
    GetModelStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.GetModelStatusResponse";
  }
  protected:
  explicit GetModelStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionStatusFieldNumber = 1,
  };
  // repeated .tensorflow.serving.ModelVersionStatus model_version_status = 1 [json_name = "model_version_status"];
  int model_version_status_size() const;
  private:
  int _internal_model_version_status_size() const;
  public:
  void clear_model_version_status();
  ::tensorflow::serving::ModelVersionStatus* mutable_model_version_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelVersionStatus >*
      mutable_model_version_status();
  private:
  const ::tensorflow::serving::ModelVersionStatus& _internal_model_version_status(int index) const;
  ::tensorflow::serving::ModelVersionStatus* _internal_add_model_version_status();
  public:
  const ::tensorflow::serving::ModelVersionStatus& model_version_status(int index) const;
  ::tensorflow::serving::ModelVersionStatus* add_model_version_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelVersionStatus >&
      model_version_status() const;

  // @@protoc_insertion_point(class_scope:tensorflow.serving.GetModelStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelVersionStatus > model_version_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetModelStatusRequest

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool GetModelStatusRequest::_internal_has_model_spec() const {
  return this != internal_default_instance() && _impl_.model_spec_ != nullptr;
}
inline bool GetModelStatusRequest::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& GetModelStatusRequest::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = _impl_.model_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelSpec&>(
      ::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& GetModelStatusRequest::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.GetModelStatusRequest.model_spec)
  return _internal_model_spec();
}
inline void GetModelStatusRequest::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_spec_);
  }
  _impl_.model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.GetModelStatusRequest.model_spec)
}
inline ::tensorflow::serving::ModelSpec* GetModelStatusRequest::release_model_spec() {
  
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::ModelSpec* GetModelStatusRequest::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.GetModelStatusRequest.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* GetModelStatusRequest::_internal_mutable_model_spec() {
  
  if (_impl_.model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaForAllocation());
    _impl_.model_spec_ = p;
  }
  return _impl_.model_spec_;
}
inline ::tensorflow::serving::ModelSpec* GetModelStatusRequest::mutable_model_spec() {
  ::tensorflow::serving::ModelSpec* _msg = _internal_mutable_model_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.GetModelStatusRequest.model_spec)
  return _msg;
}
inline void GetModelStatusRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec));
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.GetModelStatusRequest.model_spec)
}

// -------------------------------------------------------------------

// ModelVersionStatus

// int64 version = 1;
inline void ModelVersionStatus::clear_version() {
  _impl_.version_ = int64_t{0};
}
inline int64_t ModelVersionStatus::_internal_version() const {
  return _impl_.version_;
}
inline int64_t ModelVersionStatus::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelVersionStatus.version)
  return _internal_version();
}
inline void ModelVersionStatus::_internal_set_version(int64_t value) {
  
  _impl_.version_ = value;
}
inline void ModelVersionStatus::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelVersionStatus.version)
}

// .tensorflow.serving.ModelVersionStatus.State state = 2;
inline void ModelVersionStatus::clear_state() {
  _impl_.state_ = 0;
}
inline ::tensorflow::serving::ModelVersionStatus_State ModelVersionStatus::_internal_state() const {
  return static_cast< ::tensorflow::serving::ModelVersionStatus_State >(_impl_.state_);
}
inline ::tensorflow::serving::ModelVersionStatus_State ModelVersionStatus::state() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelVersionStatus.state)
  return _internal_state();
}
inline void ModelVersionStatus::_internal_set_state(::tensorflow::serving::ModelVersionStatus_State value) {
  
  _impl_.state_ = value;
}
inline void ModelVersionStatus::set_state(::tensorflow::serving::ModelVersionStatus_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelVersionStatus.state)
}

// .tensorflow.serving.StatusProto status = 3;
inline bool ModelVersionStatus::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ModelVersionStatus::has_status() const {
  return _internal_has_status();
}
inline const ::tensorflow::serving::StatusProto& ModelVersionStatus::_internal_status() const {
  const ::tensorflow::serving::StatusProto* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::StatusProto&>(
      ::tensorflow::serving::_StatusProto_default_instance_);
}
inline const ::tensorflow::serving::StatusProto& ModelVersionStatus::status() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelVersionStatus.status)
  return _internal_status();
}
inline void ModelVersionStatus::unsafe_arena_set_allocated_status(
    ::tensorflow::serving::StatusProto* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelVersionStatus.status)
}
inline ::tensorflow::serving::StatusProto* ModelVersionStatus::release_status() {
  
  ::tensorflow::serving::StatusProto* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::StatusProto* ModelVersionStatus::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelVersionStatus.status)
  
  ::tensorflow::serving::StatusProto* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::StatusProto* ModelVersionStatus::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::StatusProto>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::tensorflow::serving::StatusProto* ModelVersionStatus::mutable_status() {
  ::tensorflow::serving::StatusProto* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelVersionStatus.status)
  return _msg;
}
inline void ModelVersionStatus::set_allocated_status(::tensorflow::serving::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelVersionStatus.status)
}

// -------------------------------------------------------------------

// GetModelStatusResponse

// repeated .tensorflow.serving.ModelVersionStatus model_version_status = 1 [json_name = "model_version_status"];
inline int GetModelStatusResponse::_internal_model_version_status_size() const {
  return _impl_.model_version_status_.size();
}
inline int GetModelStatusResponse::model_version_status_size() const {
  return _internal_model_version_status_size();
}
inline void GetModelStatusResponse::clear_model_version_status() {
  _impl_.model_version_status_.Clear();
}
inline ::tensorflow::serving::ModelVersionStatus* GetModelStatusResponse::mutable_model_version_status(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.GetModelStatusResponse.model_version_status)
  return _impl_.model_version_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelVersionStatus >*
GetModelStatusResponse::mutable_model_version_status() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.GetModelStatusResponse.model_version_status)
  return &_impl_.model_version_status_;
}
inline const ::tensorflow::serving::ModelVersionStatus& GetModelStatusResponse::_internal_model_version_status(int index) const {
  return _impl_.model_version_status_.Get(index);
}
inline const ::tensorflow::serving::ModelVersionStatus& GetModelStatusResponse::model_version_status(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.GetModelStatusResponse.model_version_status)
  return _internal_model_version_status(index);
}
inline ::tensorflow::serving::ModelVersionStatus* GetModelStatusResponse::_internal_add_model_version_status() {
  return _impl_.model_version_status_.Add();
}
inline ::tensorflow::serving::ModelVersionStatus* GetModelStatusResponse::add_model_version_status() {
  ::tensorflow::serving::ModelVersionStatus* _add = _internal_add_model_version_status();
  // @@protoc_insertion_point(field_add:tensorflow.serving.GetModelStatusResponse.model_version_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelVersionStatus >&
GetModelStatusResponse::model_version_status() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.GetModelStatusResponse.model_version_status)
  return _impl_.model_version_status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::serving::ModelVersionStatus_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::serving::ModelVersionStatus_State>() {
  return ::tensorflow::serving::ModelVersionStatus_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fget_5fmodel_5fstatus_2eproto
