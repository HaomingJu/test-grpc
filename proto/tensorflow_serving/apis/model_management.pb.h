// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/model_management.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/status.pb.h"
#include "tensorflow_serving/config/model_server_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
namespace tensorflow {
namespace serving {
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class ReloadConfigRequest;
struct ReloadConfigRequestDefaultTypeInternal;
extern ReloadConfigRequestDefaultTypeInternal _ReloadConfigRequest_default_instance_;
class ReloadConfigResponse;
struct ReloadConfigResponseDefaultTypeInternal;
extern ReloadConfigResponseDefaultTypeInternal _ReloadConfigResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::Metric* Arena::CreateMaybeMessage<::tensorflow::serving::Metric>(Arena*);
template<> ::tensorflow::serving::ReloadConfigRequest* Arena::CreateMaybeMessage<::tensorflow::serving::ReloadConfigRequest>(Arena*);
template<> ::tensorflow::serving::ReloadConfigResponse* Arena::CreateMaybeMessage<::tensorflow::serving::ReloadConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class ReloadConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ReloadConfigRequest) */ {
 public:
  inline ReloadConfigRequest() : ReloadConfigRequest(nullptr) {}
  ~ReloadConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR ReloadConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReloadConfigRequest(const ReloadConfigRequest& from);
  ReloadConfigRequest(ReloadConfigRequest&& from) noexcept
    : ReloadConfigRequest() {
    *this = ::std::move(from);
  }

  inline ReloadConfigRequest& operator=(const ReloadConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadConfigRequest& operator=(ReloadConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReloadConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ReloadConfigRequest*>(
               &_ReloadConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReloadConfigRequest& a, ReloadConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReloadConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReloadConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReloadConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReloadConfigRequest& from) {
    ReloadConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ReloadConfigRequest";
  }
  protected:
  explicit ReloadConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricNamesFieldNumber = 2,
    kConfigFieldNumber = 1,
  };
  // repeated string metric_names = 2;
  int metric_names_size() const;
  private:
  int _internal_metric_names_size() const;
  public:
  void clear_metric_names();
  const std::string& metric_names(int index) const;
  std::string* mutable_metric_names(int index);
  void set_metric_names(int index, const std::string& value);
  void set_metric_names(int index, std::string&& value);
  void set_metric_names(int index, const char* value);
  void set_metric_names(int index, const char* value, size_t size);
  std::string* add_metric_names();
  void add_metric_names(const std::string& value);
  void add_metric_names(std::string&& value);
  void add_metric_names(const char* value);
  void add_metric_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metric_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metric_names();
  private:
  const std::string& _internal_metric_names(int index) const;
  std::string* _internal_add_metric_names();
  public:

  // .tensorflow.serving.ModelServerConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::tensorflow::serving::ModelServerConfig& config() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelServerConfig* release_config();
  ::tensorflow::serving::ModelServerConfig* mutable_config();
  void set_allocated_config(::tensorflow::serving::ModelServerConfig* config);
  private:
  const ::tensorflow::serving::ModelServerConfig& _internal_config() const;
  ::tensorflow::serving::ModelServerConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::tensorflow::serving::ModelServerConfig* config);
  ::tensorflow::serving::ModelServerConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ReloadConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metric_names_;
    ::tensorflow::serving::ModelServerConfig* config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ReloadConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ReloadConfigResponse) */ {
 public:
  inline ReloadConfigResponse() : ReloadConfigResponse(nullptr) {}
  ~ReloadConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR ReloadConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReloadConfigResponse(const ReloadConfigResponse& from);
  ReloadConfigResponse(ReloadConfigResponse&& from) noexcept
    : ReloadConfigResponse() {
    *this = ::std::move(from);
  }

  inline ReloadConfigResponse& operator=(const ReloadConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadConfigResponse& operator=(ReloadConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReloadConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ReloadConfigResponse*>(
               &_ReloadConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReloadConfigResponse& a, ReloadConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReloadConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReloadConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReloadConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReloadConfigResponse& from) {
    ReloadConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ReloadConfigResponse";
  }
  protected:
  explicit ReloadConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .tensorflow.serving.Metric metric = 2;
  int metric_size() const;
  private:
  int _internal_metric_size() const;
  public:
  void clear_metric();
  ::tensorflow::serving::Metric* mutable_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Metric >*
      mutable_metric();
  private:
  const ::tensorflow::serving::Metric& _internal_metric(int index) const;
  ::tensorflow::serving::Metric* _internal_add_metric();
  public:
  const ::tensorflow::serving::Metric& metric(int index) const;
  ::tensorflow::serving::Metric* add_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Metric >&
      metric() const;

  // .tensorflow.serving.StatusProto status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::tensorflow::serving::StatusProto& status() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::StatusProto* release_status();
  ::tensorflow::serving::StatusProto* mutable_status();
  void set_allocated_status(::tensorflow::serving::StatusProto* status);
  private:
  const ::tensorflow::serving::StatusProto& _internal_status() const;
  ::tensorflow::serving::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::tensorflow::serving::StatusProto* status);
  ::tensorflow::serving::StatusProto* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ReloadConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Metric > metric_;
    ::tensorflow::serving::StatusProto* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class Metric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() override;
  explicit PROTOBUF_CONSTEXPR Metric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  enum ValueIncreaseCase {
    kInt64ValueIncrease = 2,
    VALUE_INCREASE_NOT_SET = 0,
  };

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metric& from) {
    Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInt64ValueIncreaseFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 int64_value_increase = 2;
  bool has_int64_value_increase() const;
  private:
  bool _internal_has_int64_value_increase() const;
  public:
  void clear_int64_value_increase();
  int64_t int64_value_increase() const;
  void set_int64_value_increase(int64_t value);
  private:
  int64_t _internal_int64_value_increase() const;
  void _internal_set_int64_value_increase(int64_t value);
  public:

  void clear_value_increase();
  ValueIncreaseCase value_increase_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.Metric)
 private:
  class _Internal;
  void set_has_int64_value_increase();

  inline bool has_value_increase() const;
  inline void clear_has_value_increase();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union ValueIncreaseUnion {
      constexpr ValueIncreaseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t int64_value_increase_;
    } value_increase_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReloadConfigRequest

// .tensorflow.serving.ModelServerConfig config = 1;
inline bool ReloadConfigRequest::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool ReloadConfigRequest::has_config() const {
  return _internal_has_config();
}
inline const ::tensorflow::serving::ModelServerConfig& ReloadConfigRequest::_internal_config() const {
  const ::tensorflow::serving::ModelServerConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelServerConfig&>(
      ::tensorflow::serving::_ModelServerConfig_default_instance_);
}
inline const ::tensorflow::serving::ModelServerConfig& ReloadConfigRequest::config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ReloadConfigRequest.config)
  return _internal_config();
}
inline void ReloadConfigRequest::unsafe_arena_set_allocated_config(
    ::tensorflow::serving::ModelServerConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ReloadConfigRequest.config)
}
inline ::tensorflow::serving::ModelServerConfig* ReloadConfigRequest::release_config() {
  
  ::tensorflow::serving::ModelServerConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::ModelServerConfig* ReloadConfigRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ReloadConfigRequest.config)
  
  ::tensorflow::serving::ModelServerConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelServerConfig* ReloadConfigRequest::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelServerConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::tensorflow::serving::ModelServerConfig* ReloadConfigRequest::mutable_config() {
  ::tensorflow::serving::ModelServerConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ReloadConfigRequest.config)
  return _msg;
}
inline void ReloadConfigRequest::set_allocated_config(::tensorflow::serving::ModelServerConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ReloadConfigRequest.config)
}

// repeated string metric_names = 2;
inline int ReloadConfigRequest::_internal_metric_names_size() const {
  return _impl_.metric_names_.size();
}
inline int ReloadConfigRequest::metric_names_size() const {
  return _internal_metric_names_size();
}
inline void ReloadConfigRequest::clear_metric_names() {
  _impl_.metric_names_.Clear();
}
inline std::string* ReloadConfigRequest::add_metric_names() {
  std::string* _s = _internal_add_metric_names();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.ReloadConfigRequest.metric_names)
  return _s;
}
inline const std::string& ReloadConfigRequest::_internal_metric_names(int index) const {
  return _impl_.metric_names_.Get(index);
}
inline const std::string& ReloadConfigRequest::metric_names(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ReloadConfigRequest.metric_names)
  return _internal_metric_names(index);
}
inline std::string* ReloadConfigRequest::mutable_metric_names(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ReloadConfigRequest.metric_names)
  return _impl_.metric_names_.Mutable(index);
}
inline void ReloadConfigRequest::set_metric_names(int index, const std::string& value) {
  _impl_.metric_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline void ReloadConfigRequest::set_metric_names(int index, std::string&& value) {
  _impl_.metric_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline void ReloadConfigRequest::set_metric_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.metric_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline void ReloadConfigRequest::set_metric_names(int index, const char* value, size_t size) {
  _impl_.metric_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline std::string* ReloadConfigRequest::_internal_add_metric_names() {
  return _impl_.metric_names_.Add();
}
inline void ReloadConfigRequest::add_metric_names(const std::string& value) {
  _impl_.metric_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline void ReloadConfigRequest::add_metric_names(std::string&& value) {
  _impl_.metric_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline void ReloadConfigRequest::add_metric_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.metric_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline void ReloadConfigRequest::add_metric_names(const char* value, size_t size) {
  _impl_.metric_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReloadConfigRequest::metric_names() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ReloadConfigRequest.metric_names)
  return _impl_.metric_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReloadConfigRequest::mutable_metric_names() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ReloadConfigRequest.metric_names)
  return &_impl_.metric_names_;
}

// -------------------------------------------------------------------

// ReloadConfigResponse

// .tensorflow.serving.StatusProto status = 1;
inline bool ReloadConfigResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ReloadConfigResponse::has_status() const {
  return _internal_has_status();
}
inline const ::tensorflow::serving::StatusProto& ReloadConfigResponse::_internal_status() const {
  const ::tensorflow::serving::StatusProto* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::StatusProto&>(
      ::tensorflow::serving::_StatusProto_default_instance_);
}
inline const ::tensorflow::serving::StatusProto& ReloadConfigResponse::status() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ReloadConfigResponse.status)
  return _internal_status();
}
inline void ReloadConfigResponse::unsafe_arena_set_allocated_status(
    ::tensorflow::serving::StatusProto* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ReloadConfigResponse.status)
}
inline ::tensorflow::serving::StatusProto* ReloadConfigResponse::release_status() {
  
  ::tensorflow::serving::StatusProto* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::StatusProto* ReloadConfigResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ReloadConfigResponse.status)
  
  ::tensorflow::serving::StatusProto* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::StatusProto* ReloadConfigResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::StatusProto>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::tensorflow::serving::StatusProto* ReloadConfigResponse::mutable_status() {
  ::tensorflow::serving::StatusProto* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ReloadConfigResponse.status)
  return _msg;
}
inline void ReloadConfigResponse::set_allocated_status(::tensorflow::serving::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ReloadConfigResponse.status)
}

// repeated .tensorflow.serving.Metric metric = 2;
inline int ReloadConfigResponse::_internal_metric_size() const {
  return _impl_.metric_.size();
}
inline int ReloadConfigResponse::metric_size() const {
  return _internal_metric_size();
}
inline void ReloadConfigResponse::clear_metric() {
  _impl_.metric_.Clear();
}
inline ::tensorflow::serving::Metric* ReloadConfigResponse::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ReloadConfigResponse.metric)
  return _impl_.metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Metric >*
ReloadConfigResponse::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ReloadConfigResponse.metric)
  return &_impl_.metric_;
}
inline const ::tensorflow::serving::Metric& ReloadConfigResponse::_internal_metric(int index) const {
  return _impl_.metric_.Get(index);
}
inline const ::tensorflow::serving::Metric& ReloadConfigResponse::metric(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ReloadConfigResponse.metric)
  return _internal_metric(index);
}
inline ::tensorflow::serving::Metric* ReloadConfigResponse::_internal_add_metric() {
  return _impl_.metric_.Add();
}
inline ::tensorflow::serving::Metric* ReloadConfigResponse::add_metric() {
  ::tensorflow::serving::Metric* _add = _internal_add_metric();
  // @@protoc_insertion_point(field_add:tensorflow.serving.ReloadConfigResponse.metric)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Metric >&
ReloadConfigResponse::metric() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ReloadConfigResponse.metric)
  return _impl_.metric_;
}

// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Metric.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metric::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.Metric.name)
}
inline std::string* Metric::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Metric.name)
  return _s;
}
inline const std::string& Metric::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Metric::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Metric.name)
  return _impl_.name_.Release();
}
inline void Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Metric.name)
}

// int64 int64_value_increase = 2;
inline bool Metric::_internal_has_int64_value_increase() const {
  return value_increase_case() == kInt64ValueIncrease;
}
inline bool Metric::has_int64_value_increase() const {
  return _internal_has_int64_value_increase();
}
inline void Metric::set_has_int64_value_increase() {
  _impl_._oneof_case_[0] = kInt64ValueIncrease;
}
inline void Metric::clear_int64_value_increase() {
  if (_internal_has_int64_value_increase()) {
    _impl_.value_increase_.int64_value_increase_ = int64_t{0};
    clear_has_value_increase();
  }
}
inline int64_t Metric::_internal_int64_value_increase() const {
  if (_internal_has_int64_value_increase()) {
    return _impl_.value_increase_.int64_value_increase_;
  }
  return int64_t{0};
}
inline void Metric::_internal_set_int64_value_increase(int64_t value) {
  if (!_internal_has_int64_value_increase()) {
    clear_value_increase();
    set_has_int64_value_increase();
  }
  _impl_.value_increase_.int64_value_increase_ = value;
}
inline int64_t Metric::int64_value_increase() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Metric.int64_value_increase)
  return _internal_int64_value_increase();
}
inline void Metric::set_int64_value_increase(int64_t value) {
  _internal_set_int64_value_increase(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.Metric.int64_value_increase)
}

inline bool Metric::has_value_increase() const {
  return value_increase_case() != VALUE_INCREASE_NOT_SET;
}
inline void Metric::clear_has_value_increase() {
  _impl_._oneof_case_[0] = VALUE_INCREASE_NOT_SET;
}
inline Metric::ValueIncreaseCase Metric::value_increase_case() const {
  return Metric::ValueIncreaseCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto
