// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/classification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fclassification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fclassification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/input.pb.h"
#include "tensorflow_serving/apis/model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fclassification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto;
namespace tensorflow {
namespace serving {
class Class;
struct ClassDefaultTypeInternal;
extern ClassDefaultTypeInternal _Class_default_instance_;
class ClassificationRequest;
struct ClassificationRequestDefaultTypeInternal;
extern ClassificationRequestDefaultTypeInternal _ClassificationRequest_default_instance_;
class ClassificationResponse;
struct ClassificationResponseDefaultTypeInternal;
extern ClassificationResponseDefaultTypeInternal _ClassificationResponse_default_instance_;
class ClassificationResult;
struct ClassificationResultDefaultTypeInternal;
extern ClassificationResultDefaultTypeInternal _ClassificationResult_default_instance_;
class Classifications;
struct ClassificationsDefaultTypeInternal;
extern ClassificationsDefaultTypeInternal _Classifications_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::Class* Arena::CreateMaybeMessage<::tensorflow::serving::Class>(Arena*);
template<> ::tensorflow::serving::ClassificationRequest* Arena::CreateMaybeMessage<::tensorflow::serving::ClassificationRequest>(Arena*);
template<> ::tensorflow::serving::ClassificationResponse* Arena::CreateMaybeMessage<::tensorflow::serving::ClassificationResponse>(Arena*);
template<> ::tensorflow::serving::ClassificationResult* Arena::CreateMaybeMessage<::tensorflow::serving::ClassificationResult>(Arena*);
template<> ::tensorflow::serving::Classifications* Arena::CreateMaybeMessage<::tensorflow::serving::Classifications>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class Class final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Class) */ {
 public:
  inline Class() : Class(nullptr) {}
  ~Class() override;
  explicit PROTOBUF_CONSTEXPR Class(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Class(const Class& from);
  Class(Class&& from) noexcept
    : Class() {
    *this = ::std::move(from);
  }

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }
  inline Class& operator=(Class&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Class& default_instance() {
    return *internal_default_instance();
  }
  static inline const Class* internal_default_instance() {
    return reinterpret_cast<const Class*>(
               &_Class_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Class& a, Class& b) {
    a.Swap(&b);
  }
  inline void Swap(Class* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Class* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Class* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Class>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Class& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Class& from) {
    Class::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Class* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.Class";
  }
  protected:
  explicit Class(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.Class)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    float score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class Classifications final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Classifications) */ {
 public:
  inline Classifications() : Classifications(nullptr) {}
  ~Classifications() override;
  explicit PROTOBUF_CONSTEXPR Classifications(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Classifications(const Classifications& from);
  Classifications(Classifications&& from) noexcept
    : Classifications() {
    *this = ::std::move(from);
  }

  inline Classifications& operator=(const Classifications& from) {
    CopyFrom(from);
    return *this;
  }
  inline Classifications& operator=(Classifications&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Classifications& default_instance() {
    return *internal_default_instance();
  }
  static inline const Classifications* internal_default_instance() {
    return reinterpret_cast<const Classifications*>(
               &_Classifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Classifications& a, Classifications& b) {
    a.Swap(&b);
  }
  inline void Swap(Classifications* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Classifications* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Classifications* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Classifications>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Classifications& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Classifications& from) {
    Classifications::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Classifications* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.Classifications";
  }
  protected:
  explicit Classifications(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 1,
  };
  // repeated .tensorflow.serving.Class classes = 1;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  ::tensorflow::serving::Class* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Class >*
      mutable_classes();
  private:
  const ::tensorflow::serving::Class& _internal_classes(int index) const;
  ::tensorflow::serving::Class* _internal_add_classes();
  public:
  const ::tensorflow::serving::Class& classes(int index) const;
  ::tensorflow::serving::Class* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Class >&
      classes() const;

  // @@protoc_insertion_point(class_scope:tensorflow.serving.Classifications)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Class > classes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class ClassificationResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationResult) */ {
 public:
  inline ClassificationResult() : ClassificationResult(nullptr) {}
  ~ClassificationResult() override;
  explicit PROTOBUF_CONSTEXPR ClassificationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassificationResult(const ClassificationResult& from);
  ClassificationResult(ClassificationResult&& from) noexcept
    : ClassificationResult() {
    *this = ::std::move(from);
  }

  inline ClassificationResult& operator=(const ClassificationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationResult& operator=(ClassificationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassificationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassificationResult* internal_default_instance() {
    return reinterpret_cast<const ClassificationResult*>(
               &_ClassificationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClassificationResult& a, ClassificationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassificationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassificationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassificationResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassificationResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClassificationResult& from) {
    ClassificationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ClassificationResult";
  }
  protected:
  explicit ClassificationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationsFieldNumber = 1,
  };
  // repeated .tensorflow.serving.Classifications classifications = 1;
  int classifications_size() const;
  private:
  int _internal_classifications_size() const;
  public:
  void clear_classifications();
  ::tensorflow::serving::Classifications* mutable_classifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Classifications >*
      mutable_classifications();
  private:
  const ::tensorflow::serving::Classifications& _internal_classifications(int index) const;
  ::tensorflow::serving::Classifications* _internal_add_classifications();
  public:
  const ::tensorflow::serving::Classifications& classifications(int index) const;
  ::tensorflow::serving::Classifications* add_classifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Classifications >&
      classifications() const;

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Classifications > classifications_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class ClassificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationRequest) */ {
 public:
  inline ClassificationRequest() : ClassificationRequest(nullptr) {}
  ~ClassificationRequest() override;
  explicit PROTOBUF_CONSTEXPR ClassificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassificationRequest(const ClassificationRequest& from);
  ClassificationRequest(ClassificationRequest&& from) noexcept
    : ClassificationRequest() {
    *this = ::std::move(from);
  }

  inline ClassificationRequest& operator=(const ClassificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationRequest& operator=(ClassificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassificationRequest* internal_default_instance() {
    return reinterpret_cast<const ClassificationRequest*>(
               &_ClassificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClassificationRequest& a, ClassificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClassificationRequest& from) {
    ClassificationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ClassificationRequest";
  }
  protected:
  explicit ClassificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelSpecFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // .tensorflow.serving.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::tensorflow::serving::Input& input() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::Input* release_input();
  ::tensorflow::serving::Input* mutable_input();
  void set_allocated_input(::tensorflow::serving::Input* input);
  private:
  const ::tensorflow::serving::Input& _internal_input() const;
  ::tensorflow::serving::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::tensorflow::serving::Input* input);
  ::tensorflow::serving::Input* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tensorflow::serving::ModelSpec* model_spec_;
    ::tensorflow::serving::Input* input_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class ClassificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationResponse) */ {
 public:
  inline ClassificationResponse() : ClassificationResponse(nullptr) {}
  ~ClassificationResponse() override;
  explicit PROTOBUF_CONSTEXPR ClassificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassificationResponse(const ClassificationResponse& from);
  ClassificationResponse(ClassificationResponse&& from) noexcept
    : ClassificationResponse() {
    *this = ::std::move(from);
  }

  inline ClassificationResponse& operator=(const ClassificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationResponse& operator=(ClassificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassificationResponse* internal_default_instance() {
    return reinterpret_cast<const ClassificationResponse*>(
               &_ClassificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClassificationResponse& a, ClassificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassificationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClassificationResponse& from) {
    ClassificationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ClassificationResponse";
  }
  protected:
  explicit ClassificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kModelSpecFieldNumber = 2,
  };
  // .tensorflow.serving.ClassificationResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::tensorflow::serving::ClassificationResult& result() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ClassificationResult* release_result();
  ::tensorflow::serving::ClassificationResult* mutable_result();
  void set_allocated_result(::tensorflow::serving::ClassificationResult* result);
  private:
  const ::tensorflow::serving::ClassificationResult& _internal_result() const;
  ::tensorflow::serving::ClassificationResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::tensorflow::serving::ClassificationResult* result);
  ::tensorflow::serving::ClassificationResult* unsafe_arena_release_result();

  // .tensorflow.serving.ModelSpec model_spec = 2;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tensorflow::serving::ClassificationResult* result_;
    ::tensorflow::serving::ModelSpec* model_spec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Class

// string label = 1;
inline void Class::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& Class::label() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Class.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Class::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.Class.label)
}
inline std::string* Class::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Class.label)
  return _s;
}
inline const std::string& Class::_internal_label() const {
  return _impl_.label_.Get();
}
inline void Class::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* Class::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* Class::release_label() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Class.label)
  return _impl_.label_.Release();
}
inline void Class::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Class.label)
}

// float score = 2;
inline void Class::clear_score() {
  _impl_.score_ = 0;
}
inline float Class::_internal_score() const {
  return _impl_.score_;
}
inline float Class::score() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Class.score)
  return _internal_score();
}
inline void Class::_internal_set_score(float value) {
  
  _impl_.score_ = value;
}
inline void Class::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.Class.score)
}

// -------------------------------------------------------------------

// Classifications

// repeated .tensorflow.serving.Class classes = 1;
inline int Classifications::_internal_classes_size() const {
  return _impl_.classes_.size();
}
inline int Classifications::classes_size() const {
  return _internal_classes_size();
}
inline void Classifications::clear_classes() {
  _impl_.classes_.Clear();
}
inline ::tensorflow::serving::Class* Classifications::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Classifications.classes)
  return _impl_.classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Class >*
Classifications::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.Classifications.classes)
  return &_impl_.classes_;
}
inline const ::tensorflow::serving::Class& Classifications::_internal_classes(int index) const {
  return _impl_.classes_.Get(index);
}
inline const ::tensorflow::serving::Class& Classifications::classes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Classifications.classes)
  return _internal_classes(index);
}
inline ::tensorflow::serving::Class* Classifications::_internal_add_classes() {
  return _impl_.classes_.Add();
}
inline ::tensorflow::serving::Class* Classifications::add_classes() {
  ::tensorflow::serving::Class* _add = _internal_add_classes();
  // @@protoc_insertion_point(field_add:tensorflow.serving.Classifications.classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Class >&
Classifications::classes() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.Classifications.classes)
  return _impl_.classes_;
}

// -------------------------------------------------------------------

// ClassificationResult

// repeated .tensorflow.serving.Classifications classifications = 1;
inline int ClassificationResult::_internal_classifications_size() const {
  return _impl_.classifications_.size();
}
inline int ClassificationResult::classifications_size() const {
  return _internal_classifications_size();
}
inline void ClassificationResult::clear_classifications() {
  _impl_.classifications_.Clear();
}
inline ::tensorflow::serving::Classifications* ClassificationResult::mutable_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResult.classifications)
  return _impl_.classifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Classifications >*
ClassificationResult::mutable_classifications() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ClassificationResult.classifications)
  return &_impl_.classifications_;
}
inline const ::tensorflow::serving::Classifications& ClassificationResult::_internal_classifications(int index) const {
  return _impl_.classifications_.Get(index);
}
inline const ::tensorflow::serving::Classifications& ClassificationResult::classifications(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResult.classifications)
  return _internal_classifications(index);
}
inline ::tensorflow::serving::Classifications* ClassificationResult::_internal_add_classifications() {
  return _impl_.classifications_.Add();
}
inline ::tensorflow::serving::Classifications* ClassificationResult::add_classifications() {
  ::tensorflow::serving::Classifications* _add = _internal_add_classifications();
  // @@protoc_insertion_point(field_add:tensorflow.serving.ClassificationResult.classifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::Classifications >&
ClassificationResult::classifications() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ClassificationResult.classifications)
  return _impl_.classifications_;
}

// -------------------------------------------------------------------

// ClassificationRequest

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool ClassificationRequest::_internal_has_model_spec() const {
  return this != internal_default_instance() && _impl_.model_spec_ != nullptr;
}
inline bool ClassificationRequest::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& ClassificationRequest::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = _impl_.model_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelSpec&>(
      ::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& ClassificationRequest::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationRequest.model_spec)
  return _internal_model_spec();
}
inline void ClassificationRequest::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_spec_);
  }
  _impl_.model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationRequest.model_spec)
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::release_model_spec() {
  
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationRequest.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::_internal_mutable_model_spec() {
  
  if (_impl_.model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaForAllocation());
    _impl_.model_spec_ = p;
  }
  return _impl_.model_spec_;
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::mutable_model_spec() {
  ::tensorflow::serving::ModelSpec* _msg = _internal_mutable_model_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationRequest.model_spec)
  return _msg;
}
inline void ClassificationRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec));
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationRequest.model_spec)
}

// .tensorflow.serving.Input input = 2;
inline bool ClassificationRequest::_internal_has_input() const {
  return this != internal_default_instance() && _impl_.input_ != nullptr;
}
inline bool ClassificationRequest::has_input() const {
  return _internal_has_input();
}
inline const ::tensorflow::serving::Input& ClassificationRequest::_internal_input() const {
  const ::tensorflow::serving::Input* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::Input&>(
      ::tensorflow::serving::_Input_default_instance_);
}
inline const ::tensorflow::serving::Input& ClassificationRequest::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationRequest.input)
  return _internal_input();
}
inline void ClassificationRequest::unsafe_arena_set_allocated_input(
    ::tensorflow::serving::Input* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationRequest.input)
}
inline ::tensorflow::serving::Input* ClassificationRequest::release_input() {
  
  ::tensorflow::serving::Input* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::Input* ClassificationRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationRequest.input)
  
  ::tensorflow::serving::Input* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::Input* ClassificationRequest::_internal_mutable_input() {
  
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::Input>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::tensorflow::serving::Input* ClassificationRequest::mutable_input() {
  ::tensorflow::serving::Input* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationRequest.input)
  return _msg;
}
inline void ClassificationRequest::set_allocated_input(::tensorflow::serving::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input));
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationRequest.input)
}

// -------------------------------------------------------------------

// ClassificationResponse

// .tensorflow.serving.ModelSpec model_spec = 2;
inline bool ClassificationResponse::_internal_has_model_spec() const {
  return this != internal_default_instance() && _impl_.model_spec_ != nullptr;
}
inline bool ClassificationResponse::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& ClassificationResponse::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = _impl_.model_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelSpec&>(
      ::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& ClassificationResponse::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResponse.model_spec)
  return _internal_model_spec();
}
inline void ClassificationResponse::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_spec_);
  }
  _impl_.model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationResponse.model_spec)
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::release_model_spec() {
  
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationResponse.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::_internal_mutable_model_spec() {
  
  if (_impl_.model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaForAllocation());
    _impl_.model_spec_ = p;
  }
  return _impl_.model_spec_;
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::mutable_model_spec() {
  ::tensorflow::serving::ModelSpec* _msg = _internal_mutable_model_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResponse.model_spec)
  return _msg;
}
inline void ClassificationResponse::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec));
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationResponse.model_spec)
}

// .tensorflow.serving.ClassificationResult result = 1;
inline bool ClassificationResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool ClassificationResponse::has_result() const {
  return _internal_has_result();
}
inline void ClassificationResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::tensorflow::serving::ClassificationResult& ClassificationResponse::_internal_result() const {
  const ::tensorflow::serving::ClassificationResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ClassificationResult&>(
      ::tensorflow::serving::_ClassificationResult_default_instance_);
}
inline const ::tensorflow::serving::ClassificationResult& ClassificationResponse::result() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResponse.result)
  return _internal_result();
}
inline void ClassificationResponse::unsafe_arena_set_allocated_result(
    ::tensorflow::serving::ClassificationResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationResponse.result)
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::release_result() {
  
  ::tensorflow::serving::ClassificationResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationResponse.result)
  
  ::tensorflow::serving::ClassificationResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ClassificationResult>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::mutable_result() {
  ::tensorflow::serving::ClassificationResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResponse.result)
  return _msg;
}
inline void ClassificationResponse::set_allocated_result(::tensorflow::serving::ClassificationResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fclassification_2eproto
