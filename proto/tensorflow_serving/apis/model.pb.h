// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fmodel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fmodel_2eproto;
namespace tensorflow {
namespace serving {
class ModelSpec;
struct ModelSpecDefaultTypeInternal;
extern ModelSpecDefaultTypeInternal _ModelSpec_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::ModelSpec* Arena::CreateMaybeMessage<::tensorflow::serving::ModelSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class ModelSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ModelSpec) */ {
 public:
  inline ModelSpec() : ModelSpec(nullptr) {}
  ~ModelSpec() override;
  explicit PROTOBUF_CONSTEXPR ModelSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelSpec(const ModelSpec& from);
  ModelSpec(ModelSpec&& from) noexcept
    : ModelSpec() {
    *this = ::std::move(from);
  }

  inline ModelSpec& operator=(const ModelSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelSpec& operator=(ModelSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelSpec& default_instance() {
    return *internal_default_instance();
  }
  enum VersionChoiceCase {
    kVersion = 2,
    kVersionLabel = 4,
    VERSION_CHOICE_NOT_SET = 0,
  };

  static inline const ModelSpec* internal_default_instance() {
    return reinterpret_cast<const ModelSpec*>(
               &_ModelSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelSpec& a, ModelSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelSpec& from) {
    ModelSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ModelSpec";
  }
  protected:
  explicit ModelSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSignatureNameFieldNumber = 3,
    kVersionFieldNumber = 2,
    kVersionLabelFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string signature_name = 3;
  void clear_signature_name();
  const std::string& signature_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature_name();
  PROTOBUF_NODISCARD std::string* release_signature_name();
  void set_allocated_signature_name(std::string* signature_name);
  private:
  const std::string& _internal_signature_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_name(const std::string& value);
  std::string* _internal_mutable_signature_name();
  public:

  // .google.protobuf.Int64Value version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& version() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int64Value* release_version();
  ::PROTOBUF_NAMESPACE_ID::Int64Value* mutable_version();
  void set_allocated_version(::PROTOBUF_NAMESPACE_ID::Int64Value* version);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& _internal_version() const;
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::PROTOBUF_NAMESPACE_ID::Int64Value* version);
  ::PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_version();

  // string version_label = 4;
  bool has_version_label() const;
  private:
  bool _internal_has_version_label() const;
  public:
  void clear_version_label();
  const std::string& version_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_label();
  PROTOBUF_NODISCARD std::string* release_version_label();
  void set_allocated_version_label(std::string* version_label);
  private:
  const std::string& _internal_version_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_label(const std::string& value);
  std::string* _internal_mutable_version_label();
  public:

  void clear_version_choice();
  VersionChoiceCase version_choice_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelSpec)
 private:
  class _Internal;
  void set_has_version();
  void set_has_version_label();

  inline bool has_version_choice() const;
  inline void clear_has_version_choice();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_name_;
    union VersionChoiceUnion {
      constexpr VersionChoiceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::Int64Value* version_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_label_;
    } version_choice_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelSpec

// string name = 1;
inline void ModelSpec::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ModelSpec::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelSpec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelSpec::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelSpec.name)
}
inline std::string* ModelSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelSpec.name)
  return _s;
}
inline const std::string& ModelSpec::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModelSpec::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelSpec::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelSpec::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelSpec.name)
  return _impl_.name_.Release();
}
inline void ModelSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelSpec.name)
}

// .google.protobuf.Int64Value version = 2;
inline bool ModelSpec::_internal_has_version() const {
  return version_choice_case() == kVersion;
}
inline bool ModelSpec::has_version() const {
  return _internal_has_version();
}
inline void ModelSpec::set_has_version() {
  _impl_._oneof_case_[0] = kVersion;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* ModelSpec::release_version() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelSpec.version)
  if (_internal_has_version()) {
    clear_has_version_choice();
    ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = _impl_.version_choice_.version_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.version_choice_.version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& ModelSpec::_internal_version() const {
  return _internal_has_version()
      ? *_impl_.version_choice_.version_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Int64Value&>(::PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& ModelSpec::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelSpec.version)
  return _internal_version();
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* ModelSpec::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelSpec.version)
  if (_internal_has_version()) {
    clear_has_version_choice();
    ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = _impl_.version_choice_.version_;
    _impl_.version_choice_.version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModelSpec::unsafe_arena_set_allocated_version(::PROTOBUF_NAMESPACE_ID::Int64Value* version) {
  clear_version_choice();
  if (version) {
    set_has_version();
    _impl_.version_choice_.version_ = version;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelSpec.version)
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* ModelSpec::_internal_mutable_version() {
  if (!_internal_has_version()) {
    clear_version_choice();
    set_has_version();
    _impl_.version_choice_.version_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Int64Value >(GetArenaForAllocation());
  }
  return _impl_.version_choice_.version_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* ModelSpec::mutable_version() {
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelSpec.version)
  return _msg;
}

// string version_label = 4;
inline bool ModelSpec::_internal_has_version_label() const {
  return version_choice_case() == kVersionLabel;
}
inline bool ModelSpec::has_version_label() const {
  return _internal_has_version_label();
}
inline void ModelSpec::set_has_version_label() {
  _impl_._oneof_case_[0] = kVersionLabel;
}
inline void ModelSpec::clear_version_label() {
  if (_internal_has_version_label()) {
    _impl_.version_choice_.version_label_.Destroy();
    clear_has_version_choice();
  }
}
inline const std::string& ModelSpec::version_label() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelSpec.version_label)
  return _internal_version_label();
}
template <typename ArgT0, typename... ArgT>
inline void ModelSpec::set_version_label(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_version_label()) {
    clear_version_choice();
    set_has_version_label();
    _impl_.version_choice_.version_label_.InitDefault();
  }
  _impl_.version_choice_.version_label_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelSpec.version_label)
}
inline std::string* ModelSpec::mutable_version_label() {
  std::string* _s = _internal_mutable_version_label();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelSpec.version_label)
  return _s;
}
inline const std::string& ModelSpec::_internal_version_label() const {
  if (_internal_has_version_label()) {
    return _impl_.version_choice_.version_label_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ModelSpec::_internal_set_version_label(const std::string& value) {
  if (!_internal_has_version_label()) {
    clear_version_choice();
    set_has_version_label();
    _impl_.version_choice_.version_label_.InitDefault();
  }
  _impl_.version_choice_.version_label_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelSpec::_internal_mutable_version_label() {
  if (!_internal_has_version_label()) {
    clear_version_choice();
    set_has_version_label();
    _impl_.version_choice_.version_label_.InitDefault();
  }
  return _impl_.version_choice_.version_label_.Mutable(      GetArenaForAllocation());
}
inline std::string* ModelSpec::release_version_label() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelSpec.version_label)
  if (_internal_has_version_label()) {
    clear_has_version_choice();
    return _impl_.version_choice_.version_label_.Release();
  } else {
    return nullptr;
  }
}
inline void ModelSpec::set_allocated_version_label(std::string* version_label) {
  if (has_version_choice()) {
    clear_version_choice();
  }
  if (version_label != nullptr) {
    set_has_version_label();
    _impl_.version_choice_.version_label_.InitAllocated(version_label, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelSpec.version_label)
}

// string signature_name = 3;
inline void ModelSpec::clear_signature_name() {
  _impl_.signature_name_.ClearToEmpty();
}
inline const std::string& ModelSpec::signature_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelSpec.signature_name)
  return _internal_signature_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelSpec::set_signature_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelSpec.signature_name)
}
inline std::string* ModelSpec::mutable_signature_name() {
  std::string* _s = _internal_mutable_signature_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelSpec.signature_name)
  return _s;
}
inline const std::string& ModelSpec::_internal_signature_name() const {
  return _impl_.signature_name_.Get();
}
inline void ModelSpec::_internal_set_signature_name(const std::string& value) {
  
  _impl_.signature_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelSpec::_internal_mutable_signature_name() {
  
  return _impl_.signature_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelSpec::release_signature_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelSpec.signature_name)
  return _impl_.signature_name_.Release();
}
inline void ModelSpec::set_allocated_signature_name(std::string* signature_name) {
  if (signature_name != nullptr) {
    
  } else {
    
  }
  _impl_.signature_name_.SetAllocated(signature_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_name_.IsDefault()) {
    _impl_.signature_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelSpec.signature_name)
}

inline bool ModelSpec::has_version_choice() const {
  return version_choice_case() != VERSION_CHOICE_NOT_SET;
}
inline void ModelSpec::clear_has_version_choice() {
  _impl_._oneof_case_[0] = VERSION_CHOICE_NOT_SET;
}
inline ModelSpec::VersionChoiceCase ModelSpec::version_choice_case() const {
  return ModelSpec::VersionChoiceCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fmodel_2eproto
