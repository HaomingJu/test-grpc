// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/model_management.proto

#include "tensorflow_serving/apis/model_management.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace serving {
PROTOBUF_CONSTEXPR ReloadConfigRequest::ReloadConfigRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metric_names_)*/{}
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReloadConfigRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReloadConfigRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReloadConfigRequestDefaultTypeInternal() {}
  union {
    ReloadConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReloadConfigRequestDefaultTypeInternal _ReloadConfigRequest_default_instance_;
PROTOBUF_CONSTEXPR ReloadConfigResponse::ReloadConfigResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metric_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReloadConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReloadConfigResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReloadConfigResponseDefaultTypeInternal() {}
  union {
    ReloadConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReloadConfigResponseDefaultTypeInternal _ReloadConfigResponse_default_instance_;
PROTOBUF_CONSTEXPR Metric::Metric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_increase_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ReloadConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ReloadConfigRequest, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ReloadConfigRequest, _impl_.metric_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ReloadConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ReloadConfigResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ReloadConfigResponse, _impl_.metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Metric, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Metric, _impl_.name_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Metric, _impl_.value_increase_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::serving::ReloadConfigRequest)},
  { 8, -1, -1, sizeof(::tensorflow::serving::ReloadConfigResponse)},
  { 16, -1, -1, sizeof(::tensorflow::serving::Metric)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::serving::_ReloadConfigRequest_default_instance_._instance,
  &::tensorflow::serving::_ReloadConfigResponse_default_instance_._instance,
  &::tensorflow::serving::_Metric_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.tensorflow_serving/apis/model_manageme"
  "nt.proto\022\022tensorflow.serving\032$tensorflow"
  "_serving/apis/status.proto\0323tensorflow_s"
  "erving/config/model_server_config.proto\""
  "b\n\023ReloadConfigRequest\0225\n\006config\030\001 \001(\0132%"
  ".tensorflow.serving.ModelServerConfig\022\024\n"
  "\014metric_names\030\002 \003(\t\"s\n\024ReloadConfigRespo"
  "nse\022/\n\006status\030\001 \001(\0132\037.tensorflow.serving"
  ".StatusProto\022*\n\006metric\030\002 \003(\0132\032.tensorflo"
  "w.serving.Metric\"H\n\006Metric\022\014\n\004name\030\001 \001(\t"
  "\022\036\n\024int64_value_increase\030\002 \001(\003H\000B\020\n\016valu"
  "e_increaseB\003\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_5fserving_2fapis_2fstatus_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto = {
    false, false, 463, descriptor_table_protodef_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto,
    "tensorflow_serving/apis/model_management.proto",
    &descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_once, descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto::offsets,
    file_level_metadata_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto, file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto,
    file_level_service_descriptors_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_getter() {
  return &descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto(&descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto);
namespace tensorflow {
namespace serving {

// ===================================================================

class ReloadConfigRequest::_Internal {
 public:
  static const ::tensorflow::serving::ModelServerConfig& config(const ReloadConfigRequest* msg);
};

const ::tensorflow::serving::ModelServerConfig&
ReloadConfigRequest::_Internal::config(const ReloadConfigRequest* msg) {
  return *msg->_impl_.config_;
}
void ReloadConfigRequest::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
ReloadConfigRequest::ReloadConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ReloadConfigRequest)
}
ReloadConfigRequest::ReloadConfigRequest(const ReloadConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReloadConfigRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_names_){from._impl_.metric_names_}
    , decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::tensorflow::serving::ModelServerConfig(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ReloadConfigRequest)
}

inline void ReloadConfigRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_names_){arena}
    , decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReloadConfigRequest::~ReloadConfigRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ReloadConfigRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReloadConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metric_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.config_;
}

void ReloadConfigRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReloadConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ReloadConfigRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metric_names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReloadConfigRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.serving.ModelServerConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string metric_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metric_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.ReloadConfigRequest.metric_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReloadConfigRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ReloadConfigRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ModelServerConfig config = 1;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // repeated string metric_names = 2;
  for (int i = 0, n = this->_internal_metric_names_size(); i < n; i++) {
    const auto& s = this->_internal_metric_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ReloadConfigRequest.metric_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ReloadConfigRequest)
  return target;
}

size_t ReloadConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ReloadConfigRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metric_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.metric_names_.size());
  for (int i = 0, n = _impl_.metric_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.metric_names_.Get(i));
  }

  // .tensorflow.serving.ModelServerConfig config = 1;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReloadConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReloadConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReloadConfigRequest::GetClassData() const { return &_class_data_; }


void ReloadConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReloadConfigRequest*>(&to_msg);
  auto& from = static_cast<const ReloadConfigRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ReloadConfigRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metric_names_.MergeFrom(from._impl_.metric_names_);
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::tensorflow::serving::ModelServerConfig::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReloadConfigRequest::CopyFrom(const ReloadConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ReloadConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReloadConfigRequest::IsInitialized() const {
  return true;
}

void ReloadConfigRequest::InternalSwap(ReloadConfigRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metric_names_.InternalSwap(&other->_impl_.metric_names_);
  swap(_impl_.config_, other->_impl_.config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReloadConfigRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto[0]);
}

// ===================================================================

class ReloadConfigResponse::_Internal {
 public:
  static const ::tensorflow::serving::StatusProto& status(const ReloadConfigResponse* msg);
};

const ::tensorflow::serving::StatusProto&
ReloadConfigResponse::_Internal::status(const ReloadConfigResponse* msg) {
  return *msg->_impl_.status_;
}
void ReloadConfigResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ReloadConfigResponse::ReloadConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ReloadConfigResponse)
}
ReloadConfigResponse::ReloadConfigResponse(const ReloadConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReloadConfigResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_){from._impl_.metric_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::tensorflow::serving::StatusProto(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ReloadConfigResponse)
}

inline void ReloadConfigResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReloadConfigResponse::~ReloadConfigResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ReloadConfigResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReloadConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metric_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ReloadConfigResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReloadConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ReloadConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metric_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReloadConfigResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.serving.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.serving.Metric metric = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReloadConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ReloadConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.StatusProto status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.serving.Metric metric = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metric_size()); i < n; i++) {
    const auto& repfield = this->_internal_metric(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ReloadConfigResponse)
  return target;
}

size_t ReloadConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ReloadConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.serving.Metric metric = 2;
  total_size += 1UL * this->_internal_metric_size();
  for (const auto& msg : this->_impl_.metric_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.serving.StatusProto status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReloadConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReloadConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReloadConfigResponse::GetClassData() const { return &_class_data_; }


void ReloadConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReloadConfigResponse*>(&to_msg);
  auto& from = static_cast<const ReloadConfigResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ReloadConfigResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metric_.MergeFrom(from._impl_.metric_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::tensorflow::serving::StatusProto::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReloadConfigResponse::CopyFrom(const ReloadConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ReloadConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReloadConfigResponse::IsInitialized() const {
  return true;
}

void ReloadConfigResponse::InternalSwap(ReloadConfigResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metric_.InternalSwap(&other->_impl_.metric_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReloadConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto[1]);
}

// ===================================================================

class Metric::_Internal {
 public:
};

Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_increase_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  clear_has_value_increase();
  switch (from.value_increase_case()) {
    case kInt64ValueIncrease: {
      _this->_internal_set_int64_value_increase(from._internal_int64_value_increase());
      break;
    }
    case VALUE_INCREASE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.Metric)
}

inline void Metric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_increase_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value_increase();
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_value_increase()) {
    clear_value_increase();
  }
}

void Metric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metric::clear_value_increase() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.Metric)
  switch (value_increase_case()) {
    case kInt64ValueIncrease: {
      // No need to clear
      break;
    }
    case VALUE_INCREASE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_INCREASE_NOT_SET;
}


void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  clear_value_increase();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.Metric.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 int64_value_increase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int64_value_increase(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.Metric.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 int64_value_increase = 2;
  if (_internal_has_int64_value_increase()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_int64_value_increase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (value_increase_case()) {
    // int64 int64_value_increase = 2;
    case kInt64ValueIncrease: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value_increase());
      break;
    }
    case VALUE_INCREASE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metric::GetClassData() const { return &_class_data_; }


void Metric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metric*>(&to_msg);
  auto& from = static_cast<const Metric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.Metric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.value_increase_case()) {
    case kInt64ValueIncrease: {
      _this->_internal_set_int64_value_increase(from._internal_int64_value_increase());
      break;
    }
    case VALUE_INCREASE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.value_increase_, other->_impl_.value_increase_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ReloadConfigRequest*
Arena::CreateMaybeMessage< ::tensorflow::serving::ReloadConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ReloadConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ReloadConfigResponse*
Arena::CreateMaybeMessage< ::tensorflow::serving::ReloadConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ReloadConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::Metric*
Arena::CreateMaybeMessage< ::tensorflow::serving::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::Metric >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
