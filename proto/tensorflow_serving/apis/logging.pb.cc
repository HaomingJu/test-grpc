// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/logging.proto

#include "tensorflow_serving/apis/logging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace serving {
PROTOBUF_CONSTEXPR LogMetadata::LogMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.saved_model_tags_)*/{}
  , /*decltype(_impl_.dc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_origin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_criticality_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_spec_)*/nullptr
  , /*decltype(_impl_.sampling_config_)*/nullptr
  , /*decltype(_impl_.timestamp_secs_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogMetadataDefaultTypeInternal() {}
  union {
    LogMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogMetadataDefaultTypeInternal _LogMetadata_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_5fserving_2fapis_2flogging_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fapis_2flogging_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fapis_2flogging_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_5fserving_2fapis_2flogging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LogMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LogMetadata, _impl_.model_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LogMetadata, _impl_.sampling_config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LogMetadata, _impl_.saved_model_tags_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LogMetadata, _impl_.timestamp_secs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LogMetadata, _impl_.dc_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LogMetadata, _impl_.request_origin_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LogMetadata, _impl_.request_criticality_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::serving::LogMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::serving::_LogMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_5fserving_2fapis_2flogging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%tensorflow_serving/apis/logging.proto\022"
  "\022tensorflow.serving\032#tensorflow_serving/"
  "apis/model.proto\032.tensorflow_serving/con"
  "fig/logging_config.proto\"\360\001\n\013LogMetadata"
  "\0221\n\nmodel_spec\030\001 \001(\0132\035.tensorflow.servin"
  "g.ModelSpec\022;\n\017sampling_config\030\002 \001(\0132\".t"
  "ensorflow.serving.SamplingConfig\022\030\n\020save"
  "d_model_tags\030\003 \003(\t\022\026\n\016timestamp_secs\030\004 \001"
  "(\003\022\n\n\002dc\030\005 \001(\t\022\026\n\016request_origin\030\006 \001(\t\022\033"
  "\n\023request_criticality\030\007 \001(\tB\003\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_5fserving_2fapis_2fmodel_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto = {
    false, false, 400, descriptor_table_protodef_tensorflow_5fserving_2fapis_2flogging_2eproto,
    "tensorflow_serving/apis/logging.proto",
    &descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto_once, descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fapis_2flogging_2eproto::offsets,
    file_level_metadata_tensorflow_5fserving_2fapis_2flogging_2eproto, file_level_enum_descriptors_tensorflow_5fserving_2fapis_2flogging_2eproto,
    file_level_service_descriptors_tensorflow_5fserving_2fapis_2flogging_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto_getter() {
  return &descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5fserving_2fapis_2flogging_2eproto(&descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto);
namespace tensorflow {
namespace serving {

// ===================================================================

class LogMetadata::_Internal {
 public:
  static const ::tensorflow::serving::ModelSpec& model_spec(const LogMetadata* msg);
  static const ::tensorflow::serving::SamplingConfig& sampling_config(const LogMetadata* msg);
};

const ::tensorflow::serving::ModelSpec&
LogMetadata::_Internal::model_spec(const LogMetadata* msg) {
  return *msg->_impl_.model_spec_;
}
const ::tensorflow::serving::SamplingConfig&
LogMetadata::_Internal::sampling_config(const LogMetadata* msg) {
  return *msg->_impl_.sampling_config_;
}
void LogMetadata::clear_model_spec() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_spec_ != nullptr) {
    delete _impl_.model_spec_;
  }
  _impl_.model_spec_ = nullptr;
}
void LogMetadata::clear_sampling_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.sampling_config_ != nullptr) {
    delete _impl_.sampling_config_;
  }
  _impl_.sampling_config_ = nullptr;
}
LogMetadata::LogMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.LogMetadata)
}
LogMetadata::LogMetadata(const LogMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.saved_model_tags_){from._impl_.saved_model_tags_}
    , decltype(_impl_.dc_){}
    , decltype(_impl_.request_origin_){}
    , decltype(_impl_.request_criticality_){}
    , decltype(_impl_.model_spec_){nullptr}
    , decltype(_impl_.sampling_config_){nullptr}
    , decltype(_impl_.timestamp_secs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dc().empty()) {
    _this->_impl_.dc_.Set(from._internal_dc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_origin().empty()) {
    _this->_impl_.request_origin_.Set(from._internal_request_origin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_criticality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_criticality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_criticality().empty()) {
    _this->_impl_.request_criticality_.Set(from._internal_request_criticality(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_model_spec()) {
    _this->_impl_.model_spec_ = new ::tensorflow::serving::ModelSpec(*from._impl_.model_spec_);
  }
  if (from._internal_has_sampling_config()) {
    _this->_impl_.sampling_config_ = new ::tensorflow::serving::SamplingConfig(*from._impl_.sampling_config_);
  }
  _this->_impl_.timestamp_secs_ = from._impl_.timestamp_secs_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.LogMetadata)
}

inline void LogMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.saved_model_tags_){arena}
    , decltype(_impl_.dc_){}
    , decltype(_impl_.request_origin_){}
    , decltype(_impl_.request_criticality_){}
    , decltype(_impl_.model_spec_){nullptr}
    , decltype(_impl_.sampling_config_){nullptr}
    , decltype(_impl_.timestamp_secs_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_criticality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_criticality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogMetadata::~LogMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.LogMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.saved_model_tags_.~RepeatedPtrField();
  _impl_.dc_.Destroy();
  _impl_.request_origin_.Destroy();
  _impl_.request_criticality_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_spec_;
  if (this != internal_default_instance()) delete _impl_.sampling_config_;
}

void LogMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.LogMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.saved_model_tags_.Clear();
  _impl_.dc_.ClearToEmpty();
  _impl_.request_origin_.ClearToEmpty();
  _impl_.request_criticality_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.model_spec_ != nullptr) {
    delete _impl_.model_spec_;
  }
  _impl_.model_spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sampling_config_ != nullptr) {
    delete _impl_.sampling_config_;
  }
  _impl_.sampling_config_ = nullptr;
  _impl_.timestamp_secs_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.SamplingConfig sampling_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampling_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string saved_model_tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_saved_model_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.LogMetadata.saved_model_tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_secs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.LogMetadata.dc"));
        } else
          goto handle_unusual;
        continue;
      // string request_origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_request_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.LogMetadata.request_origin"));
        } else
          goto handle_unusual;
        continue;
      // string request_criticality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_request_criticality();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.LogMetadata.request_criticality"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.LogMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->_internal_has_model_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_spec(this),
        _Internal::model_spec(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.serving.SamplingConfig sampling_config = 2;
  if (this->_internal_has_sampling_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sampling_config(this),
        _Internal::sampling_config(this).GetCachedSize(), target, stream);
  }

  // repeated string saved_model_tags = 3;
  for (int i = 0, n = this->_internal_saved_model_tags_size(); i < n; i++) {
    const auto& s = this->_internal_saved_model_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.LogMetadata.saved_model_tags");
    target = stream->WriteString(3, s, target);
  }

  // int64 timestamp_secs = 4;
  if (this->_internal_timestamp_secs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp_secs(), target);
  }

  // string dc = 5;
  if (!this->_internal_dc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dc().data(), static_cast<int>(this->_internal_dc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.LogMetadata.dc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dc(), target);
  }

  // string request_origin = 6;
  if (!this->_internal_request_origin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_origin().data(), static_cast<int>(this->_internal_request_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.LogMetadata.request_origin");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_request_origin(), target);
  }

  // string request_criticality = 7;
  if (!this->_internal_request_criticality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_criticality().data(), static_cast<int>(this->_internal_request_criticality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.LogMetadata.request_criticality");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_request_criticality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.LogMetadata)
  return target;
}

size_t LogMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.LogMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string saved_model_tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.saved_model_tags_.size());
  for (int i = 0, n = _impl_.saved_model_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.saved_model_tags_.Get(i));
  }

  // string dc = 5;
  if (!this->_internal_dc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dc());
  }

  // string request_origin = 6;
  if (!this->_internal_request_origin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_origin());
  }

  // string request_criticality = 7;
  if (!this->_internal_request_criticality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_criticality());
  }

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->_internal_has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_spec_);
  }

  // .tensorflow.serving.SamplingConfig sampling_config = 2;
  if (this->_internal_has_sampling_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sampling_config_);
  }

  // int64 timestamp_secs = 4;
  if (this->_internal_timestamp_secs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_secs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogMetadata::GetClassData() const { return &_class_data_; }


void LogMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogMetadata*>(&to_msg);
  auto& from = static_cast<const LogMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.LogMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.saved_model_tags_.MergeFrom(from._impl_.saved_model_tags_);
  if (!from._internal_dc().empty()) {
    _this->_internal_set_dc(from._internal_dc());
  }
  if (!from._internal_request_origin().empty()) {
    _this->_internal_set_request_origin(from._internal_request_origin());
  }
  if (!from._internal_request_criticality().empty()) {
    _this->_internal_set_request_criticality(from._internal_request_criticality());
  }
  if (from._internal_has_model_spec()) {
    _this->_internal_mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(
        from._internal_model_spec());
  }
  if (from._internal_has_sampling_config()) {
    _this->_internal_mutable_sampling_config()->::tensorflow::serving::SamplingConfig::MergeFrom(
        from._internal_sampling_config());
  }
  if (from._internal_timestamp_secs() != 0) {
    _this->_internal_set_timestamp_secs(from._internal_timestamp_secs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogMetadata::CopyFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.LogMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetadata::IsInitialized() const {
  return true;
}

void LogMetadata::InternalSwap(LogMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.saved_model_tags_.InternalSwap(&other->_impl_.saved_model_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dc_, lhs_arena,
      &other->_impl_.dc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_origin_, lhs_arena,
      &other->_impl_.request_origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_criticality_, lhs_arena,
      &other->_impl_.request_criticality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogMetadata, _impl_.timestamp_secs_)
      + sizeof(LogMetadata::_impl_.timestamp_secs_)
      - PROTOBUF_FIELD_OFFSET(LogMetadata, _impl_.model_spec_)>(
          reinterpret_cast<char*>(&_impl_.model_spec_),
          reinterpret_cast<char*>(&other->_impl_.model_spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fapis_2flogging_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fapis_2flogging_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::LogMetadata*
Arena::CreateMaybeMessage< ::tensorflow::serving::LogMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::LogMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
