// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/model_server_config.proto

#include "tensorflow_serving/config/model_server_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace serving {
PROTOBUF_CONSTEXPR ModelConfig_VersionLabelsEntry_DoNotUse::ModelConfig_VersionLabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ModelConfig_VersionLabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal _ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ModelConfig::ModelConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_platform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logging_config_)*/nullptr
  , /*decltype(_impl_.model_version_policy_)*/nullptr
  , /*decltype(_impl_.model_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelConfigDefaultTypeInternal() {}
  union {
    ModelConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelConfigDefaultTypeInternal _ModelConfig_default_instance_;
PROTOBUF_CONSTEXPR ModelConfigList::ModelConfigList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.config_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelConfigListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelConfigListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelConfigListDefaultTypeInternal() {}
  union {
    ModelConfigList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelConfigListDefaultTypeInternal _ModelConfigList_default_instance_;
PROTOBUF_CONSTEXPR ModelServerConfig::ModelServerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.config_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ModelServerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelServerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelServerConfigDefaultTypeInternal() {}
  union {
    ModelServerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelServerConfigDefaultTypeInternal _ModelServerConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _impl_.base_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _impl_.model_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _impl_.model_platform_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _impl_.model_version_policy_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _impl_.version_labels_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _impl_.logging_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfigList, _impl_.config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelServerConfig, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelServerConfig, _impl_.config_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::tensorflow::serving::ModelConfig)},
  { 23, -1, -1, sizeof(::tensorflow::serving::ModelConfigList)},
  { 30, -1, -1, sizeof(::tensorflow::serving::ModelServerConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::serving::_ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::serving::_ModelConfig_default_instance_._instance,
  &::tensorflow::serving::_ModelConfigList_default_instance_._instance,
  &::tensorflow::serving::_ModelServerConfig_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3tensorflow_serving/config/model_server"
  "_config.proto\022\022tensorflow.serving\032\031googl"
  "e/protobuf/any.proto\032\?tensorflow_serving"
  "/config/file_system_storage_path_source."
  "proto\032.tensorflow_serving/config/logging"
  "_config.proto\"\261\003\n\013ModelConfig\022\014\n\004name\030\001 "
  "\001(\t\022\021\n\tbase_path\030\002 \001(\t\0225\n\nmodel_type\030\003 \001"
  "(\0162\035.tensorflow.serving.ModelTypeB\002\030\001\022\026\n"
  "\016model_platform\030\004 \001(\t\022i\n\024model_version_p"
  "olicy\030\007 \001(\0132K.tensorflow.serving.FileSys"
  "temStoragePathSourceConfig.ServableVersi"
  "onPolicy\022J\n\016version_labels\030\010 \003(\01322.tenso"
  "rflow.serving.ModelConfig.VersionLabelsE"
  "ntry\0229\n\016logging_config\030\006 \001(\0132!.tensorflo"
  "w.serving.LoggingConfig\0324\n\022VersionLabels"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001J\004\010"
  "\005\020\006J\004\010\t\020\n\"B\n\017ModelConfigList\022/\n\006config\030\001"
  " \003(\0132\037.tensorflow.serving.ModelConfig\"\224\001"
  "\n\021ModelServerConfig\022@\n\021model_config_list"
  "\030\001 \001(\0132#.tensorflow.serving.ModelConfigL"
  "istH\000\0223\n\023custom_model_config\030\002 \001(\0132\024.goo"
  "gle.protobuf.AnyH\000B\010\n\006config*N\n\tModelTyp"
  "e\022\036\n\026MODEL_TYPE_UNSPECIFIED\020\000\032\002\010\001\022\022\n\nTEN"
  "SORFLOW\020\001\032\002\010\001\022\r\n\005OTHER\020\002\032\002\010\001B\003\370\001\001b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto = {
    false, false, 961, descriptor_table_protodef_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto,
    "tensorflow_serving/config/model_server_config.proto",
    &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_once, descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto::offsets,
    file_level_metadata_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto, file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto,
    file_level_service_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_getter() {
  return &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto(&descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto);
namespace tensorflow {
namespace serving {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[0];
}
bool ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ModelConfig_VersionLabelsEntry_DoNotUse::ModelConfig_VersionLabelsEntry_DoNotUse() {}
ModelConfig_VersionLabelsEntry_DoNotUse::ModelConfig_VersionLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelConfig_VersionLabelsEntry_DoNotUse::MergeFrom(const ModelConfig_VersionLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig_VersionLabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[0]);
}

// ===================================================================

class ModelConfig::_Internal {
 public:
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& model_version_policy(const ModelConfig* msg);
  static const ::tensorflow::serving::LoggingConfig& logging_config(const ModelConfig* msg);
};

const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy&
ModelConfig::_Internal::model_version_policy(const ModelConfig* msg) {
  return *msg->_impl_.model_version_policy_;
}
const ::tensorflow::serving::LoggingConfig&
ModelConfig::_Internal::logging_config(const ModelConfig* msg) {
  return *msg->_impl_.logging_config_;
}
void ModelConfig::clear_model_version_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_version_policy_ != nullptr) {
    delete _impl_.model_version_policy_;
  }
  _impl_.model_version_policy_ = nullptr;
}
void ModelConfig::clear_logging_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.logging_config_ != nullptr) {
    delete _impl_.logging_config_;
  }
  _impl_.logging_config_ = nullptr;
}
ModelConfig::ModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ModelConfig::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ModelConfig)
}
ModelConfig::ModelConfig(const ModelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.version_labels_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.base_path_){}
    , decltype(_impl_.model_platform_){}
    , decltype(_impl_.logging_config_){nullptr}
    , decltype(_impl_.model_version_policy_){nullptr}
    , decltype(_impl_.model_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_labels_.MergeFrom(from._impl_.version_labels_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_path().empty()) {
    _this->_impl_.base_path_.Set(from._internal_base_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_platform().empty()) {
    _this->_impl_.model_platform_.Set(from._internal_model_platform(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_logging_config()) {
    _this->_impl_.logging_config_ = new ::tensorflow::serving::LoggingConfig(*from._impl_.logging_config_);
  }
  if (from._internal_has_model_version_policy()) {
    _this->_impl_.model_version_policy_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy(*from._impl_.model_version_policy_);
  }
  _this->_impl_.model_type_ = from._impl_.model_type_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ModelConfig)
}

inline void ModelConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.version_labels_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.base_path_){}
    , decltype(_impl_.model_platform_){}
    , decltype(_impl_.logging_config_){nullptr}
    , decltype(_impl_.model_version_policy_){nullptr}
    , decltype(_impl_.model_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelConfig::~ModelConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ModelConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ModelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_labels_.Destruct();
  _impl_.version_labels_.~MapField();
  _impl_.name_.Destroy();
  _impl_.base_path_.Destroy();
  _impl_.model_platform_.Destroy();
  if (this != internal_default_instance()) delete _impl_.logging_config_;
  if (this != internal_default_instance()) delete _impl_.model_version_policy_;
}

void ModelConfig::ArenaDtor(void* object) {
  ModelConfig* _this = reinterpret_cast< ModelConfig* >(object);
  _this->_impl_.version_labels_.Destruct();
}
void ModelConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ModelConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_labels_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.base_path_.ClearToEmpty();
  _impl_.model_platform_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.logging_config_ != nullptr) {
    delete _impl_.logging_config_;
  }
  _impl_.logging_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_version_policy_ != nullptr) {
    delete _impl_.model_version_policy_;
  }
  _impl_.model_version_policy_ = nullptr;
  _impl_.model_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.ModelConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // string base_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.ModelConfig.base_path"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model_type(static_cast<::tensorflow::serving::ModelType>(val));
        } else
          goto handle_unusual;
        continue;
      // string model_platform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_model_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.ModelConfig.model_platform"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.LoggingConfig logging_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_logging_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> version_labels = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.version_labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ModelConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string base_path = 2;
  if (!this->_internal_base_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_path().data(), static_cast<int>(this->_internal_base_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelConfig.base_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_base_path(), target);
  }

  // .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
  if (this->_internal_model_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_model_type(), target);
  }

  // string model_platform = 4;
  if (!this->_internal_model_platform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_platform().data(), static_cast<int>(this->_internal_model_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelConfig.model_platform");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_platform(), target);
  }

  // .tensorflow.serving.LoggingConfig logging_config = 6;
  if (this->_internal_has_logging_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::logging_config(this),
        _Internal::logging_config(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
  if (this->_internal_has_model_version_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::model_version_policy(this),
        _Internal::model_version_policy(this).GetCachedSize(), target, stream);
  }

  // map<string, int64> version_labels = 8;
  if (!this->_internal_version_labels().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = ModelConfig_VersionLabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_version_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.serving.ModelConfig.VersionLabelsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ModelConfig)
  return target;
}

size_t ModelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ModelConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> version_labels = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_version_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_version_labels().begin();
      it != this->_internal_version_labels().end(); ++it) {
    total_size += ModelConfig_VersionLabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string base_path = 2;
  if (!this->_internal_base_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_path());
  }

  // string model_platform = 4;
  if (!this->_internal_model_platform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_platform());
  }

  // .tensorflow.serving.LoggingConfig logging_config = 6;
  if (this->_internal_has_logging_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logging_config_);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
  if (this->_internal_has_model_version_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_version_policy_);
  }

  // .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
  if (this->_internal_model_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_model_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelConfig::GetClassData() const { return &_class_data_; }


void ModelConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelConfig*>(&to_msg);
  auto& from = static_cast<const ModelConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ModelConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_labels_.MergeFrom(from._impl_.version_labels_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_base_path().empty()) {
    _this->_internal_set_base_path(from._internal_base_path());
  }
  if (!from._internal_model_platform().empty()) {
    _this->_internal_set_model_platform(from._internal_model_platform());
  }
  if (from._internal_has_logging_config()) {
    _this->_internal_mutable_logging_config()->::tensorflow::serving::LoggingConfig::MergeFrom(
        from._internal_logging_config());
  }
  if (from._internal_has_model_version_policy()) {
    _this->_internal_mutable_model_version_policy()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(
        from._internal_model_version_policy());
  }
  if (from._internal_model_type() != 0) {
    _this->_internal_set_model_type(from._internal_model_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelConfig::CopyFrom(const ModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfig::IsInitialized() const {
  return true;
}

void ModelConfig::InternalSwap(ModelConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.version_labels_.InternalSwap(&other->_impl_.version_labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base_path_, lhs_arena,
      &other->_impl_.base_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_platform_, lhs_arena,
      &other->_impl_.model_platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelConfig, _impl_.model_type_)
      + sizeof(ModelConfig::_impl_.model_type_)
      - PROTOBUF_FIELD_OFFSET(ModelConfig, _impl_.logging_config_)>(
          reinterpret_cast<char*>(&_impl_.logging_config_),
          reinterpret_cast<char*>(&other->_impl_.logging_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[1]);
}

// ===================================================================

class ModelConfigList::_Internal {
 public:
};

ModelConfigList::ModelConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ModelConfigList)
}
ModelConfigList::ModelConfigList(const ModelConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelConfigList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){from._impl_.config_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ModelConfigList)
}

inline void ModelConfigList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModelConfigList::~ModelConfigList() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ModelConfigList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelConfigList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.config_.~RepeatedPtrField();
}

void ModelConfigList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ModelConfigList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.config_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfigList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.serving.ModelConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelConfigList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ModelConfigList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.serving.ModelConfig config = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ModelConfigList)
  return target;
}

size_t ModelConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ModelConfigList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.serving.ModelConfig config = 1;
  total_size += 1UL * this->_internal_config_size();
  for (const auto& msg : this->_impl_.config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelConfigList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelConfigList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelConfigList::GetClassData() const { return &_class_data_; }


void ModelConfigList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelConfigList*>(&to_msg);
  auto& from = static_cast<const ModelConfigList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ModelConfigList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.config_.MergeFrom(from._impl_.config_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelConfigList::CopyFrom(const ModelConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ModelConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigList::IsInitialized() const {
  return true;
}

void ModelConfigList::InternalSwap(ModelConfigList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.config_.InternalSwap(&other->_impl_.config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfigList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[2]);
}

// ===================================================================

class ModelServerConfig::_Internal {
 public:
  static const ::tensorflow::serving::ModelConfigList& model_config_list(const ModelServerConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& custom_model_config(const ModelServerConfig* msg);
};

const ::tensorflow::serving::ModelConfigList&
ModelServerConfig::_Internal::model_config_list(const ModelServerConfig* msg) {
  return *msg->_impl_.config_.model_config_list_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ModelServerConfig::_Internal::custom_model_config(const ModelServerConfig* msg) {
  return *msg->_impl_.config_.custom_model_config_;
}
void ModelServerConfig::set_allocated_model_config_list(::tensorflow::serving::ModelConfigList* model_config_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (model_config_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_config_list);
    if (message_arena != submessage_arena) {
      model_config_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_config_list, submessage_arena);
    }
    set_has_model_config_list();
    _impl_.config_.model_config_list_ = model_config_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelServerConfig.model_config_list)
}
void ModelServerConfig::set_allocated_custom_model_config(::PROTOBUF_NAMESPACE_ID::Any* custom_model_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (custom_model_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_model_config));
    if (message_arena != submessage_arena) {
      custom_model_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_model_config, submessage_arena);
    }
    set_has_custom_model_config();
    _impl_.config_.custom_model_config_ = custom_model_config;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelServerConfig.custom_model_config)
}
void ModelServerConfig::clear_custom_model_config() {
  if (_internal_has_custom_model_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.config_.custom_model_config_;
    }
    clear_has_config();
  }
}
ModelServerConfig::ModelServerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ModelServerConfig)
}
ModelServerConfig::ModelServerConfig(const ModelServerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelServerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_config();
  switch (from.config_case()) {
    case kModelConfigList: {
      _this->_internal_mutable_model_config_list()->::tensorflow::serving::ModelConfigList::MergeFrom(
          from._internal_model_config_list());
      break;
    }
    case kCustomModelConfig: {
      _this->_internal_mutable_custom_model_config()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_custom_model_config());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ModelServerConfig)
}

inline void ModelServerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_config();
}

ModelServerConfig::~ModelServerConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ModelServerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelServerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_config()) {
    clear_config();
  }
}

void ModelServerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelServerConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.ModelServerConfig)
  switch (config_case()) {
    case kModelConfigList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.model_config_list_;
      }
      break;
    }
    case kCustomModelConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.custom_model_config_;
      }
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONFIG_NOT_SET;
}


void ModelServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ModelServerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_config();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelServerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.serving.ModelConfigList model_config_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_config_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any custom_model_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_model_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelServerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ModelServerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ModelConfigList model_config_list = 1;
  if (_internal_has_model_config_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_config_list(this),
        _Internal::model_config_list(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any custom_model_config = 2;
  if (_internal_has_custom_model_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::custom_model_config(this),
        _Internal::custom_model_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ModelServerConfig)
  return target;
}

size_t ModelServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ModelServerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (config_case()) {
    // .tensorflow.serving.ModelConfigList model_config_list = 1;
    case kModelConfigList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.model_config_list_);
      break;
    }
    // .google.protobuf.Any custom_model_config = 2;
    case kCustomModelConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.custom_model_config_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelServerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelServerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelServerConfig::GetClassData() const { return &_class_data_; }


void ModelServerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelServerConfig*>(&to_msg);
  auto& from = static_cast<const ModelServerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ModelServerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.config_case()) {
    case kModelConfigList: {
      _this->_internal_mutable_model_config_list()->::tensorflow::serving::ModelConfigList::MergeFrom(
          from._internal_model_config_list());
      break;
    }
    case kCustomModelConfig: {
      _this->_internal_mutable_custom_model_config()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_custom_model_config());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelServerConfig::CopyFrom(const ModelServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ModelServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelServerConfig::IsInitialized() const {
  return true;
}

void ModelServerConfig::InternalSwap(ModelServerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.config_, other->_impl_.config_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelServerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ModelConfig*
Arena::CreateMaybeMessage< ::tensorflow::serving::ModelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ModelConfigList*
Arena::CreateMaybeMessage< ::tensorflow::serving::ModelConfigList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ModelServerConfig*
Arena::CreateMaybeMessage< ::tensorflow::serving::ModelServerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelServerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
