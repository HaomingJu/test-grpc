// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/logging_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/config/log_collector_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class LoggingConfig;
struct LoggingConfigDefaultTypeInternal;
extern LoggingConfigDefaultTypeInternal _LoggingConfig_default_instance_;
class SamplingConfig;
struct SamplingConfigDefaultTypeInternal;
extern SamplingConfigDefaultTypeInternal _SamplingConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::LoggingConfig* Arena::CreateMaybeMessage<::tensorflow::serving::LoggingConfig>(Arena*);
template<> ::tensorflow::serving::SamplingConfig* Arena::CreateMaybeMessage<::tensorflow::serving::SamplingConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

enum SamplingConfig_Attributes : int {
  SamplingConfig_Attributes_ATTR_DEFAULT = 0,
  SamplingConfig_Attributes_ATTR_REQUEST_ORIGIN = 1,
  SamplingConfig_Attributes_ATTR_REQUEST_CRITICALITY = 2,
  SamplingConfig_Attributes_SamplingConfig_Attributes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SamplingConfig_Attributes_SamplingConfig_Attributes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SamplingConfig_Attributes_IsValid(int value);
constexpr SamplingConfig_Attributes SamplingConfig_Attributes_Attributes_MIN = SamplingConfig_Attributes_ATTR_DEFAULT;
constexpr SamplingConfig_Attributes SamplingConfig_Attributes_Attributes_MAX = SamplingConfig_Attributes_ATTR_REQUEST_CRITICALITY;
constexpr int SamplingConfig_Attributes_Attributes_ARRAYSIZE = SamplingConfig_Attributes_Attributes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamplingConfig_Attributes_descriptor();
template<typename T>
inline const std::string& SamplingConfig_Attributes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SamplingConfig_Attributes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SamplingConfig_Attributes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SamplingConfig_Attributes_descriptor(), enum_t_value);
}
inline bool SamplingConfig_Attributes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SamplingConfig_Attributes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SamplingConfig_Attributes>(
    SamplingConfig_Attributes_descriptor(), name, value);
}
// ===================================================================

class SamplingConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SamplingConfig) */ {
 public:
  inline SamplingConfig() : SamplingConfig(nullptr) {}
  ~SamplingConfig() override;
  explicit PROTOBUF_CONSTEXPR SamplingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SamplingConfig(const SamplingConfig& from);
  SamplingConfig(SamplingConfig&& from) noexcept
    : SamplingConfig() {
    *this = ::std::move(from);
  }

  inline SamplingConfig& operator=(const SamplingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplingConfig& operator=(SamplingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SamplingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SamplingConfig* internal_default_instance() {
    return reinterpret_cast<const SamplingConfig*>(
               &_SamplingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SamplingConfig& a, SamplingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplingConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamplingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SamplingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SamplingConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SamplingConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SamplingConfig& from) {
    SamplingConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplingConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.SamplingConfig";
  }
  protected:
  explicit SamplingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SamplingConfig_Attributes Attributes;
  static constexpr Attributes ATTR_DEFAULT =
    SamplingConfig_Attributes_ATTR_DEFAULT;
  static constexpr Attributes ATTR_REQUEST_ORIGIN =
    SamplingConfig_Attributes_ATTR_REQUEST_ORIGIN;
  static constexpr Attributes ATTR_REQUEST_CRITICALITY =
    SamplingConfig_Attributes_ATTR_REQUEST_CRITICALITY;
  static inline bool Attributes_IsValid(int value) {
    return SamplingConfig_Attributes_IsValid(value);
  }
  static constexpr Attributes Attributes_MIN =
    SamplingConfig_Attributes_Attributes_MIN;
  static constexpr Attributes Attributes_MAX =
    SamplingConfig_Attributes_Attributes_MAX;
  static constexpr int Attributes_ARRAYSIZE =
    SamplingConfig_Attributes_Attributes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Attributes_descriptor() {
    return SamplingConfig_Attributes_descriptor();
  }
  template<typename T>
  static inline const std::string& Attributes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Attributes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Attributes_Name.");
    return SamplingConfig_Attributes_Name(enum_t_value);
  }
  static inline bool Attributes_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Attributes* value) {
    return SamplingConfig_Attributes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingRateFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // double sampling_rate = 1;
  void clear_sampling_rate();
  double sampling_rate() const;
  void set_sampling_rate(double value);
  private:
  double _internal_sampling_rate() const;
  void _internal_set_sampling_rate(double value);
  public:

  // int32 attributes = 2;
  void clear_attributes();
  int32_t attributes() const;
  void set_attributes(int32_t value);
  private:
  int32_t _internal_attributes() const;
  void _internal_set_attributes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SamplingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double sampling_rate_;
    int32_t attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LoggingConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.LoggingConfig) */ {
 public:
  inline LoggingConfig() : LoggingConfig(nullptr) {}
  ~LoggingConfig() override;
  explicit PROTOBUF_CONSTEXPR LoggingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoggingConfig(const LoggingConfig& from);
  LoggingConfig(LoggingConfig&& from) noexcept
    : LoggingConfig() {
    *this = ::std::move(from);
  }

  inline LoggingConfig& operator=(const LoggingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggingConfig& operator=(LoggingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoggingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoggingConfig* internal_default_instance() {
    return reinterpret_cast<const LoggingConfig*>(
               &_LoggingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoggingConfig& a, LoggingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggingConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoggingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoggingConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoggingConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoggingConfig& from) {
    LoggingConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggingConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.LoggingConfig";
  }
  protected:
  explicit LoggingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogCollectorConfigFieldNumber = 1,
    kSamplingConfigFieldNumber = 2,
  };
  // .tensorflow.serving.LogCollectorConfig log_collector_config = 1;
  bool has_log_collector_config() const;
  private:
  bool _internal_has_log_collector_config() const;
  public:
  void clear_log_collector_config();
  const ::tensorflow::serving::LogCollectorConfig& log_collector_config() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::LogCollectorConfig* release_log_collector_config();
  ::tensorflow::serving::LogCollectorConfig* mutable_log_collector_config();
  void set_allocated_log_collector_config(::tensorflow::serving::LogCollectorConfig* log_collector_config);
  private:
  const ::tensorflow::serving::LogCollectorConfig& _internal_log_collector_config() const;
  ::tensorflow::serving::LogCollectorConfig* _internal_mutable_log_collector_config();
  public:
  void unsafe_arena_set_allocated_log_collector_config(
      ::tensorflow::serving::LogCollectorConfig* log_collector_config);
  ::tensorflow::serving::LogCollectorConfig* unsafe_arena_release_log_collector_config();

  // .tensorflow.serving.SamplingConfig sampling_config = 2;
  bool has_sampling_config() const;
  private:
  bool _internal_has_sampling_config() const;
  public:
  void clear_sampling_config();
  const ::tensorflow::serving::SamplingConfig& sampling_config() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::SamplingConfig* release_sampling_config();
  ::tensorflow::serving::SamplingConfig* mutable_sampling_config();
  void set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config);
  private:
  const ::tensorflow::serving::SamplingConfig& _internal_sampling_config() const;
  ::tensorflow::serving::SamplingConfig* _internal_mutable_sampling_config();
  public:
  void unsafe_arena_set_allocated_sampling_config(
      ::tensorflow::serving::SamplingConfig* sampling_config);
  ::tensorflow::serving::SamplingConfig* unsafe_arena_release_sampling_config();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.LoggingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tensorflow::serving::LogCollectorConfig* log_collector_config_;
    ::tensorflow::serving::SamplingConfig* sampling_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SamplingConfig

// double sampling_rate = 1;
inline void SamplingConfig::clear_sampling_rate() {
  _impl_.sampling_rate_ = 0;
}
inline double SamplingConfig::_internal_sampling_rate() const {
  return _impl_.sampling_rate_;
}
inline double SamplingConfig::sampling_rate() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SamplingConfig.sampling_rate)
  return _internal_sampling_rate();
}
inline void SamplingConfig::_internal_set_sampling_rate(double value) {
  
  _impl_.sampling_rate_ = value;
}
inline void SamplingConfig::set_sampling_rate(double value) {
  _internal_set_sampling_rate(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.SamplingConfig.sampling_rate)
}

// int32 attributes = 2;
inline void SamplingConfig::clear_attributes() {
  _impl_.attributes_ = 0;
}
inline int32_t SamplingConfig::_internal_attributes() const {
  return _impl_.attributes_;
}
inline int32_t SamplingConfig::attributes() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SamplingConfig.attributes)
  return _internal_attributes();
}
inline void SamplingConfig::_internal_set_attributes(int32_t value) {
  
  _impl_.attributes_ = value;
}
inline void SamplingConfig::set_attributes(int32_t value) {
  _internal_set_attributes(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.SamplingConfig.attributes)
}

// -------------------------------------------------------------------

// LoggingConfig

// .tensorflow.serving.LogCollectorConfig log_collector_config = 1;
inline bool LoggingConfig::_internal_has_log_collector_config() const {
  return this != internal_default_instance() && _impl_.log_collector_config_ != nullptr;
}
inline bool LoggingConfig::has_log_collector_config() const {
  return _internal_has_log_collector_config();
}
inline const ::tensorflow::serving::LogCollectorConfig& LoggingConfig::_internal_log_collector_config() const {
  const ::tensorflow::serving::LogCollectorConfig* p = _impl_.log_collector_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::LogCollectorConfig&>(
      ::tensorflow::serving::_LogCollectorConfig_default_instance_);
}
inline const ::tensorflow::serving::LogCollectorConfig& LoggingConfig::log_collector_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LoggingConfig.log_collector_config)
  return _internal_log_collector_config();
}
inline void LoggingConfig::unsafe_arena_set_allocated_log_collector_config(
    ::tensorflow::serving::LogCollectorConfig* log_collector_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_collector_config_);
  }
  _impl_.log_collector_config_ = log_collector_config;
  if (log_collector_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.LoggingConfig.log_collector_config)
}
inline ::tensorflow::serving::LogCollectorConfig* LoggingConfig::release_log_collector_config() {
  
  ::tensorflow::serving::LogCollectorConfig* temp = _impl_.log_collector_config_;
  _impl_.log_collector_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::LogCollectorConfig* LoggingConfig::unsafe_arena_release_log_collector_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LoggingConfig.log_collector_config)
  
  ::tensorflow::serving::LogCollectorConfig* temp = _impl_.log_collector_config_;
  _impl_.log_collector_config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::LogCollectorConfig* LoggingConfig::_internal_mutable_log_collector_config() {
  
  if (_impl_.log_collector_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::LogCollectorConfig>(GetArenaForAllocation());
    _impl_.log_collector_config_ = p;
  }
  return _impl_.log_collector_config_;
}
inline ::tensorflow::serving::LogCollectorConfig* LoggingConfig::mutable_log_collector_config() {
  ::tensorflow::serving::LogCollectorConfig* _msg = _internal_mutable_log_collector_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LoggingConfig.log_collector_config)
  return _msg;
}
inline void LoggingConfig::set_allocated_log_collector_config(::tensorflow::serving::LogCollectorConfig* log_collector_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_collector_config_);
  }
  if (log_collector_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_collector_config));
    if (message_arena != submessage_arena) {
      log_collector_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_collector_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.log_collector_config_ = log_collector_config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LoggingConfig.log_collector_config)
}

// .tensorflow.serving.SamplingConfig sampling_config = 2;
inline bool LoggingConfig::_internal_has_sampling_config() const {
  return this != internal_default_instance() && _impl_.sampling_config_ != nullptr;
}
inline bool LoggingConfig::has_sampling_config() const {
  return _internal_has_sampling_config();
}
inline void LoggingConfig::clear_sampling_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.sampling_config_ != nullptr) {
    delete _impl_.sampling_config_;
  }
  _impl_.sampling_config_ = nullptr;
}
inline const ::tensorflow::serving::SamplingConfig& LoggingConfig::_internal_sampling_config() const {
  const ::tensorflow::serving::SamplingConfig* p = _impl_.sampling_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::SamplingConfig&>(
      ::tensorflow::serving::_SamplingConfig_default_instance_);
}
inline const ::tensorflow::serving::SamplingConfig& LoggingConfig::sampling_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LoggingConfig.sampling_config)
  return _internal_sampling_config();
}
inline void LoggingConfig::unsafe_arena_set_allocated_sampling_config(
    ::tensorflow::serving::SamplingConfig* sampling_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sampling_config_);
  }
  _impl_.sampling_config_ = sampling_config;
  if (sampling_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.LoggingConfig.sampling_config)
}
inline ::tensorflow::serving::SamplingConfig* LoggingConfig::release_sampling_config() {
  
  ::tensorflow::serving::SamplingConfig* temp = _impl_.sampling_config_;
  _impl_.sampling_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::SamplingConfig* LoggingConfig::unsafe_arena_release_sampling_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LoggingConfig.sampling_config)
  
  ::tensorflow::serving::SamplingConfig* temp = _impl_.sampling_config_;
  _impl_.sampling_config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::SamplingConfig* LoggingConfig::_internal_mutable_sampling_config() {
  
  if (_impl_.sampling_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::SamplingConfig>(GetArenaForAllocation());
    _impl_.sampling_config_ = p;
  }
  return _impl_.sampling_config_;
}
inline ::tensorflow::serving::SamplingConfig* LoggingConfig::mutable_sampling_config() {
  ::tensorflow::serving::SamplingConfig* _msg = _internal_mutable_sampling_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LoggingConfig.sampling_config)
  return _msg;
}
inline void LoggingConfig::set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sampling_config_;
  }
  if (sampling_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sampling_config);
    if (message_arena != submessage_arena) {
      sampling_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampling_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sampling_config_ = sampling_config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LoggingConfig.sampling_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::serving::SamplingConfig_Attributes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::serving::SamplingConfig_Attributes>() {
  return ::tensorflow::serving::SamplingConfig_Attributes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto
