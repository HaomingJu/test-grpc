// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/model_server_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "tensorflow_serving/config/file_system_storage_path_source.pb.h"
#include "tensorflow_serving/config/logging_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class ModelConfig;
struct ModelConfigDefaultTypeInternal;
extern ModelConfigDefaultTypeInternal _ModelConfig_default_instance_;
class ModelConfigList;
struct ModelConfigListDefaultTypeInternal;
extern ModelConfigListDefaultTypeInternal _ModelConfigList_default_instance_;
class ModelConfig_VersionLabelsEntry_DoNotUse;
struct ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal;
extern ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal _ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_;
class ModelServerConfig;
struct ModelServerConfigDefaultTypeInternal;
extern ModelServerConfigDefaultTypeInternal _ModelServerConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::ModelConfig* Arena::CreateMaybeMessage<::tensorflow::serving::ModelConfig>(Arena*);
template<> ::tensorflow::serving::ModelConfigList* Arena::CreateMaybeMessage<::tensorflow::serving::ModelConfigList>(Arena*);
template<> ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse>(Arena*);
template<> ::tensorflow::serving::ModelServerConfig* Arena::CreateMaybeMessage<::tensorflow::serving::ModelServerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

enum ModelType : int {
  MODEL_TYPE_UNSPECIFIED PROTOBUF_DEPRECATED_ENUM = 0,
  TENSORFLOW PROTOBUF_DEPRECATED_ENUM = 1,
  OTHER PROTOBUF_DEPRECATED_ENUM = 2,
  ModelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ModelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ModelType_IsValid(int value);
constexpr ModelType ModelType_MIN = MODEL_TYPE_UNSPECIFIED;
constexpr ModelType ModelType_MAX = OTHER;
constexpr int ModelType_ARRAYSIZE = ModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelType_descriptor();
template<typename T>
inline const std::string& ModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelType_descriptor(), enum_t_value);
}
inline bool ModelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelType>(
    ModelType_descriptor(), name, value);
}
// ===================================================================

class ModelConfig_VersionLabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelConfig_VersionLabelsEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelConfig_VersionLabelsEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  ModelConfig_VersionLabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ModelConfig_VersionLabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ModelConfig_VersionLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelConfig_VersionLabelsEntry_DoNotUse& other);
  static const ModelConfig_VersionLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelConfig_VersionLabelsEntry_DoNotUse*>(&_ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.serving.ModelConfig.VersionLabelsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class ModelConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ModelConfig) */ {
 public:
  inline ModelConfig() : ModelConfig(nullptr) {}
  ~ModelConfig() override;
  explicit PROTOBUF_CONSTEXPR ModelConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfig(const ModelConfig& from);
  ModelConfig(ModelConfig&& from) noexcept
    : ModelConfig() {
    *this = ::std::move(from);
  }

  inline ModelConfig& operator=(const ModelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfig& operator=(ModelConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfig* internal_default_instance() {
    return reinterpret_cast<const ModelConfig*>(
               &_ModelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelConfig& a, ModelConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelConfig& from) {
    ModelConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ModelConfig";
  }
  protected:
  explicit ModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVersionLabelsFieldNumber = 8,
    kNameFieldNumber = 1,
    kBasePathFieldNumber = 2,
    kModelPlatformFieldNumber = 4,
    kLoggingConfigFieldNumber = 6,
    kModelVersionPolicyFieldNumber = 7,
    kModelTypeFieldNumber = 3,
  };
  // map<string, int64> version_labels = 8;
  int version_labels_size() const;
  private:
  int _internal_version_labels_size() const;
  public:
  void clear_version_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_version_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_version_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      version_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_version_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string base_path = 2;
  void clear_base_path();
  const std::string& base_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_path();
  PROTOBUF_NODISCARD std::string* release_base_path();
  void set_allocated_base_path(std::string* base_path);
  private:
  const std::string& _internal_base_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_path(const std::string& value);
  std::string* _internal_mutable_base_path();
  public:

  // string model_platform = 4;
  void clear_model_platform();
  const std::string& model_platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_platform();
  PROTOBUF_NODISCARD std::string* release_model_platform();
  void set_allocated_model_platform(std::string* model_platform);
  private:
  const std::string& _internal_model_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_platform(const std::string& value);
  std::string* _internal_mutable_model_platform();
  public:

  // .tensorflow.serving.LoggingConfig logging_config = 6;
  bool has_logging_config() const;
  private:
  bool _internal_has_logging_config() const;
  public:
  void clear_logging_config();
  const ::tensorflow::serving::LoggingConfig& logging_config() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::LoggingConfig* release_logging_config();
  ::tensorflow::serving::LoggingConfig* mutable_logging_config();
  void set_allocated_logging_config(::tensorflow::serving::LoggingConfig* logging_config);
  private:
  const ::tensorflow::serving::LoggingConfig& _internal_logging_config() const;
  ::tensorflow::serving::LoggingConfig* _internal_mutable_logging_config();
  public:
  void unsafe_arena_set_allocated_logging_config(
      ::tensorflow::serving::LoggingConfig* logging_config);
  ::tensorflow::serving::LoggingConfig* unsafe_arena_release_logging_config();

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
  bool has_model_version_policy() const;
  private:
  bool _internal_has_model_version_policy() const;
  public:
  void clear_model_version_policy();
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& model_version_policy() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* release_model_version_policy();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* mutable_model_version_policy();
  void set_allocated_model_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* model_version_policy);
  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& _internal_model_version_policy() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* _internal_mutable_model_version_policy();
  public:
  void unsafe_arena_set_allocated_model_version_policy(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* model_version_policy);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* unsafe_arena_release_model_version_policy();

  // .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_model_type();
  PROTOBUF_DEPRECATED ::tensorflow::serving::ModelType model_type() const;
  PROTOBUF_DEPRECATED void set_model_type(::tensorflow::serving::ModelType value);
  private:
  ::tensorflow::serving::ModelType _internal_model_type() const;
  void _internal_set_model_type(::tensorflow::serving::ModelType value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ModelConfig_VersionLabelsEntry_DoNotUse,
        std::string, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> version_labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_platform_;
    ::tensorflow::serving::LoggingConfig* logging_config_;
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* model_version_policy_;
    int model_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ModelConfigList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ModelConfigList) */ {
 public:
  inline ModelConfigList() : ModelConfigList(nullptr) {}
  ~ModelConfigList() override;
  explicit PROTOBUF_CONSTEXPR ModelConfigList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfigList(const ModelConfigList& from);
  ModelConfigList(ModelConfigList&& from) noexcept
    : ModelConfigList() {
    *this = ::std::move(from);
  }

  inline ModelConfigList& operator=(const ModelConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigList& operator=(ModelConfigList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigList* internal_default_instance() {
    return reinterpret_cast<const ModelConfigList*>(
               &_ModelConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModelConfigList& a, ModelConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfigList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfigList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfigList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelConfigList& from) {
    ModelConfigList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfigList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ModelConfigList";
  }
  protected:
  explicit ModelConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // repeated .tensorflow.serving.ModelConfig config = 1;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  ::tensorflow::serving::ModelConfig* mutable_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelConfig >*
      mutable_config();
  private:
  const ::tensorflow::serving::ModelConfig& _internal_config(int index) const;
  ::tensorflow::serving::ModelConfig* _internal_add_config();
  public:
  const ::tensorflow::serving::ModelConfig& config(int index) const;
  ::tensorflow::serving::ModelConfig* add_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelConfig >&
      config() const;

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelConfigList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelConfig > config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ModelServerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ModelServerConfig) */ {
 public:
  inline ModelServerConfig() : ModelServerConfig(nullptr) {}
  ~ModelServerConfig() override;
  explicit PROTOBUF_CONSTEXPR ModelServerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelServerConfig(const ModelServerConfig& from);
  ModelServerConfig(ModelServerConfig&& from) noexcept
    : ModelServerConfig() {
    *this = ::std::move(from);
  }

  inline ModelServerConfig& operator=(const ModelServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelServerConfig& operator=(ModelServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelServerConfig& default_instance() {
    return *internal_default_instance();
  }
  enum ConfigCase {
    kModelConfigList = 1,
    kCustomModelConfig = 2,
    CONFIG_NOT_SET = 0,
  };

  static inline const ModelServerConfig* internal_default_instance() {
    return reinterpret_cast<const ModelServerConfig*>(
               &_ModelServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelServerConfig& a, ModelServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelServerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelServerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelServerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelServerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelServerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelServerConfig& from) {
    ModelServerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelServerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.ModelServerConfig";
  }
  protected:
  explicit ModelServerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelConfigListFieldNumber = 1,
    kCustomModelConfigFieldNumber = 2,
  };
  // .tensorflow.serving.ModelConfigList model_config_list = 1;
  bool has_model_config_list() const;
  private:
  bool _internal_has_model_config_list() const;
  public:
  void clear_model_config_list();
  const ::tensorflow::serving::ModelConfigList& model_config_list() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelConfigList* release_model_config_list();
  ::tensorflow::serving::ModelConfigList* mutable_model_config_list();
  void set_allocated_model_config_list(::tensorflow::serving::ModelConfigList* model_config_list);
  private:
  const ::tensorflow::serving::ModelConfigList& _internal_model_config_list() const;
  ::tensorflow::serving::ModelConfigList* _internal_mutable_model_config_list();
  public:
  void unsafe_arena_set_allocated_model_config_list(
      ::tensorflow::serving::ModelConfigList* model_config_list);
  ::tensorflow::serving::ModelConfigList* unsafe_arena_release_model_config_list();

  // .google.protobuf.Any custom_model_config = 2;
  bool has_custom_model_config() const;
  private:
  bool _internal_has_custom_model_config() const;
  public:
  void clear_custom_model_config();
  const ::PROTOBUF_NAMESPACE_ID::Any& custom_model_config() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_custom_model_config();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_custom_model_config();
  void set_allocated_custom_model_config(::PROTOBUF_NAMESPACE_ID::Any* custom_model_config);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_custom_model_config() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_custom_model_config();
  public:
  void unsafe_arena_set_allocated_custom_model_config(
      ::PROTOBUF_NAMESPACE_ID::Any* custom_model_config);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_custom_model_config();

  void clear_config();
  ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelServerConfig)
 private:
  class _Internal;
  void set_has_model_config_list();
  void set_has_custom_model_config();

  inline bool has_config() const;
  inline void clear_has_config();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ConfigUnion {
      constexpr ConfigUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tensorflow::serving::ModelConfigList* model_config_list_;
      ::PROTOBUF_NAMESPACE_ID::Any* custom_model_config_;
    } config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModelConfig

// string name = 1;
inline void ModelConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ModelConfig::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfig::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelConfig.name)
}
inline std::string* ModelConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.name)
  return _s;
}
inline const std::string& ModelConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModelConfig::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfig::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelConfig::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.name)
  return _impl_.name_.Release();
}
inline void ModelConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.name)
}

// string base_path = 2;
inline void ModelConfig::clear_base_path() {
  _impl_.base_path_.ClearToEmpty();
}
inline const std::string& ModelConfig::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.base_path)
  return _internal_base_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfig::set_base_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.base_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelConfig.base_path)
}
inline std::string* ModelConfig::mutable_base_path() {
  std::string* _s = _internal_mutable_base_path();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.base_path)
  return _s;
}
inline const std::string& ModelConfig::_internal_base_path() const {
  return _impl_.base_path_.Get();
}
inline void ModelConfig::_internal_set_base_path(const std::string& value) {
  
  _impl_.base_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfig::_internal_mutable_base_path() {
  
  return _impl_.base_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelConfig::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.base_path)
  return _impl_.base_path_.Release();
}
inline void ModelConfig::set_allocated_base_path(std::string* base_path) {
  if (base_path != nullptr) {
    
  } else {
    
  }
  _impl_.base_path_.SetAllocated(base_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_path_.IsDefault()) {
    _impl_.base_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.base_path)
}

// .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
inline void ModelConfig::clear_model_type() {
  _impl_.model_type_ = 0;
}
inline ::tensorflow::serving::ModelType ModelConfig::_internal_model_type() const {
  return static_cast< ::tensorflow::serving::ModelType >(_impl_.model_type_);
}
inline ::tensorflow::serving::ModelType ModelConfig::model_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.model_type)
  return _internal_model_type();
}
inline void ModelConfig::_internal_set_model_type(::tensorflow::serving::ModelType value) {
  
  _impl_.model_type_ = value;
}
inline void ModelConfig::set_model_type(::tensorflow::serving::ModelType value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelConfig.model_type)
}

// string model_platform = 4;
inline void ModelConfig::clear_model_platform() {
  _impl_.model_platform_.ClearToEmpty();
}
inline const std::string& ModelConfig::model_platform() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.model_platform)
  return _internal_model_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfig::set_model_platform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelConfig.model_platform)
}
inline std::string* ModelConfig::mutable_model_platform() {
  std::string* _s = _internal_mutable_model_platform();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.model_platform)
  return _s;
}
inline const std::string& ModelConfig::_internal_model_platform() const {
  return _impl_.model_platform_.Get();
}
inline void ModelConfig::_internal_set_model_platform(const std::string& value) {
  
  _impl_.model_platform_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfig::_internal_mutable_model_platform() {
  
  return _impl_.model_platform_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelConfig::release_model_platform() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.model_platform)
  return _impl_.model_platform_.Release();
}
inline void ModelConfig::set_allocated_model_platform(std::string* model_platform) {
  if (model_platform != nullptr) {
    
  } else {
    
  }
  _impl_.model_platform_.SetAllocated(model_platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_platform_.IsDefault()) {
    _impl_.model_platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.model_platform)
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
inline bool ModelConfig::_internal_has_model_version_policy() const {
  return this != internal_default_instance() && _impl_.model_version_policy_ != nullptr;
}
inline bool ModelConfig::has_model_version_policy() const {
  return _internal_has_model_version_policy();
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& ModelConfig::_internal_model_version_policy() const {
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* p = _impl_.model_version_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy&>(
      ::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& ModelConfig::model_version_policy() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.model_version_policy)
  return _internal_model_version_policy();
}
inline void ModelConfig::unsafe_arena_set_allocated_model_version_policy(
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* model_version_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_version_policy_);
  }
  _impl_.model_version_policy_ = model_version_policy;
  if (model_version_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelConfig.model_version_policy)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* ModelConfig::release_model_version_policy() {
  
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* temp = _impl_.model_version_policy_;
  _impl_.model_version_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* ModelConfig::unsafe_arena_release_model_version_policy() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.model_version_policy)
  
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* temp = _impl_.model_version_policy_;
  _impl_.model_version_policy_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* ModelConfig::_internal_mutable_model_version_policy() {
  
  if (_impl_.model_version_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy>(GetArenaForAllocation());
    _impl_.model_version_policy_ = p;
  }
  return _impl_.model_version_policy_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* ModelConfig::mutable_model_version_policy() {
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* _msg = _internal_mutable_model_version_policy();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.model_version_policy)
  return _msg;
}
inline void ModelConfig::set_allocated_model_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* model_version_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_version_policy_);
  }
  if (model_version_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version_policy));
    if (message_arena != submessage_arena) {
      model_version_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_version_policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_version_policy_ = model_version_policy;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.model_version_policy)
}

// map<string, int64> version_labels = 8;
inline int ModelConfig::_internal_version_labels_size() const {
  return _impl_.version_labels_.size();
}
inline int ModelConfig::version_labels_size() const {
  return _internal_version_labels_size();
}
inline void ModelConfig::clear_version_labels() {
  _impl_.version_labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
ModelConfig::_internal_version_labels() const {
  return _impl_.version_labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
ModelConfig::version_labels() const {
  // @@protoc_insertion_point(field_map:tensorflow.serving.ModelConfig.version_labels)
  return _internal_version_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
ModelConfig::_internal_mutable_version_labels() {
  return _impl_.version_labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
ModelConfig::mutable_version_labels() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.serving.ModelConfig.version_labels)
  return _internal_mutable_version_labels();
}

// .tensorflow.serving.LoggingConfig logging_config = 6;
inline bool ModelConfig::_internal_has_logging_config() const {
  return this != internal_default_instance() && _impl_.logging_config_ != nullptr;
}
inline bool ModelConfig::has_logging_config() const {
  return _internal_has_logging_config();
}
inline const ::tensorflow::serving::LoggingConfig& ModelConfig::_internal_logging_config() const {
  const ::tensorflow::serving::LoggingConfig* p = _impl_.logging_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::LoggingConfig&>(
      ::tensorflow::serving::_LoggingConfig_default_instance_);
}
inline const ::tensorflow::serving::LoggingConfig& ModelConfig::logging_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.logging_config)
  return _internal_logging_config();
}
inline void ModelConfig::unsafe_arena_set_allocated_logging_config(
    ::tensorflow::serving::LoggingConfig* logging_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logging_config_);
  }
  _impl_.logging_config_ = logging_config;
  if (logging_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelConfig.logging_config)
}
inline ::tensorflow::serving::LoggingConfig* ModelConfig::release_logging_config() {
  
  ::tensorflow::serving::LoggingConfig* temp = _impl_.logging_config_;
  _impl_.logging_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::LoggingConfig* ModelConfig::unsafe_arena_release_logging_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.logging_config)
  
  ::tensorflow::serving::LoggingConfig* temp = _impl_.logging_config_;
  _impl_.logging_config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::LoggingConfig* ModelConfig::_internal_mutable_logging_config() {
  
  if (_impl_.logging_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::LoggingConfig>(GetArenaForAllocation());
    _impl_.logging_config_ = p;
  }
  return _impl_.logging_config_;
}
inline ::tensorflow::serving::LoggingConfig* ModelConfig::mutable_logging_config() {
  ::tensorflow::serving::LoggingConfig* _msg = _internal_mutable_logging_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.logging_config)
  return _msg;
}
inline void ModelConfig::set_allocated_logging_config(::tensorflow::serving::LoggingConfig* logging_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logging_config_);
  }
  if (logging_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logging_config));
    if (message_arena != submessage_arena) {
      logging_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logging_config_ = logging_config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.logging_config)
}

// -------------------------------------------------------------------

// ModelConfigList

// repeated .tensorflow.serving.ModelConfig config = 1;
inline int ModelConfigList::_internal_config_size() const {
  return _impl_.config_.size();
}
inline int ModelConfigList::config_size() const {
  return _internal_config_size();
}
inline void ModelConfigList::clear_config() {
  _impl_.config_.Clear();
}
inline ::tensorflow::serving::ModelConfig* ModelConfigList::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfigList.config)
  return _impl_.config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelConfig >*
ModelConfigList::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ModelConfigList.config)
  return &_impl_.config_;
}
inline const ::tensorflow::serving::ModelConfig& ModelConfigList::_internal_config(int index) const {
  return _impl_.config_.Get(index);
}
inline const ::tensorflow::serving::ModelConfig& ModelConfigList::config(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfigList.config)
  return _internal_config(index);
}
inline ::tensorflow::serving::ModelConfig* ModelConfigList::_internal_add_config() {
  return _impl_.config_.Add();
}
inline ::tensorflow::serving::ModelConfig* ModelConfigList::add_config() {
  ::tensorflow::serving::ModelConfig* _add = _internal_add_config();
  // @@protoc_insertion_point(field_add:tensorflow.serving.ModelConfigList.config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::ModelConfig >&
ModelConfigList::config() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ModelConfigList.config)
  return _impl_.config_;
}

// -------------------------------------------------------------------

// ModelServerConfig

// .tensorflow.serving.ModelConfigList model_config_list = 1;
inline bool ModelServerConfig::_internal_has_model_config_list() const {
  return config_case() == kModelConfigList;
}
inline bool ModelServerConfig::has_model_config_list() const {
  return _internal_has_model_config_list();
}
inline void ModelServerConfig::set_has_model_config_list() {
  _impl_._oneof_case_[0] = kModelConfigList;
}
inline void ModelServerConfig::clear_model_config_list() {
  if (_internal_has_model_config_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.config_.model_config_list_;
    }
    clear_has_config();
  }
}
inline ::tensorflow::serving::ModelConfigList* ModelServerConfig::release_model_config_list() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelServerConfig.model_config_list)
  if (_internal_has_model_config_list()) {
    clear_has_config();
    ::tensorflow::serving::ModelConfigList* temp = _impl_.config_.model_config_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.model_config_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::ModelConfigList& ModelServerConfig::_internal_model_config_list() const {
  return _internal_has_model_config_list()
      ? *_impl_.config_.model_config_list_
      : reinterpret_cast< ::tensorflow::serving::ModelConfigList&>(::tensorflow::serving::_ModelConfigList_default_instance_);
}
inline const ::tensorflow::serving::ModelConfigList& ModelServerConfig::model_config_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelServerConfig.model_config_list)
  return _internal_model_config_list();
}
inline ::tensorflow::serving::ModelConfigList* ModelServerConfig::unsafe_arena_release_model_config_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelServerConfig.model_config_list)
  if (_internal_has_model_config_list()) {
    clear_has_config();
    ::tensorflow::serving::ModelConfigList* temp = _impl_.config_.model_config_list_;
    _impl_.config_.model_config_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModelServerConfig::unsafe_arena_set_allocated_model_config_list(::tensorflow::serving::ModelConfigList* model_config_list) {
  clear_config();
  if (model_config_list) {
    set_has_model_config_list();
    _impl_.config_.model_config_list_ = model_config_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelServerConfig.model_config_list)
}
inline ::tensorflow::serving::ModelConfigList* ModelServerConfig::_internal_mutable_model_config_list() {
  if (!_internal_has_model_config_list()) {
    clear_config();
    set_has_model_config_list();
    _impl_.config_.model_config_list_ = CreateMaybeMessage< ::tensorflow::serving::ModelConfigList >(GetArenaForAllocation());
  }
  return _impl_.config_.model_config_list_;
}
inline ::tensorflow::serving::ModelConfigList* ModelServerConfig::mutable_model_config_list() {
  ::tensorflow::serving::ModelConfigList* _msg = _internal_mutable_model_config_list();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelServerConfig.model_config_list)
  return _msg;
}

// .google.protobuf.Any custom_model_config = 2;
inline bool ModelServerConfig::_internal_has_custom_model_config() const {
  return config_case() == kCustomModelConfig;
}
inline bool ModelServerConfig::has_custom_model_config() const {
  return _internal_has_custom_model_config();
}
inline void ModelServerConfig::set_has_custom_model_config() {
  _impl_._oneof_case_[0] = kCustomModelConfig;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ModelServerConfig::release_custom_model_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelServerConfig.custom_model_config)
  if (_internal_has_custom_model_config()) {
    clear_has_config();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.config_.custom_model_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.custom_model_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ModelServerConfig::_internal_custom_model_config() const {
  return _internal_has_custom_model_config()
      ? *_impl_.config_.custom_model_config_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Any&>(::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ModelServerConfig::custom_model_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelServerConfig.custom_model_config)
  return _internal_custom_model_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ModelServerConfig::unsafe_arena_release_custom_model_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelServerConfig.custom_model_config)
  if (_internal_has_custom_model_config()) {
    clear_has_config();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.config_.custom_model_config_;
    _impl_.config_.custom_model_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModelServerConfig::unsafe_arena_set_allocated_custom_model_config(::PROTOBUF_NAMESPACE_ID::Any* custom_model_config) {
  clear_config();
  if (custom_model_config) {
    set_has_custom_model_config();
    _impl_.config_.custom_model_config_ = custom_model_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelServerConfig.custom_model_config)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ModelServerConfig::_internal_mutable_custom_model_config() {
  if (!_internal_has_custom_model_config()) {
    clear_config();
    set_has_custom_model_config();
    _impl_.config_.custom_model_config_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Any >(GetArenaForAllocation());
  }
  return _impl_.config_.custom_model_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ModelServerConfig::mutable_custom_model_config() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_custom_model_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelServerConfig.custom_model_config)
  return _msg;
}

inline bool ModelServerConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void ModelServerConfig::clear_has_config() {
  _impl_._oneof_case_[0] = CONFIG_NOT_SET;
}
inline ModelServerConfig::ConfigCase ModelServerConfig::config_case() const {
  return ModelServerConfig::ConfigCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::serving::ModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::serving::ModelType>() {
  return ::tensorflow::serving::ModelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto
