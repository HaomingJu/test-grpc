// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/ssl_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class SSLConfig;
struct SSLConfigDefaultTypeInternal;
extern SSLConfigDefaultTypeInternal _SSLConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::SSLConfig* Arena::CreateMaybeMessage<::tensorflow::serving::SSLConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class SSLConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SSLConfig) */ {
 public:
  inline SSLConfig() : SSLConfig(nullptr) {}
  ~SSLConfig() override;
  explicit PROTOBUF_CONSTEXPR SSLConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLConfig(const SSLConfig& from);
  SSLConfig(SSLConfig&& from) noexcept
    : SSLConfig() {
    *this = ::std::move(from);
  }

  inline SSLConfig& operator=(const SSLConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLConfig& operator=(SSLConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLConfig* internal_default_instance() {
    return reinterpret_cast<const SSLConfig*>(
               &_SSLConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSLConfig& a, SSLConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSLConfig& from) {
    SSLConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.SSLConfig";
  }
  protected:
  explicit SSLConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerKeyFieldNumber = 1,
    kServerCertFieldNumber = 2,
    kCustomCaFieldNumber = 3,
    kClientVerifyFieldNumber = 4,
  };
  // string server_key = 1;
  void clear_server_key();
  const std::string& server_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_key();
  PROTOBUF_NODISCARD std::string* release_server_key();
  void set_allocated_server_key(std::string* server_key);
  private:
  const std::string& _internal_server_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_key(const std::string& value);
  std::string* _internal_mutable_server_key();
  public:

  // string server_cert = 2;
  void clear_server_cert();
  const std::string& server_cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_cert();
  PROTOBUF_NODISCARD std::string* release_server_cert();
  void set_allocated_server_cert(std::string* server_cert);
  private:
  const std::string& _internal_server_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_cert(const std::string& value);
  std::string* _internal_mutable_server_cert();
  public:

  // string custom_ca = 3;
  void clear_custom_ca();
  const std::string& custom_ca() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_ca(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_ca();
  PROTOBUF_NODISCARD std::string* release_custom_ca();
  void set_allocated_custom_ca(std::string* custom_ca);
  private:
  const std::string& _internal_custom_ca() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_ca(const std::string& value);
  std::string* _internal_mutable_custom_ca();
  public:

  // bool client_verify = 4;
  void clear_client_verify();
  bool client_verify() const;
  void set_client_verify(bool value);
  private:
  bool _internal_client_verify() const;
  void _internal_set_client_verify(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SSLConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_cert_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_ca_;
    bool client_verify_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSLConfig

// string server_key = 1;
inline void SSLConfig::clear_server_key() {
  _impl_.server_key_.ClearToEmpty();
}
inline const std::string& SSLConfig::server_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.server_key)
  return _internal_server_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSLConfig::set_server_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.server_key)
}
inline std::string* SSLConfig::mutable_server_key() {
  std::string* _s = _internal_mutable_server_key();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.server_key)
  return _s;
}
inline const std::string& SSLConfig::_internal_server_key() const {
  return _impl_.server_key_.Get();
}
inline void SSLConfig::_internal_set_server_key(const std::string& value) {
  
  _impl_.server_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SSLConfig::_internal_mutable_server_key() {
  
  return _impl_.server_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SSLConfig::release_server_key() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.server_key)
  return _impl_.server_key_.Release();
}
inline void SSLConfig::set_allocated_server_key(std::string* server_key) {
  if (server_key != nullptr) {
    
  } else {
    
  }
  _impl_.server_key_.SetAllocated(server_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_key_.IsDefault()) {
    _impl_.server_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.server_key)
}

// string server_cert = 2;
inline void SSLConfig::clear_server_cert() {
  _impl_.server_cert_.ClearToEmpty();
}
inline const std::string& SSLConfig::server_cert() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.server_cert)
  return _internal_server_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSLConfig::set_server_cert(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_cert_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.server_cert)
}
inline std::string* SSLConfig::mutable_server_cert() {
  std::string* _s = _internal_mutable_server_cert();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.server_cert)
  return _s;
}
inline const std::string& SSLConfig::_internal_server_cert() const {
  return _impl_.server_cert_.Get();
}
inline void SSLConfig::_internal_set_server_cert(const std::string& value) {
  
  _impl_.server_cert_.Set(value, GetArenaForAllocation());
}
inline std::string* SSLConfig::_internal_mutable_server_cert() {
  
  return _impl_.server_cert_.Mutable(GetArenaForAllocation());
}
inline std::string* SSLConfig::release_server_cert() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.server_cert)
  return _impl_.server_cert_.Release();
}
inline void SSLConfig::set_allocated_server_cert(std::string* server_cert) {
  if (server_cert != nullptr) {
    
  } else {
    
  }
  _impl_.server_cert_.SetAllocated(server_cert, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_cert_.IsDefault()) {
    _impl_.server_cert_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.server_cert)
}

// string custom_ca = 3;
inline void SSLConfig::clear_custom_ca() {
  _impl_.custom_ca_.ClearToEmpty();
}
inline const std::string& SSLConfig::custom_ca() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.custom_ca)
  return _internal_custom_ca();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSLConfig::set_custom_ca(ArgT0&& arg0, ArgT... args) {
 
 _impl_.custom_ca_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.custom_ca)
}
inline std::string* SSLConfig::mutable_custom_ca() {
  std::string* _s = _internal_mutable_custom_ca();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.custom_ca)
  return _s;
}
inline const std::string& SSLConfig::_internal_custom_ca() const {
  return _impl_.custom_ca_.Get();
}
inline void SSLConfig::_internal_set_custom_ca(const std::string& value) {
  
  _impl_.custom_ca_.Set(value, GetArenaForAllocation());
}
inline std::string* SSLConfig::_internal_mutable_custom_ca() {
  
  return _impl_.custom_ca_.Mutable(GetArenaForAllocation());
}
inline std::string* SSLConfig::release_custom_ca() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.custom_ca)
  return _impl_.custom_ca_.Release();
}
inline void SSLConfig::set_allocated_custom_ca(std::string* custom_ca) {
  if (custom_ca != nullptr) {
    
  } else {
    
  }
  _impl_.custom_ca_.SetAllocated(custom_ca, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_ca_.IsDefault()) {
    _impl_.custom_ca_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.custom_ca)
}

// bool client_verify = 4;
inline void SSLConfig::clear_client_verify() {
  _impl_.client_verify_ = false;
}
inline bool SSLConfig::_internal_client_verify() const {
  return _impl_.client_verify_;
}
inline bool SSLConfig::client_verify() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.client_verify)
  return _internal_client_verify();
}
inline void SSLConfig::_internal_set_client_verify(bool value) {
  
  _impl_.client_verify_ = value;
}
inline void SSLConfig::set_client_verify(bool value) {
  _internal_set_client_verify(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.client_verify)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto
