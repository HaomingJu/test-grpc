// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/monitoring_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class MonitoringConfig;
struct MonitoringConfigDefaultTypeInternal;
extern MonitoringConfigDefaultTypeInternal _MonitoringConfig_default_instance_;
class PrometheusConfig;
struct PrometheusConfigDefaultTypeInternal;
extern PrometheusConfigDefaultTypeInternal _PrometheusConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::MonitoringConfig* Arena::CreateMaybeMessage<::tensorflow::serving::MonitoringConfig>(Arena*);
template<> ::tensorflow::serving::PrometheusConfig* Arena::CreateMaybeMessage<::tensorflow::serving::PrometheusConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class PrometheusConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.PrometheusConfig) */ {
 public:
  inline PrometheusConfig() : PrometheusConfig(nullptr) {}
  ~PrometheusConfig() override;
  explicit PROTOBUF_CONSTEXPR PrometheusConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrometheusConfig(const PrometheusConfig& from);
  PrometheusConfig(PrometheusConfig&& from) noexcept
    : PrometheusConfig() {
    *this = ::std::move(from);
  }

  inline PrometheusConfig& operator=(const PrometheusConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrometheusConfig& operator=(PrometheusConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrometheusConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrometheusConfig* internal_default_instance() {
    return reinterpret_cast<const PrometheusConfig*>(
               &_PrometheusConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrometheusConfig& a, PrometheusConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PrometheusConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrometheusConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrometheusConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrometheusConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrometheusConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrometheusConfig& from) {
    PrometheusConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrometheusConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.PrometheusConfig";
  }
  protected:
  explicit PrometheusConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kEnableFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.PrometheusConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    bool enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MonitoringConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.MonitoringConfig) */ {
 public:
  inline MonitoringConfig() : MonitoringConfig(nullptr) {}
  ~MonitoringConfig() override;
  explicit PROTOBUF_CONSTEXPR MonitoringConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitoringConfig(const MonitoringConfig& from);
  MonitoringConfig(MonitoringConfig&& from) noexcept
    : MonitoringConfig() {
    *this = ::std::move(from);
  }

  inline MonitoringConfig& operator=(const MonitoringConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitoringConfig& operator=(MonitoringConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitoringConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitoringConfig* internal_default_instance() {
    return reinterpret_cast<const MonitoringConfig*>(
               &_MonitoringConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MonitoringConfig& a, MonitoringConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitoringConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitoringConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitoringConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitoringConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitoringConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonitoringConfig& from) {
    MonitoringConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoringConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.MonitoringConfig";
  }
  protected:
  explicit MonitoringConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrometheusConfigFieldNumber = 1,
  };
  // .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  bool has_prometheus_config() const;
  private:
  bool _internal_has_prometheus_config() const;
  public:
  void clear_prometheus_config();
  const ::tensorflow::serving::PrometheusConfig& prometheus_config() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::PrometheusConfig* release_prometheus_config();
  ::tensorflow::serving::PrometheusConfig* mutable_prometheus_config();
  void set_allocated_prometheus_config(::tensorflow::serving::PrometheusConfig* prometheus_config);
  private:
  const ::tensorflow::serving::PrometheusConfig& _internal_prometheus_config() const;
  ::tensorflow::serving::PrometheusConfig* _internal_mutable_prometheus_config();
  public:
  void unsafe_arena_set_allocated_prometheus_config(
      ::tensorflow::serving::PrometheusConfig* prometheus_config);
  ::tensorflow::serving::PrometheusConfig* unsafe_arena_release_prometheus_config();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.MonitoringConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tensorflow::serving::PrometheusConfig* prometheus_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrometheusConfig

// bool enable = 1;
inline void PrometheusConfig::clear_enable() {
  _impl_.enable_ = false;
}
inline bool PrometheusConfig::_internal_enable() const {
  return _impl_.enable_;
}
inline bool PrometheusConfig::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PrometheusConfig.enable)
  return _internal_enable();
}
inline void PrometheusConfig::_internal_set_enable(bool value) {
  
  _impl_.enable_ = value;
}
inline void PrometheusConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.PrometheusConfig.enable)
}

// string path = 2;
inline void PrometheusConfig::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& PrometheusConfig::path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PrometheusConfig.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrometheusConfig::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.serving.PrometheusConfig.path)
}
inline std::string* PrometheusConfig::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PrometheusConfig.path)
  return _s;
}
inline const std::string& PrometheusConfig::_internal_path() const {
  return _impl_.path_.Get();
}
inline void PrometheusConfig::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* PrometheusConfig::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* PrometheusConfig::release_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PrometheusConfig.path)
  return _impl_.path_.Release();
}
inline void PrometheusConfig::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.PrometheusConfig.path)
}

// -------------------------------------------------------------------

// MonitoringConfig

// .tensorflow.serving.PrometheusConfig prometheus_config = 1;
inline bool MonitoringConfig::_internal_has_prometheus_config() const {
  return this != internal_default_instance() && _impl_.prometheus_config_ != nullptr;
}
inline bool MonitoringConfig::has_prometheus_config() const {
  return _internal_has_prometheus_config();
}
inline void MonitoringConfig::clear_prometheus_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.prometheus_config_ != nullptr) {
    delete _impl_.prometheus_config_;
  }
  _impl_.prometheus_config_ = nullptr;
}
inline const ::tensorflow::serving::PrometheusConfig& MonitoringConfig::_internal_prometheus_config() const {
  const ::tensorflow::serving::PrometheusConfig* p = _impl_.prometheus_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::PrometheusConfig&>(
      ::tensorflow::serving::_PrometheusConfig_default_instance_);
}
inline const ::tensorflow::serving::PrometheusConfig& MonitoringConfig::prometheus_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MonitoringConfig.prometheus_config)
  return _internal_prometheus_config();
}
inline void MonitoringConfig::unsafe_arena_set_allocated_prometheus_config(
    ::tensorflow::serving::PrometheusConfig* prometheus_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prometheus_config_);
  }
  _impl_.prometheus_config_ = prometheus_config;
  if (prometheus_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.MonitoringConfig.prometheus_config)
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::release_prometheus_config() {
  
  ::tensorflow::serving::PrometheusConfig* temp = _impl_.prometheus_config_;
  _impl_.prometheus_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::unsafe_arena_release_prometheus_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MonitoringConfig.prometheus_config)
  
  ::tensorflow::serving::PrometheusConfig* temp = _impl_.prometheus_config_;
  _impl_.prometheus_config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::_internal_mutable_prometheus_config() {
  
  if (_impl_.prometheus_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::PrometheusConfig>(GetArenaForAllocation());
    _impl_.prometheus_config_ = p;
  }
  return _impl_.prometheus_config_;
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::mutable_prometheus_config() {
  ::tensorflow::serving::PrometheusConfig* _msg = _internal_mutable_prometheus_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MonitoringConfig.prometheus_config)
  return _msg;
}
inline void MonitoringConfig::set_allocated_prometheus_config(::tensorflow::serving::PrometheusConfig* prometheus_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prometheus_config_;
  }
  if (prometheus_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prometheus_config);
    if (message_arena != submessage_arena) {
      prometheus_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prometheus_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.prometheus_config_ = prometheus_config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MonitoringConfig.prometheus_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto
