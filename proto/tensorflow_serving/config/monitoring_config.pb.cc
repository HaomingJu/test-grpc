// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/monitoring_config.proto

#include "tensorflow_serving/config/monitoring_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace serving {
PROTOBUF_CONSTEXPR PrometheusConfig::PrometheusConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrometheusConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrometheusConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrometheusConfigDefaultTypeInternal() {}
  union {
    PrometheusConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrometheusConfigDefaultTypeInternal _PrometheusConfig_default_instance_;
PROTOBUF_CONSTEXPR MonitoringConfig::MonitoringConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prometheus_config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonitoringConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitoringConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitoringConfigDefaultTypeInternal() {}
  union {
    MonitoringConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitoringConfigDefaultTypeInternal _MonitoringConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::PrometheusConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::PrometheusConfig, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::PrometheusConfig, _impl_.path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::MonitoringConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::MonitoringConfig, _impl_.prometheus_config_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::serving::PrometheusConfig)},
  { 8, -1, -1, sizeof(::tensorflow::serving::MonitoringConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::serving::_PrometheusConfig_default_instance_._instance,
  &::tensorflow::serving::_MonitoringConfig_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1tensorflow_serving/config/monitoring_c"
  "onfig.proto\022\022tensorflow.serving\"0\n\020Prome"
  "theusConfig\022\016\n\006enable\030\001 \001(\010\022\014\n\004path\030\002 \001("
  "\t\"S\n\020MonitoringConfig\022\?\n\021prometheus_conf"
  "ig\030\001 \001(\0132$.tensorflow.serving.Prometheus"
  "ConfigB\003\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto = {
    false, false, 219, descriptor_table_protodef_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto,
    "tensorflow_serving/config/monitoring_config.proto",
    &descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto::offsets,
    file_level_metadata_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto, file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto,
    file_level_service_descriptors_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_getter() {
  return &descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto(&descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto);
namespace tensorflow {
namespace serving {

// ===================================================================

class PrometheusConfig::_Internal {
 public:
};

PrometheusConfig::PrometheusConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.PrometheusConfig)
}
PrometheusConfig::PrometheusConfig(const PrometheusConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrometheusConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.enable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.enable_ = from._impl_.enable_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.PrometheusConfig)
}

inline void PrometheusConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.enable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrometheusConfig::~PrometheusConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.PrometheusConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrometheusConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void PrometheusConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrometheusConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.PrometheusConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrometheusConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.PrometheusConfig.path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrometheusConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.PrometheusConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.PrometheusConfig.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.PrometheusConfig)
  return target;
}

size_t PrometheusConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.PrometheusConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrometheusConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrometheusConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrometheusConfig::GetClassData() const { return &_class_data_; }


void PrometheusConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrometheusConfig*>(&to_msg);
  auto& from = static_cast<const PrometheusConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.PrometheusConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrometheusConfig::CopyFrom(const PrometheusConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.PrometheusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrometheusConfig::IsInitialized() const {
  return true;
}

void PrometheusConfig::InternalSwap(PrometheusConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.enable_, other->_impl_.enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrometheusConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto[0]);
}

// ===================================================================

class MonitoringConfig::_Internal {
 public:
  static const ::tensorflow::serving::PrometheusConfig& prometheus_config(const MonitoringConfig* msg);
};

const ::tensorflow::serving::PrometheusConfig&
MonitoringConfig::_Internal::prometheus_config(const MonitoringConfig* msg) {
  return *msg->_impl_.prometheus_config_;
}
MonitoringConfig::MonitoringConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.MonitoringConfig)
}
MonitoringConfig::MonitoringConfig(const MonitoringConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonitoringConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prometheus_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prometheus_config()) {
    _this->_impl_.prometheus_config_ = new ::tensorflow::serving::PrometheusConfig(*from._impl_.prometheus_config_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.MonitoringConfig)
}

inline void MonitoringConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prometheus_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MonitoringConfig::~MonitoringConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.MonitoringConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitoringConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.prometheus_config_;
}

void MonitoringConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonitoringConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.MonitoringConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.prometheus_config_ != nullptr) {
    delete _impl_.prometheus_config_;
  }
  _impl_.prometheus_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitoringConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.serving.PrometheusConfig prometheus_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prometheus_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitoringConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.MonitoringConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  if (this->_internal_has_prometheus_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::prometheus_config(this),
        _Internal::prometheus_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.MonitoringConfig)
  return target;
}

size_t MonitoringConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.MonitoringConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  if (this->_internal_has_prometheus_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prometheus_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitoringConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonitoringConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitoringConfig::GetClassData() const { return &_class_data_; }


void MonitoringConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonitoringConfig*>(&to_msg);
  auto& from = static_cast<const MonitoringConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.MonitoringConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prometheus_config()) {
    _this->_internal_mutable_prometheus_config()->::tensorflow::serving::PrometheusConfig::MergeFrom(
        from._internal_prometheus_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitoringConfig::CopyFrom(const MonitoringConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.MonitoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitoringConfig::IsInitialized() const {
  return true;
}

void MonitoringConfig::InternalSwap(MonitoringConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.prometheus_config_, other->_impl_.prometheus_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitoringConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::PrometheusConfig*
Arena::CreateMaybeMessage< ::tensorflow::serving::PrometheusConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::PrometheusConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::MonitoringConfig*
Arena::CreateMaybeMessage< ::tensorflow::serving::MonitoringConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::MonitoringConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
