// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/logging_config.proto

#include "tensorflow_serving/config/logging_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace serving {
PROTOBUF_CONSTEXPR SamplingConfig::SamplingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sampling_rate_)*/0
  , /*decltype(_impl_.attributes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SamplingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SamplingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SamplingConfigDefaultTypeInternal() {}
  union {
    SamplingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SamplingConfigDefaultTypeInternal _SamplingConfig_default_instance_;
PROTOBUF_CONSTEXPR LoggingConfig::LoggingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_collector_config_)*/nullptr
  , /*decltype(_impl_.sampling_config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoggingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoggingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoggingConfigDefaultTypeInternal() {}
  union {
    LoggingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoggingConfigDefaultTypeInternal _LoggingConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SamplingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SamplingConfig, _impl_.sampling_rate_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SamplingConfig, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LoggingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LoggingConfig, _impl_.log_collector_config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::LoggingConfig, _impl_.sampling_config_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::serving::SamplingConfig)},
  { 8, -1, -1, sizeof(::tensorflow::serving::LoggingConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::serving::_SamplingConfig_default_instance_._instance,
  &::tensorflow::serving::_LoggingConfig_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.tensorflow_serving/config/logging_conf"
  "ig.proto\022\022tensorflow.serving\0324tensorflow"
  "_serving/config/log_collector_config.pro"
  "to\"\222\001\n\016SamplingConfig\022\025\n\rsampling_rate\030\001"
  " \001(\001\022\022\n\nattributes\030\002 \001(\005\"U\n\nAttributes\022\020"
  "\n\014ATTR_DEFAULT\020\000\022\027\n\023ATTR_REQUEST_ORIGIN\020"
  "\001\022\034\n\030ATTR_REQUEST_CRITICALITY\020\002\"\222\001\n\rLogg"
  "ingConfig\022D\n\024log_collector_config\030\001 \001(\0132"
  "&.tensorflow.serving.LogCollectorConfig\022"
  ";\n\017sampling_config\030\002 \001(\0132\".tensorflow.se"
  "rving.SamplingConfigB\003\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_5fserving_2fconfig_2flog_5fcollector_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto = {
    false, false, 433, descriptor_table_protodef_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto,
    "tensorflow_serving/config/logging_config.proto",
    &descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_once, descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto::offsets,
    file_level_metadata_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto, file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto,
    file_level_service_descriptors_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_getter() {
  return &descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto(&descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto);
namespace tensorflow {
namespace serving {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamplingConfig_Attributes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto[0];
}
bool SamplingConfig_Attributes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SamplingConfig_Attributes SamplingConfig::ATTR_DEFAULT;
constexpr SamplingConfig_Attributes SamplingConfig::ATTR_REQUEST_ORIGIN;
constexpr SamplingConfig_Attributes SamplingConfig::ATTR_REQUEST_CRITICALITY;
constexpr SamplingConfig_Attributes SamplingConfig::Attributes_MIN;
constexpr SamplingConfig_Attributes SamplingConfig::Attributes_MAX;
constexpr int SamplingConfig::Attributes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SamplingConfig::_Internal {
 public:
};

SamplingConfig::SamplingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.SamplingConfig)
}
SamplingConfig::SamplingConfig(const SamplingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SamplingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sampling_rate_){}
    , decltype(_impl_.attributes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sampling_rate_, &from._impl_.sampling_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attributes_) -
    reinterpret_cast<char*>(&_impl_.sampling_rate_)) + sizeof(_impl_.attributes_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SamplingConfig)
}

inline void SamplingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sampling_rate_){0}
    , decltype(_impl_.attributes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SamplingConfig::~SamplingConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SamplingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SamplingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SamplingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SamplingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SamplingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sampling_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attributes_) -
      reinterpret_cast<char*>(&_impl_.sampling_rate_)) + sizeof(_impl_.attributes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double sampling_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.sampling_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SamplingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SamplingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double sampling_rate = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_rate = this->_internal_sampling_rate();
  uint64_t raw_sampling_rate;
  memcpy(&raw_sampling_rate, &tmp_sampling_rate, sizeof(tmp_sampling_rate));
  if (raw_sampling_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_sampling_rate(), target);
  }

  // int32 attributes = 2;
  if (this->_internal_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_attributes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SamplingConfig)
  return target;
}

size_t SamplingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SamplingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double sampling_rate = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_rate = this->_internal_sampling_rate();
  uint64_t raw_sampling_rate;
  memcpy(&raw_sampling_rate, &tmp_sampling_rate, sizeof(tmp_sampling_rate));
  if (raw_sampling_rate != 0) {
    total_size += 1 + 8;
  }

  // int32 attributes = 2;
  if (this->_internal_attributes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attributes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SamplingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SamplingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SamplingConfig::GetClassData() const { return &_class_data_; }


void SamplingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SamplingConfig*>(&to_msg);
  auto& from = static_cast<const SamplingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SamplingConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_rate = from._internal_sampling_rate();
  uint64_t raw_sampling_rate;
  memcpy(&raw_sampling_rate, &tmp_sampling_rate, sizeof(tmp_sampling_rate));
  if (raw_sampling_rate != 0) {
    _this->_internal_set_sampling_rate(from._internal_sampling_rate());
  }
  if (from._internal_attributes() != 0) {
    _this->_internal_set_attributes(from._internal_attributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SamplingConfig::CopyFrom(const SamplingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SamplingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingConfig::IsInitialized() const {
  return true;
}

void SamplingConfig::InternalSwap(SamplingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SamplingConfig, _impl_.attributes_)
      + sizeof(SamplingConfig::_impl_.attributes_)
      - PROTOBUF_FIELD_OFFSET(SamplingConfig, _impl_.sampling_rate_)>(
          reinterpret_cast<char*>(&_impl_.sampling_rate_),
          reinterpret_cast<char*>(&other->_impl_.sampling_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto[0]);
}

// ===================================================================

class LoggingConfig::_Internal {
 public:
  static const ::tensorflow::serving::LogCollectorConfig& log_collector_config(const LoggingConfig* msg);
  static const ::tensorflow::serving::SamplingConfig& sampling_config(const LoggingConfig* msg);
};

const ::tensorflow::serving::LogCollectorConfig&
LoggingConfig::_Internal::log_collector_config(const LoggingConfig* msg) {
  return *msg->_impl_.log_collector_config_;
}
const ::tensorflow::serving::SamplingConfig&
LoggingConfig::_Internal::sampling_config(const LoggingConfig* msg) {
  return *msg->_impl_.sampling_config_;
}
void LoggingConfig::clear_log_collector_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.log_collector_config_ != nullptr) {
    delete _impl_.log_collector_config_;
  }
  _impl_.log_collector_config_ = nullptr;
}
LoggingConfig::LoggingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.LoggingConfig)
}
LoggingConfig::LoggingConfig(const LoggingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoggingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_collector_config_){nullptr}
    , decltype(_impl_.sampling_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_log_collector_config()) {
    _this->_impl_.log_collector_config_ = new ::tensorflow::serving::LogCollectorConfig(*from._impl_.log_collector_config_);
  }
  if (from._internal_has_sampling_config()) {
    _this->_impl_.sampling_config_ = new ::tensorflow::serving::SamplingConfig(*from._impl_.sampling_config_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.LoggingConfig)
}

inline void LoggingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_collector_config_){nullptr}
    , decltype(_impl_.sampling_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoggingConfig::~LoggingConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.LoggingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoggingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.log_collector_config_;
  if (this != internal_default_instance()) delete _impl_.sampling_config_;
}

void LoggingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoggingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.LoggingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.log_collector_config_ != nullptr) {
    delete _impl_.log_collector_config_;
  }
  _impl_.log_collector_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sampling_config_ != nullptr) {
    delete _impl_.sampling_config_;
  }
  _impl_.sampling_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoggingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.serving.LogCollectorConfig log_collector_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_collector_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.SamplingConfig sampling_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampling_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoggingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.LoggingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.LogCollectorConfig log_collector_config = 1;
  if (this->_internal_has_log_collector_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::log_collector_config(this),
        _Internal::log_collector_config(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.serving.SamplingConfig sampling_config = 2;
  if (this->_internal_has_sampling_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sampling_config(this),
        _Internal::sampling_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.LoggingConfig)
  return target;
}

size_t LoggingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.LoggingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.serving.LogCollectorConfig log_collector_config = 1;
  if (this->_internal_has_log_collector_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.log_collector_config_);
  }

  // .tensorflow.serving.SamplingConfig sampling_config = 2;
  if (this->_internal_has_sampling_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sampling_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoggingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoggingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoggingConfig::GetClassData() const { return &_class_data_; }


void LoggingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoggingConfig*>(&to_msg);
  auto& from = static_cast<const LoggingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.LoggingConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_log_collector_config()) {
    _this->_internal_mutable_log_collector_config()->::tensorflow::serving::LogCollectorConfig::MergeFrom(
        from._internal_log_collector_config());
  }
  if (from._internal_has_sampling_config()) {
    _this->_internal_mutable_sampling_config()->::tensorflow::serving::SamplingConfig::MergeFrom(
        from._internal_sampling_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoggingConfig::CopyFrom(const LoggingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.LoggingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingConfig::IsInitialized() const {
  return true;
}

void LoggingConfig::InternalSwap(LoggingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoggingConfig, _impl_.sampling_config_)
      + sizeof(LoggingConfig::_impl_.sampling_config_)
      - PROTOBUF_FIELD_OFFSET(LoggingConfig, _impl_.log_collector_config_)>(
          reinterpret_cast<char*>(&_impl_.log_collector_config_),
          reinterpret_cast<char*>(&other->_impl_.log_collector_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::SamplingConfig*
Arena::CreateMaybeMessage< ::tensorflow::serving::SamplingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::SamplingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::LoggingConfig*
Arena::CreateMaybeMessage< ::tensorflow::serving::LoggingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::LoggingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
