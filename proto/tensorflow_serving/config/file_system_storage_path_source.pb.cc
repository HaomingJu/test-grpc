// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/file_system_storage_path_source.proto

#include "tensorflow_serving/config/file_system_storage_path_source.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace serving {
PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_versions_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal() {}
  union {
    FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_;
PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(
    ::_pbi::ConstantInitialized) {}
struct FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal() {}
  union {
    FileSystemStoragePathSourceConfig_ServableVersionPolicy_All _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_;
PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.versions_)*/{}
  , /*decltype(_impl_._versions_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal() {}
  union {
    FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_;
PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy::FileSystemStoragePathSourceConfig_ServableVersionPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.policy_choice_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal() {}
  union {
    FileSystemStoragePathSourceConfig_ServableVersionPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_;
PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servable_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.servable_version_policy_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal() {}
  union {
    FileSystemStoragePathSourceConfig_ServableToMonitor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_;
PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servables_)*/{}
  , /*decltype(_impl_.file_system_poll_wait_seconds_)*/int64_t{0}
  , /*decltype(_impl_.fail_if_zero_versions_at_startup_)*/false
  , /*decltype(_impl_.servable_versions_always_present_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileSystemStoragePathSourceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileSystemStoragePathSourceConfigDefaultTypeInternal() {}
  union {
    FileSystemStoragePathSourceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileSystemStoragePathSourceConfigDefaultTypeInternal _FileSystemStoragePathSourceConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest, _impl_.num_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific, _impl_.versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy, _impl_.policy_choice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor, _impl_.servable_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor, _impl_.base_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor, _impl_.servable_version_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, _impl_.servables_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, _impl_.file_system_poll_wait_seconds_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, _impl_.fail_if_zero_versions_at_startup_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, _impl_.servable_versions_always_present_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest)},
  { 7, -1, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All)},
  { 13, -1, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific)},
  { 20, -1, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy)},
  { 30, -1, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor)},
  { 39, -1, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_._instance,
  &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_._instance,
  &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_._instance,
  &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_._instance,
  &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_._instance,
  &::tensorflow::serving::_FileSystemStoragePathSourceConfig_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?tensorflow_serving/config/file_system_"
  "storage_path_source.proto\022\022tensorflow.se"
  "rving\"\336\006\n!FileSystemStoragePathSourceCon"
  "fig\022Z\n\tservables\030\005 \003(\0132G.tensorflow.serv"
  "ing.FileSystemStoragePathSourceConfig.Se"
  "rvableToMonitor\022%\n\035file_system_poll_wait"
  "_seconds\030\003 \001(\003\022,\n fail_if_zero_versions_"
  "at_startup\030\004 \001(\010B\002\030\001\022(\n servable_version"
  "s_always_present\030\006 \001(\010\032\235\003\n\025ServableVersi"
  "onPolicy\022d\n\006latest\030d \001(\0132R.tensorflow.se"
  "rving.FileSystemStoragePathSourceConfig."
  "ServableVersionPolicy.LatestH\000\022^\n\003all\030e "
  "\001(\0132O.tensorflow.serving.FileSystemStora"
  "gePathSourceConfig.ServableVersionPolicy"
  ".AllH\000\022h\n\010specific\030f \001(\0132T.tensorflow.se"
  "rving.FileSystemStoragePathSourceConfig."
  "ServableVersionPolicy.SpecificH\000\032\036\n\006Late"
  "st\022\024\n\014num_versions\030\001 \001(\r\032\005\n\003All\032\034\n\010Speci"
  "fic\022\020\n\010versions\030\001 \003(\003B\017\n\rpolicy_choice\032\261"
  "\001\n\021ServableToMonitor\022\025\n\rservable_name\030\001 "
  "\001(\t\022\021\n\tbase_path\030\002 \001(\t\022l\n\027servable_versi"
  "on_policy\030\004 \001(\0132K.tensorflow.serving.Fil"
  "eSystemStoragePathSourceConfig.ServableV"
  "ersionPolicyJ\004\010\003\020\004J\004\010\001\020\002J\004\010\002\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto = {
    false, false, 958, descriptor_table_protodef_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto,
    "tensorflow_serving/config/file_system_storage_path_source.proto",
    &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::offsets,
    file_level_metadata_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto, file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto,
    file_level_service_descriptors_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_getter() {
  return &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto(&descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
namespace tensorflow {
namespace serving {

// ===================================================================

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_Internal {
 public:
};

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_versions_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_versions_ = from._impl_.num_versions_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
}

inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_versions_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_versions_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_versions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->_internal_num_versions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_versions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->_internal_num_versions() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_versions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::GetClassData() const { return &_class_data_; }


void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest*>(&to_msg);
  auto& from = static_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_versions() != 0) {
    _this->_internal_set_num_versions(from._internal_num_versions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.num_versions_, other->_impl_.num_versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[0]);
}

// ===================================================================

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::_Internal {
 public:
};

FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[1]);
}

// ===================================================================

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_Internal {
 public:
};

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.versions_){from._impl_.versions_}
    , /*decltype(_impl_._versions_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
}

inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.versions_){arena}
    , /*decltype(_impl_._versions_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.versions_.~RepeatedField();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.versions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_versions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_versions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  {
    int byte_size = _impl_._versions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_versions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.versions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._versions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::GetClassData() const { return &_class_data_; }


void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific*>(&to_msg);
  auto& from = static_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.versions_.MergeFrom(from._impl_.versions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.versions_.InternalSwap(&other->_impl_.versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[2]);
}

// ===================================================================

class FileSystemStoragePathSourceConfig_ServableVersionPolicy::_Internal {
 public:
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg);
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& all(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg);
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg);
};

const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&
FileSystemStoragePathSourceConfig_ServableVersionPolicy::_Internal::latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg) {
  return *msg->_impl_.policy_choice_.latest_;
}
const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&
FileSystemStoragePathSourceConfig_ServableVersionPolicy::_Internal::all(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg) {
  return *msg->_impl_.policy_choice_.all_;
}
const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&
FileSystemStoragePathSourceConfig_ServableVersionPolicy::_Internal::specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg) {
  return *msg->_impl_.policy_choice_.specific_;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_policy_choice();
  if (latest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(latest);
    if (message_arena != submessage_arena) {
      latest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest, submessage_arena);
    }
    set_has_latest();
    _impl_.policy_choice_.latest_ = latest;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_policy_choice();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all);
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    _impl_.policy_choice_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_policy_choice();
  if (specific) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(specific);
    if (message_arena != submessage_arena) {
      specific = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specific, submessage_arena);
    }
    set_has_specific();
    _impl_.policy_choice_.specific_ = specific;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy::FileSystemStoragePathSourceConfig_ServableVersionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy::FileSystemStoragePathSourceConfig_ServableVersionPolicy(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_choice_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_policy_choice();
  switch (from.policy_choice_case()) {
    case kLatest: {
      _this->_internal_mutable_latest()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(
          from._internal_latest());
      break;
    }
    case kAll: {
      _this->_internal_mutable_all()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(
          from._internal_all());
      break;
    }
    case kSpecific: {
      _this->_internal_mutable_specific()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(
          from._internal_specific());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
}

inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_choice_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_policy_choice();
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy::~FileSystemStoragePathSourceConfig_ServableVersionPolicy() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_policy_choice()) {
    clear_policy_choice();
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_policy_choice() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  switch (policy_choice_case()) {
    case kLatest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.policy_choice_.latest_;
      }
      break;
    }
    case kAll: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.policy_choice_.all_;
      }
      break;
    }
    case kSpecific: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.policy_choice_.specific_;
      }
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}


void FileSystemStoragePathSourceConfig_ServableVersionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_policy_choice();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_specific(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
  if (_internal_has_latest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::latest(this),
        _Internal::latest(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
  if (_internal_has_all()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::all(this),
        _Internal::all(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
  if (_internal_has_specific()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::specific(this),
        _Internal::specific(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableVersionPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (policy_choice_case()) {
    // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
    case kLatest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.policy_choice_.latest_);
      break;
    }
    // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
    case kAll: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.policy_choice_.all_);
      break;
    }
    // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
    case kSpecific: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.policy_choice_.specific_);
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileSystemStoragePathSourceConfig_ServableVersionPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileSystemStoragePathSourceConfig_ServableVersionPolicy::GetClassData() const { return &_class_data_; }


void FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(&to_msg);
  auto& from = static_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.policy_choice_case()) {
    case kLatest: {
      _this->_internal_mutable_latest()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(
          from._internal_latest());
      break;
    }
    case kAll: {
      _this->_internal_mutable_all()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(
          from._internal_all());
      break;
    }
    case kSpecific: {
      _this->_internal_mutable_specific()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(
          from._internal_specific());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.policy_choice_, other->_impl_.policy_choice_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[3]);
}

// ===================================================================

class FileSystemStoragePathSourceConfig_ServableToMonitor::_Internal {
 public:
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& servable_version_policy(const FileSystemStoragePathSourceConfig_ServableToMonitor* msg);
};

const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy&
FileSystemStoragePathSourceConfig_ServableToMonitor::_Internal::servable_version_policy(const FileSystemStoragePathSourceConfig_ServableToMonitor* msg) {
  return *msg->_impl_.servable_version_policy_;
}
FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}
FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor(const FileSystemStoragePathSourceConfig_ServableToMonitor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileSystemStoragePathSourceConfig_ServableToMonitor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servable_name_){}
    , decltype(_impl_.base_path_){}
    , decltype(_impl_.servable_version_policy_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servable_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servable_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servable_name().empty()) {
    _this->_impl_.servable_name_.Set(from._internal_servable_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_path().empty()) {
    _this->_impl_.base_path_.Set(from._internal_base_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_servable_version_policy()) {
    _this->_impl_.servable_version_policy_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy(*from._impl_.servable_version_policy_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}

inline void FileSystemStoragePathSourceConfig_ServableToMonitor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servable_name_){}
    , decltype(_impl_.base_path_){}
    , decltype(_impl_.servable_version_policy_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servable_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servable_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileSystemStoragePathSourceConfig_ServableToMonitor::~FileSystemStoragePathSourceConfig_ServableToMonitor() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileSystemStoragePathSourceConfig_ServableToMonitor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servable_name_.Destroy();
  _impl_.base_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.servable_version_policy_;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servable_name_.ClearToEmpty();
  _impl_.base_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.servable_version_policy_ != nullptr) {
    delete _impl_.servable_version_policy_;
  }
  _impl_.servable_version_policy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableToMonitor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string servable_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_servable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name"));
        } else
          goto handle_unusual;
        continue;
      // string base_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_servable_version_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileSystemStoragePathSourceConfig_ServableToMonitor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string servable_name = 1;
  if (!this->_internal_servable_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servable_name().data(), static_cast<int>(this->_internal_servable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servable_name(), target);
  }

  // string base_path = 2;
  if (!this->_internal_base_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_path().data(), static_cast<int>(this->_internal_base_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_base_path(), target);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  if (this->_internal_has_servable_version_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::servable_version_policy(this),
        _Internal::servable_version_policy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableToMonitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string servable_name = 1;
  if (!this->_internal_servable_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servable_name());
  }

  // string base_path = 2;
  if (!this->_internal_base_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_path());
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  if (this->_internal_has_servable_version_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.servable_version_policy_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileSystemStoragePathSourceConfig_ServableToMonitor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileSystemStoragePathSourceConfig_ServableToMonitor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileSystemStoragePathSourceConfig_ServableToMonitor::GetClassData() const { return &_class_data_; }


void FileSystemStoragePathSourceConfig_ServableToMonitor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileSystemStoragePathSourceConfig_ServableToMonitor*>(&to_msg);
  auto& from = static_cast<const FileSystemStoragePathSourceConfig_ServableToMonitor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servable_name().empty()) {
    _this->_internal_set_servable_name(from._internal_servable_name());
  }
  if (!from._internal_base_path().empty()) {
    _this->_internal_set_base_path(from._internal_base_path());
  }
  if (from._internal_has_servable_version_policy()) {
    _this->_internal_mutable_servable_version_policy()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(
        from._internal_servable_version_policy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::CopyFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableToMonitor::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::InternalSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servable_name_, lhs_arena,
      &other->_impl_.servable_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base_path_, lhs_arena,
      &other->_impl_.base_path_, rhs_arena
  );
  swap(_impl_.servable_version_policy_, other->_impl_.servable_version_policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableToMonitor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[4]);
}

// ===================================================================

class FileSystemStoragePathSourceConfig::_Internal {
 public:
};

FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
}
FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig(const FileSystemStoragePathSourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileSystemStoragePathSourceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servables_){from._impl_.servables_}
    , decltype(_impl_.file_system_poll_wait_seconds_){}
    , decltype(_impl_.fail_if_zero_versions_at_startup_){}
    , decltype(_impl_.servable_versions_always_present_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.file_system_poll_wait_seconds_, &from._impl_.file_system_poll_wait_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servable_versions_always_present_) -
    reinterpret_cast<char*>(&_impl_.file_system_poll_wait_seconds_)) + sizeof(_impl_.servable_versions_always_present_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
}

inline void FileSystemStoragePathSourceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servables_){arena}
    , decltype(_impl_.file_system_poll_wait_seconds_){int64_t{0}}
    , decltype(_impl_.fail_if_zero_versions_at_startup_){false}
    , decltype(_impl_.servable_versions_always_present_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileSystemStoragePathSourceConfig::~FileSystemStoragePathSourceConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileSystemStoragePathSourceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servables_.~RepeatedPtrField();
}

void FileSystemStoragePathSourceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileSystemStoragePathSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servables_.Clear();
  ::memset(&_impl_.file_system_poll_wait_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servable_versions_always_present_) -
      reinterpret_cast<char*>(&_impl_.file_system_poll_wait_seconds_)) + sizeof(_impl_.servable_versions_always_present_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 file_system_poll_wait_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.file_system_poll_wait_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.fail_if_zero_versions_at_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool servable_versions_always_present = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.servable_versions_always_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileSystemStoragePathSourceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 file_system_poll_wait_seconds = 3;
  if (this->_internal_file_system_poll_wait_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_file_system_poll_wait_seconds(), target);
  }

  // bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  if (this->_internal_fail_if_zero_versions_at_startup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_fail_if_zero_versions_at_startup(), target);
  }

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_servables_size()); i < n; i++) {
    const auto& repfield = this->_internal_servables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool servable_versions_always_present = 6;
  if (this->_internal_servable_versions_always_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_servable_versions_always_present(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig)
  return target;
}

size_t FileSystemStoragePathSourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  total_size += 1UL * this->_internal_servables_size();
  for (const auto& msg : this->_impl_.servables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 file_system_poll_wait_seconds = 3;
  if (this->_internal_file_system_poll_wait_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_system_poll_wait_seconds());
  }

  // bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  if (this->_internal_fail_if_zero_versions_at_startup() != 0) {
    total_size += 1 + 1;
  }

  // bool servable_versions_always_present = 6;
  if (this->_internal_servable_versions_always_present() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileSystemStoragePathSourceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileSystemStoragePathSourceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileSystemStoragePathSourceConfig::GetClassData() const { return &_class_data_; }


void FileSystemStoragePathSourceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileSystemStoragePathSourceConfig*>(&to_msg);
  auto& from = static_cast<const FileSystemStoragePathSourceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.servables_.MergeFrom(from._impl_.servables_);
  if (from._internal_file_system_poll_wait_seconds() != 0) {
    _this->_internal_set_file_system_poll_wait_seconds(from._internal_file_system_poll_wait_seconds());
  }
  if (from._internal_fail_if_zero_versions_at_startup() != 0) {
    _this->_internal_set_fail_if_zero_versions_at_startup(from._internal_fail_if_zero_versions_at_startup());
  }
  if (from._internal_servable_versions_always_present() != 0) {
    _this->_internal_set_servable_versions_always_present(from._internal_servable_versions_always_present());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileSystemStoragePathSourceConfig::CopyFrom(const FileSystemStoragePathSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig::InternalSwap(FileSystemStoragePathSourceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.servables_.InternalSwap(&other->_impl_.servables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileSystemStoragePathSourceConfig, _impl_.servable_versions_always_present_)
      + sizeof(FileSystemStoragePathSourceConfig::_impl_.servable_versions_always_present_)
      - PROTOBUF_FIELD_OFFSET(FileSystemStoragePathSourceConfig, _impl_.file_system_poll_wait_seconds_)>(
          reinterpret_cast<char*>(&_impl_.file_system_poll_wait_seconds_),
          reinterpret_cast<char*>(&other->_impl_.file_system_poll_wait_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_getter, &descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once,
      file_level_metadata_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest*
Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All*
Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific*
Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*
Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor*
Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig*
Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
