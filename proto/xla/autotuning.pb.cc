// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/autotuning.proto

#include "xla/autotuning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xla {
PROTOBUF_CONSTEXPR CudnnVersion::CudnnVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.major_)*/0
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_.patch_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CudnnVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CudnnVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CudnnVersionDefaultTypeInternal() {}
  union {
    CudnnVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CudnnVersionDefaultTypeInternal _CudnnVersion_default_instance_;
PROTOBUF_CONSTEXPR ComputeCapability::ComputeCapability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.major_)*/0
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComputeCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputeCapabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputeCapabilityDefaultTypeInternal() {}
  union {
    ComputeCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputeCapabilityDefaultTypeInternal _ComputeCapability_default_instance_;
PROTOBUF_CONSTEXPR AutotuneResult_FailureResult::AutotuneResult_FailureResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buffer_address_)*/int64_t{0}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.key_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AutotuneResult_FailureResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutotuneResult_FailureResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutotuneResult_FailureResultDefaultTypeInternal() {}
  union {
    AutotuneResult_FailureResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutotuneResult_FailureResultDefaultTypeInternal _AutotuneResult_FailureResult_default_instance_;
PROTOBUF_CONSTEXPR AutotuneResult_ConvKey::AutotuneResult_ConvKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.algorithm_)*/int64_t{0}
  , /*decltype(_impl_.tensor_ops_enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutotuneResult_ConvKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutotuneResult_ConvKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutotuneResult_ConvKeyDefaultTypeInternal() {}
  union {
    AutotuneResult_ConvKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutotuneResult_ConvKeyDefaultTypeInternal _AutotuneResult_ConvKey_default_instance_;
PROTOBUF_CONSTEXPR AutotuneResult_GemmKey::AutotuneResult_GemmKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.algorithm_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutotuneResult_GemmKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutotuneResult_GemmKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutotuneResult_GemmKeyDefaultTypeInternal() {}
  union {
    AutotuneResult_GemmKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutotuneResult_GemmKeyDefaultTypeInternal _AutotuneResult_GemmKey_default_instance_;
PROTOBUF_CONSTEXPR AutotuneResult_CudaConvPlanKey::AutotuneResult_CudaConvPlanKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exec_plan_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutotuneResult_CudaConvPlanKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutotuneResult_CudaConvPlanKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutotuneResult_CudaConvPlanKeyDefaultTypeInternal() {}
  union {
    AutotuneResult_CudaConvPlanKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutotuneResult_CudaConvPlanKeyDefaultTypeInternal _AutotuneResult_CudaConvPlanKey_default_instance_;
PROTOBUF_CONSTEXPR AutotuneResult_TritonGemmKey::AutotuneResult_TritonGemmKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_m_)*/int64_t{0}
  , /*decltype(_impl_.block_n_)*/int64_t{0}
  , /*decltype(_impl_.block_k_)*/int64_t{0}
  , /*decltype(_impl_.split_k_)*/int64_t{0}
  , /*decltype(_impl_.num_stages_)*/int64_t{0}
  , /*decltype(_impl_.num_warps_)*/int64_t{0}
  , /*decltype(_impl_.num_ctas_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutotuneResult_TritonGemmKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutotuneResult_TritonGemmKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutotuneResult_TritonGemmKeyDefaultTypeInternal() {}
  union {
    AutotuneResult_TritonGemmKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutotuneResult_TritonGemmKeyDefaultTypeInternal _AutotuneResult_TritonGemmKey_default_instance_;
PROTOBUF_CONSTEXPR AutotuneResult::AutotuneResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.failure_)*/nullptr
  , /*decltype(_impl_.run_time_)*/nullptr
  , /*decltype(_impl_.scratch_bytes_)*/int64_t{0}
  , /*decltype(_impl_.key_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AutotuneResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutotuneResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutotuneResultDefaultTypeInternal() {}
  union {
    AutotuneResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutotuneResultDefaultTypeInternal _AutotuneResult_default_instance_;
PROTOBUF_CONSTEXPR AutotuningLog::AutotuningLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.device_pci_bus_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blas_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fusion_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instr_)*/nullptr
  , /*decltype(_impl_.cudnn_version_)*/nullptr
  , /*decltype(_impl_.compute_capability_)*/nullptr
  , /*decltype(_impl_.fusion_count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutotuningLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutotuningLogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutotuningLogDefaultTypeInternal() {}
  union {
    AutotuningLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutotuningLogDefaultTypeInternal _AutotuningLog_default_instance_;
}  // namespace xla
static ::_pb::Metadata file_level_metadata_xla_2fautotuning_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_xla_2fautotuning_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xla_2fautotuning_2eproto = nullptr;

const uint32_t TableStruct_xla_2fautotuning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::CudnnVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::CudnnVersion, _impl_.major_),
  PROTOBUF_FIELD_OFFSET(::xla::CudnnVersion, _impl_.minor_),
  PROTOBUF_FIELD_OFFSET(::xla::CudnnVersion, _impl_.patch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ComputeCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ComputeCapability, _impl_.major_),
  PROTOBUF_FIELD_OFFSET(::xla::ComputeCapability, _impl_.minor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_FailureResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_FailureResult, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_FailureResult, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_FailureResult, _impl_.msg_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_FailureResult, _impl_.buffer_address_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_FailureResult, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_ConvKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_ConvKey, _impl_.algorithm_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_ConvKey, _impl_.tensor_ops_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_GemmKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_GemmKey, _impl_.algorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_CudaConvPlanKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_CudaConvPlanKey, _impl_.exec_plan_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_TritonGemmKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_TritonGemmKey, _impl_.block_m_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_TritonGemmKey, _impl_.block_n_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_TritonGemmKey, _impl_.block_k_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_TritonGemmKey, _impl_.split_k_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_TritonGemmKey, _impl_.num_stages_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_TritonGemmKey, _impl_.num_warps_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult_TritonGemmKey, _impl_.num_ctas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult, _impl_.scratch_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult, _impl_.run_time_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult, _impl_.failure_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::xla::AutotuneResult, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _impl_.instr_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _impl_.cudnn_version_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _impl_.compute_capability_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _impl_.device_pci_bus_id_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _impl_.blas_version_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _impl_.fusion_name_),
  PROTOBUF_FIELD_OFFSET(::xla::AutotuningLog, _impl_.fusion_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xla::CudnnVersion)},
  { 9, -1, -1, sizeof(::xla::ComputeCapability)},
  { 17, -1, -1, sizeof(::xla::AutotuneResult_FailureResult)},
  { 31, -1, -1, sizeof(::xla::AutotuneResult_ConvKey)},
  { 39, -1, -1, sizeof(::xla::AutotuneResult_GemmKey)},
  { 46, -1, -1, sizeof(::xla::AutotuneResult_CudaConvPlanKey)},
  { 53, -1, -1, sizeof(::xla::AutotuneResult_TritonGemmKey)},
  { 66, -1, -1, sizeof(::xla::AutotuneResult)},
  { 81, -1, -1, sizeof(::xla::AutotuningLog)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xla::_CudnnVersion_default_instance_._instance,
  &::xla::_ComputeCapability_default_instance_._instance,
  &::xla::_AutotuneResult_FailureResult_default_instance_._instance,
  &::xla::_AutotuneResult_ConvKey_default_instance_._instance,
  &::xla::_AutotuneResult_GemmKey_default_instance_._instance,
  &::xla::_AutotuneResult_CudaConvPlanKey_default_instance_._instance,
  &::xla::_AutotuneResult_TritonGemmKey_default_instance_._instance,
  &::xla::_AutotuneResult_default_instance_._instance,
  &::xla::_AutotuningLog_default_instance_._instance,
};

const char descriptor_table_protodef_xla_2fautotuning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024xla/autotuning.proto\022\003xla\032\031google/prot"
  "obuf/any.proto\032\036google/protobuf/duration"
  ".proto\032\026tsl/protobuf/dnn.proto\";\n\014CudnnV"
  "ersion\022\r\n\005major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005\022\r\n\005"
  "patch\030\003 \001(\005\"1\n\021ComputeCapability\022\r\n\005majo"
  "r\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005\"\345\010\n\016AutotuneResul"
  "t\022\025\n\rscratch_bytes\030\010 \001(\003\022+\n\010run_time\030\t \001"
  "(\0132\031.google.protobuf.Duration\0222\n\007failure"
  "\030\007 \001(\0132!.xla.AutotuneResult.FailureResul"
  "t\022+\n\004conv\030\005 \001(\0132\033.xla.AutotuneResult.Con"
  "vKeyH\000\022+\n\004gemm\030\006 \001(\0132\033.xla.AutotuneResul"
  "t.GemmKeyH\000\0223\n\006triton\030\021 \001(\0132!.xla.Autotu"
  "neResult.TritonGemmKeyH\000\022=\n\016cuda_conv_pl"
  "an\030\017 \001(\0132#.xla.AutotuneResult.CudaConvPl"
  "anKeyH\000\0228\n\talgorithm\030\020 \001(\0132#.stream_exec"
  "utor.dnn.AlgorithmProtoH\000\032\345\002\n\rFailureRes"
  "ult\022-\n\004kind\030\001 \001(\0162\037.xla.AutotuneResult.F"
  "ailureKind\022\013\n\003msg\030\002 \001(\t\0225\n\016reference_con"
  "v\030\013 \001(\0132\033.xla.AutotuneResult.ConvKeyH\000\0225"
  "\n\016reference_gemm\030\014 \001(\0132\033.xla.AutotuneRes"
  "ult.GemmKeyH\000\022G\n\030reference_cuda_conv_pla"
  "n\030\016 \001(\0132#.xla.AutotuneResult.CudaConvPla"
  "nKeyH\000\022B\n\023reference_algorithm\030\017 \001(\0132#.st"
  "ream_executor.dnn.AlgorithmProtoH\000\022\026\n\016bu"
  "ffer_address\030\r \001(\003B\005\n\003key\0328\n\007ConvKey\022\021\n\t"
  "algorithm\030\001 \001(\003\022\032\n\022tensor_ops_enabled\030\002 "
  "\001(\010\032\034\n\007GemmKey\022\021\n\talgorithm\030\001 \001(\003\032\'\n\017Cud"
  "aConvPlanKey\022\024\n\014exec_plan_id\030\001 \001(\t\032\214\001\n\rT"
  "ritonGemmKey\022\017\n\007block_m\030\001 \001(\003\022\017\n\007block_n"
  "\030\002 \001(\003\022\017\n\007block_k\030\003 \001(\003\022\017\n\007split_k\030\004 \001(\003"
  "\022\022\n\nnum_stages\030\005 \001(\003\022\021\n\tnum_warps\030\006 \001(\003\022"
  "\020\n\010num_ctas\030\007 \001(\003\"T\n\013FailureKind\022\013\n\007UNKN"
  "OWN\020\000\022\024\n\020REDZONE_MODIFIED\020\001\022\020\n\014WRONG_RES"
  "ULT\020\002\022\020\n\014DISQUALIFIED\020\003B\005\n\003key\"\224\002\n\rAutot"
  "uningLog\022#\n\005instr\030\001 \001(\0132\024.google.protobu"
  "f.Any\022$\n\007results\030\002 \003(\0132\023.xla.AutotuneRes"
  "ult\022(\n\rcudnn_version\030\003 \001(\0132\021.xla.CudnnVe"
  "rsion\0222\n\022compute_capability\030\004 \001(\0132\026.xla."
  "ComputeCapability\022\031\n\021device_pci_bus_id\030\005"
  " \001(\t\022\024\n\014blas_version\030\006 \001(\t\022\023\n\013fusion_nam"
  "e\030\007 \001(\t\022\024\n\014fusion_count\030\010 \001(\003b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_xla_2fautotuning_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_tsl_2fprotobuf_2fdnn_2eproto,
};
static ::_pbi::once_flag descriptor_table_xla_2fautotuning_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xla_2fautotuning_2eproto = {
    false, false, 1637, descriptor_table_protodef_xla_2fautotuning_2eproto,
    "xla/autotuning.proto",
    &descriptor_table_xla_2fautotuning_2eproto_once, descriptor_table_xla_2fautotuning_2eproto_deps, 3, 9,
    schemas, file_default_instances, TableStruct_xla_2fautotuning_2eproto::offsets,
    file_level_metadata_xla_2fautotuning_2eproto, file_level_enum_descriptors_xla_2fautotuning_2eproto,
    file_level_service_descriptors_xla_2fautotuning_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xla_2fautotuning_2eproto_getter() {
  return &descriptor_table_xla_2fautotuning_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xla_2fautotuning_2eproto(&descriptor_table_xla_2fautotuning_2eproto);
namespace xla {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutotuneResult_FailureKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fautotuning_2eproto);
  return file_level_enum_descriptors_xla_2fautotuning_2eproto[0];
}
bool AutotuneResult_FailureKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AutotuneResult_FailureKind AutotuneResult::UNKNOWN;
constexpr AutotuneResult_FailureKind AutotuneResult::REDZONE_MODIFIED;
constexpr AutotuneResult_FailureKind AutotuneResult::WRONG_RESULT;
constexpr AutotuneResult_FailureKind AutotuneResult::DISQUALIFIED;
constexpr AutotuneResult_FailureKind AutotuneResult::FailureKind_MIN;
constexpr AutotuneResult_FailureKind AutotuneResult::FailureKind_MAX;
constexpr int AutotuneResult::FailureKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CudnnVersion::_Internal {
 public:
};

CudnnVersion::CudnnVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.CudnnVersion)
}
CudnnVersion::CudnnVersion(const CudnnVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CudnnVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.patch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.major_, &from._impl_.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.patch_) -
    reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  // @@protoc_insertion_point(copy_constructor:xla.CudnnVersion)
}

inline void CudnnVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){0}
    , decltype(_impl_.minor_){0}
    , decltype(_impl_.patch_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CudnnVersion::~CudnnVersion() {
  // @@protoc_insertion_point(destructor:xla.CudnnVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CudnnVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CudnnVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CudnnVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CudnnVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.patch_) -
      reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CudnnVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CudnnVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.CudnnVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.CudnnVersion)
  return target;
}

size_t CudnnVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CudnnVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_major());
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CudnnVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CudnnVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CudnnVersion::GetClassData() const { return &_class_data_; }


void CudnnVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CudnnVersion*>(&to_msg);
  auto& from = static_cast<const CudnnVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.CudnnVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _this->_internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _this->_internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _this->_internal_set_patch(from._internal_patch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CudnnVersion::CopyFrom(const CudnnVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CudnnVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CudnnVersion::IsInitialized() const {
  return true;
}

void CudnnVersion::InternalSwap(CudnnVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CudnnVersion, _impl_.patch_)
      + sizeof(CudnnVersion::_impl_.patch_)
      - PROTOBUF_FIELD_OFFSET(CudnnVersion, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CudnnVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[0]);
}

// ===================================================================

class ComputeCapability::_Internal {
 public:
};

ComputeCapability::ComputeCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ComputeCapability)
}
ComputeCapability::ComputeCapability(const ComputeCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComputeCapability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){}
    , decltype(_impl_.minor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.major_, &from._impl_.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minor_) -
    reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.minor_));
  // @@protoc_insertion_point(copy_constructor:xla.ComputeCapability)
}

inline void ComputeCapability::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){0}
    , decltype(_impl_.minor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComputeCapability::~ComputeCapability() {
  // @@protoc_insertion_point(destructor:xla.ComputeCapability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComputeCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComputeCapability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComputeCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputeCapability)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.minor_) -
      reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.minor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputeCapability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComputeCapability::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputeCapability)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputeCapability)
  return target;
}

size_t ComputeCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputeCapability)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_major());
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComputeCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComputeCapability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComputeCapability::GetClassData() const { return &_class_data_; }


void ComputeCapability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComputeCapability*>(&to_msg);
  auto& from = static_cast<const ComputeCapability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputeCapability)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _this->_internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _this->_internal_set_minor(from._internal_minor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComputeCapability::CopyFrom(const ComputeCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeCapability::IsInitialized() const {
  return true;
}

void ComputeCapability::InternalSwap(ComputeCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputeCapability, _impl_.minor_)
      + sizeof(ComputeCapability::_impl_.minor_)
      - PROTOBUF_FIELD_OFFSET(ComputeCapability, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputeCapability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[1]);
}

// ===================================================================

class AutotuneResult_FailureResult::_Internal {
 public:
  static const ::xla::AutotuneResult_ConvKey& reference_conv(const AutotuneResult_FailureResult* msg);
  static const ::xla::AutotuneResult_GemmKey& reference_gemm(const AutotuneResult_FailureResult* msg);
  static const ::xla::AutotuneResult_CudaConvPlanKey& reference_cuda_conv_plan(const AutotuneResult_FailureResult* msg);
  static const ::stream_executor::dnn::AlgorithmProto& reference_algorithm(const AutotuneResult_FailureResult* msg);
};

const ::xla::AutotuneResult_ConvKey&
AutotuneResult_FailureResult::_Internal::reference_conv(const AutotuneResult_FailureResult* msg) {
  return *msg->_impl_.key_.reference_conv_;
}
const ::xla::AutotuneResult_GemmKey&
AutotuneResult_FailureResult::_Internal::reference_gemm(const AutotuneResult_FailureResult* msg) {
  return *msg->_impl_.key_.reference_gemm_;
}
const ::xla::AutotuneResult_CudaConvPlanKey&
AutotuneResult_FailureResult::_Internal::reference_cuda_conv_plan(const AutotuneResult_FailureResult* msg) {
  return *msg->_impl_.key_.reference_cuda_conv_plan_;
}
const ::stream_executor::dnn::AlgorithmProto&
AutotuneResult_FailureResult::_Internal::reference_algorithm(const AutotuneResult_FailureResult* msg) {
  return *msg->_impl_.key_.reference_algorithm_;
}
void AutotuneResult_FailureResult::set_allocated_reference_conv(::xla::AutotuneResult_ConvKey* reference_conv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (reference_conv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reference_conv);
    if (message_arena != submessage_arena) {
      reference_conv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_conv, submessage_arena);
    }
    set_has_reference_conv();
    _impl_.key_.reference_conv_ = reference_conv;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.FailureResult.reference_conv)
}
void AutotuneResult_FailureResult::set_allocated_reference_gemm(::xla::AutotuneResult_GemmKey* reference_gemm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (reference_gemm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reference_gemm);
    if (message_arena != submessage_arena) {
      reference_gemm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_gemm, submessage_arena);
    }
    set_has_reference_gemm();
    _impl_.key_.reference_gemm_ = reference_gemm;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.FailureResult.reference_gemm)
}
void AutotuneResult_FailureResult::set_allocated_reference_cuda_conv_plan(::xla::AutotuneResult_CudaConvPlanKey* reference_cuda_conv_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (reference_cuda_conv_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reference_cuda_conv_plan);
    if (message_arena != submessage_arena) {
      reference_cuda_conv_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_cuda_conv_plan, submessage_arena);
    }
    set_has_reference_cuda_conv_plan();
    _impl_.key_.reference_cuda_conv_plan_ = reference_cuda_conv_plan;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.FailureResult.reference_cuda_conv_plan)
}
void AutotuneResult_FailureResult::set_allocated_reference_algorithm(::stream_executor::dnn::AlgorithmProto* reference_algorithm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (reference_algorithm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_algorithm));
    if (message_arena != submessage_arena) {
      reference_algorithm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_algorithm, submessage_arena);
    }
    set_has_reference_algorithm();
    _impl_.key_.reference_algorithm_ = reference_algorithm;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.FailureResult.reference_algorithm)
}
void AutotuneResult_FailureResult::clear_reference_algorithm() {
  if (_internal_has_reference_algorithm()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.key_.reference_algorithm_;
    }
    clear_has_key();
  }
}
AutotuneResult_FailureResult::AutotuneResult_FailureResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.AutotuneResult.FailureResult)
}
AutotuneResult_FailureResult::AutotuneResult_FailureResult(const AutotuneResult_FailureResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutotuneResult_FailureResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.buffer_address_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buffer_address_, &from._impl_.buffer_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.buffer_address_)) + sizeof(_impl_.kind_));
  clear_has_key();
  switch (from.key_case()) {
    case kReferenceConv: {
      _this->_internal_mutable_reference_conv()->::xla::AutotuneResult_ConvKey::MergeFrom(
          from._internal_reference_conv());
      break;
    }
    case kReferenceGemm: {
      _this->_internal_mutable_reference_gemm()->::xla::AutotuneResult_GemmKey::MergeFrom(
          from._internal_reference_gemm());
      break;
    }
    case kReferenceCudaConvPlan: {
      _this->_internal_mutable_reference_cuda_conv_plan()->::xla::AutotuneResult_CudaConvPlanKey::MergeFrom(
          from._internal_reference_cuda_conv_plan());
      break;
    }
    case kReferenceAlgorithm: {
      _this->_internal_mutable_reference_algorithm()->::stream_executor::dnn::AlgorithmProto::MergeFrom(
          from._internal_reference_algorithm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:xla.AutotuneResult.FailureResult)
}

inline void AutotuneResult_FailureResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.buffer_address_){int64_t{0}}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_key();
}

AutotuneResult_FailureResult::~AutotuneResult_FailureResult() {
  // @@protoc_insertion_point(destructor:xla.AutotuneResult.FailureResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutotuneResult_FailureResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (has_key()) {
    clear_key();
  }
}

void AutotuneResult_FailureResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutotuneResult_FailureResult::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:xla.AutotuneResult.FailureResult)
  switch (key_case()) {
    case kReferenceConv: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.reference_conv_;
      }
      break;
    }
    case kReferenceGemm: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.reference_gemm_;
      }
      break;
    }
    case kReferenceCudaConvPlan: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.reference_cuda_conv_plan_;
      }
      break;
    }
    case kReferenceAlgorithm: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.reference_algorithm_;
      }
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KEY_NOT_SET;
}


void AutotuneResult_FailureResult::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.AutotuneResult.FailureResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.buffer_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.kind_) -
      reinterpret_cast<char*>(&_impl_.buffer_address_)) + sizeof(_impl_.kind_));
  clear_key();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult_FailureResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.AutotuneResult.FailureKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::xla::AutotuneResult_FailureKind>(val));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.AutotuneResult.FailureResult.msg"));
        } else
          goto handle_unusual;
        continue;
      // .xla.AutotuneResult.ConvKey reference_conv = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_conv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.AutotuneResult.GemmKey reference_gemm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_gemm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buffer_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.buffer_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.AutotuneResult.CudaConvPlanKey reference_cuda_conv_plan = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_cuda_conv_plan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.AlgorithmProto reference_algorithm = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_algorithm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutotuneResult_FailureResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.AutotuneResult.FailureResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.AutotuneResult.FailureKind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.AutotuneResult.FailureResult.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // .xla.AutotuneResult.ConvKey reference_conv = 11;
  if (_internal_has_reference_conv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::reference_conv(this),
        _Internal::reference_conv(this).GetCachedSize(), target, stream);
  }

  // .xla.AutotuneResult.GemmKey reference_gemm = 12;
  if (_internal_has_reference_gemm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::reference_gemm(this),
        _Internal::reference_gemm(this).GetCachedSize(), target, stream);
  }

  // int64 buffer_address = 13;
  if (this->_internal_buffer_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_buffer_address(), target);
  }

  // .xla.AutotuneResult.CudaConvPlanKey reference_cuda_conv_plan = 14;
  if (_internal_has_reference_cuda_conv_plan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::reference_cuda_conv_plan(this),
        _Internal::reference_cuda_conv_plan(this).GetCachedSize(), target, stream);
  }

  // .stream_executor.dnn.AlgorithmProto reference_algorithm = 15;
  if (_internal_has_reference_algorithm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::reference_algorithm(this),
        _Internal::reference_algorithm(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.AutotuneResult.FailureResult)
  return target;
}

size_t AutotuneResult_FailureResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.AutotuneResult.FailureResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int64 buffer_address = 13;
  if (this->_internal_buffer_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buffer_address());
  }

  // .xla.AutotuneResult.FailureKind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  switch (key_case()) {
    // .xla.AutotuneResult.ConvKey reference_conv = 11;
    case kReferenceConv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.reference_conv_);
      break;
    }
    // .xla.AutotuneResult.GemmKey reference_gemm = 12;
    case kReferenceGemm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.reference_gemm_);
      break;
    }
    // .xla.AutotuneResult.CudaConvPlanKey reference_cuda_conv_plan = 14;
    case kReferenceCudaConvPlan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.reference_cuda_conv_plan_);
      break;
    }
    // .stream_executor.dnn.AlgorithmProto reference_algorithm = 15;
    case kReferenceAlgorithm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.reference_algorithm_);
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutotuneResult_FailureResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutotuneResult_FailureResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutotuneResult_FailureResult::GetClassData() const { return &_class_data_; }


void AutotuneResult_FailureResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutotuneResult_FailureResult*>(&to_msg);
  auto& from = static_cast<const AutotuneResult_FailureResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.AutotuneResult.FailureResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_buffer_address() != 0) {
    _this->_internal_set_buffer_address(from._internal_buffer_address());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  switch (from.key_case()) {
    case kReferenceConv: {
      _this->_internal_mutable_reference_conv()->::xla::AutotuneResult_ConvKey::MergeFrom(
          from._internal_reference_conv());
      break;
    }
    case kReferenceGemm: {
      _this->_internal_mutable_reference_gemm()->::xla::AutotuneResult_GemmKey::MergeFrom(
          from._internal_reference_gemm());
      break;
    }
    case kReferenceCudaConvPlan: {
      _this->_internal_mutable_reference_cuda_conv_plan()->::xla::AutotuneResult_CudaConvPlanKey::MergeFrom(
          from._internal_reference_cuda_conv_plan());
      break;
    }
    case kReferenceAlgorithm: {
      _this->_internal_mutable_reference_algorithm()->::stream_executor::dnn::AlgorithmProto::MergeFrom(
          from._internal_reference_algorithm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuneResult_FailureResult::CopyFrom(const AutotuneResult_FailureResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.AutotuneResult.FailureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_FailureResult::IsInitialized() const {
  return true;
}

void AutotuneResult_FailureResult::InternalSwap(AutotuneResult_FailureResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuneResult_FailureResult, _impl_.kind_)
      + sizeof(AutotuneResult_FailureResult::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(AutotuneResult_FailureResult, _impl_.buffer_address_)>(
          reinterpret_cast<char*>(&_impl_.buffer_address_),
          reinterpret_cast<char*>(&other->_impl_.buffer_address_));
  swap(_impl_.key_, other->_impl_.key_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult_FailureResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[2]);
}

// ===================================================================

class AutotuneResult_ConvKey::_Internal {
 public:
};

AutotuneResult_ConvKey::AutotuneResult_ConvKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.AutotuneResult.ConvKey)
}
AutotuneResult_ConvKey::AutotuneResult_ConvKey(const AutotuneResult_ConvKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutotuneResult_ConvKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.algorithm_){}
    , decltype(_impl_.tensor_ops_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.algorithm_, &from._impl_.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tensor_ops_enabled_) -
    reinterpret_cast<char*>(&_impl_.algorithm_)) + sizeof(_impl_.tensor_ops_enabled_));
  // @@protoc_insertion_point(copy_constructor:xla.AutotuneResult.ConvKey)
}

inline void AutotuneResult_ConvKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.algorithm_){int64_t{0}}
    , decltype(_impl_.tensor_ops_enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AutotuneResult_ConvKey::~AutotuneResult_ConvKey() {
  // @@protoc_insertion_point(destructor:xla.AutotuneResult.ConvKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutotuneResult_ConvKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutotuneResult_ConvKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutotuneResult_ConvKey::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.AutotuneResult.ConvKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tensor_ops_enabled_) -
      reinterpret_cast<char*>(&_impl_.algorithm_)) + sizeof(_impl_.tensor_ops_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult_ConvKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool tensor_ops_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tensor_ops_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutotuneResult_ConvKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.AutotuneResult.ConvKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_algorithm(), target);
  }

  // bool tensor_ops_enabled = 2;
  if (this->_internal_tensor_ops_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_tensor_ops_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.AutotuneResult.ConvKey)
  return target;
}

size_t AutotuneResult_ConvKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.AutotuneResult.ConvKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_algorithm());
  }

  // bool tensor_ops_enabled = 2;
  if (this->_internal_tensor_ops_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutotuneResult_ConvKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutotuneResult_ConvKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutotuneResult_ConvKey::GetClassData() const { return &_class_data_; }


void AutotuneResult_ConvKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutotuneResult_ConvKey*>(&to_msg);
  auto& from = static_cast<const AutotuneResult_ConvKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.AutotuneResult.ConvKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_algorithm() != 0) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_tensor_ops_enabled() != 0) {
    _this->_internal_set_tensor_ops_enabled(from._internal_tensor_ops_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuneResult_ConvKey::CopyFrom(const AutotuneResult_ConvKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.AutotuneResult.ConvKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_ConvKey::IsInitialized() const {
  return true;
}

void AutotuneResult_ConvKey::InternalSwap(AutotuneResult_ConvKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuneResult_ConvKey, _impl_.tensor_ops_enabled_)
      + sizeof(AutotuneResult_ConvKey::_impl_.tensor_ops_enabled_)
      - PROTOBUF_FIELD_OFFSET(AutotuneResult_ConvKey, _impl_.algorithm_)>(
          reinterpret_cast<char*>(&_impl_.algorithm_),
          reinterpret_cast<char*>(&other->_impl_.algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult_ConvKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[3]);
}

// ===================================================================

class AutotuneResult_GemmKey::_Internal {
 public:
};

AutotuneResult_GemmKey::AutotuneResult_GemmKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.AutotuneResult.GemmKey)
}
AutotuneResult_GemmKey::AutotuneResult_GemmKey(const AutotuneResult_GemmKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutotuneResult_GemmKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.algorithm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.algorithm_ = from._impl_.algorithm_;
  // @@protoc_insertion_point(copy_constructor:xla.AutotuneResult.GemmKey)
}

inline void AutotuneResult_GemmKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.algorithm_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AutotuneResult_GemmKey::~AutotuneResult_GemmKey() {
  // @@protoc_insertion_point(destructor:xla.AutotuneResult.GemmKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutotuneResult_GemmKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutotuneResult_GemmKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutotuneResult_GemmKey::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.AutotuneResult.GemmKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.algorithm_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult_GemmKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutotuneResult_GemmKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.AutotuneResult.GemmKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.AutotuneResult.GemmKey)
  return target;
}

size_t AutotuneResult_GemmKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.AutotuneResult.GemmKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_algorithm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutotuneResult_GemmKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutotuneResult_GemmKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutotuneResult_GemmKey::GetClassData() const { return &_class_data_; }


void AutotuneResult_GemmKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutotuneResult_GemmKey*>(&to_msg);
  auto& from = static_cast<const AutotuneResult_GemmKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.AutotuneResult.GemmKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_algorithm() != 0) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuneResult_GemmKey::CopyFrom(const AutotuneResult_GemmKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.AutotuneResult.GemmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_GemmKey::IsInitialized() const {
  return true;
}

void AutotuneResult_GemmKey::InternalSwap(AutotuneResult_GemmKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.algorithm_, other->_impl_.algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult_GemmKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[4]);
}

// ===================================================================

class AutotuneResult_CudaConvPlanKey::_Internal {
 public:
};

AutotuneResult_CudaConvPlanKey::AutotuneResult_CudaConvPlanKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.AutotuneResult.CudaConvPlanKey)
}
AutotuneResult_CudaConvPlanKey::AutotuneResult_CudaConvPlanKey(const AutotuneResult_CudaConvPlanKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutotuneResult_CudaConvPlanKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exec_plan_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exec_plan_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exec_plan_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exec_plan_id().empty()) {
    _this->_impl_.exec_plan_id_.Set(from._internal_exec_plan_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xla.AutotuneResult.CudaConvPlanKey)
}

inline void AutotuneResult_CudaConvPlanKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exec_plan_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exec_plan_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exec_plan_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutotuneResult_CudaConvPlanKey::~AutotuneResult_CudaConvPlanKey() {
  // @@protoc_insertion_point(destructor:xla.AutotuneResult.CudaConvPlanKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutotuneResult_CudaConvPlanKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exec_plan_id_.Destroy();
}

void AutotuneResult_CudaConvPlanKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutotuneResult_CudaConvPlanKey::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.AutotuneResult.CudaConvPlanKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exec_plan_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult_CudaConvPlanKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exec_plan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exec_plan_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.AutotuneResult.CudaConvPlanKey.exec_plan_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutotuneResult_CudaConvPlanKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.AutotuneResult.CudaConvPlanKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exec_plan_id = 1;
  if (!this->_internal_exec_plan_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_plan_id().data(), static_cast<int>(this->_internal_exec_plan_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.AutotuneResult.CudaConvPlanKey.exec_plan_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exec_plan_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.AutotuneResult.CudaConvPlanKey)
  return target;
}

size_t AutotuneResult_CudaConvPlanKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.AutotuneResult.CudaConvPlanKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exec_plan_id = 1;
  if (!this->_internal_exec_plan_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_plan_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutotuneResult_CudaConvPlanKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutotuneResult_CudaConvPlanKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutotuneResult_CudaConvPlanKey::GetClassData() const { return &_class_data_; }


void AutotuneResult_CudaConvPlanKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutotuneResult_CudaConvPlanKey*>(&to_msg);
  auto& from = static_cast<const AutotuneResult_CudaConvPlanKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.AutotuneResult.CudaConvPlanKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exec_plan_id().empty()) {
    _this->_internal_set_exec_plan_id(from._internal_exec_plan_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuneResult_CudaConvPlanKey::CopyFrom(const AutotuneResult_CudaConvPlanKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.AutotuneResult.CudaConvPlanKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_CudaConvPlanKey::IsInitialized() const {
  return true;
}

void AutotuneResult_CudaConvPlanKey::InternalSwap(AutotuneResult_CudaConvPlanKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exec_plan_id_, lhs_arena,
      &other->_impl_.exec_plan_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult_CudaConvPlanKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[5]);
}

// ===================================================================

class AutotuneResult_TritonGemmKey::_Internal {
 public:
};

AutotuneResult_TritonGemmKey::AutotuneResult_TritonGemmKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.AutotuneResult.TritonGemmKey)
}
AutotuneResult_TritonGemmKey::AutotuneResult_TritonGemmKey(const AutotuneResult_TritonGemmKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutotuneResult_TritonGemmKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_m_){}
    , decltype(_impl_.block_n_){}
    , decltype(_impl_.block_k_){}
    , decltype(_impl_.split_k_){}
    , decltype(_impl_.num_stages_){}
    , decltype(_impl_.num_warps_){}
    , decltype(_impl_.num_ctas_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.block_m_, &from._impl_.block_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_ctas_) -
    reinterpret_cast<char*>(&_impl_.block_m_)) + sizeof(_impl_.num_ctas_));
  // @@protoc_insertion_point(copy_constructor:xla.AutotuneResult.TritonGemmKey)
}

inline void AutotuneResult_TritonGemmKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_m_){int64_t{0}}
    , decltype(_impl_.block_n_){int64_t{0}}
    , decltype(_impl_.block_k_){int64_t{0}}
    , decltype(_impl_.split_k_){int64_t{0}}
    , decltype(_impl_.num_stages_){int64_t{0}}
    , decltype(_impl_.num_warps_){int64_t{0}}
    , decltype(_impl_.num_ctas_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AutotuneResult_TritonGemmKey::~AutotuneResult_TritonGemmKey() {
  // @@protoc_insertion_point(destructor:xla.AutotuneResult.TritonGemmKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutotuneResult_TritonGemmKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutotuneResult_TritonGemmKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutotuneResult_TritonGemmKey::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.AutotuneResult.TritonGemmKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.block_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_ctas_) -
      reinterpret_cast<char*>(&_impl_.block_m_)) + sizeof(_impl_.num_ctas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult_TritonGemmKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 block_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 block_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 block_k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.block_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 split_k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.split_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_stages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.num_stages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_warps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.num_warps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_ctas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.num_ctas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutotuneResult_TritonGemmKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.AutotuneResult.TritonGemmKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 block_m = 1;
  if (this->_internal_block_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_block_m(), target);
  }

  // int64 block_n = 2;
  if (this->_internal_block_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_block_n(), target);
  }

  // int64 block_k = 3;
  if (this->_internal_block_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_block_k(), target);
  }

  // int64 split_k = 4;
  if (this->_internal_split_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_split_k(), target);
  }

  // int64 num_stages = 5;
  if (this->_internal_num_stages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_stages(), target);
  }

  // int64 num_warps = 6;
  if (this->_internal_num_warps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_num_warps(), target);
  }

  // int64 num_ctas = 7;
  if (this->_internal_num_ctas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_num_ctas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.AutotuneResult.TritonGemmKey)
  return target;
}

size_t AutotuneResult_TritonGemmKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.AutotuneResult.TritonGemmKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 block_m = 1;
  if (this->_internal_block_m() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_block_m());
  }

  // int64 block_n = 2;
  if (this->_internal_block_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_block_n());
  }

  // int64 block_k = 3;
  if (this->_internal_block_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_block_k());
  }

  // int64 split_k = 4;
  if (this->_internal_split_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_split_k());
  }

  // int64 num_stages = 5;
  if (this->_internal_num_stages() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_stages());
  }

  // int64 num_warps = 6;
  if (this->_internal_num_warps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_warps());
  }

  // int64 num_ctas = 7;
  if (this->_internal_num_ctas() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_ctas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutotuneResult_TritonGemmKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutotuneResult_TritonGemmKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutotuneResult_TritonGemmKey::GetClassData() const { return &_class_data_; }


void AutotuneResult_TritonGemmKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutotuneResult_TritonGemmKey*>(&to_msg);
  auto& from = static_cast<const AutotuneResult_TritonGemmKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.AutotuneResult.TritonGemmKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_m() != 0) {
    _this->_internal_set_block_m(from._internal_block_m());
  }
  if (from._internal_block_n() != 0) {
    _this->_internal_set_block_n(from._internal_block_n());
  }
  if (from._internal_block_k() != 0) {
    _this->_internal_set_block_k(from._internal_block_k());
  }
  if (from._internal_split_k() != 0) {
    _this->_internal_set_split_k(from._internal_split_k());
  }
  if (from._internal_num_stages() != 0) {
    _this->_internal_set_num_stages(from._internal_num_stages());
  }
  if (from._internal_num_warps() != 0) {
    _this->_internal_set_num_warps(from._internal_num_warps());
  }
  if (from._internal_num_ctas() != 0) {
    _this->_internal_set_num_ctas(from._internal_num_ctas());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuneResult_TritonGemmKey::CopyFrom(const AutotuneResult_TritonGemmKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.AutotuneResult.TritonGemmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_TritonGemmKey::IsInitialized() const {
  return true;
}

void AutotuneResult_TritonGemmKey::InternalSwap(AutotuneResult_TritonGemmKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuneResult_TritonGemmKey, _impl_.num_ctas_)
      + sizeof(AutotuneResult_TritonGemmKey::_impl_.num_ctas_)
      - PROTOBUF_FIELD_OFFSET(AutotuneResult_TritonGemmKey, _impl_.block_m_)>(
          reinterpret_cast<char*>(&_impl_.block_m_),
          reinterpret_cast<char*>(&other->_impl_.block_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult_TritonGemmKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[6]);
}

// ===================================================================

class AutotuneResult::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& run_time(const AutotuneResult* msg);
  static const ::xla::AutotuneResult_FailureResult& failure(const AutotuneResult* msg);
  static const ::xla::AutotuneResult_ConvKey& conv(const AutotuneResult* msg);
  static const ::xla::AutotuneResult_GemmKey& gemm(const AutotuneResult* msg);
  static const ::xla::AutotuneResult_TritonGemmKey& triton(const AutotuneResult* msg);
  static const ::xla::AutotuneResult_CudaConvPlanKey& cuda_conv_plan(const AutotuneResult* msg);
  static const ::stream_executor::dnn::AlgorithmProto& algorithm(const AutotuneResult* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
AutotuneResult::_Internal::run_time(const AutotuneResult* msg) {
  return *msg->_impl_.run_time_;
}
const ::xla::AutotuneResult_FailureResult&
AutotuneResult::_Internal::failure(const AutotuneResult* msg) {
  return *msg->_impl_.failure_;
}
const ::xla::AutotuneResult_ConvKey&
AutotuneResult::_Internal::conv(const AutotuneResult* msg) {
  return *msg->_impl_.key_.conv_;
}
const ::xla::AutotuneResult_GemmKey&
AutotuneResult::_Internal::gemm(const AutotuneResult* msg) {
  return *msg->_impl_.key_.gemm_;
}
const ::xla::AutotuneResult_TritonGemmKey&
AutotuneResult::_Internal::triton(const AutotuneResult* msg) {
  return *msg->_impl_.key_.triton_;
}
const ::xla::AutotuneResult_CudaConvPlanKey&
AutotuneResult::_Internal::cuda_conv_plan(const AutotuneResult* msg) {
  return *msg->_impl_.key_.cuda_conv_plan_;
}
const ::stream_executor::dnn::AlgorithmProto&
AutotuneResult::_Internal::algorithm(const AutotuneResult* msg) {
  return *msg->_impl_.key_.algorithm_;
}
void AutotuneResult::clear_run_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.run_time_ != nullptr) {
    delete _impl_.run_time_;
  }
  _impl_.run_time_ = nullptr;
}
void AutotuneResult::set_allocated_conv(::xla::AutotuneResult_ConvKey* conv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (conv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conv);
    if (message_arena != submessage_arena) {
      conv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv, submessage_arena);
    }
    set_has_conv();
    _impl_.key_.conv_ = conv;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.conv)
}
void AutotuneResult::set_allocated_gemm(::xla::AutotuneResult_GemmKey* gemm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (gemm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gemm);
    if (message_arena != submessage_arena) {
      gemm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gemm, submessage_arena);
    }
    set_has_gemm();
    _impl_.key_.gemm_ = gemm;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.gemm)
}
void AutotuneResult::set_allocated_triton(::xla::AutotuneResult_TritonGemmKey* triton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (triton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(triton);
    if (message_arena != submessage_arena) {
      triton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, triton, submessage_arena);
    }
    set_has_triton();
    _impl_.key_.triton_ = triton;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.triton)
}
void AutotuneResult::set_allocated_cuda_conv_plan(::xla::AutotuneResult_CudaConvPlanKey* cuda_conv_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (cuda_conv_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cuda_conv_plan);
    if (message_arena != submessage_arena) {
      cuda_conv_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cuda_conv_plan, submessage_arena);
    }
    set_has_cuda_conv_plan();
    _impl_.key_.cuda_conv_plan_ = cuda_conv_plan;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.cuda_conv_plan)
}
void AutotuneResult::set_allocated_algorithm(::stream_executor::dnn::AlgorithmProto* algorithm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (algorithm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithm));
    if (message_arena != submessage_arena) {
      algorithm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm, submessage_arena);
    }
    set_has_algorithm();
    _impl_.key_.algorithm_ = algorithm;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResult.algorithm)
}
void AutotuneResult::clear_algorithm() {
  if (_internal_has_algorithm()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.key_.algorithm_;
    }
    clear_has_key();
  }
}
AutotuneResult::AutotuneResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.AutotuneResult)
}
AutotuneResult::AutotuneResult(const AutotuneResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutotuneResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_){nullptr}
    , decltype(_impl_.run_time_){nullptr}
    , decltype(_impl_.scratch_bytes_){}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_failure()) {
    _this->_impl_.failure_ = new ::xla::AutotuneResult_FailureResult(*from._impl_.failure_);
  }
  if (from._internal_has_run_time()) {
    _this->_impl_.run_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.run_time_);
  }
  _this->_impl_.scratch_bytes_ = from._impl_.scratch_bytes_;
  clear_has_key();
  switch (from.key_case()) {
    case kConv: {
      _this->_internal_mutable_conv()->::xla::AutotuneResult_ConvKey::MergeFrom(
          from._internal_conv());
      break;
    }
    case kGemm: {
      _this->_internal_mutable_gemm()->::xla::AutotuneResult_GemmKey::MergeFrom(
          from._internal_gemm());
      break;
    }
    case kTriton: {
      _this->_internal_mutable_triton()->::xla::AutotuneResult_TritonGemmKey::MergeFrom(
          from._internal_triton());
      break;
    }
    case kCudaConvPlan: {
      _this->_internal_mutable_cuda_conv_plan()->::xla::AutotuneResult_CudaConvPlanKey::MergeFrom(
          from._internal_cuda_conv_plan());
      break;
    }
    case kAlgorithm: {
      _this->_internal_mutable_algorithm()->::stream_executor::dnn::AlgorithmProto::MergeFrom(
          from._internal_algorithm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:xla.AutotuneResult)
}

inline void AutotuneResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_){nullptr}
    , decltype(_impl_.run_time_){nullptr}
    , decltype(_impl_.scratch_bytes_){int64_t{0}}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_key();
}

AutotuneResult::~AutotuneResult() {
  // @@protoc_insertion_point(destructor:xla.AutotuneResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutotuneResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.failure_;
  if (this != internal_default_instance()) delete _impl_.run_time_;
  if (has_key()) {
    clear_key();
  }
}

void AutotuneResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutotuneResult::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:xla.AutotuneResult)
  switch (key_case()) {
    case kConv: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.conv_;
      }
      break;
    }
    case kGemm: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.gemm_;
      }
      break;
    }
    case kTriton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.triton_;
      }
      break;
    }
    case kCudaConvPlan: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.cuda_conv_plan_;
      }
      break;
    }
    case kAlgorithm: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.key_.algorithm_;
      }
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KEY_NOT_SET;
}


void AutotuneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.AutotuneResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.failure_ != nullptr) {
    delete _impl_.failure_;
  }
  _impl_.failure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.run_time_ != nullptr) {
    delete _impl_.run_time_;
  }
  _impl_.run_time_ = nullptr;
  _impl_.scratch_bytes_ = int64_t{0};
  clear_key();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.AutotuneResult.ConvKey conv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.AutotuneResult.GemmKey gemm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gemm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.AutotuneResult.FailureResult failure = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 scratch_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.scratch_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration run_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.AutotuneResult.CudaConvPlanKey cuda_conv_plan = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_cuda_conv_plan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.AlgorithmProto algorithm = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.AutotuneResult.TritonGemmKey triton = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_triton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutotuneResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.AutotuneResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.AutotuneResult.ConvKey conv = 5;
  if (_internal_has_conv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::conv(this),
        _Internal::conv(this).GetCachedSize(), target, stream);
  }

  // .xla.AutotuneResult.GemmKey gemm = 6;
  if (_internal_has_gemm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gemm(this),
        _Internal::gemm(this).GetCachedSize(), target, stream);
  }

  // .xla.AutotuneResult.FailureResult failure = 7;
  if (this->_internal_has_failure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::failure(this),
        _Internal::failure(this).GetCachedSize(), target, stream);
  }

  // int64 scratch_bytes = 8;
  if (this->_internal_scratch_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_scratch_bytes(), target);
  }

  // .google.protobuf.Duration run_time = 9;
  if (this->_internal_has_run_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::run_time(this),
        _Internal::run_time(this).GetCachedSize(), target, stream);
  }

  // .xla.AutotuneResult.CudaConvPlanKey cuda_conv_plan = 15;
  if (_internal_has_cuda_conv_plan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::cuda_conv_plan(this),
        _Internal::cuda_conv_plan(this).GetCachedSize(), target, stream);
  }

  // .stream_executor.dnn.AlgorithmProto algorithm = 16;
  if (_internal_has_algorithm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::algorithm(this),
        _Internal::algorithm(this).GetCachedSize(), target, stream);
  }

  // .xla.AutotuneResult.TritonGemmKey triton = 17;
  if (_internal_has_triton()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::triton(this),
        _Internal::triton(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.AutotuneResult)
  return target;
}

size_t AutotuneResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.AutotuneResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xla.AutotuneResult.FailureResult failure = 7;
  if (this->_internal_has_failure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.failure_);
  }

  // .google.protobuf.Duration run_time = 9;
  if (this->_internal_has_run_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.run_time_);
  }

  // int64 scratch_bytes = 8;
  if (this->_internal_scratch_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_scratch_bytes());
  }

  switch (key_case()) {
    // .xla.AutotuneResult.ConvKey conv = 5;
    case kConv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.conv_);
      break;
    }
    // .xla.AutotuneResult.GemmKey gemm = 6;
    case kGemm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.gemm_);
      break;
    }
    // .xla.AutotuneResult.TritonGemmKey triton = 17;
    case kTriton: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.triton_);
      break;
    }
    // .xla.AutotuneResult.CudaConvPlanKey cuda_conv_plan = 15;
    case kCudaConvPlan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.cuda_conv_plan_);
      break;
    }
    // .stream_executor.dnn.AlgorithmProto algorithm = 16;
    case kAlgorithm: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_.algorithm_);
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutotuneResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutotuneResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutotuneResult::GetClassData() const { return &_class_data_; }


void AutotuneResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutotuneResult*>(&to_msg);
  auto& from = static_cast<const AutotuneResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.AutotuneResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_failure()) {
    _this->_internal_mutable_failure()->::xla::AutotuneResult_FailureResult::MergeFrom(
        from._internal_failure());
  }
  if (from._internal_has_run_time()) {
    _this->_internal_mutable_run_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_run_time());
  }
  if (from._internal_scratch_bytes() != 0) {
    _this->_internal_set_scratch_bytes(from._internal_scratch_bytes());
  }
  switch (from.key_case()) {
    case kConv: {
      _this->_internal_mutable_conv()->::xla::AutotuneResult_ConvKey::MergeFrom(
          from._internal_conv());
      break;
    }
    case kGemm: {
      _this->_internal_mutable_gemm()->::xla::AutotuneResult_GemmKey::MergeFrom(
          from._internal_gemm());
      break;
    }
    case kTriton: {
      _this->_internal_mutable_triton()->::xla::AutotuneResult_TritonGemmKey::MergeFrom(
          from._internal_triton());
      break;
    }
    case kCudaConvPlan: {
      _this->_internal_mutable_cuda_conv_plan()->::xla::AutotuneResult_CudaConvPlanKey::MergeFrom(
          from._internal_cuda_conv_plan());
      break;
    }
    case kAlgorithm: {
      _this->_internal_mutable_algorithm()->::stream_executor::dnn::AlgorithmProto::MergeFrom(
          from._internal_algorithm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuneResult::CopyFrom(const AutotuneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.AutotuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult::IsInitialized() const {
  return true;
}

void AutotuneResult::InternalSwap(AutotuneResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuneResult, _impl_.scratch_bytes_)
      + sizeof(AutotuneResult::_impl_.scratch_bytes_)
      - PROTOBUF_FIELD_OFFSET(AutotuneResult, _impl_.failure_)>(
          reinterpret_cast<char*>(&_impl_.failure_),
          reinterpret_cast<char*>(&other->_impl_.failure_));
  swap(_impl_.key_, other->_impl_.key_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[7]);
}

// ===================================================================

class AutotuningLog::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& instr(const AutotuningLog* msg);
  static const ::xla::CudnnVersion& cudnn_version(const AutotuningLog* msg);
  static const ::xla::ComputeCapability& compute_capability(const AutotuningLog* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
AutotuningLog::_Internal::instr(const AutotuningLog* msg) {
  return *msg->_impl_.instr_;
}
const ::xla::CudnnVersion&
AutotuningLog::_Internal::cudnn_version(const AutotuningLog* msg) {
  return *msg->_impl_.cudnn_version_;
}
const ::xla::ComputeCapability&
AutotuningLog::_Internal::compute_capability(const AutotuningLog* msg) {
  return *msg->_impl_.compute_capability_;
}
void AutotuningLog::clear_instr() {
  if (GetArenaForAllocation() == nullptr && _impl_.instr_ != nullptr) {
    delete _impl_.instr_;
  }
  _impl_.instr_ = nullptr;
}
AutotuningLog::AutotuningLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.AutotuningLog)
}
AutotuningLog::AutotuningLog(const AutotuningLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutotuningLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.device_pci_bus_id_){}
    , decltype(_impl_.blas_version_){}
    , decltype(_impl_.fusion_name_){}
    , decltype(_impl_.instr_){nullptr}
    , decltype(_impl_.cudnn_version_){nullptr}
    , decltype(_impl_.compute_capability_){nullptr}
    , decltype(_impl_.fusion_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_pci_bus_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_pci_bus_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_pci_bus_id().empty()) {
    _this->_impl_.device_pci_bus_id_.Set(from._internal_device_pci_bus_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blas_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blas_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blas_version().empty()) {
    _this->_impl_.blas_version_.Set(from._internal_blas_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fusion_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fusion_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fusion_name().empty()) {
    _this->_impl_.fusion_name_.Set(from._internal_fusion_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_instr()) {
    _this->_impl_.instr_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.instr_);
  }
  if (from._internal_has_cudnn_version()) {
    _this->_impl_.cudnn_version_ = new ::xla::CudnnVersion(*from._impl_.cudnn_version_);
  }
  if (from._internal_has_compute_capability()) {
    _this->_impl_.compute_capability_ = new ::xla::ComputeCapability(*from._impl_.compute_capability_);
  }
  _this->_impl_.fusion_count_ = from._impl_.fusion_count_;
  // @@protoc_insertion_point(copy_constructor:xla.AutotuningLog)
}

inline void AutotuningLog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.device_pci_bus_id_){}
    , decltype(_impl_.blas_version_){}
    , decltype(_impl_.fusion_name_){}
    , decltype(_impl_.instr_){nullptr}
    , decltype(_impl_.cudnn_version_){nullptr}
    , decltype(_impl_.compute_capability_){nullptr}
    , decltype(_impl_.fusion_count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_pci_bus_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_pci_bus_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blas_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blas_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fusion_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fusion_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutotuningLog::~AutotuningLog() {
  // @@protoc_insertion_point(destructor:xla.AutotuningLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutotuningLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.device_pci_bus_id_.Destroy();
  _impl_.blas_version_.Destroy();
  _impl_.fusion_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instr_;
  if (this != internal_default_instance()) delete _impl_.cudnn_version_;
  if (this != internal_default_instance()) delete _impl_.compute_capability_;
}

void AutotuningLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutotuningLog::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.AutotuningLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.device_pci_bus_id_.ClearToEmpty();
  _impl_.blas_version_.ClearToEmpty();
  _impl_.fusion_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.instr_ != nullptr) {
    delete _impl_.instr_;
  }
  _impl_.instr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cudnn_version_ != nullptr) {
    delete _impl_.cudnn_version_;
  }
  _impl_.cudnn_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.compute_capability_ != nullptr) {
    delete _impl_.compute_capability_;
  }
  _impl_.compute_capability_ = nullptr;
  _impl_.fusion_count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuningLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any instr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.AutotuneResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.CudnnVersion cudnn_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cudnn_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.ComputeCapability compute_capability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compute_capability(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_pci_bus_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_device_pci_bus_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.AutotuningLog.device_pci_bus_id"));
        } else
          goto handle_unusual;
        continue;
      // string blas_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_blas_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.AutotuningLog.blas_version"));
        } else
          goto handle_unusual;
        continue;
      // string fusion_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fusion_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.AutotuningLog.fusion_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 fusion_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.fusion_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutotuningLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.AutotuningLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any instr = 1;
  if (this->_internal_has_instr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instr(this),
        _Internal::instr(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.AutotuneResult results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.CudnnVersion cudnn_version = 3;
  if (this->_internal_has_cudnn_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cudnn_version(this),
        _Internal::cudnn_version(this).GetCachedSize(), target, stream);
  }

  // .xla.ComputeCapability compute_capability = 4;
  if (this->_internal_has_compute_capability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::compute_capability(this),
        _Internal::compute_capability(this).GetCachedSize(), target, stream);
  }

  // string device_pci_bus_id = 5;
  if (!this->_internal_device_pci_bus_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_pci_bus_id().data(), static_cast<int>(this->_internal_device_pci_bus_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.AutotuningLog.device_pci_bus_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_pci_bus_id(), target);
  }

  // string blas_version = 6;
  if (!this->_internal_blas_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blas_version().data(), static_cast<int>(this->_internal_blas_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.AutotuningLog.blas_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_blas_version(), target);
  }

  // string fusion_name = 7;
  if (!this->_internal_fusion_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fusion_name().data(), static_cast<int>(this->_internal_fusion_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.AutotuningLog.fusion_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fusion_name(), target);
  }

  // int64 fusion_count = 8;
  if (this->_internal_fusion_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_fusion_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.AutotuningLog)
  return target;
}

size_t AutotuningLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.AutotuningLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.AutotuneResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device_pci_bus_id = 5;
  if (!this->_internal_device_pci_bus_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_pci_bus_id());
  }

  // string blas_version = 6;
  if (!this->_internal_blas_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blas_version());
  }

  // string fusion_name = 7;
  if (!this->_internal_fusion_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fusion_name());
  }

  // .google.protobuf.Any instr = 1;
  if (this->_internal_has_instr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instr_);
  }

  // .xla.CudnnVersion cudnn_version = 3;
  if (this->_internal_has_cudnn_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cudnn_version_);
  }

  // .xla.ComputeCapability compute_capability = 4;
  if (this->_internal_has_compute_capability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.compute_capability_);
  }

  // int64 fusion_count = 8;
  if (this->_internal_fusion_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fusion_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutotuningLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutotuningLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutotuningLog::GetClassData() const { return &_class_data_; }


void AutotuningLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutotuningLog*>(&to_msg);
  auto& from = static_cast<const AutotuningLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.AutotuningLog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_device_pci_bus_id().empty()) {
    _this->_internal_set_device_pci_bus_id(from._internal_device_pci_bus_id());
  }
  if (!from._internal_blas_version().empty()) {
    _this->_internal_set_blas_version(from._internal_blas_version());
  }
  if (!from._internal_fusion_name().empty()) {
    _this->_internal_set_fusion_name(from._internal_fusion_name());
  }
  if (from._internal_has_instr()) {
    _this->_internal_mutable_instr()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_instr());
  }
  if (from._internal_has_cudnn_version()) {
    _this->_internal_mutable_cudnn_version()->::xla::CudnnVersion::MergeFrom(
        from._internal_cudnn_version());
  }
  if (from._internal_has_compute_capability()) {
    _this->_internal_mutable_compute_capability()->::xla::ComputeCapability::MergeFrom(
        from._internal_compute_capability());
  }
  if (from._internal_fusion_count() != 0) {
    _this->_internal_set_fusion_count(from._internal_fusion_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuningLog::CopyFrom(const AutotuningLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.AutotuningLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuningLog::IsInitialized() const {
  return true;
}

void AutotuningLog::InternalSwap(AutotuningLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_pci_bus_id_, lhs_arena,
      &other->_impl_.device_pci_bus_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blas_version_, lhs_arena,
      &other->_impl_.blas_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fusion_name_, lhs_arena,
      &other->_impl_.fusion_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuningLog, _impl_.fusion_count_)
      + sizeof(AutotuningLog::_impl_.fusion_count_)
      - PROTOBUF_FIELD_OFFSET(AutotuningLog, _impl_.instr_)>(
          reinterpret_cast<char*>(&_impl_.instr_),
          reinterpret_cast<char*>(&other->_impl_.instr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuningLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fautotuning_2eproto_getter, &descriptor_table_xla_2fautotuning_2eproto_once,
      file_level_metadata_xla_2fautotuning_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xla::CudnnVersion*
Arena::CreateMaybeMessage< ::xla::CudnnVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::CudnnVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ComputeCapability*
Arena::CreateMaybeMessage< ::xla::ComputeCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ComputeCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::AutotuneResult_FailureResult*
Arena::CreateMaybeMessage< ::xla::AutotuneResult_FailureResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::AutotuneResult_FailureResult >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::AutotuneResult_ConvKey*
Arena::CreateMaybeMessage< ::xla::AutotuneResult_ConvKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::AutotuneResult_ConvKey >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::AutotuneResult_GemmKey*
Arena::CreateMaybeMessage< ::xla::AutotuneResult_GemmKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::AutotuneResult_GemmKey >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::AutotuneResult_CudaConvPlanKey*
Arena::CreateMaybeMessage< ::xla::AutotuneResult_CudaConvPlanKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::AutotuneResult_CudaConvPlanKey >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::AutotuneResult_TritonGemmKey*
Arena::CreateMaybeMessage< ::xla::AutotuneResult_TritonGemmKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::AutotuneResult_TritonGemmKey >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::AutotuneResult*
Arena::CreateMaybeMessage< ::xla::AutotuneResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::AutotuneResult >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::AutotuningLog*
Arena::CreateMaybeMessage< ::xla::AutotuningLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::AutotuningLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
