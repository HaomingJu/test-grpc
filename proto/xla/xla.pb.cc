// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/xla.proto

#include "xla/xla.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xla {
PROTOBUF_CONSTEXPR CompilationEnvironmentsProto::CompilationEnvironmentsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.environments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompilationEnvironmentsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompilationEnvironmentsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompilationEnvironmentsProtoDefaultTypeInternal() {}
  union {
    CompilationEnvironmentsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompilationEnvironmentsProtoDefaultTypeInternal _CompilationEnvironmentsProto_default_instance_;
PROTOBUF_CONSTEXPR DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal _DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DebugOptions::DebugOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xla_disable_hlo_passes_)*/{}
  , /*decltype(_impl_.xla_enable_hlo_passes_only_)*/{}
  , /*decltype(_impl_.xla_gpu_ptx_file_)*/{}
  , /*decltype(_impl_.xla_gpu_llvm_ir_file_)*/{}
  , /*decltype(_impl_.xla_gpu_enable_command_buffer_)*/{}
  , /*decltype(_impl_._xla_gpu_enable_command_buffer_cached_byte_size_)*/{0}
  , /*decltype(_impl_.xla_gpu_disable_async_collectives_)*/{}
  , /*decltype(_impl_._xla_gpu_disable_async_collectives_cached_byte_size_)*/{0}
  , /*decltype(_impl_.legacy_command_buffer_custom_call_targets_)*/{}
  , /*decltype(_impl_.xla_backend_extra_options_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.xla_gpu_cuda_data_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_dump_to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_dump_hlo_module_re_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_dump_hlo_pass_re_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_algorithm_denylist_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_asm_extra_flags_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_dump_hlo_pipeline_re_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_pgle_profile_file_or_directory_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_dump_autotune_results_to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_load_autotune_results_from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_target_config_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_enable_custom_fusions_re_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_dump_autotune_logs_to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_override_gemm_autotuner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_kernel_cache_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_gpu_per_fusion_autotune_cache_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xla_backend_optimization_level_)*/0
  , /*decltype(_impl_.xla_hlo_profile_)*/false
  , /*decltype(_impl_.xla_disable_all_hlo_passes_)*/false
  , /*decltype(_impl_.xla_embed_ir_in_executable_)*/false
  , /*decltype(_impl_.xla_eliminate_hlo_implicit_broadcast_)*/false
  , /*decltype(_impl_.xla_cpu_multi_thread_eigen_)*/false
  , /*decltype(_impl_.xla_gpu_ftz_)*/false
  , /*decltype(_impl_.xla_llvm_enable_alias_scope_metadata_)*/false
  , /*decltype(_impl_.xla_llvm_enable_noalias_metadata_)*/false
  , /*decltype(_impl_.xla_llvm_enable_invariant_load_metadata_)*/false
  , /*decltype(_impl_.xla_llvm_disable_expensive_passes_)*/false
  , /*decltype(_impl_.xla_test_all_output_layouts_)*/false
  , /*decltype(_impl_.xla_test_all_input_layouts_)*/false
  , /*decltype(_impl_.xla_force_host_platform_device_count_)*/0
  , /*decltype(_impl_.xla_hlo_graph_sharding_color_)*/false
  , /*decltype(_impl_.xla_cpu_use_mkl_dnn_)*/false
  , /*decltype(_impl_.xla_gpu_enable_fast_min_max_)*/false
  , /*decltype(_impl_.xla_allow_excess_precision_)*/false
  , /*decltype(_impl_.xla_gpu_crash_on_verification_failures_)*/false
  , /*decltype(_impl_.xla_gpu_disable_gpuasm_optimizations_)*/false
  , /*decltype(_impl_.xla_hlo_evaluator_use_fast_path_)*/false
  , /*decltype(_impl_.xla_allow_scalar_index_dynamic_ops_)*/false
  , /*decltype(_impl_.xla_step_marker_location_)*/0
  , /*decltype(_impl_.xla_dump_hlo_as_text_)*/false
  , /*decltype(_impl_.xla_dump_hlo_as_proto_)*/false
  , /*decltype(_impl_.xla_dump_hlo_as_dot_)*/false
  , /*decltype(_impl_.xla_dump_hlo_as_url_)*/false
  , /*decltype(_impl_.xla_gpu_autotune_level_)*/0
  , /*decltype(_impl_.xla_dump_hlo_as_html_)*/false
  , /*decltype(_impl_.xla_dump_fusion_visualization_)*/false
  , /*decltype(_impl_.xla_dump_hlo_snapshots_)*/false
  , /*decltype(_impl_.xla_dump_include_timestamp_)*/false
  , /*decltype(_impl_.xla_dump_max_hlo_modules_)*/0
  , /*decltype(_impl_.xla_multiheap_size_constraint_per_heap_)*/0
  , /*decltype(_impl_.xla_dump_module_metadata_)*/false
  , /*decltype(_impl_.xla_dump_compress_protos_)*/false
  , /*decltype(_impl_.xla_dump_hlo_as_long_text_)*/false
  , /*decltype(_impl_.xla_gpu_force_conv_nchw_)*/false
  , /*decltype(_impl_.xla_gpu_force_compilation_parallelism_)*/0
  , /*decltype(_impl_.xla_gpu_force_conv_nhwc_)*/false
  , /*decltype(_impl_.xla_gpu_dump_llvmir_)*/false
  , /*decltype(_impl_.xla_dump_enable_mlir_pretty_form_)*/false
  , /*decltype(_impl_.xla_tpu_detect_nan_)*/false
  , /*decltype(_impl_.xla_gpu_all_reduce_combine_threshold_bytes_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_nccl_termination_timeout_seconds_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_)*/0
  , /*decltype(_impl_.xla_tpu_detect_inf_)*/false
  , /*decltype(_impl_.xla_cpu_enable_xprof_traceme_)*/false
  , /*decltype(_impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_)*/false
  , /*decltype(_impl_.xla_detailed_logging_)*/false
  , /*decltype(_impl_.xla_gpu_redzone_scratch_max_megabytes_)*/int64_t{0}
  , /*decltype(_impl_.xla_cpu_fast_math_honor_functions_)*/false
  , /*decltype(_impl_.xla_cpu_fast_math_honor_infs_)*/false
  , /*decltype(_impl_.xla_cpu_fast_math_honor_nans_)*/false
  , /*decltype(_impl_.xla_cpu_use_thunk_runtime_)*/false
  , /*decltype(_impl_.xla_cpu_enable_concurrency_optimized_scheduler_)*/false
  , /*decltype(_impl_.xla_cpu_enable_fast_math_)*/false
  , /*decltype(_impl_.xla_cpu_enable_fast_min_max_)*/false
  , /*decltype(_impl_.xla_cpu_fast_math_honor_division_)*/false
  , /*decltype(_impl_.xla_dump_disable_metadata_)*/false
  , /*decltype(_impl_.xla_gpu_strict_conv_algorithm_picker_)*/false
  , /*decltype(_impl_.xla_gpu_enable_custom_fusions_)*/false
  , /*decltype(_impl_.xla_gpu_enable_dynamic_slice_fusion_)*/false
  , /*decltype(_impl_.xla_gpu_shape_checks_)*/0
  , /*decltype(_impl_.xla_gpu_enable_shared_constants_)*/false
  , /*decltype(_impl_.xla_gpu_enable_cublaslt_)*/false
  , /*decltype(_impl_.xla_gpu_graph_enable_concurrent_region_)*/false
  , /*decltype(_impl_.xla_cpu_use_acl_)*/false
  , /*decltype(_impl_.xla_cpu_strict_dot_conv_math_)*/false
  , /*decltype(_impl_.xla_gpu_use_runtime_fusion_)*/false
  , /*decltype(_impl_.xla_dump_latency_hiding_schedule_)*/false
  , /*decltype(_impl_.xla_cpu_enable_mlir_tiling_and_fusion_)*/false
  , /*decltype(_impl_.xla_partitioning_algorithm_)*/0
  , /*decltype(_impl_.xla_cpu_enable_custom_matmul_tiling_)*/false
  , /*decltype(_impl_.xla_cpu_enable_mlir_fusion_outlining_)*/false
  , /*decltype(_impl_.xla_cpu_enable_experimental_deallocation_)*/false
  , /*decltype(_impl_.xla_gpu_enable_latency_hiding_scheduler_)*/false
  , /*decltype(_impl_.xla_cpu_matmul_tiling_m_dim_)*/int64_t{0}
  , /*decltype(_impl_.xla_cpu_matmul_tiling_n_dim_)*/int64_t{0}
  , /*decltype(_impl_.xla_cpu_matmul_tiling_k_dim_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_collective_inflation_factor_)*/0
  , /*decltype(_impl_.xla_gpu_graph_min_graph_size_)*/0
  , /*decltype(_impl_.xla_gpu_all_gather_combine_threshold_bytes_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_enable_cudnn_frontend_)*/false
  , /*decltype(_impl_.xla_gpu_enable_cudnn_fmha_)*/false
  , /*decltype(_impl_.xla_gpu_fused_attention_use_cudnn_rng_)*/false
  , /*decltype(_impl_.xla_gpu_enable_cudnn_layer_norm_)*/false
  , /*decltype(_impl_.xla_gpu_run_post_layout_collective_pipeliner_)*/false
  , /*decltype(_impl_.xla_gpu_enable_triton_gemm_)*/false
  , /*decltype(_impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_)*/false
  , /*decltype(_impl_.xla_gpu_triton_gemm_any_)*/false
  , /*decltype(_impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_)*/0
  , /*decltype(_impl_.xla_gpu_exhaustive_tiling_search_)*/false
  , /*decltype(_impl_.xla_gpu_enable_priority_fusion_)*/false
  , /*decltype(_impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_)*/false
  , /*decltype(_impl_.xla_gpu_dump_autotuned_gemm_fusions_)*/false
  , /*decltype(_impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_)*/0
  , /*decltype(_impl_.xla_gpu_enable_highest_priority_async_stream_)*/false
  , /*decltype(_impl_.xla_gpu_enable_analytical_latency_estimator_)*/false
  , /*decltype(_impl_.xla_gpu_lhs_enable_gpu_async_tracker_)*/false
  , /*decltype(_impl_.xla_gpu_enable_pipelined_collectives_)*/false
  , /*decltype(_impl_.xla_gpu_redzone_padding_bytes_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_triton_fusion_level_)*/0
  , /*decltype(_impl_.xla_gpu_enable_pipelined_all_reduce_)*/false
  , /*decltype(_impl_.xla_gpu_enable_pipelined_all_gather_)*/false
  , /*decltype(_impl_.xla_gpu_enable_pipelined_reduce_scatter_)*/false
  , /*decltype(_impl_.xla_gpu_enable_pipelined_p2p_)*/false
  , /*decltype(_impl_.xla_enable_dumping_)*/false
  , /*decltype(_impl_.xla_gpu_enable_llvm_module_compilation_parallelism_)*/false
  , /*decltype(_impl_.xla_gpu_deterministic_ops_)*/false
  , /*decltype(_impl_.xla_gpu_enable_all_gather_combine_by_dim_)*/false
  , /*decltype(_impl_.xla_gpu_copy_insertion_use_region_analysis_)*/false
  , /*decltype(_impl_.xla_gpu_collect_cost_model_stats_)*/false
  , /*decltype(_impl_.xla_gpu_enable_split_k_autotuning_)*/false
  , /*decltype(_impl_.xla_gpu_enable_reduction_epilogue_fusion_)*/false
  , /*decltype(_impl_.xla_gpu_collective_permute_decomposer_threshold_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_)*/false
  , /*decltype(_impl_.xla_gpu_enable_reassociation_for_converted_ar_)*/false
  , /*decltype(_impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_)*/false
  , /*decltype(_impl_.xla_llvm_force_inline_before_split_)*/false
  , /*decltype(_impl_.xla_gpu_experimental_disable_binary_libraries_)*/false
  , /*decltype(_impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_)*/false
  , /*decltype(_impl_.xla_gpu_unsupported_enable_triton_gemm_)*/false
  , /*decltype(_impl_.xla_hlo_graph_addresses_)*/false
  , /*decltype(_impl_.xla_gpu_enable_nccl_clique_optimization_)*/false
  , /*decltype(_impl_.xla_gpu_mock_custom_calls_)*/false
  , /*decltype(_impl_.xla_gpu_cublas_fallback_)*/false
  , /*decltype(_impl_.xla_gpu_enable_while_loop_double_buffering_)*/false
  , /*decltype(_impl_.xla_gpu_llvm_verification_level_)*/0
  , /*decltype(_impl_.xla_debug_buffer_assignment_show_max_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_ensure_minor_dot_contraction_dims_)*/false
  , /*decltype(_impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_)*/false
  , /*decltype(_impl_.xla_gpu_enable_cub_radix_sort_)*/false
  , /*decltype(_impl_.xla_gpu_enable_triton_hopper_)*/false
  , /*decltype(_impl_.xla_gpu_memory_limit_slop_factor_)*/0
  , /*decltype(_impl_.xla_gpu_threshold_for_windowed_einsum_mib_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_nccl_collective_max_nchannels_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_enable_nccl_user_buffers_)*/false
  , /*decltype(_impl_.xla_gpu_enable_nccl_comm_splitting_)*/false
  , /*decltype(_impl_.xla_gpu_enable_nccl_per_stream_comms_)*/false
  , /*decltype(_impl_.xla_gpu_enable_libnvptxcompiler_)*/false
  , /*decltype(_impl_.xla_gpu_enable_dot_strength_reduction_)*/false
  , /*decltype(_impl_.xla_gpu_multi_streamed_windowed_einsum_)*/false
  , /*decltype(_impl_.xla_gpu_enable_bf16_6way_gemm_)*/false
  , /*decltype(_impl_.xla_gpu_enable_bf16_3way_gemm_)*/false
  , /*decltype(_impl_.xla_gpu_nccl_p2p_max_nchannels_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_gemm_rewrite_size_threshold_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_cudnn_gemm_fusion_level_)*/0
  , /*decltype(_impl_.xla_gpu_require_complete_aot_autotune_results_)*/false
  , /*decltype(_impl_.xla_gpu_use_memcpy_local_p2p_)*/false
  , /*decltype(_impl_.xla_dump_large_constants_)*/false
  , /*decltype(_impl_.xla_gpu_verify_triton_fusion_numerics_)*/false
  , /*decltype(_impl_.xla_gpu_autotune_max_solutions_)*/int64_t{0}
  , /*decltype(_impl_.xla_reduce_window_rewrite_base_length_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_enable_while_loop_unrolling_)*/0
  , /*decltype(_impl_.xla_gpu_enable_host_memory_offloading_)*/false
  , /*decltype(_impl_.xla_gpu_exclude_nondeterministic_ops_)*/false
  , /*decltype(_impl_.xla_gpu_nccl_terminate_on_error_)*/false
  , /*decltype(_impl_.xla_gpu_shard_autotuning_)*/false
  , /*decltype(_impl_.xla_gpu_mlir_emitter_level_)*/int64_t{0}
  , /*decltype(_impl_.xla_cpu_prefer_vector_width_)*/0
  , /*decltype(_impl_.xla_gpu_enable_approx_costly_collectives_)*/false
  , /*decltype(_impl_.xla_gpu_unsafe_pipelined_loop_annotator_)*/false
  , /*decltype(_impl_.xla_gpu_temp_buffer_use_separate_color_)*/false
  , /*decltype(_impl_.xla_syntax_sugar_async_ops_)*/false
  , /*decltype(_impl_.xla_cmd_buffer_trace_cache_size_)*/int64_t{0}
  , /*decltype(_impl_.xla_gpu_autotune_gemm_rtol_)*/0
  , /*decltype(_impl_.xla_gpu_cudnn_gemm_max_plans_)*/0
  , /*decltype(_impl_.xla_enable_command_buffers_during_profiling_)*/false
  , /*decltype(_impl_.xla_gpu_enable_libnvjitlink_)*/false
  , /*decltype(_impl_.xla_gpu_enable_triton_gemm_int4_)*/false
  , /*decltype(_impl_.xla_gpu_async_dot_)*/false
  , /*decltype(_impl_.xla_cpu_parallel_codegen_split_count_)*/0
  , /*decltype(_impl_.xla_gpu_experimental_autotune_cache_mode_)*/0
  , /*decltype(_impl_.xla_gpu_executable_warn_stuck_timeout_seconds_)*/0
  , /*decltype(_impl_.xla_gpu_executable_terminate_timeout_seconds_)*/0
  , /*decltype(_impl_.xla_gpu_enable_pgle_accuracy_checker_)*/false
  , /*decltype(_impl_.xla_experimental_ignore_channel_id_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugOptionsDefaultTypeInternal() {}
  union {
    DebugOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugOptionsDefaultTypeInternal _DebugOptions_default_instance_;
PROTOBUF_CONSTEXPR GpuCompilationEnvironment::GpuCompilationEnvironment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dummy_flag_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GpuCompilationEnvironmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCompilationEnvironmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCompilationEnvironmentDefaultTypeInternal() {}
  union {
    GpuCompilationEnvironment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCompilationEnvironmentDefaultTypeInternal _GpuCompilationEnvironment_default_instance_;
PROTOBUF_CONSTEXPR ShardableValueUpdatePairProto::ShardableValueUpdatePairProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameter_shape_index_)*/{}
  , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.output_shape_index_)*/{}
  , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.input_parameter_number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardableValueUpdatePairProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardableValueUpdatePairProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardableValueUpdatePairProtoDefaultTypeInternal() {}
  union {
    ShardableValueUpdatePairProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardableValueUpdatePairProtoDefaultTypeInternal _ShardableValueUpdatePairProto_default_instance_;
PROTOBUF_CONSTEXPR ExecutionOptions::ExecutionOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_handles_)*/{}
  , /*decltype(_impl_.allow_spmd_sharding_propagation_to_output_)*/{}
  , /*decltype(_impl_.auto_spmd_partitioning_mesh_shape_)*/{}
  , /*decltype(_impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.auto_spmd_partitioning_mesh_ids_)*/{}
  , /*decltype(_impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.param_requires_broadcast_via_collectives_)*/{}
  , /*decltype(_impl_.shardable_value_update_pairs_)*/{}
  , /*decltype(_impl_.allow_spmd_sharding_propagation_to_parameters_)*/{}
  , /*decltype(_impl_.fdo_profile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_with_output_layout_)*/nullptr
  , /*decltype(_impl_.debug_options_)*/nullptr
  , /*decltype(_impl_.device_assignment_)*/nullptr
  , /*decltype(_impl_.seed_)*/uint64_t{0u}
  , /*decltype(_impl_.num_replicas_)*/0
  , /*decltype(_impl_.num_partitions_)*/0
  , /*decltype(_impl_.launch_id_)*/0
  , /*decltype(_impl_.alias_passthrough_params_)*/false
  , /*decltype(_impl_.use_spmd_partitioning_)*/false
  , /*decltype(_impl_.use_auto_spmd_partitioning_)*/false
  , /*decltype(_impl_.deduplicate_hlo_)*/false
  , /*decltype(_impl_.device_memory_size_)*/int64_t{0}
  , /*decltype(_impl_.allow_separate_sharding_programs_)*/false
  , /*decltype(_impl_.use_shardy_partitioner_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecutionOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionOptionsDefaultTypeInternal() {}
  union {
    ExecutionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionOptionsDefaultTypeInternal _ExecutionOptions_default_instance_;
PROTOBUF_CONSTEXPR HloModuleConfigProto_BoolList::HloModuleConfigProto_BoolList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleConfigProto_BoolListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_BoolListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_BoolListDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_BoolList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_BoolListDefaultTypeInternal _HloModuleConfigProto_BoolList_default_instance_;
PROTOBUF_CONSTEXPR HloModuleConfigProto_Int64List::HloModuleConfigProto_Int64List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vals_)*/{}
  , /*decltype(_impl_._vals_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleConfigProto_Int64ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_Int64ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_Int64ListDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_Int64List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_Int64ListDefaultTypeInternal _HloModuleConfigProto_Int64List_default_instance_;
PROTOBUF_CONSTEXPR HloModuleConfigProto_Int64ListList::HloModuleConfigProto_Int64ListList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lists_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleConfigProto_Int64ListListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_Int64ListListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_Int64ListListDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_Int64ListList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_Int64ListListDefaultTypeInternal _HloModuleConfigProto_Int64ListList_default_instance_;
PROTOBUF_CONSTEXPR HloModuleConfigProto_DotConfigEntry_DoNotUse::HloModuleConfigProto_DotConfigEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HloModuleConfigProto_DotConfigEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_DotConfigEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_DotConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_DotConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_DotConfigEntry_DoNotUseDefaultTypeInternal _HloModuleConfigProto_DotConfigEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUseDefaultTypeInternal _HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HloModuleConfigProto::HloModuleConfigProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_requires_broadcast_via_collectives_)*/{}
  , /*decltype(_impl_.auto_spmd_partitioning_mesh_shape_)*/{}
  , /*decltype(_impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.auto_spmd_partitioning_mesh_ids_)*/{}
  , /*decltype(_impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.shardable_value_update_pairs_)*/{}
  , /*decltype(_impl_.fusion_config_)*/{}
  , /*decltype(_impl_.dot_config_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.layout_config_)*/{}
  , /*decltype(_impl_.memory_space_assignment_config_)*/{}
  , /*decltype(_impl_._memory_space_assignment_config_cached_byte_size_)*/{0}
  , /*decltype(_impl_.phase_ordering_config_)*/{}
  , /*decltype(_impl_.allow_spmd_sharding_propagation_to_output_)*/{}
  , /*decltype(_impl_.analysis_allowance_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.allow_spmd_sharding_propagation_to_parameters_)*/{}
  , /*decltype(_impl_.device_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fdo_profile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entry_computation_layout_)*/nullptr
  , /*decltype(_impl_.debug_options_)*/nullptr
  , /*decltype(_impl_.static_device_assignment_)*/nullptr
  , /*decltype(_impl_.pre_simulation_device_assignment_)*/nullptr
  , /*decltype(_impl_.seed_)*/uint64_t{0u}
  , /*decltype(_impl_.replica_count_)*/int64_t{0}
  , /*decltype(_impl_.num_partitions_)*/int64_t{0}
  , /*decltype(_impl_.launch_id_)*/0
  , /*decltype(_impl_.use_spmd_partitioning_)*/false
  , /*decltype(_impl_.use_auto_spmd_partitioning_)*/false
  , /*decltype(_impl_.deduplicate_hlo_)*/false
  , /*decltype(_impl_.allow_separate_sharding_programs_)*/false
  , /*decltype(_impl_.intra_op_parallelism_threads_)*/int64_t{0}
  , /*decltype(_impl_.fusion_config_collection_)*/0
  , /*decltype(_impl_.alias_passthrough_params_)*/false
  , /*decltype(_impl_.content_aware_computation_sorting_)*/false
  , /*decltype(_impl_.use_shardy_partitioner_)*/false
  , /*decltype(_impl_.phase_index_)*/0
  , /*decltype(_impl_.matrix_unit_operand_precision_)*/0
  , /*decltype(_impl_.device_memory_size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleConfigProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProtoDefaultTypeInternal() {}
  union {
    HloModuleConfigProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProtoDefaultTypeInternal _HloModuleConfigProto_default_instance_;
PROTOBUF_CONSTEXPR HloModuleProtoWithConfig::HloModuleProtoWithConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hlo_module_)*/nullptr
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleProtoWithConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleProtoWithConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleProtoWithConfigDefaultTypeInternal() {}
  union {
    HloModuleProtoWithConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleProtoWithConfigDefaultTypeInternal _HloModuleProtoWithConfig_default_instance_;
PROTOBUF_CONSTEXPR ScheduleProto_Instruction::ScheduleProto_Instruction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.start_timestamp_cycles_)*/0
  , /*decltype(_impl_.end_timestamp_cycles_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleProto_InstructionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleProto_InstructionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleProto_InstructionDefaultTypeInternal() {}
  union {
    ScheduleProto_Instruction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleProto_InstructionDefaultTypeInternal _ScheduleProto_Instruction_default_instance_;
PROTOBUF_CONSTEXPR ScheduleProto::ScheduleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instructions_)*/{}
  , /*decltype(_impl_.hlo_module_)*/nullptr
  , /*decltype(_impl_.computation_id_)*/int64_t{0}
  , /*decltype(_impl_.cycles_per_microsecond_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleProtoDefaultTypeInternal() {}
  union {
    ScheduleProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleProtoDefaultTypeInternal _ScheduleProto_default_instance_;
}  // namespace xla
static ::_pb::Metadata file_level_metadata_xla_2fxla_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_xla_2fxla_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xla_2fxla_2eproto = nullptr;

const uint32_t TableStruct_xla_2fxla_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::CompilationEnvironmentsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::CompilationEnvironmentsProto, _impl_.environments_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_concurrency_optimized_scheduler_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_fast_math_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_fast_min_max_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_fast_math_honor_division_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_fast_math_honor_functions_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_fast_math_honor_infs_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_fast_math_honor_nans_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_use_thunk_runtime_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_parallel_codegen_split_count_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_prefer_vector_width_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_experimental_autotune_cache_mode_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_experimental_disable_binary_libraries_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_unsupported_enable_triton_gemm_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_hlo_graph_addresses_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_hlo_profile_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_disable_hlo_passes_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_enable_hlo_passes_only_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_disable_all_hlo_passes_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_backend_optimization_level_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_embed_ir_in_executable_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_eliminate_hlo_implicit_broadcast_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_multi_thread_eigen_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_cuda_data_dir_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_ftz_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_enable_alias_scope_metadata_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_enable_noalias_metadata_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_enable_invariant_load_metadata_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_disable_expensive_passes_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_test_all_output_layouts_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_test_all_input_layouts_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_hlo_graph_sharding_color_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_use_mkl_dnn_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_fast_min_max_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_allow_excess_precision_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_crash_on_verification_failures_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_autotune_level_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_force_host_platform_device_count_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_disable_gpuasm_optimizations_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_shape_checks_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_hlo_evaluator_use_fast_path_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_allow_scalar_index_dynamic_ops_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_step_marker_location_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_to_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_module_re_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_pass_re_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_text_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_proto_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_dot_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_url_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_html_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_fusion_visualization_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_snapshots_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_include_timestamp_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_max_hlo_modules_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_module_metadata_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_compress_protos_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_long_text_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_force_conv_nchw_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_force_conv_nhwc_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_ptx_file_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_dump_llvmir_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_enable_mlir_pretty_form_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_algorithm_denylist_path_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_tpu_detect_nan_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_tpu_detect_inf_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_xprof_traceme_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_asm_extra_flags_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_multiheap_size_constraint_per_heap_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_detailed_logging_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_enable_dumping_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_force_compilation_parallelism_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_llvm_module_compilation_parallelism_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_deterministic_ops_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_llvm_ir_file_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_disable_async_collectives_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_all_reduce_combine_threshold_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_all_gather_combine_threshold_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_all_gather_combine_by_dim_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_reassociation_for_converted_ar_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_collective_inflation_factor_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_force_inline_before_split_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cudnn_frontend_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cudnn_fmha_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_fused_attention_use_cudnn_rng_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cudnn_layer_norm_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_disable_metadata_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_pipeline_re_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_strict_conv_algorithm_picker_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_custom_fusions_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_custom_fusions_re_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_dynamic_slice_fusion_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_nccl_termination_timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_shared_constants_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cublaslt_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_command_buffer_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_graph_min_graph_size_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_graph_enable_concurrent_region_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_redzone_scratch_max_megabytes_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_redzone_padding_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_use_acl_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_strict_dot_conv_math_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_use_runtime_fusion_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_latency_hiding_schedule_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_mlir_tiling_and_fusion_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_custom_matmul_tiling_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_matmul_tiling_m_dim_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_matmul_tiling_n_dim_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_matmul_tiling_k_dim_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_mlir_fusion_outlining_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_experimental_deallocation_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_latency_hiding_scheduler_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_highest_priority_async_stream_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_analytical_latency_estimator_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_lhs_enable_gpu_async_tracker_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_pgle_profile_file_or_directory_path_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_memory_limit_slop_factor_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_collectives_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_all_reduce_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_all_gather_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_reduce_scatter_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_p2p_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_run_post_layout_collective_pipeliner_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_collective_permute_decomposer_threshold_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_partitioning_algorithm_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_triton_gemm_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_triton_gemm_any_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_exhaustive_tiling_search_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_priority_fusion_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_dump_autotune_results_to_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_load_autotune_results_from_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_target_config_filename_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_triton_fusion_level_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_dump_autotuned_gemm_fusions_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_override_gemm_autotuner_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_copy_insertion_use_region_analysis_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_collect_cost_model_stats_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_split_k_autotuning_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_reduction_epilogue_fusion_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_nccl_clique_optimization_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_mock_custom_calls_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_cublas_fallback_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_while_loop_double_buffering_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_while_loop_unrolling_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_ensure_minor_dot_contraction_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_debug_buffer_assignment_show_max_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_llvm_verification_level_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cub_radix_sort_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_threshold_for_windowed_einsum_mib_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_triton_hopper_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_nccl_user_buffers_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_nccl_comm_splitting_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_nccl_per_stream_comms_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_libnvptxcompiler_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_dot_strength_reduction_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_multi_streamed_windowed_einsum_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_bf16_6way_gemm_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_bf16_3way_gemm_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_nccl_collective_max_nchannels_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_nccl_p2p_max_nchannels_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_mlir_emitter_level_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_gemm_rewrite_size_threshold_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_require_complete_aot_autotune_results_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_cudnn_gemm_fusion_level_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_use_memcpy_local_p2p_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_autotune_max_solutions_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_large_constants_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_verify_triton_fusion_numerics_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_dump_autotune_logs_to_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_reduce_window_rewrite_base_length_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_host_memory_offloading_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_exclude_nondeterministic_ops_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_nccl_terminate_on_error_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_shard_autotuning_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_approx_costly_collectives_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_kernel_cache_file_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_unsafe_pipelined_loop_annotator_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_per_fusion_autotune_cache_dir_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cmd_buffer_trace_cache_size_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_temp_buffer_use_separate_color_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.legacy_command_buffer_custom_call_targets_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_syntax_sugar_async_ops_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_autotune_gemm_rtol_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_enable_command_buffers_during_profiling_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_cudnn_gemm_max_plans_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_libnvjitlink_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_triton_gemm_int4_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_async_dot_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pgle_accuracy_checker_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_executable_warn_stuck_timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_executable_terminate_timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_experimental_ignore_channel_id_),
  PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_backend_extra_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::GpuCompilationEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::GpuCompilationEnvironment, _impl_.dummy_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ShardableValueUpdatePairProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ShardableValueUpdatePairProto, _impl_.input_parameter_number_),
  PROTOBUF_FIELD_OFFSET(::xla::ShardableValueUpdatePairProto, _impl_.parameter_shape_index_),
  PROTOBUF_FIELD_OFFSET(::xla::ShardableValueUpdatePairProto, _impl_.output_shape_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.shape_with_output_layout_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.seed_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.debug_options_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.device_handles_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.num_replicas_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.device_assignment_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.alias_passthrough_params_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.num_partitions_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.launch_id_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.use_spmd_partitioning_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.use_auto_spmd_partitioning_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_shape_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.deduplicate_hlo_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_parameters_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_output_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.param_requires_broadcast_via_collectives_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.allow_separate_sharding_programs_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.shardable_value_update_pairs_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.fdo_profile_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.device_memory_size_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.use_shardy_partitioner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_BoolList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_BoolList, _impl_.vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_Int64List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_Int64List, _impl_.vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_Int64ListList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_Int64ListList, _impl_.lists_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.entry_computation_layout_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.seed_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.launch_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.replica_count_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.num_partitions_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.param_requires_broadcast_via_collectives_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.use_spmd_partitioning_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.use_auto_spmd_partitioning_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_shape_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.deduplicate_hlo_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.intra_op_parallelism_threads_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.device_type_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.debug_options_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.static_device_assignment_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.pre_simulation_device_assignment_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.allow_separate_sharding_programs_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.shardable_value_update_pairs_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.alias_passthrough_params_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.content_aware_computation_sorting_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.fusion_config_collection_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.fusion_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.dot_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.layout_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.memory_space_assignment_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.phase_ordering_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.phase_index_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_parameters_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_output_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.analysis_allowance_map_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.matrix_unit_operand_precision_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.fdo_profile_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.device_memory_size_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.use_shardy_partitioner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProtoWithConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProtoWithConfig, _impl_.hlo_module_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProtoWithConfig, _impl_.config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto_Instruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto_Instruction, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto_Instruction, _impl_.start_timestamp_cycles_),
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto_Instruction, _impl_.end_timestamp_cycles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_.instructions_),
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_.computation_id_),
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_.hlo_module_),
  PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_.cycles_per_microsecond_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xla::CompilationEnvironmentsProto)},
  { 7, 15, -1, sizeof(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse)},
  { 17, -1, -1, sizeof(::xla::DebugOptions)},
  { 226, -1, -1, sizeof(::xla::GpuCompilationEnvironment)},
  { 233, -1, -1, sizeof(::xla::ShardableValueUpdatePairProto)},
  { 242, -1, -1, sizeof(::xla::ExecutionOptions)},
  { 270, -1, -1, sizeof(::xla::HloModuleConfigProto_BoolList)},
  { 277, -1, -1, sizeof(::xla::HloModuleConfigProto_Int64List)},
  { 284, -1, -1, sizeof(::xla::HloModuleConfigProto_Int64ListList)},
  { 291, 299, -1, sizeof(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse)},
  { 301, 309, -1, sizeof(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse)},
  { 311, -1, -1, sizeof(::xla::HloModuleConfigProto)},
  { 351, -1, -1, sizeof(::xla::HloModuleProtoWithConfig)},
  { 359, -1, -1, sizeof(::xla::ScheduleProto_Instruction)},
  { 368, -1, -1, sizeof(::xla::ScheduleProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xla::_CompilationEnvironmentsProto_default_instance_._instance,
  &::xla::_DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse_default_instance_._instance,
  &::xla::_DebugOptions_default_instance_._instance,
  &::xla::_GpuCompilationEnvironment_default_instance_._instance,
  &::xla::_ShardableValueUpdatePairProto_default_instance_._instance,
  &::xla::_ExecutionOptions_default_instance_._instance,
  &::xla::_HloModuleConfigProto_BoolList_default_instance_._instance,
  &::xla::_HloModuleConfigProto_Int64List_default_instance_._instance,
  &::xla::_HloModuleConfigProto_Int64ListList_default_instance_._instance,
  &::xla::_HloModuleConfigProto_DotConfigEntry_DoNotUse_default_instance_._instance,
  &::xla::_HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse_default_instance_._instance,
  &::xla::_HloModuleConfigProto_default_instance_._instance,
  &::xla::_HloModuleProtoWithConfig_default_instance_._instance,
  &::xla::_ScheduleProto_Instruction_default_instance_._instance,
  &::xla::_ScheduleProto_default_instance_._instance,
};

const char descriptor_table_protodef_xla_2fxla_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rxla/xla.proto\022\003xla\032\031google/protobuf/an"
  "y.proto\032\025xla/service/hlo.proto\032\022xla/xla_"
  "data.proto\"J\n\034CompilationEnvironmentsPro"
  "to\022*\n\014environments\030\001 \003(\0132\024.google.protob"
  "uf.Any\"\334P\n\014DebugOptions\0227\n.xla_cpu_enabl"
  "e_concurrency_optimized_scheduler\030\263\002 \001(\010"
  "\022 \n\030xla_cpu_enable_fast_math\030c \001(\010\022$\n\033xl"
  "a_cpu_enable_fast_min_max\030\214\001 \001(\010\022(\n xla_"
  "cpu_fast_math_honor_division\030~ \001(\010\022*\n!xl"
  "a_cpu_fast_math_honor_functions\030\201\001 \001(\010\022$"
  "\n\034xla_cpu_fast_math_honor_infs\030y \001(\010\022$\n\034"
  "xla_cpu_fast_math_honor_nans\030x \001(\010\022\"\n\031xl"
  "a_cpu_use_thunk_runtime\030\252\002 \001(\010\022-\n$xla_cp"
  "u_parallel_codegen_split_count\030\303\002 \001(\005\022$\n"
  "\033xla_cpu_prefer_vector_width\030\264\002 \001(\005\022V\n(x"
  "la_gpu_experimental_autotune_cache_mode\030"
  "\304\002 \001(\0162#.xla.DebugOptions.AutotuneCacheM"
  "ode\0226\n-xla_gpu_experimental_disable_bina"
  "ry_libraries\030\311\002 \001(\010\022C\n:xla_gpu_experimen"
  "tal_enable_triton_softmax_priority_fusio"
  "n\030\305\002 \001(\010\022/\n&xla_gpu_unsupported_enable_t"
  "riton_gemm\030\302\002 \001(\010\022\037\n\027xla_hlo_graph_addre"
  "sses\030\002 \001(\010\022\027\n\017xla_hlo_profile\030\t \001(\010\022\036\n\026x"
  "la_disable_hlo_passes\030\036 \003(\t\022\"\n\032xla_enabl"
  "e_hlo_passes_only\030| \003(\t\022\"\n\032xla_disable_a"
  "ll_hlo_passes\030h \001(\010\022&\n\036xla_backend_optim"
  "ization_level\030\037 \001(\005\022\"\n\032xla_embed_ir_in_e"
  "xecutable\030! \001(\010\022,\n$xla_eliminate_hlo_imp"
  "licit_broadcast\030# \001(\010\022\"\n\032xla_cpu_multi_t"
  "hread_eigen\030< \001(\010\022\035\n\025xla_gpu_cuda_data_d"
  "ir\030= \001(\t\022\023\n\013xla_gpu_ftz\030> \001(\010\022,\n$xla_llv"
  "m_enable_alias_scope_metadata\030F \001(\010\022(\n x"
  "la_llvm_enable_noalias_metadata\030G \001(\010\022/\n"
  "\'xla_llvm_enable_invariant_load_metadata"
  "\030H \001(\010\022)\n!xla_llvm_disable_expensive_pas"
  "ses\030I \001(\010\022#\n\033xla_test_all_output_layouts"
  "\030Z \001(\010\022\"\n\032xla_test_all_input_layouts\030[ \001"
  "(\010\022$\n\034xla_hlo_graph_sharding_color\030\\ \001(\010"
  "\022\033\n\023xla_cpu_use_mkl_dnn\030a \001(\010\022#\n\033xla_gpu"
  "_enable_fast_min_max\030d \001(\010\022\"\n\032xla_allow_"
  "excess_precision\030z \001(\010\022.\n&xla_gpu_crash_"
  "on_verification_failures\030e \001(\010\022\036\n\026xla_gp"
  "u_autotune_level\030{ \001(\005\022,\n$xla_force_host"
  "_platform_device_count\030f \001(\005\022,\n$xla_gpu_"
  "disable_gpuasm_optimizations\030g \001(\010\022<\n\024xl"
  "a_gpu_shape_checks\030\252\001 \001(\0162\035.xla.DebugOpt"
  "ions.ShapeChecks\022\'\n\037xla_hlo_evaluator_us"
  "e_fast_path\030j \001(\010\022*\n\"xla_allow_scalar_in"
  "dex_dynamic_ops\030k \001(\010\022F\n\030xla_step_marker"
  "_location\030l \001(\0162$.xla.DebugOptions.StepM"
  "arkerLocation\022\023\n\013xla_dump_to\030m \001(\t\022\036\n\026xl"
  "a_dump_hlo_module_re\030n \001(\t\022\034\n\024xla_dump_h"
  "lo_pass_re\030o \001(\t\022\034\n\024xla_dump_hlo_as_text"
  "\030p \001(\010\022\035\n\025xla_dump_hlo_as_proto\030q \001(\010\022\033\n"
  "\023xla_dump_hlo_as_dot\030r \001(\010\022\033\n\023xla_dump_h"
  "lo_as_url\030s \001(\010\022\034\n\024xla_dump_hlo_as_html\030"
  "t \001(\010\022&\n\035xla_dump_fusion_visualization\030\225"
  "\001 \001(\010\022\036\n\026xla_dump_hlo_snapshots\030v \001(\010\022#\n"
  "\032xla_dump_include_timestamp\030\203\001 \001(\010\022!\n\030xl"
  "a_dump_max_hlo_modules\030\204\001 \001(\005\022!\n\030xla_dum"
  "p_module_metadata\030\220\001 \001(\010\022!\n\030xla_dump_com"
  "press_protos\030\227\001 \001(\010\022\"\n\031xla_dump_hlo_as_l"
  "ong_text\030\244\001 \001(\010\022\037\n\027xla_gpu_force_conv_nc"
  "hw\030} \001(\010\022 \n\027xla_gpu_force_conv_nhwc\030\222\001 \001"
  "(\010\022\030\n\020xla_gpu_ptx_file\030\177 \003(\t\022\034\n\023xla_gpu_"
  "dump_llvmir\030\233\001 \001(\010\022)\n xla_dump_enable_ml"
  "ir_pretty_form\030\271\001 \001(\010\022(\n\037xla_gpu_algorit"
  "hm_denylist_path\030\200\001 \001(\t\022\033\n\022xla_tpu_detec"
  "t_nan\030\207\001 \001(\010\022\033\n\022xla_tpu_detect_inf\030\210\001 \001("
  "\010\022%\n\034xla_cpu_enable_xprof_traceme\030\211\001 \001(\010"
  "\022=\n4xla_gpu_unsafe_fallback_to_driver_on"
  "_ptxas_not_found\030\212\001 \001(\010\022 \n\027xla_gpu_asm_e"
  "xtra_flags\030\215\001 \001(\t\022/\n&xla_multiheap_size_"
  "constraint_per_heap\030\216\001 \001(\005\022\035\n\024xla_detail"
  "ed_logging\030\374\001 \001(\010\022\033\n\022xla_enable_dumping\030"
  "\375\001 \001(\010\022.\n%xla_gpu_force_compilation_para"
  "llelism\030\223\001 \001(\005\022;\n2xla_gpu_enable_llvm_mo"
  "dule_compilation_parallelism\030\214\002 \001(\010\022\"\n\031x"
  "la_gpu_deterministic_ops\030\224\001 \001(\010\022\035\n\024xla_g"
  "pu_llvm_ir_file\030\226\001 \003(\t\022N\n!xla_gpu_disabl"
  "e_async_collectives\030\241\002 \003(\0162\".xla.DebugOp"
  "tions.CollectiveOpType\0223\n*xla_gpu_all_re"
  "duce_combine_threshold_bytes\030\235\001 \001(\003\0223\n*x"
  "la_gpu_all_gather_combine_threshold_byte"
  "s\030\324\001 \001(\003\0227\n.xla_gpu_reduce_scatter_combi"
  "ne_threshold_bytes\030\325\001 \001(\003\0221\n(xla_gpu_ena"
  "ble_all_gather_combine_by_dim\030\376\001 \001(\010\0225\n,"
  "xla_gpu_enable_reduce_scatter_combine_by"
  "_dim\030\201\002 \001(\010\0226\n-xla_gpu_enable_reassociat"
  "ion_for_converted_ar\030\321\001 \001(\010\022<\n3xla_gpu_a"
  "ll_reduce_blueconnect_num_devices_per_ho"
  "st\030\237\001 \001(\005\022=\n4xla_gpu_enable_while_loop_r"
  "educe_scatter_code_motion\030\313\001 \001(\010\022,\n#xla_"
  "gpu_collective_inflation_factor\030\315\001 \001(\005\022+"
  "\n\"xla_llvm_force_inline_before_split\030\254\002 "
  "\001(\010\022&\n\035xla_gpu_enable_cudnn_frontend\030\240\001 "
  "\001(\010\022\"\n\031xla_gpu_enable_cudnn_fmha\030\332\001 \001(\010\022"
  ".\n%xla_gpu_fused_attention_use_cudnn_rng"
  "\030\353\001 \001(\010\022(\n\037xla_gpu_enable_cudnn_layer_no"
  "rm\030\206\002 \001(\010\022\"\n\031xla_dump_disable_metadata\030\231"
  "\001 \001(\010\022!\n\030xla_dump_hlo_pipeline_re\030\232\001 \001(\t"
  "\022-\n$xla_gpu_strict_conv_algorithm_picker"
  "\030\234\001 \001(\010\022&\n\035xla_gpu_enable_custom_fusions"
  "\030\207\002 \001(\010\022)\n xla_gpu_enable_custom_fusions"
  "_re\030\210\002 \001(\t\022+\n#xla_gpu_enable_dynamic_sli"
  "ce_fusion\030i \001(\010\0221\n(xla_gpu_nccl_terminat"
  "ion_timeout_seconds\030\243\001 \001(\003\022(\n\037xla_gpu_en"
  "able_shared_constants\030\245\001 \001(\010\022 \n\027xla_gpu_"
  "enable_cublaslt\030\246\001 \001(\010\022N\n\035xla_gpu_enable"
  "_command_buffer\030\202\002 \003(\0162&.xla.DebugOption"
  "s.CommandBufferCmdType\022%\n\034xla_gpu_graph_"
  "min_graph_size\030\320\001 \001(\005\022/\n&xla_gpu_graph_e"
  "nable_concurrent_region\030\327\001 \001(\010\022.\n%xla_gp"
  "u_redzone_scratch_max_megabytes\030\247\001 \001(\003\022&"
  "\n\035xla_gpu_redzone_padding_bytes\030\344\001 \001(\003\022\030"
  "\n\017xla_cpu_use_acl\030\256\001 \001(\010\022%\n\034xla_cpu_stri"
  "ct_dot_conv_math\030\257\001 \001(\010\022#\n\032xla_gpu_use_r"
  "untime_fusion\030\265\001 \001(\010\022)\n xla_dump_latency"
  "_hiding_schedule\030\266\001 \001(\010\022.\n%xla_cpu_enabl"
  "e_mlir_tiling_and_fusion\030\270\001 \001(\010\022,\n#xla_c"
  "pu_enable_custom_matmul_tiling\030\303\001 \001(\010\022$\n"
  "\033xla_cpu_matmul_tiling_m_dim\030\304\001 \001(\003\022$\n\033x"
  "la_cpu_matmul_tiling_n_dim\030\305\001 \001(\003\022$\n\033xla"
  "_cpu_matmul_tiling_k_dim\030\306\001 \001(\003\022-\n$xla_c"
  "pu_enable_mlir_fusion_outlining\030\300\001 \001(\010\0221"
  "\n(xla_cpu_enable_experimental_deallocati"
  "on\030\277\001 \001(\010\0220\n\'xla_gpu_enable_latency_hidi"
  "ng_scheduler\030\272\001 \001(\010\0225\n,xla_gpu_enable_hi"
  "ghest_priority_async_stream\030\330\001 \001(\010\0224\n+xl"
  "a_gpu_enable_analytical_latency_estimato"
  "r\030\377\001 \001(\010\022-\n$xla_gpu_lhs_enable_gpu_async"
  "_tracker\030\314\001 \001(\010\0224\n+xla_gpu_pgle_profile_"
  "file_or_directory_path\030\322\001 \001(\t\022)\n xla_gpu"
  "_memory_limit_slop_factor\030\204\002 \001(\005\022-\n$xla_"
  "gpu_enable_pipelined_collectives\030\357\001 \001(\010\022"
  ",\n#xla_gpu_enable_pipelined_all_reduce\030\331"
  "\001 \001(\010\022,\n#xla_gpu_enable_pipelined_all_ga"
  "ther\030\343\001 \001(\010\0220\n\'xla_gpu_enable_pipelined_"
  "reduce_scatter\030\347\001 \001(\010\022%\n\034xla_gpu_enable_"
  "pipelined_p2p\030\366\001 \001(\010\0225\n,xla_gpu_run_post"
  "_layout_collective_pipeliner\030\271\002 \001(\010\0228\n/x"
  "la_gpu_collective_permute_decomposer_thr"
  "eshold\030\355\001 \001(\003\022L\n\032xla_partitioning_algori"
  "thm\030\273\001 \001(\0162\'.xla.DebugOptions.Partitioni"
  "ngAlgorithm\022#\n\032xla_gpu_enable_triton_gem"
  "m\030\274\001 \001(\010\022<\n3xla_gpu_enable_cudnn_int8x32"
  "_convolution_reordering\030\275\001 \001(\010\022 \n\027xla_gp"
  "u_triton_gemm_any\030\276\001 \001(\010\022)\n xla_gpu_exha"
  "ustive_tiling_search\030\333\001 \001(\010\022\'\n\036xla_gpu_e"
  "nable_priority_fusion\030\335\001 \001(\010\022)\n xla_gpu_"
  "dump_autotune_results_to\030\336\001 \001(\t\022+\n\"xla_g"
  "pu_load_autotune_results_from\030\337\001 \001(\t\022\'\n\036"
  "xla_gpu_target_config_filename\030\205\002 \001(\t\0228\n"
  "/xla_gpu_auto_spmd_partitioning_memory_b"
  "udget_gb\030\340\001 \001(\005\022;\n2xla_gpu_auto_spmd_par"
  "titioning_memory_budget_ratio\030\341\001 \001(\002\022@\n7"
  "xla_gpu_triton_gemm_disable_reduced_prec"
  "ision_reduction\030\342\001 \001(\010\022$\n\033xla_gpu_triton"
  "_fusion_level\030\345\001 \001(\005\022,\n#xla_gpu_dump_aut"
  "otuned_gemm_fusions\030\350\001 \001(\010\022(\n\037xla_gpu_ov"
  "erride_gemm_autotuner\030\247\002 \001(\t\0223\n*xla_gpu_"
  "copy_insertion_use_region_analysis\030\354\001 \001("
  "\010\022)\n xla_gpu_collect_cost_model_stats\030\360\001"
  " \001(\010\022*\n!xla_gpu_enable_split_k_autotunin"
  "g\030\361\001 \001(\010\0221\n(xla_gpu_enable_reduction_epi"
  "logue_fusion\030\363\001 \001(\010\0220\n\'xla_gpu_enable_nc"
  "cl_clique_optimization\030\364\001 \001(\010\022\"\n\031xla_gpu"
  "_mock_custom_calls\030\365\001 \001(\010\022 \n\027xla_gpu_cub"
  "las_fallback\030\367\001 \001(\010\0223\n*xla_gpu_enable_wh"
  "ile_loop_double_buffering\030\370\001 \001(\010\022R\n#xla_"
  "gpu_enable_while_loop_unrolling\030\246\002 \001(\0162$"
  ".xla.DebugOptions.WhileLoopUnrolling\0222\n)"
  "xla_gpu_ensure_minor_dot_contraction_dim"
  "s\030\371\001 \001(\010\022@\n7xla_gpu_filter_kernels_spill"
  "ing_registers_on_autotuning\030\372\001 \001(\010\022-\n$xl"
  "a_debug_buffer_assignment_show_max\030\373\001 \001("
  "\003\022(\n\037xla_gpu_llvm_verification_level\030\200\002 "
  "\001(\005\022&\n\035xla_gpu_enable_cub_radix_sort\030\203\002 "
  "\001(\010\0222\n)xla_gpu_threshold_for_windowed_ei"
  "nsum_mib\030\211\002 \001(\003\022%\n\034xla_gpu_enable_triton"
  "_hopper\030\212\002 \001(\010\022)\n xla_gpu_enable_nccl_us"
  "er_buffers\030\213\002 \001(\010\022+\n\"xla_gpu_enable_nccl"
  "_comm_splitting\030\220\002 \001(\010\022-\n$xla_gpu_enable"
  "_nccl_per_stream_comms\030\224\002 \001(\010\022(\n\037xla_gpu"
  "_enable_libnvptxcompiler\030\215\002 \001(\010\022.\n%xla_g"
  "pu_enable_dot_strength_reduction\030\216\002 \001(\010\022"
  "/\n&xla_gpu_multi_streamed_windowed_einsu"
  "m\030\230\002 \001(\010\022&\n\035xla_gpu_enable_bf16_6way_gem"
  "m\030\217\002 \001(\010\022&\n\035xla_gpu_enable_bf16_3way_gem"
  "m\030\227\002 \001(\010\022.\n%xla_gpu_nccl_collective_max_"
  "nchannels\030\221\002 \001(\003\022\'\n\036xla_gpu_nccl_p2p_max"
  "_nchannels\030\222\002 \001(\003\022#\n\032xla_gpu_mlir_emitte"
  "r_level\030\257\002 \001(\003\022,\n#xla_gpu_gemm_rewrite_s"
  "ize_threshold\030\233\002 \001(\003\0226\n-xla_gpu_require_"
  "complete_aot_autotune_results\030\234\002 \001(\010\022(\n\037"
  "xla_gpu_cudnn_gemm_fusion_level\030\235\002 \001(\005\022%"
  "\n\034xla_gpu_use_memcpy_local_p2p\030\237\002 \001(\010\022\'\n"
  "\036xla_gpu_autotune_max_solutions\030\240\002 \001(\003\022!"
  "\n\030xla_dump_large_constants\030\242\002 \001(\010\022.\n%xla"
  "_gpu_verify_triton_fusion_numerics\030\243\002 \001("
  "\010\022&\n\035xla_gpu_dump_autotune_logs_to\030\244\002 \001("
  "\t\022.\n%xla_reduce_window_rewrite_base_leng"
  "th\030\245\002 \001(\003\022.\n%xla_gpu_enable_host_memory_"
  "offloading\030\250\002 \001(\010\022-\n$xla_gpu_exclude_non"
  "deterministic_ops\030\251\002 \001(\010\022(\n\037xla_gpu_nccl"
  "_terminate_on_error\030\255\002 \001(\010\022!\n\030xla_gpu_sh"
  "ard_autotuning\030\260\002 \001(\010\0221\n(xla_gpu_enable_"
  "approx_costly_collectives\030\261\002 \001(\010\022\"\n\031xla_"
  "gpu_kernel_cache_file\030\262\002 \001(\t\0220\n\'xla_gpu_"
  "unsafe_pipelined_loop_annotator\030\265\002 \001(\010\022."
  "\n%xla_gpu_per_fusion_autotune_cache_dir\030"
  "\266\002 \001(\t\022(\n\037xla_cmd_buffer_trace_cache_siz"
  "e\030\267\002 \001(\003\022/\n&xla_gpu_temp_buffer_use_sepa"
  "rate_color\030\270\002 \001(\010\0222\n)legacy_command_buff"
  "er_custom_call_targets\030\272\002 \003(\t\022#\n\032xla_syn"
  "tax_sugar_async_ops\030\273\002 \001(\010\022#\n\032xla_gpu_au"
  "totune_gemm_rtol\030\274\002 \001(\002\0224\n+xla_enable_co"
  "mmand_buffers_during_profiling\030\275\002 \001(\010\022%\n"
  "\034xla_gpu_cudnn_gemm_max_plans\030\276\002 \001(\005\022$\n\033"
  "xla_gpu_enable_libnvjitlink\030\277\002 \001(\010\022(\n\037xl"
  "a_gpu_enable_triton_gemm_int4\030\300\002 \001(\010\022\032\n\021"
  "xla_gpu_async_dot\030\301\002 \001(\010\022-\n$xla_gpu_enab"
  "le_pgle_accuracy_checker\030\306\002 \001(\010\0226\n-xla_g"
  "pu_executable_warn_stuck_timeout_seconds"
  "\030\307\002 \001(\005\0225\n,xla_gpu_executable_terminate_"
  "timeout_seconds\030\310\002 \001(\005\022+\n\"xla_experiment"
  "al_ignore_channel_id\030\312\002 \001(\010\022Q\n\031xla_backe"
  "nd_extra_options\030\364\003 \003(\0132-.xla.DebugOptio"
  "ns.XlaBackendExtraOptionsEntry\032=\n\033XlaBac"
  "kendExtraOptionsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\"8\n\013ShapeChecks\022\n\n\006IGNORE\020\000"
  "\022\013\n\007RUNTIME\020\001\022\020\n\014COMPILE_TIME\020\002\"\221\001\n\022Step"
  "MarkerLocation\022\026\n\022STEP_MARK_AT_ENTRY\020\000\022%"
  "\n!STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP\020\001\022(\n"
  "$STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP\020\003\022"
  "\022\n\016STEP_MARK_NONE\020\002\"\213\001\n\020CollectiveOpType"
  "\022\010\n\004NOOP\020\000\022\r\n\tALLREDUCE\020\001\022\r\n\tALLGATHER\020\002"
  "\022\021\n\rREDUCESCATTER\020\003\022\027\n\023COLLECTIVEBROADCA"
  "ST\020\004\022\014\n\010ALLTOALL\020\005\022\025\n\021COLLECTIVEPERMUTE\020"
  "\006\"\210\001\n\024CommandBufferCmdType\022\013\n\007INVALID\020\000\022"
  "\n\n\006FUSION\020\001\022\n\n\006CUBLAS\020\002\022\t\n\005CUDNN\020\003\022\017\n\013CO"
  "LLECTIVES\020\004\022\020\n\014CONDITIONALS\020\005\022\017\n\013CUSTOM_"
  "CALL\020\006\022\014\n\010CUBLASLT\020\007\"\233\001\n\025PartitioningAlg"
  "orithm\022\037\n\033PARTITIONING_ALGORITHM_NOOP\020\000\022"
  "\037\n\033PARTITIONING_ALGORITHM_EXP0\020\001\022\037\n\033PART"
  "ITIONING_ALGORITHM_EXP1\020\002\022\037\n\033PARTITIONIN"
  "G_ALGORITHM_EXP2\020\003\"\206\001\n\022WhileLoopUnrollin"
  "g\022\"\n\036WHILE_LOOP_UNROLLING_NO_UNROLL\020\000\022&\n"
  "\"WHILE_LOOP_UNROLLING_DOUBLE_BUFFER\020\001\022$\n"
  " WHILE_LOOP_UNROLLING_FULL_UNROLL\020\002\"v\n\021A"
  "utotuneCacheMode\022#\n\037AUTOTUNE_CACHE_MODE_"
  "UNSPECIFIED\020\000\022\036\n\032AUTOTUNE_CACHE_MODE_UPD"
  "ATE\020\001\022\034\n\030AUTOTUNE_CACHE_MODE_READ\020\002J\004\010\?\020"
  "@J\006\010\206\001\020\207\001J\004\010P\020QJ\004\010]\020^J\004\010^\020_J\006\010\261\001\020\262\001J\004\010b\020"
  "cJ\006\010\317\001\020\320\001J\006\010\253\001\020\254\001J\006\010\255\001\020\256\001J\006\010\263\001\020\264\001J\006\010\202\001\020\203"
  "\001J\006\010\217\001\020\220\001J\006\010\230\001\020\231\001J\006\010\226\002\020\227\002J\006\010\267\001\020\270\001J\006\010\307\001\020\310"
  "\001J\006\010\310\001\020\311\001J\006\010\311\001\020\312\001J\006\010\356\001\020\357\001J\006\010\236\001\020\237\001J\006\010\253\002\020\254"
  "\002J\006\010\241\001\020\242\001J\006\010\242\001\020\243\001J\006\010\251\001\020\252\001J\006\010\351\001\020\352\001J\006\010\352\001\020\353"
  "\001J\006\010\312\001\020\313\001J\006\010\346\001\020\347\001J\006\010\250\001\020\251\001J\006\010\254\001\020\255\001J\006\010\323\001\020\324"
  "\001J\006\010\334\001\020\335\001J\006\010\236\002\020\237\002J\006\010\223\002\020\224\002J\006\010\231\002\020\232\002J\006\010\232\002\020\233"
  "\002J\006\010\256\002\020\257\002J\004\010\005\020\006J\004\010u\020vJ\006\010\205\001\020\206\001J\006\010\213\001\020\214\001J\006\010"
  "\260\001\020\261\001J\006\010\262\001\020\263\001J\006\010\264\001\020\265\001J\006\010\301\001\020\302\001J\006\010\326\001\020\327\001J\006\010"
  "\302\001\020\303\001J\006\010\362\001\020\363\001J\006\010\316\001\020\317\001\"/\n\031GpuCompilationE"
  "nvironment\022\022\n\ndummy_flag\030\001 \001(\003\"z\n\035Sharda"
  "bleValueUpdatePairProto\022\036\n\026input_paramet"
  "er_number\030\001 \001(\003\022\035\n\025parameter_shape_index"
  "\030\002 \003(\003\022\032\n\022output_shape_index\030\003 \003(\003\"\331\006\n\020E"
  "xecutionOptions\0221\n\030shape_with_output_lay"
  "out\030\002 \001(\0132\017.xla.ShapeProto\022\014\n\004seed\030\003 \001(\004"
  "\022(\n\rdebug_options\030\004 \001(\0132\021.xla.DebugOptio"
  "ns\022)\n\016device_handles\030\005 \003(\0132\021.xla.DeviceH"
  "andle\022\024\n\014num_replicas\030\006 \001(\005\0225\n\021device_as"
  "signment\030\007 \001(\0132\032.xla.DeviceAssignmentPro"
  "to\022 \n\030alias_passthrough_params\030\010 \001(\010\022\026\n\016"
  "num_partitions\030\t \001(\005\022\021\n\tlaunch_id\030\n \001(\005\022"
  "\035\n\025use_spmd_partitioning\030\013 \001(\010\022\"\n\032use_au"
  "to_spmd_partitioning\030\017 \001(\010\022)\n!auto_spmd_"
  "partitioning_mesh_shape\030\020 \003(\003\022\'\n\037auto_sp"
  "md_partitioning_mesh_ids\030\021 \003(\003\022\027\n\017dedupl"
  "icate_hlo\030\014 \001(\010\0225\n-allow_spmd_sharding_p"
  "ropagation_to_parameters\030\027 \003(\010\0221\n)allow_"
  "spmd_sharding_propagation_to_output\030\016 \003("
  "\010\0220\n(param_requires_broadcast_via_collec"
  "tives\030\022 \003(\010\022(\n allow_separate_sharding_p"
  "rograms\030\023 \001(\010\022H\n\034shardable_value_update_"
  "pairs\030\024 \003(\0132\".xla.ShardableValueUpdatePa"
  "irProto\022\023\n\013fdo_profile\030\025 \001(\014\022\032\n\022device_m"
  "emory_size\030\026 \001(\003\022\036\n\026use_shardy_partition"
  "er\030\030 \001(\010J\004\010\r\020\016\"\343\016\n\024HloModuleConfigProto\022"
  "8\n\030entry_computation_layout\030\001 \001(\0132\026.xla."
  "ProgramShapeProto\022\014\n\004seed\030\002 \001(\004\022\021\n\tlaunc"
  "h_id\030\003 \001(\005\022\025\n\rreplica_count\030\004 \001(\003\022\026\n\016num"
  "_partitions\030\005 \001(\003\0220\n(param_requires_broa"
  "dcast_via_collectives\030\006 \003(\010\022\035\n\025use_spmd_"
  "partitioning\030\007 \001(\010\022\"\n\032use_auto_spmd_part"
  "itioning\030\010 \001(\010\022)\n!auto_spmd_partitioning"
  "_mesh_shape\030\t \003(\003\022\'\n\037auto_spmd_partition"
  "ing_mesh_ids\030\n \003(\003\022\027\n\017deduplicate_hlo\030\013 "
  "\001(\010\022$\n\034intra_op_parallelism_threads\030\014 \001("
  "\003\022\023\n\013device_type\030\r \001(\t\022(\n\rdebug_options\030"
  "\016 \001(\0132\021.xla.DebugOptions\022<\n\030static_devic"
  "e_assignment\030\017 \001(\0132\032.xla.DeviceAssignmen"
  "tProto\022D\n pre_simulation_device_assignme"
  "nt\030# \001(\0132\032.xla.DeviceAssignmentProto\022(\n "
  "allow_separate_sharding_programs\030\036 \001(\010\022H"
  "\n\034shardable_value_update_pairs\030\020 \003(\0132\".x"
  "la.ShardableValueUpdatePairProto\022 \n\030alia"
  "s_passthrough_params\030\021 \001(\010\022)\n!content_aw"
  "are_computation_sorting\030\022 \001(\010\022R\n\030fusion_"
  "config_collection\030\023 \001(\01620.xla.HloModuleC"
  "onfigProto.FusionConfigCollection\0229\n\rfus"
  "ion_config\030\024 \003(\0132\".xla.HloModuleConfigPr"
  "oto.BoolList\022<\n\ndot_config\030\025 \003(\0132(.xla.H"
  "loModuleConfigProto.DotConfigEntry\022>\n\rla"
  "yout_config\030\026 \003(\0132\'.xla.HloModuleConfigP"
  "roto.Int64ListList\022&\n\036memory_space_assig"
  "nment_config\030\027 \003(\004\022A\n\025phase_ordering_con"
  "fig\030\030 \003(\0132\".xla.HloModuleConfigProto.Boo"
  "lList\022\023\n\013phase_index\030\031 \001(\005\0225\n-allow_spmd"
  "_sharding_propagation_to_parameters\030! \003("
  "\010\0221\n)allow_spmd_sharding_propagation_to_"
  "output\030\033 \003(\010\022S\n\026analysis_allowance_map\030\034"
  " \003(\01323.xla.HloModuleConfigProto.Analysis"
  "AllowanceMapEntry\022E\n\035matrix_unit_operand"
  "_precision\030\035 \001(\0162\036.xla.PrecisionConfig.P"
  "recision\022\023\n\013fdo_profile\030\037 \001(\014\022\032\n\022device_"
  "memory_size\030  \001(\003\022\036\n\026use_shardy_partitio"
  "ner\030\" \001(\010\032\030\n\010BoolList\022\014\n\004vals\030\001 \003(\010\032\031\n\tI"
  "nt64List\022\014\n\004vals\030\001 \003(\003\032C\n\rInt64ListList\022"
  "2\n\005lists\030\001 \003(\0132#.xla.HloModuleConfigProt"
  "o.Int64List\032U\n\016DotConfigEntry\022\013\n\003key\030\001 \001"
  "(\t\0222\n\005value\030\002 \001(\0132#.xla.HloModuleConfigP"
  "roto.Int64List:\0028\001\032;\n\031AnalysisAllowanceM"
  "apEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\""
  "=\n\026FusionConfigCollection\022\007\n\003OFF\020\000\022\014\n\010PE"
  "R_EDGE\020\001\022\014\n\010PER_NODE\020\002J\004\010\032\020\033\"n\n\030HloModul"
  "eProtoWithConfig\022\'\n\nhlo_module\030\001 \001(\0132\023.x"
  "la.HloModuleProto\022)\n\006config\030\002 \001(\0132\031.xla."
  "HloModuleConfigProto\"\377\001\n\rScheduleProto\0224"
  "\n\014instructions\030\001 \003(\0132\036.xla.ScheduleProto"
  ".Instruction\022\026\n\016computation_id\030\002 \001(\003\022\'\n\n"
  "hlo_module\030\003 \001(\0132\023.xla.HloModuleProto\022\036\n"
  "\026cycles_per_microsecond\030\004 \001(\003\032W\n\013Instruc"
  "tion\022\n\n\002id\030\001 \001(\003\022\036\n\026start_timestamp_cycl"
  "es\030\002 \001(\001\022\034\n\024end_timestamp_cycles\030\003 \001(\001b\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_xla_2fxla_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_xla_2fservice_2fhlo_2eproto,
  &::descriptor_table_xla_2fxla_5fdata_2eproto,
};
static ::_pbi::once_flag descriptor_table_xla_2fxla_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xla_2fxla_2eproto = {
    false, false, 13806, descriptor_table_protodef_xla_2fxla_2eproto,
    "xla/xla.proto",
    &descriptor_table_xla_2fxla_2eproto_once, descriptor_table_xla_2fxla_2eproto_deps, 3, 15,
    schemas, file_default_instances, TableStruct_xla_2fxla_2eproto::offsets,
    file_level_metadata_xla_2fxla_2eproto, file_level_enum_descriptors_xla_2fxla_2eproto,
    file_level_service_descriptors_xla_2fxla_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xla_2fxla_2eproto_getter() {
  return &descriptor_table_xla_2fxla_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xla_2fxla_2eproto(&descriptor_table_xla_2fxla_2eproto);
namespace xla {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_ShapeChecks_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[0];
}
bool DebugOptions_ShapeChecks_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugOptions_ShapeChecks DebugOptions::IGNORE;
constexpr DebugOptions_ShapeChecks DebugOptions::RUNTIME;
constexpr DebugOptions_ShapeChecks DebugOptions::COMPILE_TIME;
constexpr DebugOptions_ShapeChecks DebugOptions::ShapeChecks_MIN;
constexpr DebugOptions_ShapeChecks DebugOptions::ShapeChecks_MAX;
constexpr int DebugOptions::ShapeChecks_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_StepMarkerLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[1];
}
bool DebugOptions_StepMarkerLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugOptions_StepMarkerLocation DebugOptions::STEP_MARK_AT_ENTRY;
constexpr DebugOptions_StepMarkerLocation DebugOptions::STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP;
constexpr DebugOptions_StepMarkerLocation DebugOptions::STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP;
constexpr DebugOptions_StepMarkerLocation DebugOptions::STEP_MARK_NONE;
constexpr DebugOptions_StepMarkerLocation DebugOptions::StepMarkerLocation_MIN;
constexpr DebugOptions_StepMarkerLocation DebugOptions::StepMarkerLocation_MAX;
constexpr int DebugOptions::StepMarkerLocation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_CollectiveOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[2];
}
bool DebugOptions_CollectiveOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugOptions_CollectiveOpType DebugOptions::NOOP;
constexpr DebugOptions_CollectiveOpType DebugOptions::ALLREDUCE;
constexpr DebugOptions_CollectiveOpType DebugOptions::ALLGATHER;
constexpr DebugOptions_CollectiveOpType DebugOptions::REDUCESCATTER;
constexpr DebugOptions_CollectiveOpType DebugOptions::COLLECTIVEBROADCAST;
constexpr DebugOptions_CollectiveOpType DebugOptions::ALLTOALL;
constexpr DebugOptions_CollectiveOpType DebugOptions::COLLECTIVEPERMUTE;
constexpr DebugOptions_CollectiveOpType DebugOptions::CollectiveOpType_MIN;
constexpr DebugOptions_CollectiveOpType DebugOptions::CollectiveOpType_MAX;
constexpr int DebugOptions::CollectiveOpType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_CommandBufferCmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[3];
}
bool DebugOptions_CommandBufferCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugOptions_CommandBufferCmdType DebugOptions::INVALID;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::FUSION;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CUBLAS;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CUDNN;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::COLLECTIVES;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CONDITIONALS;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CUSTOM_CALL;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CUBLASLT;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CommandBufferCmdType_MIN;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CommandBufferCmdType_MAX;
constexpr int DebugOptions::CommandBufferCmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_PartitioningAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[4];
}
bool DebugOptions_PartitioningAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PARTITIONING_ALGORITHM_NOOP;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PARTITIONING_ALGORITHM_EXP0;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PARTITIONING_ALGORITHM_EXP1;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PARTITIONING_ALGORITHM_EXP2;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PartitioningAlgorithm_MIN;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PartitioningAlgorithm_MAX;
constexpr int DebugOptions::PartitioningAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_WhileLoopUnrolling_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[5];
}
bool DebugOptions_WhileLoopUnrolling_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WHILE_LOOP_UNROLLING_NO_UNROLL;
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WHILE_LOOP_UNROLLING_DOUBLE_BUFFER;
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WHILE_LOOP_UNROLLING_FULL_UNROLL;
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WhileLoopUnrolling_MIN;
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WhileLoopUnrolling_MAX;
constexpr int DebugOptions::WhileLoopUnrolling_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_AutotuneCacheMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[6];
}
bool DebugOptions_AutotuneCacheMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AUTOTUNE_CACHE_MODE_UNSPECIFIED;
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AUTOTUNE_CACHE_MODE_UPDATE;
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AUTOTUNE_CACHE_MODE_READ;
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AutotuneCacheMode_MIN;
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AutotuneCacheMode_MAX;
constexpr int DebugOptions::AutotuneCacheMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HloModuleConfigProto_FusionConfigCollection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[7];
}
bool HloModuleConfigProto_FusionConfigCollection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::OFF;
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::PER_EDGE;
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::PER_NODE;
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::FusionConfigCollection_MIN;
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::FusionConfigCollection_MAX;
constexpr int HloModuleConfigProto::FusionConfigCollection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CompilationEnvironmentsProto::_Internal {
 public:
};

void CompilationEnvironmentsProto::clear_environments() {
  _impl_.environments_.Clear();
}
CompilationEnvironmentsProto::CompilationEnvironmentsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.CompilationEnvironmentsProto)
}
CompilationEnvironmentsProto::CompilationEnvironmentsProto(const CompilationEnvironmentsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompilationEnvironmentsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.environments_){from._impl_.environments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.CompilationEnvironmentsProto)
}

inline void CompilationEnvironmentsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.environments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompilationEnvironmentsProto::~CompilationEnvironmentsProto() {
  // @@protoc_insertion_point(destructor:xla.CompilationEnvironmentsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompilationEnvironmentsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.environments_.~RepeatedPtrField();
}

void CompilationEnvironmentsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompilationEnvironmentsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CompilationEnvironmentsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.environments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompilationEnvironmentsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any environments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_environments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompilationEnvironmentsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.CompilationEnvironmentsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any environments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_environments_size()); i < n; i++) {
    const auto& repfield = this->_internal_environments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.CompilationEnvironmentsProto)
  return target;
}

size_t CompilationEnvironmentsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CompilationEnvironmentsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any environments = 1;
  total_size += 1UL * this->_internal_environments_size();
  for (const auto& msg : this->_impl_.environments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompilationEnvironmentsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompilationEnvironmentsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompilationEnvironmentsProto::GetClassData() const { return &_class_data_; }


void CompilationEnvironmentsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompilationEnvironmentsProto*>(&to_msg);
  auto& from = static_cast<const CompilationEnvironmentsProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.CompilationEnvironmentsProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.environments_.MergeFrom(from._impl_.environments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompilationEnvironmentsProto::CopyFrom(const CompilationEnvironmentsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CompilationEnvironmentsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompilationEnvironmentsProto::IsInitialized() const {
  return true;
}

void CompilationEnvironmentsProto::InternalSwap(CompilationEnvironmentsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.environments_.InternalSwap(&other->_impl_.environments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompilationEnvironmentsProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[0]);
}

// ===================================================================

DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse() {}
DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::MergeFrom(const DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[1]);
}

// ===================================================================

class DebugOptions::_Internal {
 public:
};

DebugOptions::DebugOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DebugOptions::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:xla.DebugOptions)
}
DebugOptions::DebugOptions(const DebugOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xla_disable_hlo_passes_){from._impl_.xla_disable_hlo_passes_}
    , decltype(_impl_.xla_enable_hlo_passes_only_){from._impl_.xla_enable_hlo_passes_only_}
    , decltype(_impl_.xla_gpu_ptx_file_){from._impl_.xla_gpu_ptx_file_}
    , decltype(_impl_.xla_gpu_llvm_ir_file_){from._impl_.xla_gpu_llvm_ir_file_}
    , decltype(_impl_.xla_gpu_enable_command_buffer_){from._impl_.xla_gpu_enable_command_buffer_}
    , /*decltype(_impl_._xla_gpu_enable_command_buffer_cached_byte_size_)*/{0}
    , decltype(_impl_.xla_gpu_disable_async_collectives_){from._impl_.xla_gpu_disable_async_collectives_}
    , /*decltype(_impl_._xla_gpu_disable_async_collectives_cached_byte_size_)*/{0}
    , decltype(_impl_.legacy_command_buffer_custom_call_targets_){from._impl_.legacy_command_buffer_custom_call_targets_}
    , /*decltype(_impl_.xla_backend_extra_options_)*/{}
    , decltype(_impl_.xla_gpu_cuda_data_dir_){}
    , decltype(_impl_.xla_dump_to_){}
    , decltype(_impl_.xla_dump_hlo_module_re_){}
    , decltype(_impl_.xla_dump_hlo_pass_re_){}
    , decltype(_impl_.xla_gpu_algorithm_denylist_path_){}
    , decltype(_impl_.xla_gpu_asm_extra_flags_){}
    , decltype(_impl_.xla_dump_hlo_pipeline_re_){}
    , decltype(_impl_.xla_gpu_pgle_profile_file_or_directory_path_){}
    , decltype(_impl_.xla_gpu_dump_autotune_results_to_){}
    , decltype(_impl_.xla_gpu_load_autotune_results_from_){}
    , decltype(_impl_.xla_gpu_target_config_filename_){}
    , decltype(_impl_.xla_gpu_enable_custom_fusions_re_){}
    , decltype(_impl_.xla_gpu_dump_autotune_logs_to_){}
    , decltype(_impl_.xla_gpu_override_gemm_autotuner_){}
    , decltype(_impl_.xla_gpu_kernel_cache_file_){}
    , decltype(_impl_.xla_gpu_per_fusion_autotune_cache_dir_){}
    , decltype(_impl_.xla_backend_optimization_level_){}
    , decltype(_impl_.xla_hlo_profile_){}
    , decltype(_impl_.xla_disable_all_hlo_passes_){}
    , decltype(_impl_.xla_embed_ir_in_executable_){}
    , decltype(_impl_.xla_eliminate_hlo_implicit_broadcast_){}
    , decltype(_impl_.xla_cpu_multi_thread_eigen_){}
    , decltype(_impl_.xla_gpu_ftz_){}
    , decltype(_impl_.xla_llvm_enable_alias_scope_metadata_){}
    , decltype(_impl_.xla_llvm_enable_noalias_metadata_){}
    , decltype(_impl_.xla_llvm_enable_invariant_load_metadata_){}
    , decltype(_impl_.xla_llvm_disable_expensive_passes_){}
    , decltype(_impl_.xla_test_all_output_layouts_){}
    , decltype(_impl_.xla_test_all_input_layouts_){}
    , decltype(_impl_.xla_force_host_platform_device_count_){}
    , decltype(_impl_.xla_hlo_graph_sharding_color_){}
    , decltype(_impl_.xla_cpu_use_mkl_dnn_){}
    , decltype(_impl_.xla_gpu_enable_fast_min_max_){}
    , decltype(_impl_.xla_allow_excess_precision_){}
    , decltype(_impl_.xla_gpu_crash_on_verification_failures_){}
    , decltype(_impl_.xla_gpu_disable_gpuasm_optimizations_){}
    , decltype(_impl_.xla_hlo_evaluator_use_fast_path_){}
    , decltype(_impl_.xla_allow_scalar_index_dynamic_ops_){}
    , decltype(_impl_.xla_step_marker_location_){}
    , decltype(_impl_.xla_dump_hlo_as_text_){}
    , decltype(_impl_.xla_dump_hlo_as_proto_){}
    , decltype(_impl_.xla_dump_hlo_as_dot_){}
    , decltype(_impl_.xla_dump_hlo_as_url_){}
    , decltype(_impl_.xla_gpu_autotune_level_){}
    , decltype(_impl_.xla_dump_hlo_as_html_){}
    , decltype(_impl_.xla_dump_fusion_visualization_){}
    , decltype(_impl_.xla_dump_hlo_snapshots_){}
    , decltype(_impl_.xla_dump_include_timestamp_){}
    , decltype(_impl_.xla_dump_max_hlo_modules_){}
    , decltype(_impl_.xla_multiheap_size_constraint_per_heap_){}
    , decltype(_impl_.xla_dump_module_metadata_){}
    , decltype(_impl_.xla_dump_compress_protos_){}
    , decltype(_impl_.xla_dump_hlo_as_long_text_){}
    , decltype(_impl_.xla_gpu_force_conv_nchw_){}
    , decltype(_impl_.xla_gpu_force_compilation_parallelism_){}
    , decltype(_impl_.xla_gpu_force_conv_nhwc_){}
    , decltype(_impl_.xla_gpu_dump_llvmir_){}
    , decltype(_impl_.xla_dump_enable_mlir_pretty_form_){}
    , decltype(_impl_.xla_tpu_detect_nan_){}
    , decltype(_impl_.xla_gpu_all_reduce_combine_threshold_bytes_){}
    , decltype(_impl_.xla_gpu_nccl_termination_timeout_seconds_){}
    , decltype(_impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_){}
    , decltype(_impl_.xla_tpu_detect_inf_){}
    , decltype(_impl_.xla_cpu_enable_xprof_traceme_){}
    , decltype(_impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_){}
    , decltype(_impl_.xla_detailed_logging_){}
    , decltype(_impl_.xla_gpu_redzone_scratch_max_megabytes_){}
    , decltype(_impl_.xla_cpu_fast_math_honor_functions_){}
    , decltype(_impl_.xla_cpu_fast_math_honor_infs_){}
    , decltype(_impl_.xla_cpu_fast_math_honor_nans_){}
    , decltype(_impl_.xla_cpu_use_thunk_runtime_){}
    , decltype(_impl_.xla_cpu_enable_concurrency_optimized_scheduler_){}
    , decltype(_impl_.xla_cpu_enable_fast_math_){}
    , decltype(_impl_.xla_cpu_enable_fast_min_max_){}
    , decltype(_impl_.xla_cpu_fast_math_honor_division_){}
    , decltype(_impl_.xla_dump_disable_metadata_){}
    , decltype(_impl_.xla_gpu_strict_conv_algorithm_picker_){}
    , decltype(_impl_.xla_gpu_enable_custom_fusions_){}
    , decltype(_impl_.xla_gpu_enable_dynamic_slice_fusion_){}
    , decltype(_impl_.xla_gpu_shape_checks_){}
    , decltype(_impl_.xla_gpu_enable_shared_constants_){}
    , decltype(_impl_.xla_gpu_enable_cublaslt_){}
    , decltype(_impl_.xla_gpu_graph_enable_concurrent_region_){}
    , decltype(_impl_.xla_cpu_use_acl_){}
    , decltype(_impl_.xla_cpu_strict_dot_conv_math_){}
    , decltype(_impl_.xla_gpu_use_runtime_fusion_){}
    , decltype(_impl_.xla_dump_latency_hiding_schedule_){}
    , decltype(_impl_.xla_cpu_enable_mlir_tiling_and_fusion_){}
    , decltype(_impl_.xla_partitioning_algorithm_){}
    , decltype(_impl_.xla_cpu_enable_custom_matmul_tiling_){}
    , decltype(_impl_.xla_cpu_enable_mlir_fusion_outlining_){}
    , decltype(_impl_.xla_cpu_enable_experimental_deallocation_){}
    , decltype(_impl_.xla_gpu_enable_latency_hiding_scheduler_){}
    , decltype(_impl_.xla_cpu_matmul_tiling_m_dim_){}
    , decltype(_impl_.xla_cpu_matmul_tiling_n_dim_){}
    , decltype(_impl_.xla_cpu_matmul_tiling_k_dim_){}
    , decltype(_impl_.xla_gpu_collective_inflation_factor_){}
    , decltype(_impl_.xla_gpu_graph_min_graph_size_){}
    , decltype(_impl_.xla_gpu_all_gather_combine_threshold_bytes_){}
    , decltype(_impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_){}
    , decltype(_impl_.xla_gpu_enable_cudnn_frontend_){}
    , decltype(_impl_.xla_gpu_enable_cudnn_fmha_){}
    , decltype(_impl_.xla_gpu_fused_attention_use_cudnn_rng_){}
    , decltype(_impl_.xla_gpu_enable_cudnn_layer_norm_){}
    , decltype(_impl_.xla_gpu_run_post_layout_collective_pipeliner_){}
    , decltype(_impl_.xla_gpu_enable_triton_gemm_){}
    , decltype(_impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_){}
    , decltype(_impl_.xla_gpu_triton_gemm_any_){}
    , decltype(_impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_){}
    , decltype(_impl_.xla_gpu_exhaustive_tiling_search_){}
    , decltype(_impl_.xla_gpu_enable_priority_fusion_){}
    , decltype(_impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_){}
    , decltype(_impl_.xla_gpu_dump_autotuned_gemm_fusions_){}
    , decltype(_impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_){}
    , decltype(_impl_.xla_gpu_enable_highest_priority_async_stream_){}
    , decltype(_impl_.xla_gpu_enable_analytical_latency_estimator_){}
    , decltype(_impl_.xla_gpu_lhs_enable_gpu_async_tracker_){}
    , decltype(_impl_.xla_gpu_enable_pipelined_collectives_){}
    , decltype(_impl_.xla_gpu_redzone_padding_bytes_){}
    , decltype(_impl_.xla_gpu_triton_fusion_level_){}
    , decltype(_impl_.xla_gpu_enable_pipelined_all_reduce_){}
    , decltype(_impl_.xla_gpu_enable_pipelined_all_gather_){}
    , decltype(_impl_.xla_gpu_enable_pipelined_reduce_scatter_){}
    , decltype(_impl_.xla_gpu_enable_pipelined_p2p_){}
    , decltype(_impl_.xla_enable_dumping_){}
    , decltype(_impl_.xla_gpu_enable_llvm_module_compilation_parallelism_){}
    , decltype(_impl_.xla_gpu_deterministic_ops_){}
    , decltype(_impl_.xla_gpu_enable_all_gather_combine_by_dim_){}
    , decltype(_impl_.xla_gpu_copy_insertion_use_region_analysis_){}
    , decltype(_impl_.xla_gpu_collect_cost_model_stats_){}
    , decltype(_impl_.xla_gpu_enable_split_k_autotuning_){}
    , decltype(_impl_.xla_gpu_enable_reduction_epilogue_fusion_){}
    , decltype(_impl_.xla_gpu_collective_permute_decomposer_threshold_){}
    , decltype(_impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_){}
    , decltype(_impl_.xla_gpu_enable_reassociation_for_converted_ar_){}
    , decltype(_impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_){}
    , decltype(_impl_.xla_llvm_force_inline_before_split_){}
    , decltype(_impl_.xla_gpu_experimental_disable_binary_libraries_){}
    , decltype(_impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_){}
    , decltype(_impl_.xla_gpu_unsupported_enable_triton_gemm_){}
    , decltype(_impl_.xla_hlo_graph_addresses_){}
    , decltype(_impl_.xla_gpu_enable_nccl_clique_optimization_){}
    , decltype(_impl_.xla_gpu_mock_custom_calls_){}
    , decltype(_impl_.xla_gpu_cublas_fallback_){}
    , decltype(_impl_.xla_gpu_enable_while_loop_double_buffering_){}
    , decltype(_impl_.xla_gpu_llvm_verification_level_){}
    , decltype(_impl_.xla_debug_buffer_assignment_show_max_){}
    , decltype(_impl_.xla_gpu_ensure_minor_dot_contraction_dims_){}
    , decltype(_impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_){}
    , decltype(_impl_.xla_gpu_enable_cub_radix_sort_){}
    , decltype(_impl_.xla_gpu_enable_triton_hopper_){}
    , decltype(_impl_.xla_gpu_memory_limit_slop_factor_){}
    , decltype(_impl_.xla_gpu_threshold_for_windowed_einsum_mib_){}
    , decltype(_impl_.xla_gpu_nccl_collective_max_nchannels_){}
    , decltype(_impl_.xla_gpu_enable_nccl_user_buffers_){}
    , decltype(_impl_.xla_gpu_enable_nccl_comm_splitting_){}
    , decltype(_impl_.xla_gpu_enable_nccl_per_stream_comms_){}
    , decltype(_impl_.xla_gpu_enable_libnvptxcompiler_){}
    , decltype(_impl_.xla_gpu_enable_dot_strength_reduction_){}
    , decltype(_impl_.xla_gpu_multi_streamed_windowed_einsum_){}
    , decltype(_impl_.xla_gpu_enable_bf16_6way_gemm_){}
    , decltype(_impl_.xla_gpu_enable_bf16_3way_gemm_){}
    , decltype(_impl_.xla_gpu_nccl_p2p_max_nchannels_){}
    , decltype(_impl_.xla_gpu_gemm_rewrite_size_threshold_){}
    , decltype(_impl_.xla_gpu_cudnn_gemm_fusion_level_){}
    , decltype(_impl_.xla_gpu_require_complete_aot_autotune_results_){}
    , decltype(_impl_.xla_gpu_use_memcpy_local_p2p_){}
    , decltype(_impl_.xla_dump_large_constants_){}
    , decltype(_impl_.xla_gpu_verify_triton_fusion_numerics_){}
    , decltype(_impl_.xla_gpu_autotune_max_solutions_){}
    , decltype(_impl_.xla_reduce_window_rewrite_base_length_){}
    , decltype(_impl_.xla_gpu_enable_while_loop_unrolling_){}
    , decltype(_impl_.xla_gpu_enable_host_memory_offloading_){}
    , decltype(_impl_.xla_gpu_exclude_nondeterministic_ops_){}
    , decltype(_impl_.xla_gpu_nccl_terminate_on_error_){}
    , decltype(_impl_.xla_gpu_shard_autotuning_){}
    , decltype(_impl_.xla_gpu_mlir_emitter_level_){}
    , decltype(_impl_.xla_cpu_prefer_vector_width_){}
    , decltype(_impl_.xla_gpu_enable_approx_costly_collectives_){}
    , decltype(_impl_.xla_gpu_unsafe_pipelined_loop_annotator_){}
    , decltype(_impl_.xla_gpu_temp_buffer_use_separate_color_){}
    , decltype(_impl_.xla_syntax_sugar_async_ops_){}
    , decltype(_impl_.xla_cmd_buffer_trace_cache_size_){}
    , decltype(_impl_.xla_gpu_autotune_gemm_rtol_){}
    , decltype(_impl_.xla_gpu_cudnn_gemm_max_plans_){}
    , decltype(_impl_.xla_enable_command_buffers_during_profiling_){}
    , decltype(_impl_.xla_gpu_enable_libnvjitlink_){}
    , decltype(_impl_.xla_gpu_enable_triton_gemm_int4_){}
    , decltype(_impl_.xla_gpu_async_dot_){}
    , decltype(_impl_.xla_cpu_parallel_codegen_split_count_){}
    , decltype(_impl_.xla_gpu_experimental_autotune_cache_mode_){}
    , decltype(_impl_.xla_gpu_executable_warn_stuck_timeout_seconds_){}
    , decltype(_impl_.xla_gpu_executable_terminate_timeout_seconds_){}
    , decltype(_impl_.xla_gpu_enable_pgle_accuracy_checker_){}
    , decltype(_impl_.xla_experimental_ignore_channel_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xla_backend_extra_options_.MergeFrom(from._impl_.xla_backend_extra_options_);
  _impl_.xla_gpu_cuda_data_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_cuda_data_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_cuda_data_dir().empty()) {
    _this->_impl_.xla_gpu_cuda_data_dir_.Set(from._internal_xla_gpu_cuda_data_dir(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_dump_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_dump_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_dump_to().empty()) {
    _this->_impl_.xla_dump_to_.Set(from._internal_xla_dump_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_dump_hlo_module_re_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_dump_hlo_module_re_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_dump_hlo_module_re().empty()) {
    _this->_impl_.xla_dump_hlo_module_re_.Set(from._internal_xla_dump_hlo_module_re(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_dump_hlo_pass_re_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_dump_hlo_pass_re_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_dump_hlo_pass_re().empty()) {
    _this->_impl_.xla_dump_hlo_pass_re_.Set(from._internal_xla_dump_hlo_pass_re(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_algorithm_denylist_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_algorithm_denylist_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_algorithm_denylist_path().empty()) {
    _this->_impl_.xla_gpu_algorithm_denylist_path_.Set(from._internal_xla_gpu_algorithm_denylist_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_asm_extra_flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_asm_extra_flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_asm_extra_flags().empty()) {
    _this->_impl_.xla_gpu_asm_extra_flags_.Set(from._internal_xla_gpu_asm_extra_flags(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_dump_hlo_pipeline_re_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_dump_hlo_pipeline_re_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_dump_hlo_pipeline_re().empty()) {
    _this->_impl_.xla_dump_hlo_pipeline_re_.Set(from._internal_xla_dump_hlo_pipeline_re(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_pgle_profile_file_or_directory_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_pgle_profile_file_or_directory_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_pgle_profile_file_or_directory_path().empty()) {
    _this->_impl_.xla_gpu_pgle_profile_file_or_directory_path_.Set(from._internal_xla_gpu_pgle_profile_file_or_directory_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_dump_autotune_results_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_dump_autotune_results_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_dump_autotune_results_to().empty()) {
    _this->_impl_.xla_gpu_dump_autotune_results_to_.Set(from._internal_xla_gpu_dump_autotune_results_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_load_autotune_results_from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_load_autotune_results_from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_load_autotune_results_from().empty()) {
    _this->_impl_.xla_gpu_load_autotune_results_from_.Set(from._internal_xla_gpu_load_autotune_results_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_target_config_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_target_config_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_target_config_filename().empty()) {
    _this->_impl_.xla_gpu_target_config_filename_.Set(from._internal_xla_gpu_target_config_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_enable_custom_fusions_re_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_enable_custom_fusions_re_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_enable_custom_fusions_re().empty()) {
    _this->_impl_.xla_gpu_enable_custom_fusions_re_.Set(from._internal_xla_gpu_enable_custom_fusions_re(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_dump_autotune_logs_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_dump_autotune_logs_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_dump_autotune_logs_to().empty()) {
    _this->_impl_.xla_gpu_dump_autotune_logs_to_.Set(from._internal_xla_gpu_dump_autotune_logs_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_override_gemm_autotuner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_override_gemm_autotuner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_override_gemm_autotuner().empty()) {
    _this->_impl_.xla_gpu_override_gemm_autotuner_.Set(from._internal_xla_gpu_override_gemm_autotuner(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_kernel_cache_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_kernel_cache_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_kernel_cache_file().empty()) {
    _this->_impl_.xla_gpu_kernel_cache_file_.Set(from._internal_xla_gpu_kernel_cache_file(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xla_gpu_per_fusion_autotune_cache_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_per_fusion_autotune_cache_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xla_gpu_per_fusion_autotune_cache_dir().empty()) {
    _this->_impl_.xla_gpu_per_fusion_autotune_cache_dir_.Set(from._internal_xla_gpu_per_fusion_autotune_cache_dir(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.xla_backend_optimization_level_, &from._impl_.xla_backend_optimization_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xla_experimental_ignore_channel_id_) -
    reinterpret_cast<char*>(&_impl_.xla_backend_optimization_level_)) + sizeof(_impl_.xla_experimental_ignore_channel_id_));
  // @@protoc_insertion_point(copy_constructor:xla.DebugOptions)
}

inline void DebugOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xla_disable_hlo_passes_){arena}
    , decltype(_impl_.xla_enable_hlo_passes_only_){arena}
    , decltype(_impl_.xla_gpu_ptx_file_){arena}
    , decltype(_impl_.xla_gpu_llvm_ir_file_){arena}
    , decltype(_impl_.xla_gpu_enable_command_buffer_){arena}
    , /*decltype(_impl_._xla_gpu_enable_command_buffer_cached_byte_size_)*/{0}
    , decltype(_impl_.xla_gpu_disable_async_collectives_){arena}
    , /*decltype(_impl_._xla_gpu_disable_async_collectives_cached_byte_size_)*/{0}
    , decltype(_impl_.legacy_command_buffer_custom_call_targets_){arena}
    , /*decltype(_impl_.xla_backend_extra_options_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.xla_gpu_cuda_data_dir_){}
    , decltype(_impl_.xla_dump_to_){}
    , decltype(_impl_.xla_dump_hlo_module_re_){}
    , decltype(_impl_.xla_dump_hlo_pass_re_){}
    , decltype(_impl_.xla_gpu_algorithm_denylist_path_){}
    , decltype(_impl_.xla_gpu_asm_extra_flags_){}
    , decltype(_impl_.xla_dump_hlo_pipeline_re_){}
    , decltype(_impl_.xla_gpu_pgle_profile_file_or_directory_path_){}
    , decltype(_impl_.xla_gpu_dump_autotune_results_to_){}
    , decltype(_impl_.xla_gpu_load_autotune_results_from_){}
    , decltype(_impl_.xla_gpu_target_config_filename_){}
    , decltype(_impl_.xla_gpu_enable_custom_fusions_re_){}
    , decltype(_impl_.xla_gpu_dump_autotune_logs_to_){}
    , decltype(_impl_.xla_gpu_override_gemm_autotuner_){}
    , decltype(_impl_.xla_gpu_kernel_cache_file_){}
    , decltype(_impl_.xla_gpu_per_fusion_autotune_cache_dir_){}
    , decltype(_impl_.xla_backend_optimization_level_){0}
    , decltype(_impl_.xla_hlo_profile_){false}
    , decltype(_impl_.xla_disable_all_hlo_passes_){false}
    , decltype(_impl_.xla_embed_ir_in_executable_){false}
    , decltype(_impl_.xla_eliminate_hlo_implicit_broadcast_){false}
    , decltype(_impl_.xla_cpu_multi_thread_eigen_){false}
    , decltype(_impl_.xla_gpu_ftz_){false}
    , decltype(_impl_.xla_llvm_enable_alias_scope_metadata_){false}
    , decltype(_impl_.xla_llvm_enable_noalias_metadata_){false}
    , decltype(_impl_.xla_llvm_enable_invariant_load_metadata_){false}
    , decltype(_impl_.xla_llvm_disable_expensive_passes_){false}
    , decltype(_impl_.xla_test_all_output_layouts_){false}
    , decltype(_impl_.xla_test_all_input_layouts_){false}
    , decltype(_impl_.xla_force_host_platform_device_count_){0}
    , decltype(_impl_.xla_hlo_graph_sharding_color_){false}
    , decltype(_impl_.xla_cpu_use_mkl_dnn_){false}
    , decltype(_impl_.xla_gpu_enable_fast_min_max_){false}
    , decltype(_impl_.xla_allow_excess_precision_){false}
    , decltype(_impl_.xla_gpu_crash_on_verification_failures_){false}
    , decltype(_impl_.xla_gpu_disable_gpuasm_optimizations_){false}
    , decltype(_impl_.xla_hlo_evaluator_use_fast_path_){false}
    , decltype(_impl_.xla_allow_scalar_index_dynamic_ops_){false}
    , decltype(_impl_.xla_step_marker_location_){0}
    , decltype(_impl_.xla_dump_hlo_as_text_){false}
    , decltype(_impl_.xla_dump_hlo_as_proto_){false}
    , decltype(_impl_.xla_dump_hlo_as_dot_){false}
    , decltype(_impl_.xla_dump_hlo_as_url_){false}
    , decltype(_impl_.xla_gpu_autotune_level_){0}
    , decltype(_impl_.xla_dump_hlo_as_html_){false}
    , decltype(_impl_.xla_dump_fusion_visualization_){false}
    , decltype(_impl_.xla_dump_hlo_snapshots_){false}
    , decltype(_impl_.xla_dump_include_timestamp_){false}
    , decltype(_impl_.xla_dump_max_hlo_modules_){0}
    , decltype(_impl_.xla_multiheap_size_constraint_per_heap_){0}
    , decltype(_impl_.xla_dump_module_metadata_){false}
    , decltype(_impl_.xla_dump_compress_protos_){false}
    , decltype(_impl_.xla_dump_hlo_as_long_text_){false}
    , decltype(_impl_.xla_gpu_force_conv_nchw_){false}
    , decltype(_impl_.xla_gpu_force_compilation_parallelism_){0}
    , decltype(_impl_.xla_gpu_force_conv_nhwc_){false}
    , decltype(_impl_.xla_gpu_dump_llvmir_){false}
    , decltype(_impl_.xla_dump_enable_mlir_pretty_form_){false}
    , decltype(_impl_.xla_tpu_detect_nan_){false}
    , decltype(_impl_.xla_gpu_all_reduce_combine_threshold_bytes_){int64_t{0}}
    , decltype(_impl_.xla_gpu_nccl_termination_timeout_seconds_){int64_t{0}}
    , decltype(_impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_){0}
    , decltype(_impl_.xla_tpu_detect_inf_){false}
    , decltype(_impl_.xla_cpu_enable_xprof_traceme_){false}
    , decltype(_impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_){false}
    , decltype(_impl_.xla_detailed_logging_){false}
    , decltype(_impl_.xla_gpu_redzone_scratch_max_megabytes_){int64_t{0}}
    , decltype(_impl_.xla_cpu_fast_math_honor_functions_){false}
    , decltype(_impl_.xla_cpu_fast_math_honor_infs_){false}
    , decltype(_impl_.xla_cpu_fast_math_honor_nans_){false}
    , decltype(_impl_.xla_cpu_use_thunk_runtime_){false}
    , decltype(_impl_.xla_cpu_enable_concurrency_optimized_scheduler_){false}
    , decltype(_impl_.xla_cpu_enable_fast_math_){false}
    , decltype(_impl_.xla_cpu_enable_fast_min_max_){false}
    , decltype(_impl_.xla_cpu_fast_math_honor_division_){false}
    , decltype(_impl_.xla_dump_disable_metadata_){false}
    , decltype(_impl_.xla_gpu_strict_conv_algorithm_picker_){false}
    , decltype(_impl_.xla_gpu_enable_custom_fusions_){false}
    , decltype(_impl_.xla_gpu_enable_dynamic_slice_fusion_){false}
    , decltype(_impl_.xla_gpu_shape_checks_){0}
    , decltype(_impl_.xla_gpu_enable_shared_constants_){false}
    , decltype(_impl_.xla_gpu_enable_cublaslt_){false}
    , decltype(_impl_.xla_gpu_graph_enable_concurrent_region_){false}
    , decltype(_impl_.xla_cpu_use_acl_){false}
    , decltype(_impl_.xla_cpu_strict_dot_conv_math_){false}
    , decltype(_impl_.xla_gpu_use_runtime_fusion_){false}
    , decltype(_impl_.xla_dump_latency_hiding_schedule_){false}
    , decltype(_impl_.xla_cpu_enable_mlir_tiling_and_fusion_){false}
    , decltype(_impl_.xla_partitioning_algorithm_){0}
    , decltype(_impl_.xla_cpu_enable_custom_matmul_tiling_){false}
    , decltype(_impl_.xla_cpu_enable_mlir_fusion_outlining_){false}
    , decltype(_impl_.xla_cpu_enable_experimental_deallocation_){false}
    , decltype(_impl_.xla_gpu_enable_latency_hiding_scheduler_){false}
    , decltype(_impl_.xla_cpu_matmul_tiling_m_dim_){int64_t{0}}
    , decltype(_impl_.xla_cpu_matmul_tiling_n_dim_){int64_t{0}}
    , decltype(_impl_.xla_cpu_matmul_tiling_k_dim_){int64_t{0}}
    , decltype(_impl_.xla_gpu_collective_inflation_factor_){0}
    , decltype(_impl_.xla_gpu_graph_min_graph_size_){0}
    , decltype(_impl_.xla_gpu_all_gather_combine_threshold_bytes_){int64_t{0}}
    , decltype(_impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_){int64_t{0}}
    , decltype(_impl_.xla_gpu_enable_cudnn_frontend_){false}
    , decltype(_impl_.xla_gpu_enable_cudnn_fmha_){false}
    , decltype(_impl_.xla_gpu_fused_attention_use_cudnn_rng_){false}
    , decltype(_impl_.xla_gpu_enable_cudnn_layer_norm_){false}
    , decltype(_impl_.xla_gpu_run_post_layout_collective_pipeliner_){false}
    , decltype(_impl_.xla_gpu_enable_triton_gemm_){false}
    , decltype(_impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_){false}
    , decltype(_impl_.xla_gpu_triton_gemm_any_){false}
    , decltype(_impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_){0}
    , decltype(_impl_.xla_gpu_exhaustive_tiling_search_){false}
    , decltype(_impl_.xla_gpu_enable_priority_fusion_){false}
    , decltype(_impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_){false}
    , decltype(_impl_.xla_gpu_dump_autotuned_gemm_fusions_){false}
    , decltype(_impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_){0}
    , decltype(_impl_.xla_gpu_enable_highest_priority_async_stream_){false}
    , decltype(_impl_.xla_gpu_enable_analytical_latency_estimator_){false}
    , decltype(_impl_.xla_gpu_lhs_enable_gpu_async_tracker_){false}
    , decltype(_impl_.xla_gpu_enable_pipelined_collectives_){false}
    , decltype(_impl_.xla_gpu_redzone_padding_bytes_){int64_t{0}}
    , decltype(_impl_.xla_gpu_triton_fusion_level_){0}
    , decltype(_impl_.xla_gpu_enable_pipelined_all_reduce_){false}
    , decltype(_impl_.xla_gpu_enable_pipelined_all_gather_){false}
    , decltype(_impl_.xla_gpu_enable_pipelined_reduce_scatter_){false}
    , decltype(_impl_.xla_gpu_enable_pipelined_p2p_){false}
    , decltype(_impl_.xla_enable_dumping_){false}
    , decltype(_impl_.xla_gpu_enable_llvm_module_compilation_parallelism_){false}
    , decltype(_impl_.xla_gpu_deterministic_ops_){false}
    , decltype(_impl_.xla_gpu_enable_all_gather_combine_by_dim_){false}
    , decltype(_impl_.xla_gpu_copy_insertion_use_region_analysis_){false}
    , decltype(_impl_.xla_gpu_collect_cost_model_stats_){false}
    , decltype(_impl_.xla_gpu_enable_split_k_autotuning_){false}
    , decltype(_impl_.xla_gpu_enable_reduction_epilogue_fusion_){false}
    , decltype(_impl_.xla_gpu_collective_permute_decomposer_threshold_){int64_t{0}}
    , decltype(_impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_){false}
    , decltype(_impl_.xla_gpu_enable_reassociation_for_converted_ar_){false}
    , decltype(_impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_){false}
    , decltype(_impl_.xla_llvm_force_inline_before_split_){false}
    , decltype(_impl_.xla_gpu_experimental_disable_binary_libraries_){false}
    , decltype(_impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_){false}
    , decltype(_impl_.xla_gpu_unsupported_enable_triton_gemm_){false}
    , decltype(_impl_.xla_hlo_graph_addresses_){false}
    , decltype(_impl_.xla_gpu_enable_nccl_clique_optimization_){false}
    , decltype(_impl_.xla_gpu_mock_custom_calls_){false}
    , decltype(_impl_.xla_gpu_cublas_fallback_){false}
    , decltype(_impl_.xla_gpu_enable_while_loop_double_buffering_){false}
    , decltype(_impl_.xla_gpu_llvm_verification_level_){0}
    , decltype(_impl_.xla_debug_buffer_assignment_show_max_){int64_t{0}}
    , decltype(_impl_.xla_gpu_ensure_minor_dot_contraction_dims_){false}
    , decltype(_impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_){false}
    , decltype(_impl_.xla_gpu_enable_cub_radix_sort_){false}
    , decltype(_impl_.xla_gpu_enable_triton_hopper_){false}
    , decltype(_impl_.xla_gpu_memory_limit_slop_factor_){0}
    , decltype(_impl_.xla_gpu_threshold_for_windowed_einsum_mib_){int64_t{0}}
    , decltype(_impl_.xla_gpu_nccl_collective_max_nchannels_){int64_t{0}}
    , decltype(_impl_.xla_gpu_enable_nccl_user_buffers_){false}
    , decltype(_impl_.xla_gpu_enable_nccl_comm_splitting_){false}
    , decltype(_impl_.xla_gpu_enable_nccl_per_stream_comms_){false}
    , decltype(_impl_.xla_gpu_enable_libnvptxcompiler_){false}
    , decltype(_impl_.xla_gpu_enable_dot_strength_reduction_){false}
    , decltype(_impl_.xla_gpu_multi_streamed_windowed_einsum_){false}
    , decltype(_impl_.xla_gpu_enable_bf16_6way_gemm_){false}
    , decltype(_impl_.xla_gpu_enable_bf16_3way_gemm_){false}
    , decltype(_impl_.xla_gpu_nccl_p2p_max_nchannels_){int64_t{0}}
    , decltype(_impl_.xla_gpu_gemm_rewrite_size_threshold_){int64_t{0}}
    , decltype(_impl_.xla_gpu_cudnn_gemm_fusion_level_){0}
    , decltype(_impl_.xla_gpu_require_complete_aot_autotune_results_){false}
    , decltype(_impl_.xla_gpu_use_memcpy_local_p2p_){false}
    , decltype(_impl_.xla_dump_large_constants_){false}
    , decltype(_impl_.xla_gpu_verify_triton_fusion_numerics_){false}
    , decltype(_impl_.xla_gpu_autotune_max_solutions_){int64_t{0}}
    , decltype(_impl_.xla_reduce_window_rewrite_base_length_){int64_t{0}}
    , decltype(_impl_.xla_gpu_enable_while_loop_unrolling_){0}
    , decltype(_impl_.xla_gpu_enable_host_memory_offloading_){false}
    , decltype(_impl_.xla_gpu_exclude_nondeterministic_ops_){false}
    , decltype(_impl_.xla_gpu_nccl_terminate_on_error_){false}
    , decltype(_impl_.xla_gpu_shard_autotuning_){false}
    , decltype(_impl_.xla_gpu_mlir_emitter_level_){int64_t{0}}
    , decltype(_impl_.xla_cpu_prefer_vector_width_){0}
    , decltype(_impl_.xla_gpu_enable_approx_costly_collectives_){false}
    , decltype(_impl_.xla_gpu_unsafe_pipelined_loop_annotator_){false}
    , decltype(_impl_.xla_gpu_temp_buffer_use_separate_color_){false}
    , decltype(_impl_.xla_syntax_sugar_async_ops_){false}
    , decltype(_impl_.xla_cmd_buffer_trace_cache_size_){int64_t{0}}
    , decltype(_impl_.xla_gpu_autotune_gemm_rtol_){0}
    , decltype(_impl_.xla_gpu_cudnn_gemm_max_plans_){0}
    , decltype(_impl_.xla_enable_command_buffers_during_profiling_){false}
    , decltype(_impl_.xla_gpu_enable_libnvjitlink_){false}
    , decltype(_impl_.xla_gpu_enable_triton_gemm_int4_){false}
    , decltype(_impl_.xla_gpu_async_dot_){false}
    , decltype(_impl_.xla_cpu_parallel_codegen_split_count_){0}
    , decltype(_impl_.xla_gpu_experimental_autotune_cache_mode_){0}
    , decltype(_impl_.xla_gpu_executable_warn_stuck_timeout_seconds_){0}
    , decltype(_impl_.xla_gpu_executable_terminate_timeout_seconds_){0}
    , decltype(_impl_.xla_gpu_enable_pgle_accuracy_checker_){false}
    , decltype(_impl_.xla_experimental_ignore_channel_id_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.xla_gpu_cuda_data_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_cuda_data_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_dump_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_dump_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_dump_hlo_module_re_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_dump_hlo_module_re_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_dump_hlo_pass_re_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_dump_hlo_pass_re_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_algorithm_denylist_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_algorithm_denylist_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_asm_extra_flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_asm_extra_flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_dump_hlo_pipeline_re_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_dump_hlo_pipeline_re_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_pgle_profile_file_or_directory_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_pgle_profile_file_or_directory_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_dump_autotune_results_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_dump_autotune_results_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_load_autotune_results_from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_load_autotune_results_from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_target_config_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_target_config_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_enable_custom_fusions_re_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_enable_custom_fusions_re_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_dump_autotune_logs_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_dump_autotune_logs_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_override_gemm_autotuner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_override_gemm_autotuner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_kernel_cache_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_kernel_cache_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xla_gpu_per_fusion_autotune_cache_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xla_gpu_per_fusion_autotune_cache_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugOptions::~DebugOptions() {
  // @@protoc_insertion_point(destructor:xla.DebugOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DebugOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.xla_disable_hlo_passes_.~RepeatedPtrField();
  _impl_.xla_enable_hlo_passes_only_.~RepeatedPtrField();
  _impl_.xla_gpu_ptx_file_.~RepeatedPtrField();
  _impl_.xla_gpu_llvm_ir_file_.~RepeatedPtrField();
  _impl_.xla_gpu_enable_command_buffer_.~RepeatedField();
  _impl_.xla_gpu_disable_async_collectives_.~RepeatedField();
  _impl_.legacy_command_buffer_custom_call_targets_.~RepeatedPtrField();
  _impl_.xla_backend_extra_options_.Destruct();
  _impl_.xla_backend_extra_options_.~MapField();
  _impl_.xla_gpu_cuda_data_dir_.Destroy();
  _impl_.xla_dump_to_.Destroy();
  _impl_.xla_dump_hlo_module_re_.Destroy();
  _impl_.xla_dump_hlo_pass_re_.Destroy();
  _impl_.xla_gpu_algorithm_denylist_path_.Destroy();
  _impl_.xla_gpu_asm_extra_flags_.Destroy();
  _impl_.xla_dump_hlo_pipeline_re_.Destroy();
  _impl_.xla_gpu_pgle_profile_file_or_directory_path_.Destroy();
  _impl_.xla_gpu_dump_autotune_results_to_.Destroy();
  _impl_.xla_gpu_load_autotune_results_from_.Destroy();
  _impl_.xla_gpu_target_config_filename_.Destroy();
  _impl_.xla_gpu_enable_custom_fusions_re_.Destroy();
  _impl_.xla_gpu_dump_autotune_logs_to_.Destroy();
  _impl_.xla_gpu_override_gemm_autotuner_.Destroy();
  _impl_.xla_gpu_kernel_cache_file_.Destroy();
  _impl_.xla_gpu_per_fusion_autotune_cache_dir_.Destroy();
}

void DebugOptions::ArenaDtor(void* object) {
  DebugOptions* _this = reinterpret_cast< DebugOptions* >(object);
  _this->_impl_.xla_backend_extra_options_.Destruct();
}
void DebugOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DebugOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xla_disable_hlo_passes_.Clear();
  _impl_.xla_enable_hlo_passes_only_.Clear();
  _impl_.xla_gpu_ptx_file_.Clear();
  _impl_.xla_gpu_llvm_ir_file_.Clear();
  _impl_.xla_gpu_enable_command_buffer_.Clear();
  _impl_.xla_gpu_disable_async_collectives_.Clear();
  _impl_.legacy_command_buffer_custom_call_targets_.Clear();
  _impl_.xla_backend_extra_options_.Clear();
  _impl_.xla_gpu_cuda_data_dir_.ClearToEmpty();
  _impl_.xla_dump_to_.ClearToEmpty();
  _impl_.xla_dump_hlo_module_re_.ClearToEmpty();
  _impl_.xla_dump_hlo_pass_re_.ClearToEmpty();
  _impl_.xla_gpu_algorithm_denylist_path_.ClearToEmpty();
  _impl_.xla_gpu_asm_extra_flags_.ClearToEmpty();
  _impl_.xla_dump_hlo_pipeline_re_.ClearToEmpty();
  _impl_.xla_gpu_pgle_profile_file_or_directory_path_.ClearToEmpty();
  _impl_.xla_gpu_dump_autotune_results_to_.ClearToEmpty();
  _impl_.xla_gpu_load_autotune_results_from_.ClearToEmpty();
  _impl_.xla_gpu_target_config_filename_.ClearToEmpty();
  _impl_.xla_gpu_enable_custom_fusions_re_.ClearToEmpty();
  _impl_.xla_gpu_dump_autotune_logs_to_.ClearToEmpty();
  _impl_.xla_gpu_override_gemm_autotuner_.ClearToEmpty();
  _impl_.xla_gpu_kernel_cache_file_.ClearToEmpty();
  _impl_.xla_gpu_per_fusion_autotune_cache_dir_.ClearToEmpty();
  ::memset(&_impl_.xla_backend_optimization_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.xla_experimental_ignore_channel_id_) -
      reinterpret_cast<char*>(&_impl_.xla_backend_optimization_level_)) + sizeof(_impl_.xla_experimental_ignore_channel_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool xla_hlo_graph_addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xla_hlo_graph_addresses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_hlo_profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.xla_hlo_profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string xla_disable_hlo_passes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_xla_disable_hlo_passes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_disable_hlo_passes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 xla_backend_optimization_level = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.xla_backend_optimization_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_embed_ir_in_executable = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xla_embed_ir_in_executable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_eliminate_hlo_implicit_broadcast = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_eliminate_hlo_implicit_broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_multi_thread_eigen = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.xla_cpu_multi_thread_eigen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_cuda_data_dir = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_xla_gpu_cuda_data_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_cuda_data_dir"));
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_ftz = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.xla_gpu_ftz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_llvm_enable_alias_scope_metadata = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.xla_llvm_enable_alias_scope_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_llvm_enable_noalias_metadata = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.xla_llvm_enable_noalias_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_llvm_enable_invariant_load_metadata = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.xla_llvm_enable_invariant_load_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_llvm_disable_expensive_passes = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.xla_llvm_disable_expensive_passes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_test_all_output_layouts = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.xla_test_all_output_layouts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_test_all_input_layouts = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.xla_test_all_input_layouts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_hlo_graph_sharding_color = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.xla_hlo_graph_sharding_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_use_mkl_dnn = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xla_cpu_use_mkl_dnn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_enable_fast_math = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_cpu_enable_fast_math_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_fast_min_max = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.xla_gpu_enable_fast_min_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_crash_on_verification_failures = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.xla_gpu_crash_on_verification_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_force_host_platform_device_count = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.xla_force_host_platform_device_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_disable_gpuasm_optimizations = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.xla_gpu_disable_gpuasm_optimizations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_disable_all_hlo_passes = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.xla_disable_all_hlo_passes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_dynamic_slice_fusion = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.xla_gpu_enable_dynamic_slice_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_hlo_evaluator_use_fast_path = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.xla_hlo_evaluator_use_fast_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_allow_scalar_index_dynamic_ops = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.xla_allow_scalar_index_dynamic_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DebugOptions.StepMarkerLocation xla_step_marker_location = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_xla_step_marker_location(static_cast<::xla::DebugOptions_StepMarkerLocation>(val));
        } else
          goto handle_unusual;
        continue;
      // string xla_dump_to = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_xla_dump_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_dump_to"));
        } else
          goto handle_unusual;
        continue;
      // string xla_dump_hlo_module_re = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_xla_dump_hlo_module_re();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_dump_hlo_module_re"));
        } else
          goto handle_unusual;
        continue;
      // string xla_dump_hlo_pass_re = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_xla_dump_hlo_pass_re();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_dump_hlo_pass_re"));
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_hlo_as_text = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.xla_dump_hlo_as_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_hlo_as_proto = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.xla_dump_hlo_as_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_hlo_as_dot = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.xla_dump_hlo_as_dot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_hlo_as_url = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.xla_dump_hlo_as_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_hlo_as_html = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.xla_dump_hlo_as_html_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_hlo_snapshots = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.xla_dump_hlo_snapshots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_fast_math_honor_nans = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.xla_cpu_fast_math_honor_nans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_fast_math_honor_infs = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.xla_cpu_fast_math_honor_infs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_allow_excess_precision = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.xla_allow_excess_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_autotune_level = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.xla_gpu_autotune_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string xla_enable_hlo_passes_only = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_xla_enable_hlo_passes_only();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_enable_hlo_passes_only"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<994>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_force_conv_nchw = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.xla_gpu_force_conv_nchw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_fast_math_honor_division = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.xla_cpu_fast_math_honor_division_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string xla_gpu_ptx_file = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_xla_gpu_ptx_file();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_ptx_file"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1018>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_algorithm_denylist_path = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_xla_gpu_algorithm_denylist_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_algorithm_denylist_path"));
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_fast_math_honor_functions = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xla_cpu_fast_math_honor_functions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_include_timestamp = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_dump_include_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_dump_max_hlo_modules = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.xla_dump_max_hlo_modules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_tpu_detect_nan = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.xla_tpu_detect_nan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_tpu_detect_inf = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.xla_tpu_detect_inf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_enable_xprof_traceme = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.xla_cpu_enable_xprof_traceme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_enable_fast_min_max = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.xla_cpu_enable_fast_min_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_asm_extra_flags = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_xla_gpu_asm_extra_flags();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_asm_extra_flags"));
        } else
          goto handle_unusual;
        continue;
      // int32 xla_multiheap_size_constraint_per_heap = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.xla_multiheap_size_constraint_per_heap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_module_metadata = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.xla_dump_module_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_force_conv_nhwc = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.xla_gpu_force_conv_nhwc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_force_compilation_parallelism = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.xla_gpu_force_compilation_parallelism_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_deterministic_ops = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.xla_gpu_deterministic_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_fusion_visualization = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.xla_dump_fusion_visualization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string xla_gpu_llvm_ir_file = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_xla_gpu_llvm_ir_file();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_llvm_ir_file"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_compress_protos = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.xla_dump_compress_protos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_disable_metadata = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.xla_dump_disable_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_dump_hlo_pipeline_re = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_xla_dump_hlo_pipeline_re();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_dump_hlo_pipeline_re"));
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_dump_llvmir = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.xla_gpu_dump_llvmir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_strict_conv_algorithm_picker = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.xla_gpu_strict_conv_algorithm_picker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_all_reduce_combine_threshold_bytes = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.xla_gpu_all_reduce_combine_threshold_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host = 159;
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_cudnn_frontend = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.xla_gpu_enable_cudnn_frontend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_nccl_termination_timeout_seconds = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_gpu_nccl_termination_timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_hlo_as_long_text = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.xla_dump_hlo_as_long_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_shared_constants = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.xla_gpu_enable_shared_constants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_cublaslt = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.xla_gpu_enable_cublaslt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_redzone_scratch_max_megabytes = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.xla_gpu_redzone_scratch_max_megabytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DebugOptions.ShapeChecks xla_gpu_shape_checks = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_xla_gpu_shape_checks(static_cast<::xla::DebugOptions_ShapeChecks>(val));
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_use_acl = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.xla_cpu_use_acl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_strict_dot_conv_math = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.xla_cpu_strict_dot_conv_math_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_use_runtime_fusion = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.xla_gpu_use_runtime_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_latency_hiding_schedule = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.xla_dump_latency_hiding_schedule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_enable_mlir_tiling_and_fusion = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.xla_cpu_enable_mlir_tiling_and_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_enable_mlir_pretty_form = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.xla_dump_enable_mlir_pretty_form_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_latency_hiding_scheduler = 186;
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.xla_gpu_enable_latency_hiding_scheduler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DebugOptions.PartitioningAlgorithm xla_partitioning_algorithm = 187;
      case 187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_xla_partitioning_algorithm(static_cast<::xla::DebugOptions_PartitioningAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_triton_gemm = 188;
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.xla_gpu_enable_triton_gemm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_cudnn_int8x32_convolution_reordering = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_triton_gemm_any = 190;
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.xla_gpu_triton_gemm_any_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_enable_experimental_deallocation = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.xla_cpu_enable_experimental_deallocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_enable_mlir_fusion_outlining = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.xla_cpu_enable_mlir_fusion_outlining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_enable_custom_matmul_tiling = 195;
      case 195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_cpu_enable_custom_matmul_tiling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_cpu_matmul_tiling_m_dim = 196;
      case 196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.xla_cpu_matmul_tiling_m_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_cpu_matmul_tiling_n_dim = 197;
      case 197:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.xla_cpu_matmul_tiling_n_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_cpu_matmul_tiling_k_dim = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.xla_cpu_matmul_tiling_k_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_while_loop_reduce_scatter_code_motion = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_lhs_enable_gpu_async_tracker = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.xla_gpu_lhs_enable_gpu_async_tracker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_collective_inflation_factor = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.xla_gpu_collective_inflation_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_graph_min_graph_size = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.xla_gpu_graph_min_graph_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_reassociation_for_converted_ar = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.xla_gpu_enable_reassociation_for_converted_ar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_pgle_profile_file_or_directory_path = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_xla_gpu_pgle_profile_file_or_directory_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_pgle_profile_file_or_directory_path"));
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_all_gather_combine_threshold_bytes = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.xla_gpu_all_gather_combine_threshold_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_reduce_scatter_combine_threshold_bytes = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_graph_enable_concurrent_region = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.xla_gpu_graph_enable_concurrent_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_highest_priority_async_stream = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.xla_gpu_enable_highest_priority_async_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_pipelined_all_reduce = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.xla_gpu_enable_pipelined_all_reduce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_cudnn_fmha = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.xla_gpu_enable_cudnn_fmha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_exhaustive_tiling_search = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.xla_gpu_exhaustive_tiling_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_priority_fusion = 221;
      case 221:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.xla_gpu_enable_priority_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_dump_autotune_results_to = 222;
      case 222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_xla_gpu_dump_autotune_results_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_dump_autotune_results_to"));
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_load_autotune_results_from = 223;
      case 223:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_xla_gpu_load_autotune_results_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_load_autotune_results_from"));
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_auto_spmd_partitioning_memory_budget_gb = 224;
      case 224:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float xla_gpu_auto_spmd_partitioning_memory_budget_ratio = 225;
      case 225:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_triton_gemm_disable_reduced_precision_reduction = 226;
      case 226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_pipelined_all_gather = 227;
      case 227:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_gpu_enable_pipelined_all_gather_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_redzone_padding_bytes = 228;
      case 228:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.xla_gpu_redzone_padding_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_triton_fusion_level = 229;
      case 229:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.xla_gpu_triton_fusion_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_pipelined_reduce_scatter = 231;
      case 231:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.xla_gpu_enable_pipelined_reduce_scatter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_dump_autotuned_gemm_fusions = 232;
      case 232:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.xla_gpu_dump_autotuned_gemm_fusions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_fused_attention_use_cudnn_rng = 235;
      case 235:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.xla_gpu_fused_attention_use_cudnn_rng_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_copy_insertion_use_region_analysis = 236;
      case 236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.xla_gpu_copy_insertion_use_region_analysis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_collective_permute_decomposer_threshold = 237;
      case 237:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.xla_gpu_collective_permute_decomposer_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_pipelined_collectives = 239;
      case 239:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.xla_gpu_enable_pipelined_collectives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_collect_cost_model_stats = 240;
      case 240:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.xla_gpu_collect_cost_model_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_split_k_autotuning = 241;
      case 241:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.xla_gpu_enable_split_k_autotuning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_reduction_epilogue_fusion = 243;
      case 243:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.xla_gpu_enable_reduction_epilogue_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_nccl_clique_optimization = 244;
      case 244:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.xla_gpu_enable_nccl_clique_optimization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_mock_custom_calls = 245;
      case 245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.xla_gpu_mock_custom_calls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_pipelined_p2p = 246;
      case 246:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.xla_gpu_enable_pipelined_p2p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_cublas_fallback = 247;
      case 247:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.xla_gpu_cublas_fallback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_while_loop_double_buffering = 248;
      case 248:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.xla_gpu_enable_while_loop_double_buffering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_ensure_minor_dot_contraction_dims = 249;
      case 249:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.xla_gpu_ensure_minor_dot_contraction_dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_filter_kernels_spilling_registers_on_autotuning = 250;
      case 250:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_debug_buffer_assignment_show_max = 251;
      case 251:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.xla_debug_buffer_assignment_show_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_detailed_logging = 252;
      case 252:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.xla_detailed_logging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_enable_dumping = 253;
      case 253:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.xla_enable_dumping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_all_gather_combine_by_dim = 254;
      case 254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.xla_gpu_enable_all_gather_combine_by_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_analytical_latency_estimator = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.xla_gpu_enable_analytical_latency_estimator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_llvm_verification_level = 256;
      case 256:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.xla_gpu_llvm_verification_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_reduce_scatter_combine_by_dim = 257;
      case 257:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.DebugOptions.CommandBufferCmdType xla_gpu_enable_command_buffer = 258;
      case 258:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_xla_gpu_enable_command_buffer(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_xla_gpu_enable_command_buffer(static_cast<::xla::DebugOptions_CommandBufferCmdType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_cub_radix_sort = 259;
      case 259:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_gpu_enable_cub_radix_sort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_memory_limit_slop_factor = 260;
      case 260:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.xla_gpu_memory_limit_slop_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_target_config_filename = 261;
      case 261:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_xla_gpu_target_config_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_target_config_filename"));
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_cudnn_layer_norm = 262;
      case 262:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.xla_gpu_enable_cudnn_layer_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_custom_fusions = 263;
      case 263:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.xla_gpu_enable_custom_fusions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_enable_custom_fusions_re = 264;
      case 264:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_xla_gpu_enable_custom_fusions_re();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_enable_custom_fusions_re"));
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_threshold_for_windowed_einsum_mib = 265;
      case 265:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.xla_gpu_threshold_for_windowed_einsum_mib_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_triton_hopper = 266;
      case 266:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.xla_gpu_enable_triton_hopper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_nccl_user_buffers = 267;
      case 267:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.xla_gpu_enable_nccl_user_buffers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_llvm_module_compilation_parallelism = 268;
      case 268:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.xla_gpu_enable_llvm_module_compilation_parallelism_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_libnvptxcompiler = 269;
      case 269:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.xla_gpu_enable_libnvptxcompiler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_dot_strength_reduction = 270;
      case 270:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.xla_gpu_enable_dot_strength_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_bf16_6way_gemm = 271;
      case 271:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.xla_gpu_enable_bf16_6way_gemm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_nccl_comm_splitting = 272;
      case 272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.xla_gpu_enable_nccl_comm_splitting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_nccl_collective_max_nchannels = 273;
      case 273:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.xla_gpu_nccl_collective_max_nchannels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_nccl_p2p_max_nchannels = 274;
      case 274:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.xla_gpu_nccl_p2p_max_nchannels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_nccl_per_stream_comms = 276;
      case 276:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.xla_gpu_enable_nccl_per_stream_comms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_bf16_3way_gemm = 279;
      case 279:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.xla_gpu_enable_bf16_3way_gemm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_multi_streamed_windowed_einsum = 280;
      case 280:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.xla_gpu_multi_streamed_windowed_einsum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_gemm_rewrite_size_threshold = 283;
      case 283:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.xla_gpu_gemm_rewrite_size_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_require_complete_aot_autotune_results = 284;
      case 284:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.xla_gpu_require_complete_aot_autotune_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_cudnn_gemm_fusion_level = 285;
      case 285:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.xla_gpu_cudnn_gemm_fusion_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_use_memcpy_local_p2p = 287;
      case 287:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.xla_gpu_use_memcpy_local_p2p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_autotune_max_solutions = 288;
      case 288:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.xla_gpu_autotune_max_solutions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.DebugOptions.CollectiveOpType xla_gpu_disable_async_collectives = 289;
      case 289:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_xla_gpu_disable_async_collectives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_xla_gpu_disable_async_collectives(static_cast<::xla::DebugOptions_CollectiveOpType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool xla_dump_large_constants = 290;
      case 290:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xla_dump_large_constants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_verify_triton_fusion_numerics = 291;
      case 291:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_gpu_verify_triton_fusion_numerics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_dump_autotune_logs_to = 292;
      case 292:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_xla_gpu_dump_autotune_logs_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_dump_autotune_logs_to"));
        } else
          goto handle_unusual;
        continue;
      // int64 xla_reduce_window_rewrite_base_length = 293;
      case 293:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.xla_reduce_window_rewrite_base_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DebugOptions.WhileLoopUnrolling xla_gpu_enable_while_loop_unrolling = 294;
      case 294:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_xla_gpu_enable_while_loop_unrolling(static_cast<::xla::DebugOptions_WhileLoopUnrolling>(val));
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_override_gemm_autotuner = 295;
      case 295:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_xla_gpu_override_gemm_autotuner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_override_gemm_autotuner"));
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_host_memory_offloading = 296;
      case 296:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.xla_gpu_enable_host_memory_offloading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_exclude_nondeterministic_ops = 297;
      case 297:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.xla_gpu_exclude_nondeterministic_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_use_thunk_runtime = 298;
      case 298:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.xla_cpu_use_thunk_runtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_llvm_force_inline_before_split = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.xla_llvm_force_inline_before_split_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_nccl_terminate_on_error = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.xla_gpu_nccl_terminate_on_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xla_gpu_mlir_emitter_level = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.xla_gpu_mlir_emitter_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_shard_autotuning = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.xla_gpu_shard_autotuning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_approx_costly_collectives = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.xla_gpu_enable_approx_costly_collectives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_kernel_cache_file = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_xla_gpu_kernel_cache_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_kernel_cache_file"));
        } else
          goto handle_unusual;
        continue;
      // bool xla_cpu_enable_concurrency_optimized_scheduler = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.xla_cpu_enable_concurrency_optimized_scheduler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_cpu_prefer_vector_width = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.xla_cpu_prefer_vector_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_unsafe_pipelined_loop_annotator = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.xla_gpu_unsafe_pipelined_loop_annotator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string xla_gpu_per_fusion_autotune_cache_dir = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_xla_gpu_per_fusion_autotune_cache_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.xla_gpu_per_fusion_autotune_cache_dir"));
        } else
          goto handle_unusual;
        continue;
      // int64 xla_cmd_buffer_trace_cache_size = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.xla_cmd_buffer_trace_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_temp_buffer_use_separate_color = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.xla_gpu_temp_buffer_use_separate_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_run_post_layout_collective_pipeliner = 313;
      case 313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.xla_gpu_run_post_layout_collective_pipeliner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string legacy_command_buffer_custom_call_targets = 314;
      case 314:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_legacy_command_buffer_custom_call_targets();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.DebugOptions.legacy_command_buffer_custom_call_targets"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2514>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool xla_syntax_sugar_async_ops = 315;
      case 315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.xla_syntax_sugar_async_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float xla_gpu_autotune_gemm_rtol = 316;
      case 316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _impl_.xla_gpu_autotune_gemm_rtol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool xla_enable_command_buffers_during_profiling = 317;
      case 317:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.xla_enable_command_buffers_during_profiling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_cudnn_gemm_max_plans = 318;
      case 318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.xla_gpu_cudnn_gemm_max_plans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_libnvjitlink = 319;
      case 319:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.xla_gpu_enable_libnvjitlink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_triton_gemm_int4 = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.xla_gpu_enable_triton_gemm_int4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_async_dot = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xla_gpu_async_dot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_unsupported_enable_triton_gemm = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xla_gpu_unsupported_enable_triton_gemm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_cpu_parallel_codegen_split_count = 323;
      case 323:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xla_cpu_parallel_codegen_split_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DebugOptions.AutotuneCacheMode xla_gpu_experimental_autotune_cache_mode = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_xla_gpu_experimental_autotune_cache_mode(static_cast<::xla::DebugOptions_AutotuneCacheMode>(val));
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_experimental_enable_triton_softmax_priority_fusion = 325;
      case 325:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_enable_pgle_accuracy_checker = 326;
      case 326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.xla_gpu_enable_pgle_accuracy_checker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_executable_warn_stuck_timeout_seconds = 327;
      case 327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.xla_gpu_executable_warn_stuck_timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xla_gpu_executable_terminate_timeout_seconds = 328;
      case 328:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.xla_gpu_executable_terminate_timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_gpu_experimental_disable_binary_libraries = 329;
      case 329:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.xla_gpu_experimental_disable_binary_libraries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool xla_experimental_ignore_channel_id = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.xla_experimental_ignore_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> xla_backend_extra_options = 500;
      case 500:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.xla_backend_extra_options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<4002>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.DebugOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool xla_hlo_graph_addresses = 2;
  if (this->_internal_xla_hlo_graph_addresses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_xla_hlo_graph_addresses(), target);
  }

  // bool xla_hlo_profile = 9;
  if (this->_internal_xla_hlo_profile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_xla_hlo_profile(), target);
  }

  // repeated string xla_disable_hlo_passes = 30;
  for (int i = 0, n = this->_internal_xla_disable_hlo_passes_size(); i < n; i++) {
    const auto& s = this->_internal_xla_disable_hlo_passes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_disable_hlo_passes");
    target = stream->WriteString(30, s, target);
  }

  // int32 xla_backend_optimization_level = 31;
  if (this->_internal_xla_backend_optimization_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_xla_backend_optimization_level(), target);
  }

  // bool xla_embed_ir_in_executable = 33;
  if (this->_internal_xla_embed_ir_in_executable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_xla_embed_ir_in_executable(), target);
  }

  // bool xla_eliminate_hlo_implicit_broadcast = 35;
  if (this->_internal_xla_eliminate_hlo_implicit_broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_xla_eliminate_hlo_implicit_broadcast(), target);
  }

  // bool xla_cpu_multi_thread_eigen = 60;
  if (this->_internal_xla_cpu_multi_thread_eigen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_xla_cpu_multi_thread_eigen(), target);
  }

  // string xla_gpu_cuda_data_dir = 61;
  if (!this->_internal_xla_gpu_cuda_data_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_cuda_data_dir().data(), static_cast<int>(this->_internal_xla_gpu_cuda_data_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_cuda_data_dir");
    target = stream->WriteStringMaybeAliased(
        61, this->_internal_xla_gpu_cuda_data_dir(), target);
  }

  // bool xla_gpu_ftz = 62;
  if (this->_internal_xla_gpu_ftz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(62, this->_internal_xla_gpu_ftz(), target);
  }

  // bool xla_llvm_enable_alias_scope_metadata = 70;
  if (this->_internal_xla_llvm_enable_alias_scope_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(70, this->_internal_xla_llvm_enable_alias_scope_metadata(), target);
  }

  // bool xla_llvm_enable_noalias_metadata = 71;
  if (this->_internal_xla_llvm_enable_noalias_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(71, this->_internal_xla_llvm_enable_noalias_metadata(), target);
  }

  // bool xla_llvm_enable_invariant_load_metadata = 72;
  if (this->_internal_xla_llvm_enable_invariant_load_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(72, this->_internal_xla_llvm_enable_invariant_load_metadata(), target);
  }

  // bool xla_llvm_disable_expensive_passes = 73;
  if (this->_internal_xla_llvm_disable_expensive_passes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_xla_llvm_disable_expensive_passes(), target);
  }

  // bool xla_test_all_output_layouts = 90;
  if (this->_internal_xla_test_all_output_layouts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(90, this->_internal_xla_test_all_output_layouts(), target);
  }

  // bool xla_test_all_input_layouts = 91;
  if (this->_internal_xla_test_all_input_layouts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(91, this->_internal_xla_test_all_input_layouts(), target);
  }

  // bool xla_hlo_graph_sharding_color = 92;
  if (this->_internal_xla_hlo_graph_sharding_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(92, this->_internal_xla_hlo_graph_sharding_color(), target);
  }

  // bool xla_cpu_use_mkl_dnn = 97;
  if (this->_internal_xla_cpu_use_mkl_dnn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(97, this->_internal_xla_cpu_use_mkl_dnn(), target);
  }

  // bool xla_cpu_enable_fast_math = 99;
  if (this->_internal_xla_cpu_enable_fast_math() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(99, this->_internal_xla_cpu_enable_fast_math(), target);
  }

  // bool xla_gpu_enable_fast_min_max = 100;
  if (this->_internal_xla_gpu_enable_fast_min_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(100, this->_internal_xla_gpu_enable_fast_min_max(), target);
  }

  // bool xla_gpu_crash_on_verification_failures = 101;
  if (this->_internal_xla_gpu_crash_on_verification_failures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(101, this->_internal_xla_gpu_crash_on_verification_failures(), target);
  }

  // int32 xla_force_host_platform_device_count = 102;
  if (this->_internal_xla_force_host_platform_device_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(102, this->_internal_xla_force_host_platform_device_count(), target);
  }

  // bool xla_gpu_disable_gpuasm_optimizations = 103;
  if (this->_internal_xla_gpu_disable_gpuasm_optimizations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(103, this->_internal_xla_gpu_disable_gpuasm_optimizations(), target);
  }

  // bool xla_disable_all_hlo_passes = 104;
  if (this->_internal_xla_disable_all_hlo_passes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(104, this->_internal_xla_disable_all_hlo_passes(), target);
  }

  // bool xla_gpu_enable_dynamic_slice_fusion = 105;
  if (this->_internal_xla_gpu_enable_dynamic_slice_fusion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(105, this->_internal_xla_gpu_enable_dynamic_slice_fusion(), target);
  }

  // bool xla_hlo_evaluator_use_fast_path = 106;
  if (this->_internal_xla_hlo_evaluator_use_fast_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(106, this->_internal_xla_hlo_evaluator_use_fast_path(), target);
  }

  // bool xla_allow_scalar_index_dynamic_ops = 107;
  if (this->_internal_xla_allow_scalar_index_dynamic_ops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(107, this->_internal_xla_allow_scalar_index_dynamic_ops(), target);
  }

  // .xla.DebugOptions.StepMarkerLocation xla_step_marker_location = 108;
  if (this->_internal_xla_step_marker_location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      108, this->_internal_xla_step_marker_location(), target);
  }

  // string xla_dump_to = 109;
  if (!this->_internal_xla_dump_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_dump_to().data(), static_cast<int>(this->_internal_xla_dump_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_dump_to");
    target = stream->WriteStringMaybeAliased(
        109, this->_internal_xla_dump_to(), target);
  }

  // string xla_dump_hlo_module_re = 110;
  if (!this->_internal_xla_dump_hlo_module_re().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_dump_hlo_module_re().data(), static_cast<int>(this->_internal_xla_dump_hlo_module_re().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_dump_hlo_module_re");
    target = stream->WriteStringMaybeAliased(
        110, this->_internal_xla_dump_hlo_module_re(), target);
  }

  // string xla_dump_hlo_pass_re = 111;
  if (!this->_internal_xla_dump_hlo_pass_re().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_dump_hlo_pass_re().data(), static_cast<int>(this->_internal_xla_dump_hlo_pass_re().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_dump_hlo_pass_re");
    target = stream->WriteStringMaybeAliased(
        111, this->_internal_xla_dump_hlo_pass_re(), target);
  }

  // bool xla_dump_hlo_as_text = 112;
  if (this->_internal_xla_dump_hlo_as_text() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(112, this->_internal_xla_dump_hlo_as_text(), target);
  }

  // bool xla_dump_hlo_as_proto = 113;
  if (this->_internal_xla_dump_hlo_as_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(113, this->_internal_xla_dump_hlo_as_proto(), target);
  }

  // bool xla_dump_hlo_as_dot = 114;
  if (this->_internal_xla_dump_hlo_as_dot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(114, this->_internal_xla_dump_hlo_as_dot(), target);
  }

  // bool xla_dump_hlo_as_url = 115;
  if (this->_internal_xla_dump_hlo_as_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(115, this->_internal_xla_dump_hlo_as_url(), target);
  }

  // bool xla_dump_hlo_as_html = 116;
  if (this->_internal_xla_dump_hlo_as_html() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(116, this->_internal_xla_dump_hlo_as_html(), target);
  }

  // bool xla_dump_hlo_snapshots = 118;
  if (this->_internal_xla_dump_hlo_snapshots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(118, this->_internal_xla_dump_hlo_snapshots(), target);
  }

  // bool xla_cpu_fast_math_honor_nans = 120;
  if (this->_internal_xla_cpu_fast_math_honor_nans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(120, this->_internal_xla_cpu_fast_math_honor_nans(), target);
  }

  // bool xla_cpu_fast_math_honor_infs = 121;
  if (this->_internal_xla_cpu_fast_math_honor_infs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(121, this->_internal_xla_cpu_fast_math_honor_infs(), target);
  }

  // bool xla_allow_excess_precision = 122;
  if (this->_internal_xla_allow_excess_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(122, this->_internal_xla_allow_excess_precision(), target);
  }

  // int32 xla_gpu_autotune_level = 123;
  if (this->_internal_xla_gpu_autotune_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(123, this->_internal_xla_gpu_autotune_level(), target);
  }

  // repeated string xla_enable_hlo_passes_only = 124;
  for (int i = 0, n = this->_internal_xla_enable_hlo_passes_only_size(); i < n; i++) {
    const auto& s = this->_internal_xla_enable_hlo_passes_only(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_enable_hlo_passes_only");
    target = stream->WriteString(124, s, target);
  }

  // bool xla_gpu_force_conv_nchw = 125;
  if (this->_internal_xla_gpu_force_conv_nchw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(125, this->_internal_xla_gpu_force_conv_nchw(), target);
  }

  // bool xla_cpu_fast_math_honor_division = 126;
  if (this->_internal_xla_cpu_fast_math_honor_division() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(126, this->_internal_xla_cpu_fast_math_honor_division(), target);
  }

  // repeated string xla_gpu_ptx_file = 127;
  for (int i = 0, n = this->_internal_xla_gpu_ptx_file_size(); i < n; i++) {
    const auto& s = this->_internal_xla_gpu_ptx_file(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_ptx_file");
    target = stream->WriteString(127, s, target);
  }

  // string xla_gpu_algorithm_denylist_path = 128;
  if (!this->_internal_xla_gpu_algorithm_denylist_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_algorithm_denylist_path().data(), static_cast<int>(this->_internal_xla_gpu_algorithm_denylist_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_algorithm_denylist_path");
    target = stream->WriteStringMaybeAliased(
        128, this->_internal_xla_gpu_algorithm_denylist_path(), target);
  }

  // bool xla_cpu_fast_math_honor_functions = 129;
  if (this->_internal_xla_cpu_fast_math_honor_functions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(129, this->_internal_xla_cpu_fast_math_honor_functions(), target);
  }

  // bool xla_dump_include_timestamp = 131;
  if (this->_internal_xla_dump_include_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(131, this->_internal_xla_dump_include_timestamp(), target);
  }

  // int32 xla_dump_max_hlo_modules = 132;
  if (this->_internal_xla_dump_max_hlo_modules() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(132, this->_internal_xla_dump_max_hlo_modules(), target);
  }

  // bool xla_tpu_detect_nan = 135;
  if (this->_internal_xla_tpu_detect_nan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(135, this->_internal_xla_tpu_detect_nan(), target);
  }

  // bool xla_tpu_detect_inf = 136;
  if (this->_internal_xla_tpu_detect_inf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(136, this->_internal_xla_tpu_detect_inf(), target);
  }

  // bool xla_cpu_enable_xprof_traceme = 137;
  if (this->_internal_xla_cpu_enable_xprof_traceme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(137, this->_internal_xla_cpu_enable_xprof_traceme(), target);
  }

  // bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found = 138;
  if (this->_internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(138, this->_internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found(), target);
  }

  // bool xla_cpu_enable_fast_min_max = 140;
  if (this->_internal_xla_cpu_enable_fast_min_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(140, this->_internal_xla_cpu_enable_fast_min_max(), target);
  }

  // string xla_gpu_asm_extra_flags = 141;
  if (!this->_internal_xla_gpu_asm_extra_flags().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_asm_extra_flags().data(), static_cast<int>(this->_internal_xla_gpu_asm_extra_flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_asm_extra_flags");
    target = stream->WriteStringMaybeAliased(
        141, this->_internal_xla_gpu_asm_extra_flags(), target);
  }

  // int32 xla_multiheap_size_constraint_per_heap = 142;
  if (this->_internal_xla_multiheap_size_constraint_per_heap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(142, this->_internal_xla_multiheap_size_constraint_per_heap(), target);
  }

  // bool xla_dump_module_metadata = 144;
  if (this->_internal_xla_dump_module_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(144, this->_internal_xla_dump_module_metadata(), target);
  }

  // bool xla_gpu_force_conv_nhwc = 146;
  if (this->_internal_xla_gpu_force_conv_nhwc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(146, this->_internal_xla_gpu_force_conv_nhwc(), target);
  }

  // int32 xla_gpu_force_compilation_parallelism = 147;
  if (this->_internal_xla_gpu_force_compilation_parallelism() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(147, this->_internal_xla_gpu_force_compilation_parallelism(), target);
  }

  // bool xla_gpu_deterministic_ops = 148;
  if (this->_internal_xla_gpu_deterministic_ops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(148, this->_internal_xla_gpu_deterministic_ops(), target);
  }

  // bool xla_dump_fusion_visualization = 149;
  if (this->_internal_xla_dump_fusion_visualization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(149, this->_internal_xla_dump_fusion_visualization(), target);
  }

  // repeated string xla_gpu_llvm_ir_file = 150;
  for (int i = 0, n = this->_internal_xla_gpu_llvm_ir_file_size(); i < n; i++) {
    const auto& s = this->_internal_xla_gpu_llvm_ir_file(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_llvm_ir_file");
    target = stream->WriteString(150, s, target);
  }

  // bool xla_dump_compress_protos = 151;
  if (this->_internal_xla_dump_compress_protos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(151, this->_internal_xla_dump_compress_protos(), target);
  }

  // bool xla_dump_disable_metadata = 153;
  if (this->_internal_xla_dump_disable_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(153, this->_internal_xla_dump_disable_metadata(), target);
  }

  // string xla_dump_hlo_pipeline_re = 154;
  if (!this->_internal_xla_dump_hlo_pipeline_re().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_dump_hlo_pipeline_re().data(), static_cast<int>(this->_internal_xla_dump_hlo_pipeline_re().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_dump_hlo_pipeline_re");
    target = stream->WriteStringMaybeAliased(
        154, this->_internal_xla_dump_hlo_pipeline_re(), target);
  }

  // bool xla_gpu_dump_llvmir = 155;
  if (this->_internal_xla_gpu_dump_llvmir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(155, this->_internal_xla_gpu_dump_llvmir(), target);
  }

  // bool xla_gpu_strict_conv_algorithm_picker = 156;
  if (this->_internal_xla_gpu_strict_conv_algorithm_picker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(156, this->_internal_xla_gpu_strict_conv_algorithm_picker(), target);
  }

  // int64 xla_gpu_all_reduce_combine_threshold_bytes = 157;
  if (this->_internal_xla_gpu_all_reduce_combine_threshold_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(157, this->_internal_xla_gpu_all_reduce_combine_threshold_bytes(), target);
  }

  // int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host = 159;
  if (this->_internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(159, this->_internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host(), target);
  }

  // bool xla_gpu_enable_cudnn_frontend = 160;
  if (this->_internal_xla_gpu_enable_cudnn_frontend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(160, this->_internal_xla_gpu_enable_cudnn_frontend(), target);
  }

  // int64 xla_gpu_nccl_termination_timeout_seconds = 163;
  if (this->_internal_xla_gpu_nccl_termination_timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(163, this->_internal_xla_gpu_nccl_termination_timeout_seconds(), target);
  }

  // bool xla_dump_hlo_as_long_text = 164;
  if (this->_internal_xla_dump_hlo_as_long_text() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(164, this->_internal_xla_dump_hlo_as_long_text(), target);
  }

  // bool xla_gpu_enable_shared_constants = 165;
  if (this->_internal_xla_gpu_enable_shared_constants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(165, this->_internal_xla_gpu_enable_shared_constants(), target);
  }

  // bool xla_gpu_enable_cublaslt = 166;
  if (this->_internal_xla_gpu_enable_cublaslt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(166, this->_internal_xla_gpu_enable_cublaslt(), target);
  }

  // int64 xla_gpu_redzone_scratch_max_megabytes = 167;
  if (this->_internal_xla_gpu_redzone_scratch_max_megabytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(167, this->_internal_xla_gpu_redzone_scratch_max_megabytes(), target);
  }

  // .xla.DebugOptions.ShapeChecks xla_gpu_shape_checks = 170;
  if (this->_internal_xla_gpu_shape_checks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      170, this->_internal_xla_gpu_shape_checks(), target);
  }

  // bool xla_cpu_use_acl = 174;
  if (this->_internal_xla_cpu_use_acl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(174, this->_internal_xla_cpu_use_acl(), target);
  }

  // bool xla_cpu_strict_dot_conv_math = 175;
  if (this->_internal_xla_cpu_strict_dot_conv_math() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(175, this->_internal_xla_cpu_strict_dot_conv_math(), target);
  }

  // bool xla_gpu_use_runtime_fusion = 181;
  if (this->_internal_xla_gpu_use_runtime_fusion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(181, this->_internal_xla_gpu_use_runtime_fusion(), target);
  }

  // bool xla_dump_latency_hiding_schedule = 182;
  if (this->_internal_xla_dump_latency_hiding_schedule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(182, this->_internal_xla_dump_latency_hiding_schedule(), target);
  }

  // bool xla_cpu_enable_mlir_tiling_and_fusion = 184;
  if (this->_internal_xla_cpu_enable_mlir_tiling_and_fusion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(184, this->_internal_xla_cpu_enable_mlir_tiling_and_fusion(), target);
  }

  // bool xla_dump_enable_mlir_pretty_form = 185;
  if (this->_internal_xla_dump_enable_mlir_pretty_form() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(185, this->_internal_xla_dump_enable_mlir_pretty_form(), target);
  }

  // bool xla_gpu_enable_latency_hiding_scheduler = 186;
  if (this->_internal_xla_gpu_enable_latency_hiding_scheduler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(186, this->_internal_xla_gpu_enable_latency_hiding_scheduler(), target);
  }

  // .xla.DebugOptions.PartitioningAlgorithm xla_partitioning_algorithm = 187;
  if (this->_internal_xla_partitioning_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      187, this->_internal_xla_partitioning_algorithm(), target);
  }

  // bool xla_gpu_enable_triton_gemm = 188;
  if (this->_internal_xla_gpu_enable_triton_gemm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(188, this->_internal_xla_gpu_enable_triton_gemm(), target);
  }

  // bool xla_gpu_enable_cudnn_int8x32_convolution_reordering = 189;
  if (this->_internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(189, this->_internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering(), target);
  }

  // bool xla_gpu_triton_gemm_any = 190;
  if (this->_internal_xla_gpu_triton_gemm_any() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(190, this->_internal_xla_gpu_triton_gemm_any(), target);
  }

  // bool xla_cpu_enable_experimental_deallocation = 191;
  if (this->_internal_xla_cpu_enable_experimental_deallocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(191, this->_internal_xla_cpu_enable_experimental_deallocation(), target);
  }

  // bool xla_cpu_enable_mlir_fusion_outlining = 192;
  if (this->_internal_xla_cpu_enable_mlir_fusion_outlining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(192, this->_internal_xla_cpu_enable_mlir_fusion_outlining(), target);
  }

  // bool xla_cpu_enable_custom_matmul_tiling = 195;
  if (this->_internal_xla_cpu_enable_custom_matmul_tiling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(195, this->_internal_xla_cpu_enable_custom_matmul_tiling(), target);
  }

  // int64 xla_cpu_matmul_tiling_m_dim = 196;
  if (this->_internal_xla_cpu_matmul_tiling_m_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(196, this->_internal_xla_cpu_matmul_tiling_m_dim(), target);
  }

  // int64 xla_cpu_matmul_tiling_n_dim = 197;
  if (this->_internal_xla_cpu_matmul_tiling_n_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(197, this->_internal_xla_cpu_matmul_tiling_n_dim(), target);
  }

  // int64 xla_cpu_matmul_tiling_k_dim = 198;
  if (this->_internal_xla_cpu_matmul_tiling_k_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(198, this->_internal_xla_cpu_matmul_tiling_k_dim(), target);
  }

  // bool xla_gpu_enable_while_loop_reduce_scatter_code_motion = 203;
  if (this->_internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(203, this->_internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion(), target);
  }

  // bool xla_gpu_lhs_enable_gpu_async_tracker = 204;
  if (this->_internal_xla_gpu_lhs_enable_gpu_async_tracker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(204, this->_internal_xla_gpu_lhs_enable_gpu_async_tracker(), target);
  }

  // int32 xla_gpu_collective_inflation_factor = 205;
  if (this->_internal_xla_gpu_collective_inflation_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(205, this->_internal_xla_gpu_collective_inflation_factor(), target);
  }

  // int32 xla_gpu_graph_min_graph_size = 208;
  if (this->_internal_xla_gpu_graph_min_graph_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(208, this->_internal_xla_gpu_graph_min_graph_size(), target);
  }

  // bool xla_gpu_enable_reassociation_for_converted_ar = 209;
  if (this->_internal_xla_gpu_enable_reassociation_for_converted_ar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(209, this->_internal_xla_gpu_enable_reassociation_for_converted_ar(), target);
  }

  // string xla_gpu_pgle_profile_file_or_directory_path = 210;
  if (!this->_internal_xla_gpu_pgle_profile_file_or_directory_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_pgle_profile_file_or_directory_path().data(), static_cast<int>(this->_internal_xla_gpu_pgle_profile_file_or_directory_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_pgle_profile_file_or_directory_path");
    target = stream->WriteStringMaybeAliased(
        210, this->_internal_xla_gpu_pgle_profile_file_or_directory_path(), target);
  }

  // int64 xla_gpu_all_gather_combine_threshold_bytes = 212;
  if (this->_internal_xla_gpu_all_gather_combine_threshold_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(212, this->_internal_xla_gpu_all_gather_combine_threshold_bytes(), target);
  }

  // int64 xla_gpu_reduce_scatter_combine_threshold_bytes = 213;
  if (this->_internal_xla_gpu_reduce_scatter_combine_threshold_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(213, this->_internal_xla_gpu_reduce_scatter_combine_threshold_bytes(), target);
  }

  // bool xla_gpu_graph_enable_concurrent_region = 215;
  if (this->_internal_xla_gpu_graph_enable_concurrent_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(215, this->_internal_xla_gpu_graph_enable_concurrent_region(), target);
  }

  // bool xla_gpu_enable_highest_priority_async_stream = 216;
  if (this->_internal_xla_gpu_enable_highest_priority_async_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(216, this->_internal_xla_gpu_enable_highest_priority_async_stream(), target);
  }

  // bool xla_gpu_enable_pipelined_all_reduce = 217;
  if (this->_internal_xla_gpu_enable_pipelined_all_reduce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(217, this->_internal_xla_gpu_enable_pipelined_all_reduce(), target);
  }

  // bool xla_gpu_enable_cudnn_fmha = 218;
  if (this->_internal_xla_gpu_enable_cudnn_fmha() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(218, this->_internal_xla_gpu_enable_cudnn_fmha(), target);
  }

  // bool xla_gpu_exhaustive_tiling_search = 219;
  if (this->_internal_xla_gpu_exhaustive_tiling_search() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(219, this->_internal_xla_gpu_exhaustive_tiling_search(), target);
  }

  // bool xla_gpu_enable_priority_fusion = 221;
  if (this->_internal_xla_gpu_enable_priority_fusion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(221, this->_internal_xla_gpu_enable_priority_fusion(), target);
  }

  // string xla_gpu_dump_autotune_results_to = 222;
  if (!this->_internal_xla_gpu_dump_autotune_results_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_dump_autotune_results_to().data(), static_cast<int>(this->_internal_xla_gpu_dump_autotune_results_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_dump_autotune_results_to");
    target = stream->WriteStringMaybeAliased(
        222, this->_internal_xla_gpu_dump_autotune_results_to(), target);
  }

  // string xla_gpu_load_autotune_results_from = 223;
  if (!this->_internal_xla_gpu_load_autotune_results_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_load_autotune_results_from().data(), static_cast<int>(this->_internal_xla_gpu_load_autotune_results_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_load_autotune_results_from");
    target = stream->WriteStringMaybeAliased(
        223, this->_internal_xla_gpu_load_autotune_results_from(), target);
  }

  // int32 xla_gpu_auto_spmd_partitioning_memory_budget_gb = 224;
  if (this->_internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(224, this->_internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb(), target);
  }

  // float xla_gpu_auto_spmd_partitioning_memory_budget_ratio = 225;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio = this->_internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio();
  uint32_t raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio;
  memcpy(&raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio, &tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio, sizeof(tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio));
  if (raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(225, this->_internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio(), target);
  }

  // bool xla_gpu_triton_gemm_disable_reduced_precision_reduction = 226;
  if (this->_internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(226, this->_internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction(), target);
  }

  // bool xla_gpu_enable_pipelined_all_gather = 227;
  if (this->_internal_xla_gpu_enable_pipelined_all_gather() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(227, this->_internal_xla_gpu_enable_pipelined_all_gather(), target);
  }

  // int64 xla_gpu_redzone_padding_bytes = 228;
  if (this->_internal_xla_gpu_redzone_padding_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(228, this->_internal_xla_gpu_redzone_padding_bytes(), target);
  }

  // int32 xla_gpu_triton_fusion_level = 229;
  if (this->_internal_xla_gpu_triton_fusion_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(229, this->_internal_xla_gpu_triton_fusion_level(), target);
  }

  // bool xla_gpu_enable_pipelined_reduce_scatter = 231;
  if (this->_internal_xla_gpu_enable_pipelined_reduce_scatter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(231, this->_internal_xla_gpu_enable_pipelined_reduce_scatter(), target);
  }

  // bool xla_gpu_dump_autotuned_gemm_fusions = 232;
  if (this->_internal_xla_gpu_dump_autotuned_gemm_fusions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(232, this->_internal_xla_gpu_dump_autotuned_gemm_fusions(), target);
  }

  // bool xla_gpu_fused_attention_use_cudnn_rng = 235;
  if (this->_internal_xla_gpu_fused_attention_use_cudnn_rng() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(235, this->_internal_xla_gpu_fused_attention_use_cudnn_rng(), target);
  }

  // bool xla_gpu_copy_insertion_use_region_analysis = 236;
  if (this->_internal_xla_gpu_copy_insertion_use_region_analysis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(236, this->_internal_xla_gpu_copy_insertion_use_region_analysis(), target);
  }

  // int64 xla_gpu_collective_permute_decomposer_threshold = 237;
  if (this->_internal_xla_gpu_collective_permute_decomposer_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(237, this->_internal_xla_gpu_collective_permute_decomposer_threshold(), target);
  }

  // bool xla_gpu_enable_pipelined_collectives = 239;
  if (this->_internal_xla_gpu_enable_pipelined_collectives() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(239, this->_internal_xla_gpu_enable_pipelined_collectives(), target);
  }

  // bool xla_gpu_collect_cost_model_stats = 240;
  if (this->_internal_xla_gpu_collect_cost_model_stats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(240, this->_internal_xla_gpu_collect_cost_model_stats(), target);
  }

  // bool xla_gpu_enable_split_k_autotuning = 241;
  if (this->_internal_xla_gpu_enable_split_k_autotuning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(241, this->_internal_xla_gpu_enable_split_k_autotuning(), target);
  }

  // bool xla_gpu_enable_reduction_epilogue_fusion = 243;
  if (this->_internal_xla_gpu_enable_reduction_epilogue_fusion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(243, this->_internal_xla_gpu_enable_reduction_epilogue_fusion(), target);
  }

  // bool xla_gpu_enable_nccl_clique_optimization = 244;
  if (this->_internal_xla_gpu_enable_nccl_clique_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(244, this->_internal_xla_gpu_enable_nccl_clique_optimization(), target);
  }

  // bool xla_gpu_mock_custom_calls = 245;
  if (this->_internal_xla_gpu_mock_custom_calls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(245, this->_internal_xla_gpu_mock_custom_calls(), target);
  }

  // bool xla_gpu_enable_pipelined_p2p = 246;
  if (this->_internal_xla_gpu_enable_pipelined_p2p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(246, this->_internal_xla_gpu_enable_pipelined_p2p(), target);
  }

  // bool xla_gpu_cublas_fallback = 247;
  if (this->_internal_xla_gpu_cublas_fallback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(247, this->_internal_xla_gpu_cublas_fallback(), target);
  }

  // bool xla_gpu_enable_while_loop_double_buffering = 248;
  if (this->_internal_xla_gpu_enable_while_loop_double_buffering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(248, this->_internal_xla_gpu_enable_while_loop_double_buffering(), target);
  }

  // bool xla_gpu_ensure_minor_dot_contraction_dims = 249;
  if (this->_internal_xla_gpu_ensure_minor_dot_contraction_dims() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(249, this->_internal_xla_gpu_ensure_minor_dot_contraction_dims(), target);
  }

  // bool xla_gpu_filter_kernels_spilling_registers_on_autotuning = 250;
  if (this->_internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(250, this->_internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning(), target);
  }

  // int64 xla_debug_buffer_assignment_show_max = 251;
  if (this->_internal_xla_debug_buffer_assignment_show_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(251, this->_internal_xla_debug_buffer_assignment_show_max(), target);
  }

  // bool xla_detailed_logging = 252;
  if (this->_internal_xla_detailed_logging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(252, this->_internal_xla_detailed_logging(), target);
  }

  // bool xla_enable_dumping = 253;
  if (this->_internal_xla_enable_dumping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(253, this->_internal_xla_enable_dumping(), target);
  }

  // bool xla_gpu_enable_all_gather_combine_by_dim = 254;
  if (this->_internal_xla_gpu_enable_all_gather_combine_by_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(254, this->_internal_xla_gpu_enable_all_gather_combine_by_dim(), target);
  }

  // bool xla_gpu_enable_analytical_latency_estimator = 255;
  if (this->_internal_xla_gpu_enable_analytical_latency_estimator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(255, this->_internal_xla_gpu_enable_analytical_latency_estimator(), target);
  }

  // int32 xla_gpu_llvm_verification_level = 256;
  if (this->_internal_xla_gpu_llvm_verification_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(256, this->_internal_xla_gpu_llvm_verification_level(), target);
  }

  // bool xla_gpu_enable_reduce_scatter_combine_by_dim = 257;
  if (this->_internal_xla_gpu_enable_reduce_scatter_combine_by_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(257, this->_internal_xla_gpu_enable_reduce_scatter_combine_by_dim(), target);
  }

  // repeated .xla.DebugOptions.CommandBufferCmdType xla_gpu_enable_command_buffer = 258;
  {
    int byte_size = _impl_._xla_gpu_enable_command_buffer_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          258, _impl_.xla_gpu_enable_command_buffer_, byte_size, target);
    }
  }

  // bool xla_gpu_enable_cub_radix_sort = 259;
  if (this->_internal_xla_gpu_enable_cub_radix_sort() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(259, this->_internal_xla_gpu_enable_cub_radix_sort(), target);
  }

  // int32 xla_gpu_memory_limit_slop_factor = 260;
  if (this->_internal_xla_gpu_memory_limit_slop_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(260, this->_internal_xla_gpu_memory_limit_slop_factor(), target);
  }

  // string xla_gpu_target_config_filename = 261;
  if (!this->_internal_xla_gpu_target_config_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_target_config_filename().data(), static_cast<int>(this->_internal_xla_gpu_target_config_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_target_config_filename");
    target = stream->WriteStringMaybeAliased(
        261, this->_internal_xla_gpu_target_config_filename(), target);
  }

  // bool xla_gpu_enable_cudnn_layer_norm = 262;
  if (this->_internal_xla_gpu_enable_cudnn_layer_norm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(262, this->_internal_xla_gpu_enable_cudnn_layer_norm(), target);
  }

  // bool xla_gpu_enable_custom_fusions = 263;
  if (this->_internal_xla_gpu_enable_custom_fusions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(263, this->_internal_xla_gpu_enable_custom_fusions(), target);
  }

  // string xla_gpu_enable_custom_fusions_re = 264;
  if (!this->_internal_xla_gpu_enable_custom_fusions_re().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_enable_custom_fusions_re().data(), static_cast<int>(this->_internal_xla_gpu_enable_custom_fusions_re().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_enable_custom_fusions_re");
    target = stream->WriteStringMaybeAliased(
        264, this->_internal_xla_gpu_enable_custom_fusions_re(), target);
  }

  // int64 xla_gpu_threshold_for_windowed_einsum_mib = 265;
  if (this->_internal_xla_gpu_threshold_for_windowed_einsum_mib() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(265, this->_internal_xla_gpu_threshold_for_windowed_einsum_mib(), target);
  }

  // bool xla_gpu_enable_triton_hopper = 266;
  if (this->_internal_xla_gpu_enable_triton_hopper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(266, this->_internal_xla_gpu_enable_triton_hopper(), target);
  }

  // bool xla_gpu_enable_nccl_user_buffers = 267;
  if (this->_internal_xla_gpu_enable_nccl_user_buffers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(267, this->_internal_xla_gpu_enable_nccl_user_buffers(), target);
  }

  // bool xla_gpu_enable_llvm_module_compilation_parallelism = 268;
  if (this->_internal_xla_gpu_enable_llvm_module_compilation_parallelism() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(268, this->_internal_xla_gpu_enable_llvm_module_compilation_parallelism(), target);
  }

  // bool xla_gpu_enable_libnvptxcompiler = 269;
  if (this->_internal_xla_gpu_enable_libnvptxcompiler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(269, this->_internal_xla_gpu_enable_libnvptxcompiler(), target);
  }

  // bool xla_gpu_enable_dot_strength_reduction = 270;
  if (this->_internal_xla_gpu_enable_dot_strength_reduction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(270, this->_internal_xla_gpu_enable_dot_strength_reduction(), target);
  }

  // bool xla_gpu_enable_bf16_6way_gemm = 271;
  if (this->_internal_xla_gpu_enable_bf16_6way_gemm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(271, this->_internal_xla_gpu_enable_bf16_6way_gemm(), target);
  }

  // bool xla_gpu_enable_nccl_comm_splitting = 272;
  if (this->_internal_xla_gpu_enable_nccl_comm_splitting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(272, this->_internal_xla_gpu_enable_nccl_comm_splitting(), target);
  }

  // int64 xla_gpu_nccl_collective_max_nchannels = 273;
  if (this->_internal_xla_gpu_nccl_collective_max_nchannels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(273, this->_internal_xla_gpu_nccl_collective_max_nchannels(), target);
  }

  // int64 xla_gpu_nccl_p2p_max_nchannels = 274;
  if (this->_internal_xla_gpu_nccl_p2p_max_nchannels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(274, this->_internal_xla_gpu_nccl_p2p_max_nchannels(), target);
  }

  // bool xla_gpu_enable_nccl_per_stream_comms = 276;
  if (this->_internal_xla_gpu_enable_nccl_per_stream_comms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(276, this->_internal_xla_gpu_enable_nccl_per_stream_comms(), target);
  }

  // bool xla_gpu_enable_bf16_3way_gemm = 279;
  if (this->_internal_xla_gpu_enable_bf16_3way_gemm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(279, this->_internal_xla_gpu_enable_bf16_3way_gemm(), target);
  }

  // bool xla_gpu_multi_streamed_windowed_einsum = 280;
  if (this->_internal_xla_gpu_multi_streamed_windowed_einsum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(280, this->_internal_xla_gpu_multi_streamed_windowed_einsum(), target);
  }

  // int64 xla_gpu_gemm_rewrite_size_threshold = 283;
  if (this->_internal_xla_gpu_gemm_rewrite_size_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(283, this->_internal_xla_gpu_gemm_rewrite_size_threshold(), target);
  }

  // bool xla_gpu_require_complete_aot_autotune_results = 284;
  if (this->_internal_xla_gpu_require_complete_aot_autotune_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(284, this->_internal_xla_gpu_require_complete_aot_autotune_results(), target);
  }

  // int32 xla_gpu_cudnn_gemm_fusion_level = 285;
  if (this->_internal_xla_gpu_cudnn_gemm_fusion_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(285, this->_internal_xla_gpu_cudnn_gemm_fusion_level(), target);
  }

  // bool xla_gpu_use_memcpy_local_p2p = 287;
  if (this->_internal_xla_gpu_use_memcpy_local_p2p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(287, this->_internal_xla_gpu_use_memcpy_local_p2p(), target);
  }

  // int64 xla_gpu_autotune_max_solutions = 288;
  if (this->_internal_xla_gpu_autotune_max_solutions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(288, this->_internal_xla_gpu_autotune_max_solutions(), target);
  }

  // repeated .xla.DebugOptions.CollectiveOpType xla_gpu_disable_async_collectives = 289;
  {
    int byte_size = _impl_._xla_gpu_disable_async_collectives_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          289, _impl_.xla_gpu_disable_async_collectives_, byte_size, target);
    }
  }

  // bool xla_dump_large_constants = 290;
  if (this->_internal_xla_dump_large_constants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(290, this->_internal_xla_dump_large_constants(), target);
  }

  // bool xla_gpu_verify_triton_fusion_numerics = 291;
  if (this->_internal_xla_gpu_verify_triton_fusion_numerics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(291, this->_internal_xla_gpu_verify_triton_fusion_numerics(), target);
  }

  // string xla_gpu_dump_autotune_logs_to = 292;
  if (!this->_internal_xla_gpu_dump_autotune_logs_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_dump_autotune_logs_to().data(), static_cast<int>(this->_internal_xla_gpu_dump_autotune_logs_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_dump_autotune_logs_to");
    target = stream->WriteStringMaybeAliased(
        292, this->_internal_xla_gpu_dump_autotune_logs_to(), target);
  }

  // int64 xla_reduce_window_rewrite_base_length = 293;
  if (this->_internal_xla_reduce_window_rewrite_base_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(293, this->_internal_xla_reduce_window_rewrite_base_length(), target);
  }

  // .xla.DebugOptions.WhileLoopUnrolling xla_gpu_enable_while_loop_unrolling = 294;
  if (this->_internal_xla_gpu_enable_while_loop_unrolling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      294, this->_internal_xla_gpu_enable_while_loop_unrolling(), target);
  }

  // string xla_gpu_override_gemm_autotuner = 295;
  if (!this->_internal_xla_gpu_override_gemm_autotuner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_override_gemm_autotuner().data(), static_cast<int>(this->_internal_xla_gpu_override_gemm_autotuner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_override_gemm_autotuner");
    target = stream->WriteStringMaybeAliased(
        295, this->_internal_xla_gpu_override_gemm_autotuner(), target);
  }

  // bool xla_gpu_enable_host_memory_offloading = 296;
  if (this->_internal_xla_gpu_enable_host_memory_offloading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(296, this->_internal_xla_gpu_enable_host_memory_offloading(), target);
  }

  // bool xla_gpu_exclude_nondeterministic_ops = 297;
  if (this->_internal_xla_gpu_exclude_nondeterministic_ops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(297, this->_internal_xla_gpu_exclude_nondeterministic_ops(), target);
  }

  // bool xla_cpu_use_thunk_runtime = 298;
  if (this->_internal_xla_cpu_use_thunk_runtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(298, this->_internal_xla_cpu_use_thunk_runtime(), target);
  }

  // bool xla_llvm_force_inline_before_split = 300;
  if (this->_internal_xla_llvm_force_inline_before_split() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(300, this->_internal_xla_llvm_force_inline_before_split(), target);
  }

  // bool xla_gpu_nccl_terminate_on_error = 301;
  if (this->_internal_xla_gpu_nccl_terminate_on_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(301, this->_internal_xla_gpu_nccl_terminate_on_error(), target);
  }

  // int64 xla_gpu_mlir_emitter_level = 303;
  if (this->_internal_xla_gpu_mlir_emitter_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(303, this->_internal_xla_gpu_mlir_emitter_level(), target);
  }

  // bool xla_gpu_shard_autotuning = 304;
  if (this->_internal_xla_gpu_shard_autotuning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(304, this->_internal_xla_gpu_shard_autotuning(), target);
  }

  // bool xla_gpu_enable_approx_costly_collectives = 305;
  if (this->_internal_xla_gpu_enable_approx_costly_collectives() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(305, this->_internal_xla_gpu_enable_approx_costly_collectives(), target);
  }

  // string xla_gpu_kernel_cache_file = 306;
  if (!this->_internal_xla_gpu_kernel_cache_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_kernel_cache_file().data(), static_cast<int>(this->_internal_xla_gpu_kernel_cache_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_kernel_cache_file");
    target = stream->WriteStringMaybeAliased(
        306, this->_internal_xla_gpu_kernel_cache_file(), target);
  }

  // bool xla_cpu_enable_concurrency_optimized_scheduler = 307;
  if (this->_internal_xla_cpu_enable_concurrency_optimized_scheduler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(307, this->_internal_xla_cpu_enable_concurrency_optimized_scheduler(), target);
  }

  // int32 xla_cpu_prefer_vector_width = 308;
  if (this->_internal_xla_cpu_prefer_vector_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(308, this->_internal_xla_cpu_prefer_vector_width(), target);
  }

  // bool xla_gpu_unsafe_pipelined_loop_annotator = 309;
  if (this->_internal_xla_gpu_unsafe_pipelined_loop_annotator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(309, this->_internal_xla_gpu_unsafe_pipelined_loop_annotator(), target);
  }

  // string xla_gpu_per_fusion_autotune_cache_dir = 310;
  if (!this->_internal_xla_gpu_per_fusion_autotune_cache_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xla_gpu_per_fusion_autotune_cache_dir().data(), static_cast<int>(this->_internal_xla_gpu_per_fusion_autotune_cache_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.xla_gpu_per_fusion_autotune_cache_dir");
    target = stream->WriteStringMaybeAliased(
        310, this->_internal_xla_gpu_per_fusion_autotune_cache_dir(), target);
  }

  // int64 xla_cmd_buffer_trace_cache_size = 311;
  if (this->_internal_xla_cmd_buffer_trace_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(311, this->_internal_xla_cmd_buffer_trace_cache_size(), target);
  }

  // bool xla_gpu_temp_buffer_use_separate_color = 312;
  if (this->_internal_xla_gpu_temp_buffer_use_separate_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(312, this->_internal_xla_gpu_temp_buffer_use_separate_color(), target);
  }

  // bool xla_gpu_run_post_layout_collective_pipeliner = 313;
  if (this->_internal_xla_gpu_run_post_layout_collective_pipeliner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(313, this->_internal_xla_gpu_run_post_layout_collective_pipeliner(), target);
  }

  // repeated string legacy_command_buffer_custom_call_targets = 314;
  for (int i = 0, n = this->_internal_legacy_command_buffer_custom_call_targets_size(); i < n; i++) {
    const auto& s = this->_internal_legacy_command_buffer_custom_call_targets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.DebugOptions.legacy_command_buffer_custom_call_targets");
    target = stream->WriteString(314, s, target);
  }

  // bool xla_syntax_sugar_async_ops = 315;
  if (this->_internal_xla_syntax_sugar_async_ops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(315, this->_internal_xla_syntax_sugar_async_ops(), target);
  }

  // float xla_gpu_autotune_gemm_rtol = 316;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xla_gpu_autotune_gemm_rtol = this->_internal_xla_gpu_autotune_gemm_rtol();
  uint32_t raw_xla_gpu_autotune_gemm_rtol;
  memcpy(&raw_xla_gpu_autotune_gemm_rtol, &tmp_xla_gpu_autotune_gemm_rtol, sizeof(tmp_xla_gpu_autotune_gemm_rtol));
  if (raw_xla_gpu_autotune_gemm_rtol != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(316, this->_internal_xla_gpu_autotune_gemm_rtol(), target);
  }

  // bool xla_enable_command_buffers_during_profiling = 317;
  if (this->_internal_xla_enable_command_buffers_during_profiling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(317, this->_internal_xla_enable_command_buffers_during_profiling(), target);
  }

  // int32 xla_gpu_cudnn_gemm_max_plans = 318;
  if (this->_internal_xla_gpu_cudnn_gemm_max_plans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(318, this->_internal_xla_gpu_cudnn_gemm_max_plans(), target);
  }

  // bool xla_gpu_enable_libnvjitlink = 319;
  if (this->_internal_xla_gpu_enable_libnvjitlink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(319, this->_internal_xla_gpu_enable_libnvjitlink(), target);
  }

  // bool xla_gpu_enable_triton_gemm_int4 = 320;
  if (this->_internal_xla_gpu_enable_triton_gemm_int4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(320, this->_internal_xla_gpu_enable_triton_gemm_int4(), target);
  }

  // bool xla_gpu_async_dot = 321;
  if (this->_internal_xla_gpu_async_dot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(321, this->_internal_xla_gpu_async_dot(), target);
  }

  // bool xla_gpu_unsupported_enable_triton_gemm = 322;
  if (this->_internal_xla_gpu_unsupported_enable_triton_gemm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(322, this->_internal_xla_gpu_unsupported_enable_triton_gemm(), target);
  }

  // int32 xla_cpu_parallel_codegen_split_count = 323;
  if (this->_internal_xla_cpu_parallel_codegen_split_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(323, this->_internal_xla_cpu_parallel_codegen_split_count(), target);
  }

  // .xla.DebugOptions.AutotuneCacheMode xla_gpu_experimental_autotune_cache_mode = 324;
  if (this->_internal_xla_gpu_experimental_autotune_cache_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      324, this->_internal_xla_gpu_experimental_autotune_cache_mode(), target);
  }

  // bool xla_gpu_experimental_enable_triton_softmax_priority_fusion = 325;
  if (this->_internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(325, this->_internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion(), target);
  }

  // bool xla_gpu_enable_pgle_accuracy_checker = 326;
  if (this->_internal_xla_gpu_enable_pgle_accuracy_checker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(326, this->_internal_xla_gpu_enable_pgle_accuracy_checker(), target);
  }

  // int32 xla_gpu_executable_warn_stuck_timeout_seconds = 327;
  if (this->_internal_xla_gpu_executable_warn_stuck_timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(327, this->_internal_xla_gpu_executable_warn_stuck_timeout_seconds(), target);
  }

  // int32 xla_gpu_executable_terminate_timeout_seconds = 328;
  if (this->_internal_xla_gpu_executable_terminate_timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(328, this->_internal_xla_gpu_executable_terminate_timeout_seconds(), target);
  }

  // bool xla_gpu_experimental_disable_binary_libraries = 329;
  if (this->_internal_xla_gpu_experimental_disable_binary_libraries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(329, this->_internal_xla_gpu_experimental_disable_binary_libraries(), target);
  }

  // bool xla_experimental_ignore_channel_id = 330;
  if (this->_internal_xla_experimental_ignore_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(330, this->_internal_xla_experimental_ignore_channel_id(), target);
  }

  // map<string, string> xla_backend_extra_options = 500;
  if (!this->_internal_xla_backend_extra_options().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_xla_backend_extra_options();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xla.DebugOptions.XlaBackendExtraOptionsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xla.DebugOptions.XlaBackendExtraOptionsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(500, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(500, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.DebugOptions)
  return target;
}

size_t DebugOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DebugOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string xla_disable_hlo_passes = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.xla_disable_hlo_passes_.size());
  for (int i = 0, n = _impl_.xla_disable_hlo_passes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.xla_disable_hlo_passes_.Get(i));
  }

  // repeated string xla_enable_hlo_passes_only = 124;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.xla_enable_hlo_passes_only_.size());
  for (int i = 0, n = _impl_.xla_enable_hlo_passes_only_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.xla_enable_hlo_passes_only_.Get(i));
  }

  // repeated string xla_gpu_ptx_file = 127;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.xla_gpu_ptx_file_.size());
  for (int i = 0, n = _impl_.xla_gpu_ptx_file_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.xla_gpu_ptx_file_.Get(i));
  }

  // repeated string xla_gpu_llvm_ir_file = 150;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.xla_gpu_llvm_ir_file_.size());
  for (int i = 0, n = _impl_.xla_gpu_llvm_ir_file_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.xla_gpu_llvm_ir_file_.Get(i));
  }

  // repeated .xla.DebugOptions.CommandBufferCmdType xla_gpu_enable_command_buffer = 258;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_xla_gpu_enable_command_buffer_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_xla_gpu_enable_command_buffer(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._xla_gpu_enable_command_buffer_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.DebugOptions.CollectiveOpType xla_gpu_disable_async_collectives = 289;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_xla_gpu_disable_async_collectives_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_xla_gpu_disable_async_collectives(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._xla_gpu_disable_async_collectives_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string legacy_command_buffer_custom_call_targets = 314;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.legacy_command_buffer_custom_call_targets_.size());
  for (int i = 0, n = _impl_.legacy_command_buffer_custom_call_targets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.legacy_command_buffer_custom_call_targets_.Get(i));
  }

  // map<string, string> xla_backend_extra_options = 500;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_xla_backend_extra_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_xla_backend_extra_options().begin();
      it != this->_internal_xla_backend_extra_options().end(); ++it) {
    total_size += DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string xla_gpu_cuda_data_dir = 61;
  if (!this->_internal_xla_gpu_cuda_data_dir().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_cuda_data_dir());
  }

  // string xla_dump_to = 109;
  if (!this->_internal_xla_dump_to().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_dump_to());
  }

  // string xla_dump_hlo_module_re = 110;
  if (!this->_internal_xla_dump_hlo_module_re().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_dump_hlo_module_re());
  }

  // string xla_dump_hlo_pass_re = 111;
  if (!this->_internal_xla_dump_hlo_pass_re().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_dump_hlo_pass_re());
  }

  // string xla_gpu_algorithm_denylist_path = 128;
  if (!this->_internal_xla_gpu_algorithm_denylist_path().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_algorithm_denylist_path());
  }

  // string xla_gpu_asm_extra_flags = 141;
  if (!this->_internal_xla_gpu_asm_extra_flags().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_asm_extra_flags());
  }

  // string xla_dump_hlo_pipeline_re = 154;
  if (!this->_internal_xla_dump_hlo_pipeline_re().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_dump_hlo_pipeline_re());
  }

  // string xla_gpu_pgle_profile_file_or_directory_path = 210;
  if (!this->_internal_xla_gpu_pgle_profile_file_or_directory_path().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_pgle_profile_file_or_directory_path());
  }

  // string xla_gpu_dump_autotune_results_to = 222;
  if (!this->_internal_xla_gpu_dump_autotune_results_to().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_dump_autotune_results_to());
  }

  // string xla_gpu_load_autotune_results_from = 223;
  if (!this->_internal_xla_gpu_load_autotune_results_from().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_load_autotune_results_from());
  }

  // string xla_gpu_target_config_filename = 261;
  if (!this->_internal_xla_gpu_target_config_filename().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_target_config_filename());
  }

  // string xla_gpu_enable_custom_fusions_re = 264;
  if (!this->_internal_xla_gpu_enable_custom_fusions_re().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_enable_custom_fusions_re());
  }

  // string xla_gpu_dump_autotune_logs_to = 292;
  if (!this->_internal_xla_gpu_dump_autotune_logs_to().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_dump_autotune_logs_to());
  }

  // string xla_gpu_override_gemm_autotuner = 295;
  if (!this->_internal_xla_gpu_override_gemm_autotuner().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_override_gemm_autotuner());
  }

  // string xla_gpu_kernel_cache_file = 306;
  if (!this->_internal_xla_gpu_kernel_cache_file().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_kernel_cache_file());
  }

  // string xla_gpu_per_fusion_autotune_cache_dir = 310;
  if (!this->_internal_xla_gpu_per_fusion_autotune_cache_dir().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xla_gpu_per_fusion_autotune_cache_dir());
  }

  // int32 xla_backend_optimization_level = 31;
  if (this->_internal_xla_backend_optimization_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_backend_optimization_level());
  }

  // bool xla_hlo_profile = 9;
  if (this->_internal_xla_hlo_profile() != 0) {
    total_size += 1 + 1;
  }

  // bool xla_disable_all_hlo_passes = 104;
  if (this->_internal_xla_disable_all_hlo_passes() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_embed_ir_in_executable = 33;
  if (this->_internal_xla_embed_ir_in_executable() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_eliminate_hlo_implicit_broadcast = 35;
  if (this->_internal_xla_eliminate_hlo_implicit_broadcast() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_multi_thread_eigen = 60;
  if (this->_internal_xla_cpu_multi_thread_eigen() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_ftz = 62;
  if (this->_internal_xla_gpu_ftz() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_llvm_enable_alias_scope_metadata = 70;
  if (this->_internal_xla_llvm_enable_alias_scope_metadata() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_llvm_enable_noalias_metadata = 71;
  if (this->_internal_xla_llvm_enable_noalias_metadata() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_llvm_enable_invariant_load_metadata = 72;
  if (this->_internal_xla_llvm_enable_invariant_load_metadata() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_llvm_disable_expensive_passes = 73;
  if (this->_internal_xla_llvm_disable_expensive_passes() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_test_all_output_layouts = 90;
  if (this->_internal_xla_test_all_output_layouts() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_test_all_input_layouts = 91;
  if (this->_internal_xla_test_all_input_layouts() != 0) {
    total_size += 2 + 1;
  }

  // int32 xla_force_host_platform_device_count = 102;
  if (this->_internal_xla_force_host_platform_device_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_force_host_platform_device_count());
  }

  // bool xla_hlo_graph_sharding_color = 92;
  if (this->_internal_xla_hlo_graph_sharding_color() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_use_mkl_dnn = 97;
  if (this->_internal_xla_cpu_use_mkl_dnn() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_fast_min_max = 100;
  if (this->_internal_xla_gpu_enable_fast_min_max() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_allow_excess_precision = 122;
  if (this->_internal_xla_allow_excess_precision() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_crash_on_verification_failures = 101;
  if (this->_internal_xla_gpu_crash_on_verification_failures() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_disable_gpuasm_optimizations = 103;
  if (this->_internal_xla_gpu_disable_gpuasm_optimizations() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_hlo_evaluator_use_fast_path = 106;
  if (this->_internal_xla_hlo_evaluator_use_fast_path() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_allow_scalar_index_dynamic_ops = 107;
  if (this->_internal_xla_allow_scalar_index_dynamic_ops() != 0) {
    total_size += 2 + 1;
  }

  // .xla.DebugOptions.StepMarkerLocation xla_step_marker_location = 108;
  if (this->_internal_xla_step_marker_location() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_xla_step_marker_location());
  }

  // bool xla_dump_hlo_as_text = 112;
  if (this->_internal_xla_dump_hlo_as_text() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_hlo_as_proto = 113;
  if (this->_internal_xla_dump_hlo_as_proto() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_hlo_as_dot = 114;
  if (this->_internal_xla_dump_hlo_as_dot() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_hlo_as_url = 115;
  if (this->_internal_xla_dump_hlo_as_url() != 0) {
    total_size += 2 + 1;
  }

  // int32 xla_gpu_autotune_level = 123;
  if (this->_internal_xla_gpu_autotune_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_autotune_level());
  }

  // bool xla_dump_hlo_as_html = 116;
  if (this->_internal_xla_dump_hlo_as_html() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_fusion_visualization = 149;
  if (this->_internal_xla_dump_fusion_visualization() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_hlo_snapshots = 118;
  if (this->_internal_xla_dump_hlo_snapshots() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_include_timestamp = 131;
  if (this->_internal_xla_dump_include_timestamp() != 0) {
    total_size += 2 + 1;
  }

  // int32 xla_dump_max_hlo_modules = 132;
  if (this->_internal_xla_dump_max_hlo_modules() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_dump_max_hlo_modules());
  }

  // int32 xla_multiheap_size_constraint_per_heap = 142;
  if (this->_internal_xla_multiheap_size_constraint_per_heap() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_multiheap_size_constraint_per_heap());
  }

  // bool xla_dump_module_metadata = 144;
  if (this->_internal_xla_dump_module_metadata() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_compress_protos = 151;
  if (this->_internal_xla_dump_compress_protos() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_hlo_as_long_text = 164;
  if (this->_internal_xla_dump_hlo_as_long_text() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_force_conv_nchw = 125;
  if (this->_internal_xla_gpu_force_conv_nchw() != 0) {
    total_size += 2 + 1;
  }

  // int32 xla_gpu_force_compilation_parallelism = 147;
  if (this->_internal_xla_gpu_force_compilation_parallelism() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_force_compilation_parallelism());
  }

  // bool xla_gpu_force_conv_nhwc = 146;
  if (this->_internal_xla_gpu_force_conv_nhwc() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_dump_llvmir = 155;
  if (this->_internal_xla_gpu_dump_llvmir() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_enable_mlir_pretty_form = 185;
  if (this->_internal_xla_dump_enable_mlir_pretty_form() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_tpu_detect_nan = 135;
  if (this->_internal_xla_tpu_detect_nan() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_gpu_all_reduce_combine_threshold_bytes = 157;
  if (this->_internal_xla_gpu_all_reduce_combine_threshold_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_all_reduce_combine_threshold_bytes());
  }

  // int64 xla_gpu_nccl_termination_timeout_seconds = 163;
  if (this->_internal_xla_gpu_nccl_termination_timeout_seconds() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_nccl_termination_timeout_seconds());
  }

  // int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host = 159;
  if (this->_internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host());
  }

  // bool xla_tpu_detect_inf = 136;
  if (this->_internal_xla_tpu_detect_inf() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_enable_xprof_traceme = 137;
  if (this->_internal_xla_cpu_enable_xprof_traceme() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found = 138;
  if (this->_internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_detailed_logging = 252;
  if (this->_internal_xla_detailed_logging() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_gpu_redzone_scratch_max_megabytes = 167;
  if (this->_internal_xla_gpu_redzone_scratch_max_megabytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_redzone_scratch_max_megabytes());
  }

  // bool xla_cpu_fast_math_honor_functions = 129;
  if (this->_internal_xla_cpu_fast_math_honor_functions() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_fast_math_honor_infs = 121;
  if (this->_internal_xla_cpu_fast_math_honor_infs() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_fast_math_honor_nans = 120;
  if (this->_internal_xla_cpu_fast_math_honor_nans() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_use_thunk_runtime = 298;
  if (this->_internal_xla_cpu_use_thunk_runtime() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_enable_concurrency_optimized_scheduler = 307;
  if (this->_internal_xla_cpu_enable_concurrency_optimized_scheduler() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_enable_fast_math = 99;
  if (this->_internal_xla_cpu_enable_fast_math() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_enable_fast_min_max = 140;
  if (this->_internal_xla_cpu_enable_fast_min_max() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_fast_math_honor_division = 126;
  if (this->_internal_xla_cpu_fast_math_honor_division() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_disable_metadata = 153;
  if (this->_internal_xla_dump_disable_metadata() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_strict_conv_algorithm_picker = 156;
  if (this->_internal_xla_gpu_strict_conv_algorithm_picker() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_custom_fusions = 263;
  if (this->_internal_xla_gpu_enable_custom_fusions() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_dynamic_slice_fusion = 105;
  if (this->_internal_xla_gpu_enable_dynamic_slice_fusion() != 0) {
    total_size += 2 + 1;
  }

  // .xla.DebugOptions.ShapeChecks xla_gpu_shape_checks = 170;
  if (this->_internal_xla_gpu_shape_checks() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_xla_gpu_shape_checks());
  }

  // bool xla_gpu_enable_shared_constants = 165;
  if (this->_internal_xla_gpu_enable_shared_constants() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_cublaslt = 166;
  if (this->_internal_xla_gpu_enable_cublaslt() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_graph_enable_concurrent_region = 215;
  if (this->_internal_xla_gpu_graph_enable_concurrent_region() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_use_acl = 174;
  if (this->_internal_xla_cpu_use_acl() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_strict_dot_conv_math = 175;
  if (this->_internal_xla_cpu_strict_dot_conv_math() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_use_runtime_fusion = 181;
  if (this->_internal_xla_gpu_use_runtime_fusion() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_latency_hiding_schedule = 182;
  if (this->_internal_xla_dump_latency_hiding_schedule() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_enable_mlir_tiling_and_fusion = 184;
  if (this->_internal_xla_cpu_enable_mlir_tiling_and_fusion() != 0) {
    total_size += 2 + 1;
  }

  // .xla.DebugOptions.PartitioningAlgorithm xla_partitioning_algorithm = 187;
  if (this->_internal_xla_partitioning_algorithm() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_xla_partitioning_algorithm());
  }

  // bool xla_cpu_enable_custom_matmul_tiling = 195;
  if (this->_internal_xla_cpu_enable_custom_matmul_tiling() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_enable_mlir_fusion_outlining = 192;
  if (this->_internal_xla_cpu_enable_mlir_fusion_outlining() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_cpu_enable_experimental_deallocation = 191;
  if (this->_internal_xla_cpu_enable_experimental_deallocation() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_latency_hiding_scheduler = 186;
  if (this->_internal_xla_gpu_enable_latency_hiding_scheduler() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_cpu_matmul_tiling_m_dim = 196;
  if (this->_internal_xla_cpu_matmul_tiling_m_dim() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_cpu_matmul_tiling_m_dim());
  }

  // int64 xla_cpu_matmul_tiling_n_dim = 197;
  if (this->_internal_xla_cpu_matmul_tiling_n_dim() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_cpu_matmul_tiling_n_dim());
  }

  // int64 xla_cpu_matmul_tiling_k_dim = 198;
  if (this->_internal_xla_cpu_matmul_tiling_k_dim() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_cpu_matmul_tiling_k_dim());
  }

  // int32 xla_gpu_collective_inflation_factor = 205;
  if (this->_internal_xla_gpu_collective_inflation_factor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_collective_inflation_factor());
  }

  // int32 xla_gpu_graph_min_graph_size = 208;
  if (this->_internal_xla_gpu_graph_min_graph_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_graph_min_graph_size());
  }

  // int64 xla_gpu_all_gather_combine_threshold_bytes = 212;
  if (this->_internal_xla_gpu_all_gather_combine_threshold_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_all_gather_combine_threshold_bytes());
  }

  // int64 xla_gpu_reduce_scatter_combine_threshold_bytes = 213;
  if (this->_internal_xla_gpu_reduce_scatter_combine_threshold_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_reduce_scatter_combine_threshold_bytes());
  }

  // bool xla_gpu_enable_cudnn_frontend = 160;
  if (this->_internal_xla_gpu_enable_cudnn_frontend() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_cudnn_fmha = 218;
  if (this->_internal_xla_gpu_enable_cudnn_fmha() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_fused_attention_use_cudnn_rng = 235;
  if (this->_internal_xla_gpu_fused_attention_use_cudnn_rng() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_cudnn_layer_norm = 262;
  if (this->_internal_xla_gpu_enable_cudnn_layer_norm() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_run_post_layout_collective_pipeliner = 313;
  if (this->_internal_xla_gpu_run_post_layout_collective_pipeliner() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_triton_gemm = 188;
  if (this->_internal_xla_gpu_enable_triton_gemm() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_cudnn_int8x32_convolution_reordering = 189;
  if (this->_internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_triton_gemm_any = 190;
  if (this->_internal_xla_gpu_triton_gemm_any() != 0) {
    total_size += 2 + 1;
  }

  // int32 xla_gpu_auto_spmd_partitioning_memory_budget_gb = 224;
  if (this->_internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb());
  }

  // bool xla_gpu_exhaustive_tiling_search = 219;
  if (this->_internal_xla_gpu_exhaustive_tiling_search() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_priority_fusion = 221;
  if (this->_internal_xla_gpu_enable_priority_fusion() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_triton_gemm_disable_reduced_precision_reduction = 226;
  if (this->_internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_dump_autotuned_gemm_fusions = 232;
  if (this->_internal_xla_gpu_dump_autotuned_gemm_fusions() != 0) {
    total_size += 2 + 1;
  }

  // float xla_gpu_auto_spmd_partitioning_memory_budget_ratio = 225;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio = this->_internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio();
  uint32_t raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio;
  memcpy(&raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio, &tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio, sizeof(tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio));
  if (raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio != 0) {
    total_size += 2 + 4;
  }

  // bool xla_gpu_enable_highest_priority_async_stream = 216;
  if (this->_internal_xla_gpu_enable_highest_priority_async_stream() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_analytical_latency_estimator = 255;
  if (this->_internal_xla_gpu_enable_analytical_latency_estimator() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_lhs_enable_gpu_async_tracker = 204;
  if (this->_internal_xla_gpu_lhs_enable_gpu_async_tracker() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_pipelined_collectives = 239;
  if (this->_internal_xla_gpu_enable_pipelined_collectives() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_gpu_redzone_padding_bytes = 228;
  if (this->_internal_xla_gpu_redzone_padding_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_redzone_padding_bytes());
  }

  // int32 xla_gpu_triton_fusion_level = 229;
  if (this->_internal_xla_gpu_triton_fusion_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_triton_fusion_level());
  }

  // bool xla_gpu_enable_pipelined_all_reduce = 217;
  if (this->_internal_xla_gpu_enable_pipelined_all_reduce() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_pipelined_all_gather = 227;
  if (this->_internal_xla_gpu_enable_pipelined_all_gather() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_pipelined_reduce_scatter = 231;
  if (this->_internal_xla_gpu_enable_pipelined_reduce_scatter() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_pipelined_p2p = 246;
  if (this->_internal_xla_gpu_enable_pipelined_p2p() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_enable_dumping = 253;
  if (this->_internal_xla_enable_dumping() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_llvm_module_compilation_parallelism = 268;
  if (this->_internal_xla_gpu_enable_llvm_module_compilation_parallelism() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_deterministic_ops = 148;
  if (this->_internal_xla_gpu_deterministic_ops() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_all_gather_combine_by_dim = 254;
  if (this->_internal_xla_gpu_enable_all_gather_combine_by_dim() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_copy_insertion_use_region_analysis = 236;
  if (this->_internal_xla_gpu_copy_insertion_use_region_analysis() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_collect_cost_model_stats = 240;
  if (this->_internal_xla_gpu_collect_cost_model_stats() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_split_k_autotuning = 241;
  if (this->_internal_xla_gpu_enable_split_k_autotuning() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_reduction_epilogue_fusion = 243;
  if (this->_internal_xla_gpu_enable_reduction_epilogue_fusion() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_gpu_collective_permute_decomposer_threshold = 237;
  if (this->_internal_xla_gpu_collective_permute_decomposer_threshold() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_collective_permute_decomposer_threshold());
  }

  // bool xla_gpu_enable_reduce_scatter_combine_by_dim = 257;
  if (this->_internal_xla_gpu_enable_reduce_scatter_combine_by_dim() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_reassociation_for_converted_ar = 209;
  if (this->_internal_xla_gpu_enable_reassociation_for_converted_ar() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_while_loop_reduce_scatter_code_motion = 203;
  if (this->_internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_llvm_force_inline_before_split = 300;
  if (this->_internal_xla_llvm_force_inline_before_split() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_experimental_disable_binary_libraries = 329;
  if (this->_internal_xla_gpu_experimental_disable_binary_libraries() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_experimental_enable_triton_softmax_priority_fusion = 325;
  if (this->_internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_unsupported_enable_triton_gemm = 322;
  if (this->_internal_xla_gpu_unsupported_enable_triton_gemm() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_hlo_graph_addresses = 2;
  if (this->_internal_xla_hlo_graph_addresses() != 0) {
    total_size += 1 + 1;
  }

  // bool xla_gpu_enable_nccl_clique_optimization = 244;
  if (this->_internal_xla_gpu_enable_nccl_clique_optimization() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_mock_custom_calls = 245;
  if (this->_internal_xla_gpu_mock_custom_calls() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_cublas_fallback = 247;
  if (this->_internal_xla_gpu_cublas_fallback() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_while_loop_double_buffering = 248;
  if (this->_internal_xla_gpu_enable_while_loop_double_buffering() != 0) {
    total_size += 2 + 1;
  }

  // int32 xla_gpu_llvm_verification_level = 256;
  if (this->_internal_xla_gpu_llvm_verification_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_llvm_verification_level());
  }

  // int64 xla_debug_buffer_assignment_show_max = 251;
  if (this->_internal_xla_debug_buffer_assignment_show_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_debug_buffer_assignment_show_max());
  }

  // bool xla_gpu_ensure_minor_dot_contraction_dims = 249;
  if (this->_internal_xla_gpu_ensure_minor_dot_contraction_dims() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_filter_kernels_spilling_registers_on_autotuning = 250;
  if (this->_internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_cub_radix_sort = 259;
  if (this->_internal_xla_gpu_enable_cub_radix_sort() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_triton_hopper = 266;
  if (this->_internal_xla_gpu_enable_triton_hopper() != 0) {
    total_size += 2 + 1;
  }

  // int32 xla_gpu_memory_limit_slop_factor = 260;
  if (this->_internal_xla_gpu_memory_limit_slop_factor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_memory_limit_slop_factor());
  }

  // int64 xla_gpu_threshold_for_windowed_einsum_mib = 265;
  if (this->_internal_xla_gpu_threshold_for_windowed_einsum_mib() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_threshold_for_windowed_einsum_mib());
  }

  // int64 xla_gpu_nccl_collective_max_nchannels = 273;
  if (this->_internal_xla_gpu_nccl_collective_max_nchannels() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_nccl_collective_max_nchannels());
  }

  // bool xla_gpu_enable_nccl_user_buffers = 267;
  if (this->_internal_xla_gpu_enable_nccl_user_buffers() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_nccl_comm_splitting = 272;
  if (this->_internal_xla_gpu_enable_nccl_comm_splitting() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_nccl_per_stream_comms = 276;
  if (this->_internal_xla_gpu_enable_nccl_per_stream_comms() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_libnvptxcompiler = 269;
  if (this->_internal_xla_gpu_enable_libnvptxcompiler() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_dot_strength_reduction = 270;
  if (this->_internal_xla_gpu_enable_dot_strength_reduction() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_multi_streamed_windowed_einsum = 280;
  if (this->_internal_xla_gpu_multi_streamed_windowed_einsum() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_bf16_6way_gemm = 271;
  if (this->_internal_xla_gpu_enable_bf16_6way_gemm() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_bf16_3way_gemm = 279;
  if (this->_internal_xla_gpu_enable_bf16_3way_gemm() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_gpu_nccl_p2p_max_nchannels = 274;
  if (this->_internal_xla_gpu_nccl_p2p_max_nchannels() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_nccl_p2p_max_nchannels());
  }

  // int64 xla_gpu_gemm_rewrite_size_threshold = 283;
  if (this->_internal_xla_gpu_gemm_rewrite_size_threshold() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_gemm_rewrite_size_threshold());
  }

  // int32 xla_gpu_cudnn_gemm_fusion_level = 285;
  if (this->_internal_xla_gpu_cudnn_gemm_fusion_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_cudnn_gemm_fusion_level());
  }

  // bool xla_gpu_require_complete_aot_autotune_results = 284;
  if (this->_internal_xla_gpu_require_complete_aot_autotune_results() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_use_memcpy_local_p2p = 287;
  if (this->_internal_xla_gpu_use_memcpy_local_p2p() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_dump_large_constants = 290;
  if (this->_internal_xla_dump_large_constants() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_verify_triton_fusion_numerics = 291;
  if (this->_internal_xla_gpu_verify_triton_fusion_numerics() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_gpu_autotune_max_solutions = 288;
  if (this->_internal_xla_gpu_autotune_max_solutions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_autotune_max_solutions());
  }

  // int64 xla_reduce_window_rewrite_base_length = 293;
  if (this->_internal_xla_reduce_window_rewrite_base_length() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_reduce_window_rewrite_base_length());
  }

  // .xla.DebugOptions.WhileLoopUnrolling xla_gpu_enable_while_loop_unrolling = 294;
  if (this->_internal_xla_gpu_enable_while_loop_unrolling() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_xla_gpu_enable_while_loop_unrolling());
  }

  // bool xla_gpu_enable_host_memory_offloading = 296;
  if (this->_internal_xla_gpu_enable_host_memory_offloading() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_exclude_nondeterministic_ops = 297;
  if (this->_internal_xla_gpu_exclude_nondeterministic_ops() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_nccl_terminate_on_error = 301;
  if (this->_internal_xla_gpu_nccl_terminate_on_error() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_shard_autotuning = 304;
  if (this->_internal_xla_gpu_shard_autotuning() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_gpu_mlir_emitter_level = 303;
  if (this->_internal_xla_gpu_mlir_emitter_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_gpu_mlir_emitter_level());
  }

  // int32 xla_cpu_prefer_vector_width = 308;
  if (this->_internal_xla_cpu_prefer_vector_width() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_cpu_prefer_vector_width());
  }

  // bool xla_gpu_enable_approx_costly_collectives = 305;
  if (this->_internal_xla_gpu_enable_approx_costly_collectives() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_unsafe_pipelined_loop_annotator = 309;
  if (this->_internal_xla_gpu_unsafe_pipelined_loop_annotator() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_temp_buffer_use_separate_color = 312;
  if (this->_internal_xla_gpu_temp_buffer_use_separate_color() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_syntax_sugar_async_ops = 315;
  if (this->_internal_xla_syntax_sugar_async_ops() != 0) {
    total_size += 2 + 1;
  }

  // int64 xla_cmd_buffer_trace_cache_size = 311;
  if (this->_internal_xla_cmd_buffer_trace_cache_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_xla_cmd_buffer_trace_cache_size());
  }

  // float xla_gpu_autotune_gemm_rtol = 316;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xla_gpu_autotune_gemm_rtol = this->_internal_xla_gpu_autotune_gemm_rtol();
  uint32_t raw_xla_gpu_autotune_gemm_rtol;
  memcpy(&raw_xla_gpu_autotune_gemm_rtol, &tmp_xla_gpu_autotune_gemm_rtol, sizeof(tmp_xla_gpu_autotune_gemm_rtol));
  if (raw_xla_gpu_autotune_gemm_rtol != 0) {
    total_size += 2 + 4;
  }

  // int32 xla_gpu_cudnn_gemm_max_plans = 318;
  if (this->_internal_xla_gpu_cudnn_gemm_max_plans() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_cudnn_gemm_max_plans());
  }

  // bool xla_enable_command_buffers_during_profiling = 317;
  if (this->_internal_xla_enable_command_buffers_during_profiling() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_libnvjitlink = 319;
  if (this->_internal_xla_gpu_enable_libnvjitlink() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_enable_triton_gemm_int4 = 320;
  if (this->_internal_xla_gpu_enable_triton_gemm_int4() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_gpu_async_dot = 321;
  if (this->_internal_xla_gpu_async_dot() != 0) {
    total_size += 2 + 1;
  }

  // int32 xla_cpu_parallel_codegen_split_count = 323;
  if (this->_internal_xla_cpu_parallel_codegen_split_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_cpu_parallel_codegen_split_count());
  }

  // .xla.DebugOptions.AutotuneCacheMode xla_gpu_experimental_autotune_cache_mode = 324;
  if (this->_internal_xla_gpu_experimental_autotune_cache_mode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_xla_gpu_experimental_autotune_cache_mode());
  }

  // int32 xla_gpu_executable_warn_stuck_timeout_seconds = 327;
  if (this->_internal_xla_gpu_executable_warn_stuck_timeout_seconds() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_executable_warn_stuck_timeout_seconds());
  }

  // int32 xla_gpu_executable_terminate_timeout_seconds = 328;
  if (this->_internal_xla_gpu_executable_terminate_timeout_seconds() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_xla_gpu_executable_terminate_timeout_seconds());
  }

  // bool xla_gpu_enable_pgle_accuracy_checker = 326;
  if (this->_internal_xla_gpu_enable_pgle_accuracy_checker() != 0) {
    total_size += 2 + 1;
  }

  // bool xla_experimental_ignore_channel_id = 330;
  if (this->_internal_xla_experimental_ignore_channel_id() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugOptions::GetClassData() const { return &_class_data_; }


void DebugOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugOptions*>(&to_msg);
  auto& from = static_cast<const DebugOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.DebugOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.xla_disable_hlo_passes_.MergeFrom(from._impl_.xla_disable_hlo_passes_);
  _this->_impl_.xla_enable_hlo_passes_only_.MergeFrom(from._impl_.xla_enable_hlo_passes_only_);
  _this->_impl_.xla_gpu_ptx_file_.MergeFrom(from._impl_.xla_gpu_ptx_file_);
  _this->_impl_.xla_gpu_llvm_ir_file_.MergeFrom(from._impl_.xla_gpu_llvm_ir_file_);
  _this->_impl_.xla_gpu_enable_command_buffer_.MergeFrom(from._impl_.xla_gpu_enable_command_buffer_);
  _this->_impl_.xla_gpu_disable_async_collectives_.MergeFrom(from._impl_.xla_gpu_disable_async_collectives_);
  _this->_impl_.legacy_command_buffer_custom_call_targets_.MergeFrom(from._impl_.legacy_command_buffer_custom_call_targets_);
  _this->_impl_.xla_backend_extra_options_.MergeFrom(from._impl_.xla_backend_extra_options_);
  if (!from._internal_xla_gpu_cuda_data_dir().empty()) {
    _this->_internal_set_xla_gpu_cuda_data_dir(from._internal_xla_gpu_cuda_data_dir());
  }
  if (!from._internal_xla_dump_to().empty()) {
    _this->_internal_set_xla_dump_to(from._internal_xla_dump_to());
  }
  if (!from._internal_xla_dump_hlo_module_re().empty()) {
    _this->_internal_set_xla_dump_hlo_module_re(from._internal_xla_dump_hlo_module_re());
  }
  if (!from._internal_xla_dump_hlo_pass_re().empty()) {
    _this->_internal_set_xla_dump_hlo_pass_re(from._internal_xla_dump_hlo_pass_re());
  }
  if (!from._internal_xla_gpu_algorithm_denylist_path().empty()) {
    _this->_internal_set_xla_gpu_algorithm_denylist_path(from._internal_xla_gpu_algorithm_denylist_path());
  }
  if (!from._internal_xla_gpu_asm_extra_flags().empty()) {
    _this->_internal_set_xla_gpu_asm_extra_flags(from._internal_xla_gpu_asm_extra_flags());
  }
  if (!from._internal_xla_dump_hlo_pipeline_re().empty()) {
    _this->_internal_set_xla_dump_hlo_pipeline_re(from._internal_xla_dump_hlo_pipeline_re());
  }
  if (!from._internal_xla_gpu_pgle_profile_file_or_directory_path().empty()) {
    _this->_internal_set_xla_gpu_pgle_profile_file_or_directory_path(from._internal_xla_gpu_pgle_profile_file_or_directory_path());
  }
  if (!from._internal_xla_gpu_dump_autotune_results_to().empty()) {
    _this->_internal_set_xla_gpu_dump_autotune_results_to(from._internal_xla_gpu_dump_autotune_results_to());
  }
  if (!from._internal_xla_gpu_load_autotune_results_from().empty()) {
    _this->_internal_set_xla_gpu_load_autotune_results_from(from._internal_xla_gpu_load_autotune_results_from());
  }
  if (!from._internal_xla_gpu_target_config_filename().empty()) {
    _this->_internal_set_xla_gpu_target_config_filename(from._internal_xla_gpu_target_config_filename());
  }
  if (!from._internal_xla_gpu_enable_custom_fusions_re().empty()) {
    _this->_internal_set_xla_gpu_enable_custom_fusions_re(from._internal_xla_gpu_enable_custom_fusions_re());
  }
  if (!from._internal_xla_gpu_dump_autotune_logs_to().empty()) {
    _this->_internal_set_xla_gpu_dump_autotune_logs_to(from._internal_xla_gpu_dump_autotune_logs_to());
  }
  if (!from._internal_xla_gpu_override_gemm_autotuner().empty()) {
    _this->_internal_set_xla_gpu_override_gemm_autotuner(from._internal_xla_gpu_override_gemm_autotuner());
  }
  if (!from._internal_xla_gpu_kernel_cache_file().empty()) {
    _this->_internal_set_xla_gpu_kernel_cache_file(from._internal_xla_gpu_kernel_cache_file());
  }
  if (!from._internal_xla_gpu_per_fusion_autotune_cache_dir().empty()) {
    _this->_internal_set_xla_gpu_per_fusion_autotune_cache_dir(from._internal_xla_gpu_per_fusion_autotune_cache_dir());
  }
  if (from._internal_xla_backend_optimization_level() != 0) {
    _this->_internal_set_xla_backend_optimization_level(from._internal_xla_backend_optimization_level());
  }
  if (from._internal_xla_hlo_profile() != 0) {
    _this->_internal_set_xla_hlo_profile(from._internal_xla_hlo_profile());
  }
  if (from._internal_xla_disable_all_hlo_passes() != 0) {
    _this->_internal_set_xla_disable_all_hlo_passes(from._internal_xla_disable_all_hlo_passes());
  }
  if (from._internal_xla_embed_ir_in_executable() != 0) {
    _this->_internal_set_xla_embed_ir_in_executable(from._internal_xla_embed_ir_in_executable());
  }
  if (from._internal_xla_eliminate_hlo_implicit_broadcast() != 0) {
    _this->_internal_set_xla_eliminate_hlo_implicit_broadcast(from._internal_xla_eliminate_hlo_implicit_broadcast());
  }
  if (from._internal_xla_cpu_multi_thread_eigen() != 0) {
    _this->_internal_set_xla_cpu_multi_thread_eigen(from._internal_xla_cpu_multi_thread_eigen());
  }
  if (from._internal_xla_gpu_ftz() != 0) {
    _this->_internal_set_xla_gpu_ftz(from._internal_xla_gpu_ftz());
  }
  if (from._internal_xla_llvm_enable_alias_scope_metadata() != 0) {
    _this->_internal_set_xla_llvm_enable_alias_scope_metadata(from._internal_xla_llvm_enable_alias_scope_metadata());
  }
  if (from._internal_xla_llvm_enable_noalias_metadata() != 0) {
    _this->_internal_set_xla_llvm_enable_noalias_metadata(from._internal_xla_llvm_enable_noalias_metadata());
  }
  if (from._internal_xla_llvm_enable_invariant_load_metadata() != 0) {
    _this->_internal_set_xla_llvm_enable_invariant_load_metadata(from._internal_xla_llvm_enable_invariant_load_metadata());
  }
  if (from._internal_xla_llvm_disable_expensive_passes() != 0) {
    _this->_internal_set_xla_llvm_disable_expensive_passes(from._internal_xla_llvm_disable_expensive_passes());
  }
  if (from._internal_xla_test_all_output_layouts() != 0) {
    _this->_internal_set_xla_test_all_output_layouts(from._internal_xla_test_all_output_layouts());
  }
  if (from._internal_xla_test_all_input_layouts() != 0) {
    _this->_internal_set_xla_test_all_input_layouts(from._internal_xla_test_all_input_layouts());
  }
  if (from._internal_xla_force_host_platform_device_count() != 0) {
    _this->_internal_set_xla_force_host_platform_device_count(from._internal_xla_force_host_platform_device_count());
  }
  if (from._internal_xla_hlo_graph_sharding_color() != 0) {
    _this->_internal_set_xla_hlo_graph_sharding_color(from._internal_xla_hlo_graph_sharding_color());
  }
  if (from._internal_xla_cpu_use_mkl_dnn() != 0) {
    _this->_internal_set_xla_cpu_use_mkl_dnn(from._internal_xla_cpu_use_mkl_dnn());
  }
  if (from._internal_xla_gpu_enable_fast_min_max() != 0) {
    _this->_internal_set_xla_gpu_enable_fast_min_max(from._internal_xla_gpu_enable_fast_min_max());
  }
  if (from._internal_xla_allow_excess_precision() != 0) {
    _this->_internal_set_xla_allow_excess_precision(from._internal_xla_allow_excess_precision());
  }
  if (from._internal_xla_gpu_crash_on_verification_failures() != 0) {
    _this->_internal_set_xla_gpu_crash_on_verification_failures(from._internal_xla_gpu_crash_on_verification_failures());
  }
  if (from._internal_xla_gpu_disable_gpuasm_optimizations() != 0) {
    _this->_internal_set_xla_gpu_disable_gpuasm_optimizations(from._internal_xla_gpu_disable_gpuasm_optimizations());
  }
  if (from._internal_xla_hlo_evaluator_use_fast_path() != 0) {
    _this->_internal_set_xla_hlo_evaluator_use_fast_path(from._internal_xla_hlo_evaluator_use_fast_path());
  }
  if (from._internal_xla_allow_scalar_index_dynamic_ops() != 0) {
    _this->_internal_set_xla_allow_scalar_index_dynamic_ops(from._internal_xla_allow_scalar_index_dynamic_ops());
  }
  if (from._internal_xla_step_marker_location() != 0) {
    _this->_internal_set_xla_step_marker_location(from._internal_xla_step_marker_location());
  }
  if (from._internal_xla_dump_hlo_as_text() != 0) {
    _this->_internal_set_xla_dump_hlo_as_text(from._internal_xla_dump_hlo_as_text());
  }
  if (from._internal_xla_dump_hlo_as_proto() != 0) {
    _this->_internal_set_xla_dump_hlo_as_proto(from._internal_xla_dump_hlo_as_proto());
  }
  if (from._internal_xla_dump_hlo_as_dot() != 0) {
    _this->_internal_set_xla_dump_hlo_as_dot(from._internal_xla_dump_hlo_as_dot());
  }
  if (from._internal_xla_dump_hlo_as_url() != 0) {
    _this->_internal_set_xla_dump_hlo_as_url(from._internal_xla_dump_hlo_as_url());
  }
  if (from._internal_xla_gpu_autotune_level() != 0) {
    _this->_internal_set_xla_gpu_autotune_level(from._internal_xla_gpu_autotune_level());
  }
  if (from._internal_xla_dump_hlo_as_html() != 0) {
    _this->_internal_set_xla_dump_hlo_as_html(from._internal_xla_dump_hlo_as_html());
  }
  if (from._internal_xla_dump_fusion_visualization() != 0) {
    _this->_internal_set_xla_dump_fusion_visualization(from._internal_xla_dump_fusion_visualization());
  }
  if (from._internal_xla_dump_hlo_snapshots() != 0) {
    _this->_internal_set_xla_dump_hlo_snapshots(from._internal_xla_dump_hlo_snapshots());
  }
  if (from._internal_xla_dump_include_timestamp() != 0) {
    _this->_internal_set_xla_dump_include_timestamp(from._internal_xla_dump_include_timestamp());
  }
  if (from._internal_xla_dump_max_hlo_modules() != 0) {
    _this->_internal_set_xla_dump_max_hlo_modules(from._internal_xla_dump_max_hlo_modules());
  }
  if (from._internal_xla_multiheap_size_constraint_per_heap() != 0) {
    _this->_internal_set_xla_multiheap_size_constraint_per_heap(from._internal_xla_multiheap_size_constraint_per_heap());
  }
  if (from._internal_xla_dump_module_metadata() != 0) {
    _this->_internal_set_xla_dump_module_metadata(from._internal_xla_dump_module_metadata());
  }
  if (from._internal_xla_dump_compress_protos() != 0) {
    _this->_internal_set_xla_dump_compress_protos(from._internal_xla_dump_compress_protos());
  }
  if (from._internal_xla_dump_hlo_as_long_text() != 0) {
    _this->_internal_set_xla_dump_hlo_as_long_text(from._internal_xla_dump_hlo_as_long_text());
  }
  if (from._internal_xla_gpu_force_conv_nchw() != 0) {
    _this->_internal_set_xla_gpu_force_conv_nchw(from._internal_xla_gpu_force_conv_nchw());
  }
  if (from._internal_xla_gpu_force_compilation_parallelism() != 0) {
    _this->_internal_set_xla_gpu_force_compilation_parallelism(from._internal_xla_gpu_force_compilation_parallelism());
  }
  if (from._internal_xla_gpu_force_conv_nhwc() != 0) {
    _this->_internal_set_xla_gpu_force_conv_nhwc(from._internal_xla_gpu_force_conv_nhwc());
  }
  if (from._internal_xla_gpu_dump_llvmir() != 0) {
    _this->_internal_set_xla_gpu_dump_llvmir(from._internal_xla_gpu_dump_llvmir());
  }
  if (from._internal_xla_dump_enable_mlir_pretty_form() != 0) {
    _this->_internal_set_xla_dump_enable_mlir_pretty_form(from._internal_xla_dump_enable_mlir_pretty_form());
  }
  if (from._internal_xla_tpu_detect_nan() != 0) {
    _this->_internal_set_xla_tpu_detect_nan(from._internal_xla_tpu_detect_nan());
  }
  if (from._internal_xla_gpu_all_reduce_combine_threshold_bytes() != 0) {
    _this->_internal_set_xla_gpu_all_reduce_combine_threshold_bytes(from._internal_xla_gpu_all_reduce_combine_threshold_bytes());
  }
  if (from._internal_xla_gpu_nccl_termination_timeout_seconds() != 0) {
    _this->_internal_set_xla_gpu_nccl_termination_timeout_seconds(from._internal_xla_gpu_nccl_termination_timeout_seconds());
  }
  if (from._internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host() != 0) {
    _this->_internal_set_xla_gpu_all_reduce_blueconnect_num_devices_per_host(from._internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host());
  }
  if (from._internal_xla_tpu_detect_inf() != 0) {
    _this->_internal_set_xla_tpu_detect_inf(from._internal_xla_tpu_detect_inf());
  }
  if (from._internal_xla_cpu_enable_xprof_traceme() != 0) {
    _this->_internal_set_xla_cpu_enable_xprof_traceme(from._internal_xla_cpu_enable_xprof_traceme());
  }
  if (from._internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() != 0) {
    _this->_internal_set_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found(from._internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found());
  }
  if (from._internal_xla_detailed_logging() != 0) {
    _this->_internal_set_xla_detailed_logging(from._internal_xla_detailed_logging());
  }
  if (from._internal_xla_gpu_redzone_scratch_max_megabytes() != 0) {
    _this->_internal_set_xla_gpu_redzone_scratch_max_megabytes(from._internal_xla_gpu_redzone_scratch_max_megabytes());
  }
  if (from._internal_xla_cpu_fast_math_honor_functions() != 0) {
    _this->_internal_set_xla_cpu_fast_math_honor_functions(from._internal_xla_cpu_fast_math_honor_functions());
  }
  if (from._internal_xla_cpu_fast_math_honor_infs() != 0) {
    _this->_internal_set_xla_cpu_fast_math_honor_infs(from._internal_xla_cpu_fast_math_honor_infs());
  }
  if (from._internal_xla_cpu_fast_math_honor_nans() != 0) {
    _this->_internal_set_xla_cpu_fast_math_honor_nans(from._internal_xla_cpu_fast_math_honor_nans());
  }
  if (from._internal_xla_cpu_use_thunk_runtime() != 0) {
    _this->_internal_set_xla_cpu_use_thunk_runtime(from._internal_xla_cpu_use_thunk_runtime());
  }
  if (from._internal_xla_cpu_enable_concurrency_optimized_scheduler() != 0) {
    _this->_internal_set_xla_cpu_enable_concurrency_optimized_scheduler(from._internal_xla_cpu_enable_concurrency_optimized_scheduler());
  }
  if (from._internal_xla_cpu_enable_fast_math() != 0) {
    _this->_internal_set_xla_cpu_enable_fast_math(from._internal_xla_cpu_enable_fast_math());
  }
  if (from._internal_xla_cpu_enable_fast_min_max() != 0) {
    _this->_internal_set_xla_cpu_enable_fast_min_max(from._internal_xla_cpu_enable_fast_min_max());
  }
  if (from._internal_xla_cpu_fast_math_honor_division() != 0) {
    _this->_internal_set_xla_cpu_fast_math_honor_division(from._internal_xla_cpu_fast_math_honor_division());
  }
  if (from._internal_xla_dump_disable_metadata() != 0) {
    _this->_internal_set_xla_dump_disable_metadata(from._internal_xla_dump_disable_metadata());
  }
  if (from._internal_xla_gpu_strict_conv_algorithm_picker() != 0) {
    _this->_internal_set_xla_gpu_strict_conv_algorithm_picker(from._internal_xla_gpu_strict_conv_algorithm_picker());
  }
  if (from._internal_xla_gpu_enable_custom_fusions() != 0) {
    _this->_internal_set_xla_gpu_enable_custom_fusions(from._internal_xla_gpu_enable_custom_fusions());
  }
  if (from._internal_xla_gpu_enable_dynamic_slice_fusion() != 0) {
    _this->_internal_set_xla_gpu_enable_dynamic_slice_fusion(from._internal_xla_gpu_enable_dynamic_slice_fusion());
  }
  if (from._internal_xla_gpu_shape_checks() != 0) {
    _this->_internal_set_xla_gpu_shape_checks(from._internal_xla_gpu_shape_checks());
  }
  if (from._internal_xla_gpu_enable_shared_constants() != 0) {
    _this->_internal_set_xla_gpu_enable_shared_constants(from._internal_xla_gpu_enable_shared_constants());
  }
  if (from._internal_xla_gpu_enable_cublaslt() != 0) {
    _this->_internal_set_xla_gpu_enable_cublaslt(from._internal_xla_gpu_enable_cublaslt());
  }
  if (from._internal_xla_gpu_graph_enable_concurrent_region() != 0) {
    _this->_internal_set_xla_gpu_graph_enable_concurrent_region(from._internal_xla_gpu_graph_enable_concurrent_region());
  }
  if (from._internal_xla_cpu_use_acl() != 0) {
    _this->_internal_set_xla_cpu_use_acl(from._internal_xla_cpu_use_acl());
  }
  if (from._internal_xla_cpu_strict_dot_conv_math() != 0) {
    _this->_internal_set_xla_cpu_strict_dot_conv_math(from._internal_xla_cpu_strict_dot_conv_math());
  }
  if (from._internal_xla_gpu_use_runtime_fusion() != 0) {
    _this->_internal_set_xla_gpu_use_runtime_fusion(from._internal_xla_gpu_use_runtime_fusion());
  }
  if (from._internal_xla_dump_latency_hiding_schedule() != 0) {
    _this->_internal_set_xla_dump_latency_hiding_schedule(from._internal_xla_dump_latency_hiding_schedule());
  }
  if (from._internal_xla_cpu_enable_mlir_tiling_and_fusion() != 0) {
    _this->_internal_set_xla_cpu_enable_mlir_tiling_and_fusion(from._internal_xla_cpu_enable_mlir_tiling_and_fusion());
  }
  if (from._internal_xla_partitioning_algorithm() != 0) {
    _this->_internal_set_xla_partitioning_algorithm(from._internal_xla_partitioning_algorithm());
  }
  if (from._internal_xla_cpu_enable_custom_matmul_tiling() != 0) {
    _this->_internal_set_xla_cpu_enable_custom_matmul_tiling(from._internal_xla_cpu_enable_custom_matmul_tiling());
  }
  if (from._internal_xla_cpu_enable_mlir_fusion_outlining() != 0) {
    _this->_internal_set_xla_cpu_enable_mlir_fusion_outlining(from._internal_xla_cpu_enable_mlir_fusion_outlining());
  }
  if (from._internal_xla_cpu_enable_experimental_deallocation() != 0) {
    _this->_internal_set_xla_cpu_enable_experimental_deallocation(from._internal_xla_cpu_enable_experimental_deallocation());
  }
  if (from._internal_xla_gpu_enable_latency_hiding_scheduler() != 0) {
    _this->_internal_set_xla_gpu_enable_latency_hiding_scheduler(from._internal_xla_gpu_enable_latency_hiding_scheduler());
  }
  if (from._internal_xla_cpu_matmul_tiling_m_dim() != 0) {
    _this->_internal_set_xla_cpu_matmul_tiling_m_dim(from._internal_xla_cpu_matmul_tiling_m_dim());
  }
  if (from._internal_xla_cpu_matmul_tiling_n_dim() != 0) {
    _this->_internal_set_xla_cpu_matmul_tiling_n_dim(from._internal_xla_cpu_matmul_tiling_n_dim());
  }
  if (from._internal_xla_cpu_matmul_tiling_k_dim() != 0) {
    _this->_internal_set_xla_cpu_matmul_tiling_k_dim(from._internal_xla_cpu_matmul_tiling_k_dim());
  }
  if (from._internal_xla_gpu_collective_inflation_factor() != 0) {
    _this->_internal_set_xla_gpu_collective_inflation_factor(from._internal_xla_gpu_collective_inflation_factor());
  }
  if (from._internal_xla_gpu_graph_min_graph_size() != 0) {
    _this->_internal_set_xla_gpu_graph_min_graph_size(from._internal_xla_gpu_graph_min_graph_size());
  }
  if (from._internal_xla_gpu_all_gather_combine_threshold_bytes() != 0) {
    _this->_internal_set_xla_gpu_all_gather_combine_threshold_bytes(from._internal_xla_gpu_all_gather_combine_threshold_bytes());
  }
  if (from._internal_xla_gpu_reduce_scatter_combine_threshold_bytes() != 0) {
    _this->_internal_set_xla_gpu_reduce_scatter_combine_threshold_bytes(from._internal_xla_gpu_reduce_scatter_combine_threshold_bytes());
  }
  if (from._internal_xla_gpu_enable_cudnn_frontend() != 0) {
    _this->_internal_set_xla_gpu_enable_cudnn_frontend(from._internal_xla_gpu_enable_cudnn_frontend());
  }
  if (from._internal_xla_gpu_enable_cudnn_fmha() != 0) {
    _this->_internal_set_xla_gpu_enable_cudnn_fmha(from._internal_xla_gpu_enable_cudnn_fmha());
  }
  if (from._internal_xla_gpu_fused_attention_use_cudnn_rng() != 0) {
    _this->_internal_set_xla_gpu_fused_attention_use_cudnn_rng(from._internal_xla_gpu_fused_attention_use_cudnn_rng());
  }
  if (from._internal_xla_gpu_enable_cudnn_layer_norm() != 0) {
    _this->_internal_set_xla_gpu_enable_cudnn_layer_norm(from._internal_xla_gpu_enable_cudnn_layer_norm());
  }
  if (from._internal_xla_gpu_run_post_layout_collective_pipeliner() != 0) {
    _this->_internal_set_xla_gpu_run_post_layout_collective_pipeliner(from._internal_xla_gpu_run_post_layout_collective_pipeliner());
  }
  if (from._internal_xla_gpu_enable_triton_gemm() != 0) {
    _this->_internal_set_xla_gpu_enable_triton_gemm(from._internal_xla_gpu_enable_triton_gemm());
  }
  if (from._internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering() != 0) {
    _this->_internal_set_xla_gpu_enable_cudnn_int8x32_convolution_reordering(from._internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering());
  }
  if (from._internal_xla_gpu_triton_gemm_any() != 0) {
    _this->_internal_set_xla_gpu_triton_gemm_any(from._internal_xla_gpu_triton_gemm_any());
  }
  if (from._internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb() != 0) {
    _this->_internal_set_xla_gpu_auto_spmd_partitioning_memory_budget_gb(from._internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb());
  }
  if (from._internal_xla_gpu_exhaustive_tiling_search() != 0) {
    _this->_internal_set_xla_gpu_exhaustive_tiling_search(from._internal_xla_gpu_exhaustive_tiling_search());
  }
  if (from._internal_xla_gpu_enable_priority_fusion() != 0) {
    _this->_internal_set_xla_gpu_enable_priority_fusion(from._internal_xla_gpu_enable_priority_fusion());
  }
  if (from._internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction() != 0) {
    _this->_internal_set_xla_gpu_triton_gemm_disable_reduced_precision_reduction(from._internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction());
  }
  if (from._internal_xla_gpu_dump_autotuned_gemm_fusions() != 0) {
    _this->_internal_set_xla_gpu_dump_autotuned_gemm_fusions(from._internal_xla_gpu_dump_autotuned_gemm_fusions());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio = from._internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio();
  uint32_t raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio;
  memcpy(&raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio, &tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio, sizeof(tmp_xla_gpu_auto_spmd_partitioning_memory_budget_ratio));
  if (raw_xla_gpu_auto_spmd_partitioning_memory_budget_ratio != 0) {
    _this->_internal_set_xla_gpu_auto_spmd_partitioning_memory_budget_ratio(from._internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio());
  }
  if (from._internal_xla_gpu_enable_highest_priority_async_stream() != 0) {
    _this->_internal_set_xla_gpu_enable_highest_priority_async_stream(from._internal_xla_gpu_enable_highest_priority_async_stream());
  }
  if (from._internal_xla_gpu_enable_analytical_latency_estimator() != 0) {
    _this->_internal_set_xla_gpu_enable_analytical_latency_estimator(from._internal_xla_gpu_enable_analytical_latency_estimator());
  }
  if (from._internal_xla_gpu_lhs_enable_gpu_async_tracker() != 0) {
    _this->_internal_set_xla_gpu_lhs_enable_gpu_async_tracker(from._internal_xla_gpu_lhs_enable_gpu_async_tracker());
  }
  if (from._internal_xla_gpu_enable_pipelined_collectives() != 0) {
    _this->_internal_set_xla_gpu_enable_pipelined_collectives(from._internal_xla_gpu_enable_pipelined_collectives());
  }
  if (from._internal_xla_gpu_redzone_padding_bytes() != 0) {
    _this->_internal_set_xla_gpu_redzone_padding_bytes(from._internal_xla_gpu_redzone_padding_bytes());
  }
  if (from._internal_xla_gpu_triton_fusion_level() != 0) {
    _this->_internal_set_xla_gpu_triton_fusion_level(from._internal_xla_gpu_triton_fusion_level());
  }
  if (from._internal_xla_gpu_enable_pipelined_all_reduce() != 0) {
    _this->_internal_set_xla_gpu_enable_pipelined_all_reduce(from._internal_xla_gpu_enable_pipelined_all_reduce());
  }
  if (from._internal_xla_gpu_enable_pipelined_all_gather() != 0) {
    _this->_internal_set_xla_gpu_enable_pipelined_all_gather(from._internal_xla_gpu_enable_pipelined_all_gather());
  }
  if (from._internal_xla_gpu_enable_pipelined_reduce_scatter() != 0) {
    _this->_internal_set_xla_gpu_enable_pipelined_reduce_scatter(from._internal_xla_gpu_enable_pipelined_reduce_scatter());
  }
  if (from._internal_xla_gpu_enable_pipelined_p2p() != 0) {
    _this->_internal_set_xla_gpu_enable_pipelined_p2p(from._internal_xla_gpu_enable_pipelined_p2p());
  }
  if (from._internal_xla_enable_dumping() != 0) {
    _this->_internal_set_xla_enable_dumping(from._internal_xla_enable_dumping());
  }
  if (from._internal_xla_gpu_enable_llvm_module_compilation_parallelism() != 0) {
    _this->_internal_set_xla_gpu_enable_llvm_module_compilation_parallelism(from._internal_xla_gpu_enable_llvm_module_compilation_parallelism());
  }
  if (from._internal_xla_gpu_deterministic_ops() != 0) {
    _this->_internal_set_xla_gpu_deterministic_ops(from._internal_xla_gpu_deterministic_ops());
  }
  if (from._internal_xla_gpu_enable_all_gather_combine_by_dim() != 0) {
    _this->_internal_set_xla_gpu_enable_all_gather_combine_by_dim(from._internal_xla_gpu_enable_all_gather_combine_by_dim());
  }
  if (from._internal_xla_gpu_copy_insertion_use_region_analysis() != 0) {
    _this->_internal_set_xla_gpu_copy_insertion_use_region_analysis(from._internal_xla_gpu_copy_insertion_use_region_analysis());
  }
  if (from._internal_xla_gpu_collect_cost_model_stats() != 0) {
    _this->_internal_set_xla_gpu_collect_cost_model_stats(from._internal_xla_gpu_collect_cost_model_stats());
  }
  if (from._internal_xla_gpu_enable_split_k_autotuning() != 0) {
    _this->_internal_set_xla_gpu_enable_split_k_autotuning(from._internal_xla_gpu_enable_split_k_autotuning());
  }
  if (from._internal_xla_gpu_enable_reduction_epilogue_fusion() != 0) {
    _this->_internal_set_xla_gpu_enable_reduction_epilogue_fusion(from._internal_xla_gpu_enable_reduction_epilogue_fusion());
  }
  if (from._internal_xla_gpu_collective_permute_decomposer_threshold() != 0) {
    _this->_internal_set_xla_gpu_collective_permute_decomposer_threshold(from._internal_xla_gpu_collective_permute_decomposer_threshold());
  }
  if (from._internal_xla_gpu_enable_reduce_scatter_combine_by_dim() != 0) {
    _this->_internal_set_xla_gpu_enable_reduce_scatter_combine_by_dim(from._internal_xla_gpu_enable_reduce_scatter_combine_by_dim());
  }
  if (from._internal_xla_gpu_enable_reassociation_for_converted_ar() != 0) {
    _this->_internal_set_xla_gpu_enable_reassociation_for_converted_ar(from._internal_xla_gpu_enable_reassociation_for_converted_ar());
  }
  if (from._internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion() != 0) {
    _this->_internal_set_xla_gpu_enable_while_loop_reduce_scatter_code_motion(from._internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion());
  }
  if (from._internal_xla_llvm_force_inline_before_split() != 0) {
    _this->_internal_set_xla_llvm_force_inline_before_split(from._internal_xla_llvm_force_inline_before_split());
  }
  if (from._internal_xla_gpu_experimental_disable_binary_libraries() != 0) {
    _this->_internal_set_xla_gpu_experimental_disable_binary_libraries(from._internal_xla_gpu_experimental_disable_binary_libraries());
  }
  if (from._internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion() != 0) {
    _this->_internal_set_xla_gpu_experimental_enable_triton_softmax_priority_fusion(from._internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion());
  }
  if (from._internal_xla_gpu_unsupported_enable_triton_gemm() != 0) {
    _this->_internal_set_xla_gpu_unsupported_enable_triton_gemm(from._internal_xla_gpu_unsupported_enable_triton_gemm());
  }
  if (from._internal_xla_hlo_graph_addresses() != 0) {
    _this->_internal_set_xla_hlo_graph_addresses(from._internal_xla_hlo_graph_addresses());
  }
  if (from._internal_xla_gpu_enable_nccl_clique_optimization() != 0) {
    _this->_internal_set_xla_gpu_enable_nccl_clique_optimization(from._internal_xla_gpu_enable_nccl_clique_optimization());
  }
  if (from._internal_xla_gpu_mock_custom_calls() != 0) {
    _this->_internal_set_xla_gpu_mock_custom_calls(from._internal_xla_gpu_mock_custom_calls());
  }
  if (from._internal_xla_gpu_cublas_fallback() != 0) {
    _this->_internal_set_xla_gpu_cublas_fallback(from._internal_xla_gpu_cublas_fallback());
  }
  if (from._internal_xla_gpu_enable_while_loop_double_buffering() != 0) {
    _this->_internal_set_xla_gpu_enable_while_loop_double_buffering(from._internal_xla_gpu_enable_while_loop_double_buffering());
  }
  if (from._internal_xla_gpu_llvm_verification_level() != 0) {
    _this->_internal_set_xla_gpu_llvm_verification_level(from._internal_xla_gpu_llvm_verification_level());
  }
  if (from._internal_xla_debug_buffer_assignment_show_max() != 0) {
    _this->_internal_set_xla_debug_buffer_assignment_show_max(from._internal_xla_debug_buffer_assignment_show_max());
  }
  if (from._internal_xla_gpu_ensure_minor_dot_contraction_dims() != 0) {
    _this->_internal_set_xla_gpu_ensure_minor_dot_contraction_dims(from._internal_xla_gpu_ensure_minor_dot_contraction_dims());
  }
  if (from._internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning() != 0) {
    _this->_internal_set_xla_gpu_filter_kernels_spilling_registers_on_autotuning(from._internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning());
  }
  if (from._internal_xla_gpu_enable_cub_radix_sort() != 0) {
    _this->_internal_set_xla_gpu_enable_cub_radix_sort(from._internal_xla_gpu_enable_cub_radix_sort());
  }
  if (from._internal_xla_gpu_enable_triton_hopper() != 0) {
    _this->_internal_set_xla_gpu_enable_triton_hopper(from._internal_xla_gpu_enable_triton_hopper());
  }
  if (from._internal_xla_gpu_memory_limit_slop_factor() != 0) {
    _this->_internal_set_xla_gpu_memory_limit_slop_factor(from._internal_xla_gpu_memory_limit_slop_factor());
  }
  if (from._internal_xla_gpu_threshold_for_windowed_einsum_mib() != 0) {
    _this->_internal_set_xla_gpu_threshold_for_windowed_einsum_mib(from._internal_xla_gpu_threshold_for_windowed_einsum_mib());
  }
  if (from._internal_xla_gpu_nccl_collective_max_nchannels() != 0) {
    _this->_internal_set_xla_gpu_nccl_collective_max_nchannels(from._internal_xla_gpu_nccl_collective_max_nchannels());
  }
  if (from._internal_xla_gpu_enable_nccl_user_buffers() != 0) {
    _this->_internal_set_xla_gpu_enable_nccl_user_buffers(from._internal_xla_gpu_enable_nccl_user_buffers());
  }
  if (from._internal_xla_gpu_enable_nccl_comm_splitting() != 0) {
    _this->_internal_set_xla_gpu_enable_nccl_comm_splitting(from._internal_xla_gpu_enable_nccl_comm_splitting());
  }
  if (from._internal_xla_gpu_enable_nccl_per_stream_comms() != 0) {
    _this->_internal_set_xla_gpu_enable_nccl_per_stream_comms(from._internal_xla_gpu_enable_nccl_per_stream_comms());
  }
  if (from._internal_xla_gpu_enable_libnvptxcompiler() != 0) {
    _this->_internal_set_xla_gpu_enable_libnvptxcompiler(from._internal_xla_gpu_enable_libnvptxcompiler());
  }
  if (from._internal_xla_gpu_enable_dot_strength_reduction() != 0) {
    _this->_internal_set_xla_gpu_enable_dot_strength_reduction(from._internal_xla_gpu_enable_dot_strength_reduction());
  }
  if (from._internal_xla_gpu_multi_streamed_windowed_einsum() != 0) {
    _this->_internal_set_xla_gpu_multi_streamed_windowed_einsum(from._internal_xla_gpu_multi_streamed_windowed_einsum());
  }
  if (from._internal_xla_gpu_enable_bf16_6way_gemm() != 0) {
    _this->_internal_set_xla_gpu_enable_bf16_6way_gemm(from._internal_xla_gpu_enable_bf16_6way_gemm());
  }
  if (from._internal_xla_gpu_enable_bf16_3way_gemm() != 0) {
    _this->_internal_set_xla_gpu_enable_bf16_3way_gemm(from._internal_xla_gpu_enable_bf16_3way_gemm());
  }
  if (from._internal_xla_gpu_nccl_p2p_max_nchannels() != 0) {
    _this->_internal_set_xla_gpu_nccl_p2p_max_nchannels(from._internal_xla_gpu_nccl_p2p_max_nchannels());
  }
  if (from._internal_xla_gpu_gemm_rewrite_size_threshold() != 0) {
    _this->_internal_set_xla_gpu_gemm_rewrite_size_threshold(from._internal_xla_gpu_gemm_rewrite_size_threshold());
  }
  if (from._internal_xla_gpu_cudnn_gemm_fusion_level() != 0) {
    _this->_internal_set_xla_gpu_cudnn_gemm_fusion_level(from._internal_xla_gpu_cudnn_gemm_fusion_level());
  }
  if (from._internal_xla_gpu_require_complete_aot_autotune_results() != 0) {
    _this->_internal_set_xla_gpu_require_complete_aot_autotune_results(from._internal_xla_gpu_require_complete_aot_autotune_results());
  }
  if (from._internal_xla_gpu_use_memcpy_local_p2p() != 0) {
    _this->_internal_set_xla_gpu_use_memcpy_local_p2p(from._internal_xla_gpu_use_memcpy_local_p2p());
  }
  if (from._internal_xla_dump_large_constants() != 0) {
    _this->_internal_set_xla_dump_large_constants(from._internal_xla_dump_large_constants());
  }
  if (from._internal_xla_gpu_verify_triton_fusion_numerics() != 0) {
    _this->_internal_set_xla_gpu_verify_triton_fusion_numerics(from._internal_xla_gpu_verify_triton_fusion_numerics());
  }
  if (from._internal_xla_gpu_autotune_max_solutions() != 0) {
    _this->_internal_set_xla_gpu_autotune_max_solutions(from._internal_xla_gpu_autotune_max_solutions());
  }
  if (from._internal_xla_reduce_window_rewrite_base_length() != 0) {
    _this->_internal_set_xla_reduce_window_rewrite_base_length(from._internal_xla_reduce_window_rewrite_base_length());
  }
  if (from._internal_xla_gpu_enable_while_loop_unrolling() != 0) {
    _this->_internal_set_xla_gpu_enable_while_loop_unrolling(from._internal_xla_gpu_enable_while_loop_unrolling());
  }
  if (from._internal_xla_gpu_enable_host_memory_offloading() != 0) {
    _this->_internal_set_xla_gpu_enable_host_memory_offloading(from._internal_xla_gpu_enable_host_memory_offloading());
  }
  if (from._internal_xla_gpu_exclude_nondeterministic_ops() != 0) {
    _this->_internal_set_xla_gpu_exclude_nondeterministic_ops(from._internal_xla_gpu_exclude_nondeterministic_ops());
  }
  if (from._internal_xla_gpu_nccl_terminate_on_error() != 0) {
    _this->_internal_set_xla_gpu_nccl_terminate_on_error(from._internal_xla_gpu_nccl_terminate_on_error());
  }
  if (from._internal_xla_gpu_shard_autotuning() != 0) {
    _this->_internal_set_xla_gpu_shard_autotuning(from._internal_xla_gpu_shard_autotuning());
  }
  if (from._internal_xla_gpu_mlir_emitter_level() != 0) {
    _this->_internal_set_xla_gpu_mlir_emitter_level(from._internal_xla_gpu_mlir_emitter_level());
  }
  if (from._internal_xla_cpu_prefer_vector_width() != 0) {
    _this->_internal_set_xla_cpu_prefer_vector_width(from._internal_xla_cpu_prefer_vector_width());
  }
  if (from._internal_xla_gpu_enable_approx_costly_collectives() != 0) {
    _this->_internal_set_xla_gpu_enable_approx_costly_collectives(from._internal_xla_gpu_enable_approx_costly_collectives());
  }
  if (from._internal_xla_gpu_unsafe_pipelined_loop_annotator() != 0) {
    _this->_internal_set_xla_gpu_unsafe_pipelined_loop_annotator(from._internal_xla_gpu_unsafe_pipelined_loop_annotator());
  }
  if (from._internal_xla_gpu_temp_buffer_use_separate_color() != 0) {
    _this->_internal_set_xla_gpu_temp_buffer_use_separate_color(from._internal_xla_gpu_temp_buffer_use_separate_color());
  }
  if (from._internal_xla_syntax_sugar_async_ops() != 0) {
    _this->_internal_set_xla_syntax_sugar_async_ops(from._internal_xla_syntax_sugar_async_ops());
  }
  if (from._internal_xla_cmd_buffer_trace_cache_size() != 0) {
    _this->_internal_set_xla_cmd_buffer_trace_cache_size(from._internal_xla_cmd_buffer_trace_cache_size());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xla_gpu_autotune_gemm_rtol = from._internal_xla_gpu_autotune_gemm_rtol();
  uint32_t raw_xla_gpu_autotune_gemm_rtol;
  memcpy(&raw_xla_gpu_autotune_gemm_rtol, &tmp_xla_gpu_autotune_gemm_rtol, sizeof(tmp_xla_gpu_autotune_gemm_rtol));
  if (raw_xla_gpu_autotune_gemm_rtol != 0) {
    _this->_internal_set_xla_gpu_autotune_gemm_rtol(from._internal_xla_gpu_autotune_gemm_rtol());
  }
  if (from._internal_xla_gpu_cudnn_gemm_max_plans() != 0) {
    _this->_internal_set_xla_gpu_cudnn_gemm_max_plans(from._internal_xla_gpu_cudnn_gemm_max_plans());
  }
  if (from._internal_xla_enable_command_buffers_during_profiling() != 0) {
    _this->_internal_set_xla_enable_command_buffers_during_profiling(from._internal_xla_enable_command_buffers_during_profiling());
  }
  if (from._internal_xla_gpu_enable_libnvjitlink() != 0) {
    _this->_internal_set_xla_gpu_enable_libnvjitlink(from._internal_xla_gpu_enable_libnvjitlink());
  }
  if (from._internal_xla_gpu_enable_triton_gemm_int4() != 0) {
    _this->_internal_set_xla_gpu_enable_triton_gemm_int4(from._internal_xla_gpu_enable_triton_gemm_int4());
  }
  if (from._internal_xla_gpu_async_dot() != 0) {
    _this->_internal_set_xla_gpu_async_dot(from._internal_xla_gpu_async_dot());
  }
  if (from._internal_xla_cpu_parallel_codegen_split_count() != 0) {
    _this->_internal_set_xla_cpu_parallel_codegen_split_count(from._internal_xla_cpu_parallel_codegen_split_count());
  }
  if (from._internal_xla_gpu_experimental_autotune_cache_mode() != 0) {
    _this->_internal_set_xla_gpu_experimental_autotune_cache_mode(from._internal_xla_gpu_experimental_autotune_cache_mode());
  }
  if (from._internal_xla_gpu_executable_warn_stuck_timeout_seconds() != 0) {
    _this->_internal_set_xla_gpu_executable_warn_stuck_timeout_seconds(from._internal_xla_gpu_executable_warn_stuck_timeout_seconds());
  }
  if (from._internal_xla_gpu_executable_terminate_timeout_seconds() != 0) {
    _this->_internal_set_xla_gpu_executable_terminate_timeout_seconds(from._internal_xla_gpu_executable_terminate_timeout_seconds());
  }
  if (from._internal_xla_gpu_enable_pgle_accuracy_checker() != 0) {
    _this->_internal_set_xla_gpu_enable_pgle_accuracy_checker(from._internal_xla_gpu_enable_pgle_accuracy_checker());
  }
  if (from._internal_xla_experimental_ignore_channel_id() != 0) {
    _this->_internal_set_xla_experimental_ignore_channel_id(from._internal_xla_experimental_ignore_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugOptions::CopyFrom(const DebugOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DebugOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugOptions::IsInitialized() const {
  return true;
}

void DebugOptions::InternalSwap(DebugOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.xla_disable_hlo_passes_.InternalSwap(&other->_impl_.xla_disable_hlo_passes_);
  _impl_.xla_enable_hlo_passes_only_.InternalSwap(&other->_impl_.xla_enable_hlo_passes_only_);
  _impl_.xla_gpu_ptx_file_.InternalSwap(&other->_impl_.xla_gpu_ptx_file_);
  _impl_.xla_gpu_llvm_ir_file_.InternalSwap(&other->_impl_.xla_gpu_llvm_ir_file_);
  _impl_.xla_gpu_enable_command_buffer_.InternalSwap(&other->_impl_.xla_gpu_enable_command_buffer_);
  _impl_.xla_gpu_disable_async_collectives_.InternalSwap(&other->_impl_.xla_gpu_disable_async_collectives_);
  _impl_.legacy_command_buffer_custom_call_targets_.InternalSwap(&other->_impl_.legacy_command_buffer_custom_call_targets_);
  _impl_.xla_backend_extra_options_.InternalSwap(&other->_impl_.xla_backend_extra_options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_cuda_data_dir_, lhs_arena,
      &other->_impl_.xla_gpu_cuda_data_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_dump_to_, lhs_arena,
      &other->_impl_.xla_dump_to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_dump_hlo_module_re_, lhs_arena,
      &other->_impl_.xla_dump_hlo_module_re_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_dump_hlo_pass_re_, lhs_arena,
      &other->_impl_.xla_dump_hlo_pass_re_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_algorithm_denylist_path_, lhs_arena,
      &other->_impl_.xla_gpu_algorithm_denylist_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_asm_extra_flags_, lhs_arena,
      &other->_impl_.xla_gpu_asm_extra_flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_dump_hlo_pipeline_re_, lhs_arena,
      &other->_impl_.xla_dump_hlo_pipeline_re_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_pgle_profile_file_or_directory_path_, lhs_arena,
      &other->_impl_.xla_gpu_pgle_profile_file_or_directory_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_dump_autotune_results_to_, lhs_arena,
      &other->_impl_.xla_gpu_dump_autotune_results_to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_load_autotune_results_from_, lhs_arena,
      &other->_impl_.xla_gpu_load_autotune_results_from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_target_config_filename_, lhs_arena,
      &other->_impl_.xla_gpu_target_config_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_enable_custom_fusions_re_, lhs_arena,
      &other->_impl_.xla_gpu_enable_custom_fusions_re_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_dump_autotune_logs_to_, lhs_arena,
      &other->_impl_.xla_gpu_dump_autotune_logs_to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_override_gemm_autotuner_, lhs_arena,
      &other->_impl_.xla_gpu_override_gemm_autotuner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_kernel_cache_file_, lhs_arena,
      &other->_impl_.xla_gpu_kernel_cache_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xla_gpu_per_fusion_autotune_cache_dir_, lhs_arena,
      &other->_impl_.xla_gpu_per_fusion_autotune_cache_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_experimental_ignore_channel_id_)
      + sizeof(DebugOptions::_impl_.xla_experimental_ignore_channel_id_)
      - PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_backend_optimization_level_)>(
          reinterpret_cast<char*>(&_impl_.xla_backend_optimization_level_),
          reinterpret_cast<char*>(&other->_impl_.xla_backend_optimization_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[2]);
}

// ===================================================================

class GpuCompilationEnvironment::_Internal {
 public:
};

GpuCompilationEnvironment::GpuCompilationEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.GpuCompilationEnvironment)
}
GpuCompilationEnvironment::GpuCompilationEnvironment(const GpuCompilationEnvironment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GpuCompilationEnvironment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dummy_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dummy_flag_ = from._impl_.dummy_flag_;
  // @@protoc_insertion_point(copy_constructor:xla.GpuCompilationEnvironment)
}

inline void GpuCompilationEnvironment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dummy_flag_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GpuCompilationEnvironment::~GpuCompilationEnvironment() {
  // @@protoc_insertion_point(destructor:xla.GpuCompilationEnvironment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCompilationEnvironment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpuCompilationEnvironment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCompilationEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GpuCompilationEnvironment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dummy_flag_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpuCompilationEnvironment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dummy_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dummy_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpuCompilationEnvironment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.GpuCompilationEnvironment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dummy_flag = 1;
  if (this->_internal_dummy_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_dummy_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.GpuCompilationEnvironment)
  return target;
}

size_t GpuCompilationEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GpuCompilationEnvironment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 dummy_flag = 1;
  if (this->_internal_dummy_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dummy_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpuCompilationEnvironment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GpuCompilationEnvironment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpuCompilationEnvironment::GetClassData() const { return &_class_data_; }


void GpuCompilationEnvironment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GpuCompilationEnvironment*>(&to_msg);
  auto& from = static_cast<const GpuCompilationEnvironment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.GpuCompilationEnvironment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dummy_flag() != 0) {
    _this->_internal_set_dummy_flag(from._internal_dummy_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpuCompilationEnvironment::CopyFrom(const GpuCompilationEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GpuCompilationEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCompilationEnvironment::IsInitialized() const {
  return true;
}

void GpuCompilationEnvironment::InternalSwap(GpuCompilationEnvironment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.dummy_flag_, other->_impl_.dummy_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuCompilationEnvironment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[3]);
}

// ===================================================================

class ShardableValueUpdatePairProto::_Internal {
 public:
};

ShardableValueUpdatePairProto::ShardableValueUpdatePairProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ShardableValueUpdatePairProto)
}
ShardableValueUpdatePairProto::ShardableValueUpdatePairProto(const ShardableValueUpdatePairProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardableValueUpdatePairProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_shape_index_){from._impl_.parameter_shape_index_}
    , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.output_shape_index_){from._impl_.output_shape_index_}
    , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.input_parameter_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.input_parameter_number_ = from._impl_.input_parameter_number_;
  // @@protoc_insertion_point(copy_constructor:xla.ShardableValueUpdatePairProto)
}

inline void ShardableValueUpdatePairProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_shape_index_){arena}
    , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.output_shape_index_){arena}
    , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.input_parameter_number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardableValueUpdatePairProto::~ShardableValueUpdatePairProto() {
  // @@protoc_insertion_point(destructor:xla.ShardableValueUpdatePairProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardableValueUpdatePairProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameter_shape_index_.~RepeatedField();
  _impl_.output_shape_index_.~RepeatedField();
}

void ShardableValueUpdatePairProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardableValueUpdatePairProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ShardableValueUpdatePairProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameter_shape_index_.Clear();
  _impl_.output_shape_index_.Clear();
  _impl_.input_parameter_number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardableValueUpdatePairProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 input_parameter_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.input_parameter_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 parameter_shape_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_parameter_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_parameter_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 output_shape_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_output_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardableValueUpdatePairProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ShardableValueUpdatePairProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 input_parameter_number = 1;
  if (this->_internal_input_parameter_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_input_parameter_number(), target);
  }

  // repeated int64 parameter_shape_index = 2;
  {
    int byte_size = _impl_._parameter_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_parameter_shape_index(), byte_size, target);
    }
  }

  // repeated int64 output_shape_index = 3;
  {
    int byte_size = _impl_._output_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_output_shape_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ShardableValueUpdatePairProto)
  return target;
}

size_t ShardableValueUpdatePairProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ShardableValueUpdatePairProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 parameter_shape_index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.parameter_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parameter_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 output_shape_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 input_parameter_number = 1;
  if (this->_internal_input_parameter_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_input_parameter_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardableValueUpdatePairProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardableValueUpdatePairProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardableValueUpdatePairProto::GetClassData() const { return &_class_data_; }


void ShardableValueUpdatePairProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardableValueUpdatePairProto*>(&to_msg);
  auto& from = static_cast<const ShardableValueUpdatePairProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ShardableValueUpdatePairProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameter_shape_index_.MergeFrom(from._impl_.parameter_shape_index_);
  _this->_impl_.output_shape_index_.MergeFrom(from._impl_.output_shape_index_);
  if (from._internal_input_parameter_number() != 0) {
    _this->_internal_set_input_parameter_number(from._internal_input_parameter_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardableValueUpdatePairProto::CopyFrom(const ShardableValueUpdatePairProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ShardableValueUpdatePairProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardableValueUpdatePairProto::IsInitialized() const {
  return true;
}

void ShardableValueUpdatePairProto::InternalSwap(ShardableValueUpdatePairProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameter_shape_index_.InternalSwap(&other->_impl_.parameter_shape_index_);
  _impl_.output_shape_index_.InternalSwap(&other->_impl_.output_shape_index_);
  swap(_impl_.input_parameter_number_, other->_impl_.input_parameter_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardableValueUpdatePairProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[4]);
}

// ===================================================================

class ExecutionOptions::_Internal {
 public:
  static const ::xla::ShapeProto& shape_with_output_layout(const ExecutionOptions* msg);
  static const ::xla::DebugOptions& debug_options(const ExecutionOptions* msg);
  static const ::xla::DeviceAssignmentProto& device_assignment(const ExecutionOptions* msg);
};

const ::xla::ShapeProto&
ExecutionOptions::_Internal::shape_with_output_layout(const ExecutionOptions* msg) {
  return *msg->_impl_.shape_with_output_layout_;
}
const ::xla::DebugOptions&
ExecutionOptions::_Internal::debug_options(const ExecutionOptions* msg) {
  return *msg->_impl_.debug_options_;
}
const ::xla::DeviceAssignmentProto&
ExecutionOptions::_Internal::device_assignment(const ExecutionOptions* msg) {
  return *msg->_impl_.device_assignment_;
}
void ExecutionOptions::clear_shape_with_output_layout() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_with_output_layout_ != nullptr) {
    delete _impl_.shape_with_output_layout_;
  }
  _impl_.shape_with_output_layout_ = nullptr;
}
void ExecutionOptions::clear_device_handles() {
  _impl_.device_handles_.Clear();
}
void ExecutionOptions::clear_device_assignment() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_assignment_ != nullptr) {
    delete _impl_.device_assignment_;
  }
  _impl_.device_assignment_ = nullptr;
}
ExecutionOptions::ExecutionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ExecutionOptions)
}
ExecutionOptions::ExecutionOptions(const ExecutionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecutionOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_handles_){from._impl_.device_handles_}
    , decltype(_impl_.allow_spmd_sharding_propagation_to_output_){from._impl_.allow_spmd_sharding_propagation_to_output_}
    , decltype(_impl_.auto_spmd_partitioning_mesh_shape_){from._impl_.auto_spmd_partitioning_mesh_shape_}
    , /*decltype(_impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.auto_spmd_partitioning_mesh_ids_){from._impl_.auto_spmd_partitioning_mesh_ids_}
    , /*decltype(_impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.param_requires_broadcast_via_collectives_){from._impl_.param_requires_broadcast_via_collectives_}
    , decltype(_impl_.shardable_value_update_pairs_){from._impl_.shardable_value_update_pairs_}
    , decltype(_impl_.allow_spmd_sharding_propagation_to_parameters_){from._impl_.allow_spmd_sharding_propagation_to_parameters_}
    , decltype(_impl_.fdo_profile_){}
    , decltype(_impl_.shape_with_output_layout_){nullptr}
    , decltype(_impl_.debug_options_){nullptr}
    , decltype(_impl_.device_assignment_){nullptr}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.num_replicas_){}
    , decltype(_impl_.num_partitions_){}
    , decltype(_impl_.launch_id_){}
    , decltype(_impl_.alias_passthrough_params_){}
    , decltype(_impl_.use_spmd_partitioning_){}
    , decltype(_impl_.use_auto_spmd_partitioning_){}
    , decltype(_impl_.deduplicate_hlo_){}
    , decltype(_impl_.device_memory_size_){}
    , decltype(_impl_.allow_separate_sharding_programs_){}
    , decltype(_impl_.use_shardy_partitioner_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fdo_profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fdo_profile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fdo_profile().empty()) {
    _this->_impl_.fdo_profile_.Set(from._internal_fdo_profile(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_shape_with_output_layout()) {
    _this->_impl_.shape_with_output_layout_ = new ::xla::ShapeProto(*from._impl_.shape_with_output_layout_);
  }
  if (from._internal_has_debug_options()) {
    _this->_impl_.debug_options_ = new ::xla::DebugOptions(*from._impl_.debug_options_);
  }
  if (from._internal_has_device_assignment()) {
    _this->_impl_.device_assignment_ = new ::xla::DeviceAssignmentProto(*from._impl_.device_assignment_);
  }
  ::memcpy(&_impl_.seed_, &from._impl_.seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_shardy_partitioner_) -
    reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.use_shardy_partitioner_));
  // @@protoc_insertion_point(copy_constructor:xla.ExecutionOptions)
}

inline void ExecutionOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_handles_){arena}
    , decltype(_impl_.allow_spmd_sharding_propagation_to_output_){arena}
    , decltype(_impl_.auto_spmd_partitioning_mesh_shape_){arena}
    , /*decltype(_impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.auto_spmd_partitioning_mesh_ids_){arena}
    , /*decltype(_impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.param_requires_broadcast_via_collectives_){arena}
    , decltype(_impl_.shardable_value_update_pairs_){arena}
    , decltype(_impl_.allow_spmd_sharding_propagation_to_parameters_){arena}
    , decltype(_impl_.fdo_profile_){}
    , decltype(_impl_.shape_with_output_layout_){nullptr}
    , decltype(_impl_.debug_options_){nullptr}
    , decltype(_impl_.device_assignment_){nullptr}
    , decltype(_impl_.seed_){uint64_t{0u}}
    , decltype(_impl_.num_replicas_){0}
    , decltype(_impl_.num_partitions_){0}
    , decltype(_impl_.launch_id_){0}
    , decltype(_impl_.alias_passthrough_params_){false}
    , decltype(_impl_.use_spmd_partitioning_){false}
    , decltype(_impl_.use_auto_spmd_partitioning_){false}
    , decltype(_impl_.deduplicate_hlo_){false}
    , decltype(_impl_.device_memory_size_){int64_t{0}}
    , decltype(_impl_.allow_separate_sharding_programs_){false}
    , decltype(_impl_.use_shardy_partitioner_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fdo_profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fdo_profile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecutionOptions::~ExecutionOptions() {
  // @@protoc_insertion_point(destructor:xla.ExecutionOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecutionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_handles_.~RepeatedPtrField();
  _impl_.allow_spmd_sharding_propagation_to_output_.~RepeatedField();
  _impl_.auto_spmd_partitioning_mesh_shape_.~RepeatedField();
  _impl_.auto_spmd_partitioning_mesh_ids_.~RepeatedField();
  _impl_.param_requires_broadcast_via_collectives_.~RepeatedField();
  _impl_.shardable_value_update_pairs_.~RepeatedPtrField();
  _impl_.allow_spmd_sharding_propagation_to_parameters_.~RepeatedField();
  _impl_.fdo_profile_.Destroy();
  if (this != internal_default_instance()) delete _impl_.shape_with_output_layout_;
  if (this != internal_default_instance()) delete _impl_.debug_options_;
  if (this != internal_default_instance()) delete _impl_.device_assignment_;
}

void ExecutionOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecutionOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_handles_.Clear();
  _impl_.allow_spmd_sharding_propagation_to_output_.Clear();
  _impl_.auto_spmd_partitioning_mesh_shape_.Clear();
  _impl_.auto_spmd_partitioning_mesh_ids_.Clear();
  _impl_.param_requires_broadcast_via_collectives_.Clear();
  _impl_.shardable_value_update_pairs_.Clear();
  _impl_.allow_spmd_sharding_propagation_to_parameters_.Clear();
  _impl_.fdo_profile_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.shape_with_output_layout_ != nullptr) {
    delete _impl_.shape_with_output_layout_;
  }
  _impl_.shape_with_output_layout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.debug_options_ != nullptr) {
    delete _impl_.debug_options_;
  }
  _impl_.debug_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.device_assignment_ != nullptr) {
    delete _impl_.device_assignment_;
  }
  _impl_.device_assignment_ = nullptr;
  ::memset(&_impl_.seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_shardy_partitioner_) -
      reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.use_shardy_partitioner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.ShapeProto shape_with_output_layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape_with_output_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DebugOptions debug_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.DeviceHandle device_handles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_handles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 num_replicas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.num_replicas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DeviceAssignmentProto device_assignment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_assignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool alias_passthrough_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.alias_passthrough_params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_partitions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.num_partitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 launch_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.launch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_spmd_partitioning = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.use_spmd_partitioning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool deduplicate_hlo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.deduplicate_hlo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool allow_spmd_sharding_propagation_to_output = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_allow_spmd_sharding_propagation_to_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_allow_spmd_sharding_propagation_to_output(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_auto_spmd_partitioning = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.use_auto_spmd_partitioning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 auto_spmd_partitioning_mesh_shape = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_auto_spmd_partitioning_mesh_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_auto_spmd_partitioning_mesh_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 auto_spmd_partitioning_mesh_ids = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_auto_spmd_partitioning_mesh_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 136) {
          _internal_add_auto_spmd_partitioning_mesh_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool param_requires_broadcast_via_collectives = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_param_requires_broadcast_via_collectives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 144) {
          _internal_add_param_requires_broadcast_via_collectives(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_separate_sharding_programs = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.allow_separate_sharding_programs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_shardable_value_update_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes fdo_profile = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_fdo_profile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 device_memory_size = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.device_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool allow_spmd_sharding_propagation_to_parameters = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_allow_spmd_sharding_propagation_to_parameters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 184) {
          _internal_add_allow_spmd_sharding_propagation_to_parameters(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_shardy_partitioner = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.use_shardy_partitioner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecutionOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.ShapeProto shape_with_output_layout = 2;
  if (this->_internal_has_shape_with_output_layout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shape_with_output_layout(this),
        _Internal::shape_with_output_layout(this).GetCachedSize(), target, stream);
  }

  // uint64 seed = 3;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seed(), target);
  }

  // .xla.DebugOptions debug_options = 4;
  if (this->_internal_has_debug_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::debug_options(this),
        _Internal::debug_options(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.DeviceHandle device_handles = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_handles_size()); i < n; i++) {
    const auto& repfield = this->_internal_device_handles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 num_replicas = 6;
  if (this->_internal_num_replicas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_replicas(), target);
  }

  // .xla.DeviceAssignmentProto device_assignment = 7;
  if (this->_internal_has_device_assignment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::device_assignment(this),
        _Internal::device_assignment(this).GetCachedSize(), target, stream);
  }

  // bool alias_passthrough_params = 8;
  if (this->_internal_alias_passthrough_params() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_alias_passthrough_params(), target);
  }

  // int32 num_partitions = 9;
  if (this->_internal_num_partitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_num_partitions(), target);
  }

  // int32 launch_id = 10;
  if (this->_internal_launch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_launch_id(), target);
  }

  // bool use_spmd_partitioning = 11;
  if (this->_internal_use_spmd_partitioning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_use_spmd_partitioning(), target);
  }

  // bool deduplicate_hlo = 12;
  if (this->_internal_deduplicate_hlo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_deduplicate_hlo(), target);
  }

  // repeated bool allow_spmd_sharding_propagation_to_output = 14;
  if (this->_internal_allow_spmd_sharding_propagation_to_output_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_allow_spmd_sharding_propagation_to_output(), target);
  }

  // bool use_auto_spmd_partitioning = 15;
  if (this->_internal_use_auto_spmd_partitioning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_use_auto_spmd_partitioning(), target);
  }

  // repeated int64 auto_spmd_partitioning_mesh_shape = 16;
  {
    int byte_size = _impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          16, _internal_auto_spmd_partitioning_mesh_shape(), byte_size, target);
    }
  }

  // repeated int64 auto_spmd_partitioning_mesh_ids = 17;
  {
    int byte_size = _impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          17, _internal_auto_spmd_partitioning_mesh_ids(), byte_size, target);
    }
  }

  // repeated bool param_requires_broadcast_via_collectives = 18;
  if (this->_internal_param_requires_broadcast_via_collectives_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_param_requires_broadcast_via_collectives(), target);
  }

  // bool allow_separate_sharding_programs = 19;
  if (this->_internal_allow_separate_sharding_programs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_allow_separate_sharding_programs(), target);
  }

  // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shardable_value_update_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_shardable_value_update_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes fdo_profile = 21;
  if (!this->_internal_fdo_profile().empty()) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_fdo_profile(), target);
  }

  // int64 device_memory_size = 22;
  if (this->_internal_device_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_device_memory_size(), target);
  }

  // repeated bool allow_spmd_sharding_propagation_to_parameters = 23;
  if (this->_internal_allow_spmd_sharding_propagation_to_parameters_size() > 0) {
    target = stream->WriteFixedPacked(23, _internal_allow_spmd_sharding_propagation_to_parameters(), target);
  }

  // bool use_shardy_partitioner = 24;
  if (this->_internal_use_shardy_partitioner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_use_shardy_partitioner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecutionOptions)
  return target;
}

size_t ExecutionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecutionOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.DeviceHandle device_handles = 5;
  total_size += 1UL * this->_internal_device_handles_size();
  for (const auto& msg : this->_impl_.device_handles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool allow_spmd_sharding_propagation_to_output = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_allow_spmd_sharding_propagation_to_output_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int64 auto_spmd_partitioning_mesh_shape = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.auto_spmd_partitioning_mesh_shape_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 auto_spmd_partitioning_mesh_ids = 17;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.auto_spmd_partitioning_mesh_ids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool param_requires_broadcast_via_collectives = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_param_requires_broadcast_via_collectives_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 20;
  total_size += 2UL * this->_internal_shardable_value_update_pairs_size();
  for (const auto& msg : this->_impl_.shardable_value_update_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool allow_spmd_sharding_propagation_to_parameters = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_allow_spmd_sharding_propagation_to_parameters_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // bytes fdo_profile = 21;
  if (!this->_internal_fdo_profile().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fdo_profile());
  }

  // .xla.ShapeProto shape_with_output_layout = 2;
  if (this->_internal_has_shape_with_output_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_with_output_layout_);
  }

  // .xla.DebugOptions debug_options = 4;
  if (this->_internal_has_debug_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_options_);
  }

  // .xla.DeviceAssignmentProto device_assignment = 7;
  if (this->_internal_has_device_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_assignment_);
  }

  // uint64 seed = 3;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seed());
  }

  // int32 num_replicas = 6;
  if (this->_internal_num_replicas() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_replicas());
  }

  // int32 num_partitions = 9;
  if (this->_internal_num_partitions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_partitions());
  }

  // int32 launch_id = 10;
  if (this->_internal_launch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_launch_id());
  }

  // bool alias_passthrough_params = 8;
  if (this->_internal_alias_passthrough_params() != 0) {
    total_size += 1 + 1;
  }

  // bool use_spmd_partitioning = 11;
  if (this->_internal_use_spmd_partitioning() != 0) {
    total_size += 1 + 1;
  }

  // bool use_auto_spmd_partitioning = 15;
  if (this->_internal_use_auto_spmd_partitioning() != 0) {
    total_size += 1 + 1;
  }

  // bool deduplicate_hlo = 12;
  if (this->_internal_deduplicate_hlo() != 0) {
    total_size += 1 + 1;
  }

  // int64 device_memory_size = 22;
  if (this->_internal_device_memory_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_device_memory_size());
  }

  // bool allow_separate_sharding_programs = 19;
  if (this->_internal_allow_separate_sharding_programs() != 0) {
    total_size += 2 + 1;
  }

  // bool use_shardy_partitioner = 24;
  if (this->_internal_use_shardy_partitioner() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionOptions::GetClassData() const { return &_class_data_; }


void ExecutionOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionOptions*>(&to_msg);
  auto& from = static_cast<const ExecutionOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecutionOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.device_handles_.MergeFrom(from._impl_.device_handles_);
  _this->_impl_.allow_spmd_sharding_propagation_to_output_.MergeFrom(from._impl_.allow_spmd_sharding_propagation_to_output_);
  _this->_impl_.auto_spmd_partitioning_mesh_shape_.MergeFrom(from._impl_.auto_spmd_partitioning_mesh_shape_);
  _this->_impl_.auto_spmd_partitioning_mesh_ids_.MergeFrom(from._impl_.auto_spmd_partitioning_mesh_ids_);
  _this->_impl_.param_requires_broadcast_via_collectives_.MergeFrom(from._impl_.param_requires_broadcast_via_collectives_);
  _this->_impl_.shardable_value_update_pairs_.MergeFrom(from._impl_.shardable_value_update_pairs_);
  _this->_impl_.allow_spmd_sharding_propagation_to_parameters_.MergeFrom(from._impl_.allow_spmd_sharding_propagation_to_parameters_);
  if (!from._internal_fdo_profile().empty()) {
    _this->_internal_set_fdo_profile(from._internal_fdo_profile());
  }
  if (from._internal_has_shape_with_output_layout()) {
    _this->_internal_mutable_shape_with_output_layout()->::xla::ShapeProto::MergeFrom(
        from._internal_shape_with_output_layout());
  }
  if (from._internal_has_debug_options()) {
    _this->_internal_mutable_debug_options()->::xla::DebugOptions::MergeFrom(
        from._internal_debug_options());
  }
  if (from._internal_has_device_assignment()) {
    _this->_internal_mutable_device_assignment()->::xla::DeviceAssignmentProto::MergeFrom(
        from._internal_device_assignment());
  }
  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  if (from._internal_num_replicas() != 0) {
    _this->_internal_set_num_replicas(from._internal_num_replicas());
  }
  if (from._internal_num_partitions() != 0) {
    _this->_internal_set_num_partitions(from._internal_num_partitions());
  }
  if (from._internal_launch_id() != 0) {
    _this->_internal_set_launch_id(from._internal_launch_id());
  }
  if (from._internal_alias_passthrough_params() != 0) {
    _this->_internal_set_alias_passthrough_params(from._internal_alias_passthrough_params());
  }
  if (from._internal_use_spmd_partitioning() != 0) {
    _this->_internal_set_use_spmd_partitioning(from._internal_use_spmd_partitioning());
  }
  if (from._internal_use_auto_spmd_partitioning() != 0) {
    _this->_internal_set_use_auto_spmd_partitioning(from._internal_use_auto_spmd_partitioning());
  }
  if (from._internal_deduplicate_hlo() != 0) {
    _this->_internal_set_deduplicate_hlo(from._internal_deduplicate_hlo());
  }
  if (from._internal_device_memory_size() != 0) {
    _this->_internal_set_device_memory_size(from._internal_device_memory_size());
  }
  if (from._internal_allow_separate_sharding_programs() != 0) {
    _this->_internal_set_allow_separate_sharding_programs(from._internal_allow_separate_sharding_programs());
  }
  if (from._internal_use_shardy_partitioner() != 0) {
    _this->_internal_set_use_shardy_partitioner(from._internal_use_shardy_partitioner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionOptions::CopyFrom(const ExecutionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecutionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionOptions::IsInitialized() const {
  return true;
}

void ExecutionOptions::InternalSwap(ExecutionOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.device_handles_.InternalSwap(&other->_impl_.device_handles_);
  _impl_.allow_spmd_sharding_propagation_to_output_.InternalSwap(&other->_impl_.allow_spmd_sharding_propagation_to_output_);
  _impl_.auto_spmd_partitioning_mesh_shape_.InternalSwap(&other->_impl_.auto_spmd_partitioning_mesh_shape_);
  _impl_.auto_spmd_partitioning_mesh_ids_.InternalSwap(&other->_impl_.auto_spmd_partitioning_mesh_ids_);
  _impl_.param_requires_broadcast_via_collectives_.InternalSwap(&other->_impl_.param_requires_broadcast_via_collectives_);
  _impl_.shardable_value_update_pairs_.InternalSwap(&other->_impl_.shardable_value_update_pairs_);
  _impl_.allow_spmd_sharding_propagation_to_parameters_.InternalSwap(&other->_impl_.allow_spmd_sharding_propagation_to_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fdo_profile_, lhs_arena,
      &other->_impl_.fdo_profile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.use_shardy_partitioner_)
      + sizeof(ExecutionOptions::_impl_.use_shardy_partitioner_)
      - PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.shape_with_output_layout_)>(
          reinterpret_cast<char*>(&_impl_.shape_with_output_layout_),
          reinterpret_cast<char*>(&other->_impl_.shape_with_output_layout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[5]);
}

// ===================================================================

class HloModuleConfigProto_BoolList::_Internal {
 public:
};

HloModuleConfigProto_BoolList::HloModuleConfigProto_BoolList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleConfigProto.BoolList)
}
HloModuleConfigProto_BoolList::HloModuleConfigProto_BoolList(const HloModuleConfigProto_BoolList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleConfigProto_BoolList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vals_){from._impl_.vals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleConfigProto.BoolList)
}

inline void HloModuleConfigProto_BoolList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloModuleConfigProto_BoolList::~HloModuleConfigProto_BoolList() {
  // @@protoc_insertion_point(destructor:xla.HloModuleConfigProto.BoolList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloModuleConfigProto_BoolList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vals_.~RepeatedField();
}

void HloModuleConfigProto_BoolList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleConfigProto_BoolList::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleConfigProto.BoolList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleConfigProto_BoolList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleConfigProto_BoolList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleConfigProto.BoolList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool vals = 1;
  if (this->_internal_vals_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleConfigProto.BoolList)
  return target;
}

size_t HloModuleConfigProto_BoolList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleConfigProto.BoolList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool vals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vals_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleConfigProto_BoolList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleConfigProto_BoolList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleConfigProto_BoolList::GetClassData() const { return &_class_data_; }


void HloModuleConfigProto_BoolList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleConfigProto_BoolList*>(&to_msg);
  auto& from = static_cast<const HloModuleConfigProto_BoolList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleConfigProto.BoolList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vals_.MergeFrom(from._impl_.vals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleConfigProto_BoolList::CopyFrom(const HloModuleConfigProto_BoolList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleConfigProto.BoolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleConfigProto_BoolList::IsInitialized() const {
  return true;
}

void HloModuleConfigProto_BoolList::InternalSwap(HloModuleConfigProto_BoolList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vals_.InternalSwap(&other->_impl_.vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleConfigProto_BoolList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[6]);
}

// ===================================================================

class HloModuleConfigProto_Int64List::_Internal {
 public:
};

HloModuleConfigProto_Int64List::HloModuleConfigProto_Int64List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleConfigProto.Int64List)
}
HloModuleConfigProto_Int64List::HloModuleConfigProto_Int64List(const HloModuleConfigProto_Int64List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleConfigProto_Int64List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vals_){from._impl_.vals_}
    , /*decltype(_impl_._vals_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleConfigProto.Int64List)
}

inline void HloModuleConfigProto_Int64List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vals_){arena}
    , /*decltype(_impl_._vals_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloModuleConfigProto_Int64List::~HloModuleConfigProto_Int64List() {
  // @@protoc_insertion_point(destructor:xla.HloModuleConfigProto.Int64List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloModuleConfigProto_Int64List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vals_.~RepeatedField();
}

void HloModuleConfigProto_Int64List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleConfigProto_Int64List::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleConfigProto.Int64List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleConfigProto_Int64List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleConfigProto_Int64List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleConfigProto.Int64List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 vals = 1;
  {
    int byte_size = _impl_._vals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_vals(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleConfigProto.Int64List)
  return target;
}

size_t HloModuleConfigProto_Int64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleConfigProto.Int64List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 vals = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.vals_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleConfigProto_Int64List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleConfigProto_Int64List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleConfigProto_Int64List::GetClassData() const { return &_class_data_; }


void HloModuleConfigProto_Int64List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleConfigProto_Int64List*>(&to_msg);
  auto& from = static_cast<const HloModuleConfigProto_Int64List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleConfigProto.Int64List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vals_.MergeFrom(from._impl_.vals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleConfigProto_Int64List::CopyFrom(const HloModuleConfigProto_Int64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleConfigProto.Int64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleConfigProto_Int64List::IsInitialized() const {
  return true;
}

void HloModuleConfigProto_Int64List::InternalSwap(HloModuleConfigProto_Int64List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vals_.InternalSwap(&other->_impl_.vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleConfigProto_Int64List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[7]);
}

// ===================================================================

class HloModuleConfigProto_Int64ListList::_Internal {
 public:
};

HloModuleConfigProto_Int64ListList::HloModuleConfigProto_Int64ListList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleConfigProto.Int64ListList)
}
HloModuleConfigProto_Int64ListList::HloModuleConfigProto_Int64ListList(const HloModuleConfigProto_Int64ListList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleConfigProto_Int64ListList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lists_){from._impl_.lists_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleConfigProto.Int64ListList)
}

inline void HloModuleConfigProto_Int64ListList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lists_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloModuleConfigProto_Int64ListList::~HloModuleConfigProto_Int64ListList() {
  // @@protoc_insertion_point(destructor:xla.HloModuleConfigProto.Int64ListList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloModuleConfigProto_Int64ListList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lists_.~RepeatedPtrField();
}

void HloModuleConfigProto_Int64ListList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleConfigProto_Int64ListList::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleConfigProto.Int64ListList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lists_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleConfigProto_Int64ListList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.HloModuleConfigProto.Int64List lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleConfigProto_Int64ListList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleConfigProto.Int64ListList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.HloModuleConfigProto.Int64List lists = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lists_size()); i < n; i++) {
    const auto& repfield = this->_internal_lists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleConfigProto.Int64ListList)
  return target;
}

size_t HloModuleConfigProto_Int64ListList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleConfigProto.Int64ListList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HloModuleConfigProto.Int64List lists = 1;
  total_size += 1UL * this->_internal_lists_size();
  for (const auto& msg : this->_impl_.lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleConfigProto_Int64ListList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleConfigProto_Int64ListList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleConfigProto_Int64ListList::GetClassData() const { return &_class_data_; }


void HloModuleConfigProto_Int64ListList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleConfigProto_Int64ListList*>(&to_msg);
  auto& from = static_cast<const HloModuleConfigProto_Int64ListList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleConfigProto.Int64ListList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lists_.MergeFrom(from._impl_.lists_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleConfigProto_Int64ListList::CopyFrom(const HloModuleConfigProto_Int64ListList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleConfigProto.Int64ListList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleConfigProto_Int64ListList::IsInitialized() const {
  return true;
}

void HloModuleConfigProto_Int64ListList::InternalSwap(HloModuleConfigProto_Int64ListList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lists_.InternalSwap(&other->_impl_.lists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleConfigProto_Int64ListList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[8]);
}

// ===================================================================

HloModuleConfigProto_DotConfigEntry_DoNotUse::HloModuleConfigProto_DotConfigEntry_DoNotUse() {}
HloModuleConfigProto_DotConfigEntry_DoNotUse::HloModuleConfigProto_DotConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HloModuleConfigProto_DotConfigEntry_DoNotUse::MergeFrom(const HloModuleConfigProto_DotConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HloModuleConfigProto_DotConfigEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[9]);
}

// ===================================================================

HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse() {}
HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::MergeFrom(const HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[10]);
}

// ===================================================================

class HloModuleConfigProto::_Internal {
 public:
  static const ::xla::ProgramShapeProto& entry_computation_layout(const HloModuleConfigProto* msg);
  static const ::xla::DebugOptions& debug_options(const HloModuleConfigProto* msg);
  static const ::xla::DeviceAssignmentProto& static_device_assignment(const HloModuleConfigProto* msg);
  static const ::xla::DeviceAssignmentProto& pre_simulation_device_assignment(const HloModuleConfigProto* msg);
};

const ::xla::ProgramShapeProto&
HloModuleConfigProto::_Internal::entry_computation_layout(const HloModuleConfigProto* msg) {
  return *msg->_impl_.entry_computation_layout_;
}
const ::xla::DebugOptions&
HloModuleConfigProto::_Internal::debug_options(const HloModuleConfigProto* msg) {
  return *msg->_impl_.debug_options_;
}
const ::xla::DeviceAssignmentProto&
HloModuleConfigProto::_Internal::static_device_assignment(const HloModuleConfigProto* msg) {
  return *msg->_impl_.static_device_assignment_;
}
const ::xla::DeviceAssignmentProto&
HloModuleConfigProto::_Internal::pre_simulation_device_assignment(const HloModuleConfigProto* msg) {
  return *msg->_impl_.pre_simulation_device_assignment_;
}
void HloModuleConfigProto::clear_entry_computation_layout() {
  if (GetArenaForAllocation() == nullptr && _impl_.entry_computation_layout_ != nullptr) {
    delete _impl_.entry_computation_layout_;
  }
  _impl_.entry_computation_layout_ = nullptr;
}
void HloModuleConfigProto::clear_static_device_assignment() {
  if (GetArenaForAllocation() == nullptr && _impl_.static_device_assignment_ != nullptr) {
    delete _impl_.static_device_assignment_;
  }
  _impl_.static_device_assignment_ = nullptr;
}
void HloModuleConfigProto::clear_pre_simulation_device_assignment() {
  if (GetArenaForAllocation() == nullptr && _impl_.pre_simulation_device_assignment_ != nullptr) {
    delete _impl_.pre_simulation_device_assignment_;
  }
  _impl_.pre_simulation_device_assignment_ = nullptr;
}
HloModuleConfigProto::HloModuleConfigProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HloModuleConfigProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleConfigProto)
}
HloModuleConfigProto::HloModuleConfigProto(const HloModuleConfigProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleConfigProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.param_requires_broadcast_via_collectives_){from._impl_.param_requires_broadcast_via_collectives_}
    , decltype(_impl_.auto_spmd_partitioning_mesh_shape_){from._impl_.auto_spmd_partitioning_mesh_shape_}
    , /*decltype(_impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.auto_spmd_partitioning_mesh_ids_){from._impl_.auto_spmd_partitioning_mesh_ids_}
    , /*decltype(_impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.shardable_value_update_pairs_){from._impl_.shardable_value_update_pairs_}
    , decltype(_impl_.fusion_config_){from._impl_.fusion_config_}
    , /*decltype(_impl_.dot_config_)*/{}
    , decltype(_impl_.layout_config_){from._impl_.layout_config_}
    , decltype(_impl_.memory_space_assignment_config_){from._impl_.memory_space_assignment_config_}
    , /*decltype(_impl_._memory_space_assignment_config_cached_byte_size_)*/{0}
    , decltype(_impl_.phase_ordering_config_){from._impl_.phase_ordering_config_}
    , decltype(_impl_.allow_spmd_sharding_propagation_to_output_){from._impl_.allow_spmd_sharding_propagation_to_output_}
    , /*decltype(_impl_.analysis_allowance_map_)*/{}
    , decltype(_impl_.allow_spmd_sharding_propagation_to_parameters_){from._impl_.allow_spmd_sharding_propagation_to_parameters_}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.fdo_profile_){}
    , decltype(_impl_.entry_computation_layout_){nullptr}
    , decltype(_impl_.debug_options_){nullptr}
    , decltype(_impl_.static_device_assignment_){nullptr}
    , decltype(_impl_.pre_simulation_device_assignment_){nullptr}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.replica_count_){}
    , decltype(_impl_.num_partitions_){}
    , decltype(_impl_.launch_id_){}
    , decltype(_impl_.use_spmd_partitioning_){}
    , decltype(_impl_.use_auto_spmd_partitioning_){}
    , decltype(_impl_.deduplicate_hlo_){}
    , decltype(_impl_.allow_separate_sharding_programs_){}
    , decltype(_impl_.intra_op_parallelism_threads_){}
    , decltype(_impl_.fusion_config_collection_){}
    , decltype(_impl_.alias_passthrough_params_){}
    , decltype(_impl_.content_aware_computation_sorting_){}
    , decltype(_impl_.use_shardy_partitioner_){}
    , decltype(_impl_.phase_index_){}
    , decltype(_impl_.matrix_unit_operand_precision_){}
    , decltype(_impl_.device_memory_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dot_config_.MergeFrom(from._impl_.dot_config_);
  _this->_impl_.analysis_allowance_map_.MergeFrom(from._impl_.analysis_allowance_map_);
  _impl_.device_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_type().empty()) {
    _this->_impl_.device_type_.Set(from._internal_device_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fdo_profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fdo_profile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fdo_profile().empty()) {
    _this->_impl_.fdo_profile_.Set(from._internal_fdo_profile(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_entry_computation_layout()) {
    _this->_impl_.entry_computation_layout_ = new ::xla::ProgramShapeProto(*from._impl_.entry_computation_layout_);
  }
  if (from._internal_has_debug_options()) {
    _this->_impl_.debug_options_ = new ::xla::DebugOptions(*from._impl_.debug_options_);
  }
  if (from._internal_has_static_device_assignment()) {
    _this->_impl_.static_device_assignment_ = new ::xla::DeviceAssignmentProto(*from._impl_.static_device_assignment_);
  }
  if (from._internal_has_pre_simulation_device_assignment()) {
    _this->_impl_.pre_simulation_device_assignment_ = new ::xla::DeviceAssignmentProto(*from._impl_.pre_simulation_device_assignment_);
  }
  ::memcpy(&_impl_.seed_, &from._impl_.seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_memory_size_) -
    reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.device_memory_size_));
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleConfigProto)
}

inline void HloModuleConfigProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.param_requires_broadcast_via_collectives_){arena}
    , decltype(_impl_.auto_spmd_partitioning_mesh_shape_){arena}
    , /*decltype(_impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.auto_spmd_partitioning_mesh_ids_){arena}
    , /*decltype(_impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.shardable_value_update_pairs_){arena}
    , decltype(_impl_.fusion_config_){arena}
    , /*decltype(_impl_.dot_config_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.layout_config_){arena}
    , decltype(_impl_.memory_space_assignment_config_){arena}
    , /*decltype(_impl_._memory_space_assignment_config_cached_byte_size_)*/{0}
    , decltype(_impl_.phase_ordering_config_){arena}
    , decltype(_impl_.allow_spmd_sharding_propagation_to_output_){arena}
    , /*decltype(_impl_.analysis_allowance_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.allow_spmd_sharding_propagation_to_parameters_){arena}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.fdo_profile_){}
    , decltype(_impl_.entry_computation_layout_){nullptr}
    , decltype(_impl_.debug_options_){nullptr}
    , decltype(_impl_.static_device_assignment_){nullptr}
    , decltype(_impl_.pre_simulation_device_assignment_){nullptr}
    , decltype(_impl_.seed_){uint64_t{0u}}
    , decltype(_impl_.replica_count_){int64_t{0}}
    , decltype(_impl_.num_partitions_){int64_t{0}}
    , decltype(_impl_.launch_id_){0}
    , decltype(_impl_.use_spmd_partitioning_){false}
    , decltype(_impl_.use_auto_spmd_partitioning_){false}
    , decltype(_impl_.deduplicate_hlo_){false}
    , decltype(_impl_.allow_separate_sharding_programs_){false}
    , decltype(_impl_.intra_op_parallelism_threads_){int64_t{0}}
    , decltype(_impl_.fusion_config_collection_){0}
    , decltype(_impl_.alias_passthrough_params_){false}
    , decltype(_impl_.content_aware_computation_sorting_){false}
    , decltype(_impl_.use_shardy_partitioner_){false}
    , decltype(_impl_.phase_index_){0}
    , decltype(_impl_.matrix_unit_operand_precision_){0}
    , decltype(_impl_.device_memory_size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fdo_profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fdo_profile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloModuleConfigProto::~HloModuleConfigProto() {
  // @@protoc_insertion_point(destructor:xla.HloModuleConfigProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HloModuleConfigProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.param_requires_broadcast_via_collectives_.~RepeatedField();
  _impl_.auto_spmd_partitioning_mesh_shape_.~RepeatedField();
  _impl_.auto_spmd_partitioning_mesh_ids_.~RepeatedField();
  _impl_.shardable_value_update_pairs_.~RepeatedPtrField();
  _impl_.fusion_config_.~RepeatedPtrField();
  _impl_.dot_config_.Destruct();
  _impl_.dot_config_.~MapField();
  _impl_.layout_config_.~RepeatedPtrField();
  _impl_.memory_space_assignment_config_.~RepeatedField();
  _impl_.phase_ordering_config_.~RepeatedPtrField();
  _impl_.allow_spmd_sharding_propagation_to_output_.~RepeatedField();
  _impl_.analysis_allowance_map_.Destruct();
  _impl_.analysis_allowance_map_.~MapField();
  _impl_.allow_spmd_sharding_propagation_to_parameters_.~RepeatedField();
  _impl_.device_type_.Destroy();
  _impl_.fdo_profile_.Destroy();
  if (this != internal_default_instance()) delete _impl_.entry_computation_layout_;
  if (this != internal_default_instance()) delete _impl_.debug_options_;
  if (this != internal_default_instance()) delete _impl_.static_device_assignment_;
  if (this != internal_default_instance()) delete _impl_.pre_simulation_device_assignment_;
}

void HloModuleConfigProto::ArenaDtor(void* object) {
  HloModuleConfigProto* _this = reinterpret_cast< HloModuleConfigProto* >(object);
  _this->_impl_.dot_config_.Destruct();
  _this->_impl_.analysis_allowance_map_.Destruct();
}
void HloModuleConfigProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleConfigProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_requires_broadcast_via_collectives_.Clear();
  _impl_.auto_spmd_partitioning_mesh_shape_.Clear();
  _impl_.auto_spmd_partitioning_mesh_ids_.Clear();
  _impl_.shardable_value_update_pairs_.Clear();
  _impl_.fusion_config_.Clear();
  _impl_.dot_config_.Clear();
  _impl_.layout_config_.Clear();
  _impl_.memory_space_assignment_config_.Clear();
  _impl_.phase_ordering_config_.Clear();
  _impl_.allow_spmd_sharding_propagation_to_output_.Clear();
  _impl_.analysis_allowance_map_.Clear();
  _impl_.allow_spmd_sharding_propagation_to_parameters_.Clear();
  _impl_.device_type_.ClearToEmpty();
  _impl_.fdo_profile_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.entry_computation_layout_ != nullptr) {
    delete _impl_.entry_computation_layout_;
  }
  _impl_.entry_computation_layout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.debug_options_ != nullptr) {
    delete _impl_.debug_options_;
  }
  _impl_.debug_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.static_device_assignment_ != nullptr) {
    delete _impl_.static_device_assignment_;
  }
  _impl_.static_device_assignment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pre_simulation_device_assignment_ != nullptr) {
    delete _impl_.pre_simulation_device_assignment_;
  }
  _impl_.pre_simulation_device_assignment_ = nullptr;
  ::memset(&_impl_.seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.device_memory_size_) -
      reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.device_memory_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleConfigProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.ProgramShapeProto entry_computation_layout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry_computation_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 launch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.launch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 replica_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.replica_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_partitions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.num_partitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool param_requires_broadcast_via_collectives = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_param_requires_broadcast_via_collectives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_param_requires_broadcast_via_collectives(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_spmd_partitioning = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.use_spmd_partitioning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_auto_spmd_partitioning = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.use_auto_spmd_partitioning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 auto_spmd_partitioning_mesh_shape = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_auto_spmd_partitioning_mesh_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_auto_spmd_partitioning_mesh_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 auto_spmd_partitioning_mesh_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_auto_spmd_partitioning_mesh_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_auto_spmd_partitioning_mesh_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool deduplicate_hlo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.deduplicate_hlo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 intra_op_parallelism_threads = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.intra_op_parallelism_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_device_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloModuleConfigProto.device_type"));
        } else
          goto handle_unusual;
        continue;
      // .xla.DebugOptions debug_options = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DeviceAssignmentProto static_device_assignment = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_static_device_assignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_shardable_value_update_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool alias_passthrough_params = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.alias_passthrough_params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool content_aware_computation_sorting = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.content_aware_computation_sorting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.HloModuleConfigProto.FusionConfigCollection fusion_config_collection = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fusion_config_collection(static_cast<::xla::HloModuleConfigProto_FusionConfigCollection>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloModuleConfigProto.BoolList fusion_config = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fusion_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xla.HloModuleConfigProto.Int64List> dot_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.dot_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloModuleConfigProto.Int64ListList layout_config = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_layout_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 memory_space_assignment_config = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_memory_space_assignment_config(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 184) {
          _internal_add_memory_space_assignment_config(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloModuleConfigProto.BoolList phase_ordering_config = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_phase_ordering_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 phase_index = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.phase_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool allow_spmd_sharding_propagation_to_output = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_allow_spmd_sharding_propagation_to_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 216) {
          _internal_add_allow_spmd_sharding_propagation_to_output(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> analysis_allowance_map = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.analysis_allowance_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.PrecisionConfig.Precision matrix_unit_operand_precision = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_matrix_unit_operand_precision(static_cast<::xla::PrecisionConfig_Precision>(val));
        } else
          goto handle_unusual;
        continue;
      // bool allow_separate_sharding_programs = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.allow_separate_sharding_programs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes fdo_profile = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_fdo_profile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 device_memory_size = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.device_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool allow_spmd_sharding_propagation_to_parameters = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_allow_spmd_sharding_propagation_to_parameters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_allow_spmd_sharding_propagation_to_parameters(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_shardy_partitioner = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.use_shardy_partitioner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DeviceAssignmentProto pre_simulation_device_assignment = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_simulation_device_assignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleConfigProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleConfigProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.ProgramShapeProto entry_computation_layout = 1;
  if (this->_internal_has_entry_computation_layout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entry_computation_layout(this),
        _Internal::entry_computation_layout(this).GetCachedSize(), target, stream);
  }

  // uint64 seed = 2;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seed(), target);
  }

  // int32 launch_id = 3;
  if (this->_internal_launch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_launch_id(), target);
  }

  // int64 replica_count = 4;
  if (this->_internal_replica_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_replica_count(), target);
  }

  // int64 num_partitions = 5;
  if (this->_internal_num_partitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_partitions(), target);
  }

  // repeated bool param_requires_broadcast_via_collectives = 6;
  if (this->_internal_param_requires_broadcast_via_collectives_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_param_requires_broadcast_via_collectives(), target);
  }

  // bool use_spmd_partitioning = 7;
  if (this->_internal_use_spmd_partitioning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_use_spmd_partitioning(), target);
  }

  // bool use_auto_spmd_partitioning = 8;
  if (this->_internal_use_auto_spmd_partitioning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_use_auto_spmd_partitioning(), target);
  }

  // repeated int64 auto_spmd_partitioning_mesh_shape = 9;
  {
    int byte_size = _impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_auto_spmd_partitioning_mesh_shape(), byte_size, target);
    }
  }

  // repeated int64 auto_spmd_partitioning_mesh_ids = 10;
  {
    int byte_size = _impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_auto_spmd_partitioning_mesh_ids(), byte_size, target);
    }
  }

  // bool deduplicate_hlo = 11;
  if (this->_internal_deduplicate_hlo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_deduplicate_hlo(), target);
  }

  // int64 intra_op_parallelism_threads = 12;
  if (this->_internal_intra_op_parallelism_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_intra_op_parallelism_threads(), target);
  }

  // string device_type = 13;
  if (!this->_internal_device_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloModuleConfigProto.device_type");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_device_type(), target);
  }

  // .xla.DebugOptions debug_options = 14;
  if (this->_internal_has_debug_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::debug_options(this),
        _Internal::debug_options(this).GetCachedSize(), target, stream);
  }

  // .xla.DeviceAssignmentProto static_device_assignment = 15;
  if (this->_internal_has_static_device_assignment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::static_device_assignment(this),
        _Internal::static_device_assignment(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shardable_value_update_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_shardable_value_update_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool alias_passthrough_params = 17;
  if (this->_internal_alias_passthrough_params() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_alias_passthrough_params(), target);
  }

  // bool content_aware_computation_sorting = 18;
  if (this->_internal_content_aware_computation_sorting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_content_aware_computation_sorting(), target);
  }

  // .xla.HloModuleConfigProto.FusionConfigCollection fusion_config_collection = 19;
  if (this->_internal_fusion_config_collection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_fusion_config_collection(), target);
  }

  // repeated .xla.HloModuleConfigProto.BoolList fusion_config = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fusion_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_fusion_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .xla.HloModuleConfigProto.Int64List> dot_config = 21;
  if (!this->_internal_dot_config().empty()) {
    using MapType = ::_pb::Map<std::string, ::xla::HloModuleConfigProto_Int64List>;
    using WireHelper = HloModuleConfigProto_DotConfigEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_dot_config();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xla.HloModuleConfigProto.DotConfigEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(21, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(21, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .xla.HloModuleConfigProto.Int64ListList layout_config = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layout_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_layout_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 memory_space_assignment_config = 23;
  {
    int byte_size = _impl_._memory_space_assignment_config_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          23, _internal_memory_space_assignment_config(), byte_size, target);
    }
  }

  // repeated .xla.HloModuleConfigProto.BoolList phase_ordering_config = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phase_ordering_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_phase_ordering_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 phase_index = 25;
  if (this->_internal_phase_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_phase_index(), target);
  }

  // repeated bool allow_spmd_sharding_propagation_to_output = 27;
  if (this->_internal_allow_spmd_sharding_propagation_to_output_size() > 0) {
    target = stream->WriteFixedPacked(27, _internal_allow_spmd_sharding_propagation_to_output(), target);
  }

  // map<string, int64> analysis_allowance_map = 28;
  if (!this->_internal_analysis_allowance_map().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_analysis_allowance_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xla.HloModuleConfigProto.AnalysisAllowanceMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(28, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(28, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .xla.PrecisionConfig.Precision matrix_unit_operand_precision = 29;
  if (this->_internal_matrix_unit_operand_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      29, this->_internal_matrix_unit_operand_precision(), target);
  }

  // bool allow_separate_sharding_programs = 30;
  if (this->_internal_allow_separate_sharding_programs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_allow_separate_sharding_programs(), target);
  }

  // bytes fdo_profile = 31;
  if (!this->_internal_fdo_profile().empty()) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_fdo_profile(), target);
  }

  // int64 device_memory_size = 32;
  if (this->_internal_device_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_device_memory_size(), target);
  }

  // repeated bool allow_spmd_sharding_propagation_to_parameters = 33;
  if (this->_internal_allow_spmd_sharding_propagation_to_parameters_size() > 0) {
    target = stream->WriteFixedPacked(33, _internal_allow_spmd_sharding_propagation_to_parameters(), target);
  }

  // bool use_shardy_partitioner = 34;
  if (this->_internal_use_shardy_partitioner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_use_shardy_partitioner(), target);
  }

  // .xla.DeviceAssignmentProto pre_simulation_device_assignment = 35;
  if (this->_internal_has_pre_simulation_device_assignment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::pre_simulation_device_assignment(this),
        _Internal::pre_simulation_device_assignment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleConfigProto)
  return target;
}

size_t HloModuleConfigProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleConfigProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool param_requires_broadcast_via_collectives = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_param_requires_broadcast_via_collectives_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int64 auto_spmd_partitioning_mesh_shape = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.auto_spmd_partitioning_mesh_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 auto_spmd_partitioning_mesh_ids = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.auto_spmd_partitioning_mesh_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 16;
  total_size += 2UL * this->_internal_shardable_value_update_pairs_size();
  for (const auto& msg : this->_impl_.shardable_value_update_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.HloModuleConfigProto.BoolList fusion_config = 20;
  total_size += 2UL * this->_internal_fusion_config_size();
  for (const auto& msg : this->_impl_.fusion_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .xla.HloModuleConfigProto.Int64List> dot_config = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dot_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xla::HloModuleConfigProto_Int64List >::const_iterator
      it = this->_internal_dot_config().begin();
      it != this->_internal_dot_config().end(); ++it) {
    total_size += HloModuleConfigProto_DotConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .xla.HloModuleConfigProto.Int64ListList layout_config = 22;
  total_size += 2UL * this->_internal_layout_config_size();
  for (const auto& msg : this->_impl_.layout_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 memory_space_assignment_config = 23;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.memory_space_assignment_config_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._memory_space_assignment_config_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.HloModuleConfigProto.BoolList phase_ordering_config = 24;
  total_size += 2UL * this->_internal_phase_ordering_config_size();
  for (const auto& msg : this->_impl_.phase_ordering_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool allow_spmd_sharding_propagation_to_output = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_allow_spmd_sharding_propagation_to_output_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // map<string, int64> analysis_allowance_map = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_analysis_allowance_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_analysis_allowance_map().begin();
      it != this->_internal_analysis_allowance_map().end(); ++it) {
    total_size += HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated bool allow_spmd_sharding_propagation_to_parameters = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_allow_spmd_sharding_propagation_to_parameters_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string device_type = 13;
  if (!this->_internal_device_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // bytes fdo_profile = 31;
  if (!this->_internal_fdo_profile().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fdo_profile());
  }

  // .xla.ProgramShapeProto entry_computation_layout = 1;
  if (this->_internal_has_entry_computation_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entry_computation_layout_);
  }

  // .xla.DebugOptions debug_options = 14;
  if (this->_internal_has_debug_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_options_);
  }

  // .xla.DeviceAssignmentProto static_device_assignment = 15;
  if (this->_internal_has_static_device_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.static_device_assignment_);
  }

  // .xla.DeviceAssignmentProto pre_simulation_device_assignment = 35;
  if (this->_internal_has_pre_simulation_device_assignment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pre_simulation_device_assignment_);
  }

  // uint64 seed = 2;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seed());
  }

  // int64 replica_count = 4;
  if (this->_internal_replica_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_replica_count());
  }

  // int64 num_partitions = 5;
  if (this->_internal_num_partitions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_partitions());
  }

  // int32 launch_id = 3;
  if (this->_internal_launch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_launch_id());
  }

  // bool use_spmd_partitioning = 7;
  if (this->_internal_use_spmd_partitioning() != 0) {
    total_size += 1 + 1;
  }

  // bool use_auto_spmd_partitioning = 8;
  if (this->_internal_use_auto_spmd_partitioning() != 0) {
    total_size += 1 + 1;
  }

  // bool deduplicate_hlo = 11;
  if (this->_internal_deduplicate_hlo() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_separate_sharding_programs = 30;
  if (this->_internal_allow_separate_sharding_programs() != 0) {
    total_size += 2 + 1;
  }

  // int64 intra_op_parallelism_threads = 12;
  if (this->_internal_intra_op_parallelism_threads() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_intra_op_parallelism_threads());
  }

  // .xla.HloModuleConfigProto.FusionConfigCollection fusion_config_collection = 19;
  if (this->_internal_fusion_config_collection() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fusion_config_collection());
  }

  // bool alias_passthrough_params = 17;
  if (this->_internal_alias_passthrough_params() != 0) {
    total_size += 2 + 1;
  }

  // bool content_aware_computation_sorting = 18;
  if (this->_internal_content_aware_computation_sorting() != 0) {
    total_size += 2 + 1;
  }

  // bool use_shardy_partitioner = 34;
  if (this->_internal_use_shardy_partitioner() != 0) {
    total_size += 2 + 1;
  }

  // int32 phase_index = 25;
  if (this->_internal_phase_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_phase_index());
  }

  // .xla.PrecisionConfig.Precision matrix_unit_operand_precision = 29;
  if (this->_internal_matrix_unit_operand_precision() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_matrix_unit_operand_precision());
  }

  // int64 device_memory_size = 32;
  if (this->_internal_device_memory_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_device_memory_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleConfigProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleConfigProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleConfigProto::GetClassData() const { return &_class_data_; }


void HloModuleConfigProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleConfigProto*>(&to_msg);
  auto& from = static_cast<const HloModuleConfigProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleConfigProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_requires_broadcast_via_collectives_.MergeFrom(from._impl_.param_requires_broadcast_via_collectives_);
  _this->_impl_.auto_spmd_partitioning_mesh_shape_.MergeFrom(from._impl_.auto_spmd_partitioning_mesh_shape_);
  _this->_impl_.auto_spmd_partitioning_mesh_ids_.MergeFrom(from._impl_.auto_spmd_partitioning_mesh_ids_);
  _this->_impl_.shardable_value_update_pairs_.MergeFrom(from._impl_.shardable_value_update_pairs_);
  _this->_impl_.fusion_config_.MergeFrom(from._impl_.fusion_config_);
  _this->_impl_.dot_config_.MergeFrom(from._impl_.dot_config_);
  _this->_impl_.layout_config_.MergeFrom(from._impl_.layout_config_);
  _this->_impl_.memory_space_assignment_config_.MergeFrom(from._impl_.memory_space_assignment_config_);
  _this->_impl_.phase_ordering_config_.MergeFrom(from._impl_.phase_ordering_config_);
  _this->_impl_.allow_spmd_sharding_propagation_to_output_.MergeFrom(from._impl_.allow_spmd_sharding_propagation_to_output_);
  _this->_impl_.analysis_allowance_map_.MergeFrom(from._impl_.analysis_allowance_map_);
  _this->_impl_.allow_spmd_sharding_propagation_to_parameters_.MergeFrom(from._impl_.allow_spmd_sharding_propagation_to_parameters_);
  if (!from._internal_device_type().empty()) {
    _this->_internal_set_device_type(from._internal_device_type());
  }
  if (!from._internal_fdo_profile().empty()) {
    _this->_internal_set_fdo_profile(from._internal_fdo_profile());
  }
  if (from._internal_has_entry_computation_layout()) {
    _this->_internal_mutable_entry_computation_layout()->::xla::ProgramShapeProto::MergeFrom(
        from._internal_entry_computation_layout());
  }
  if (from._internal_has_debug_options()) {
    _this->_internal_mutable_debug_options()->::xla::DebugOptions::MergeFrom(
        from._internal_debug_options());
  }
  if (from._internal_has_static_device_assignment()) {
    _this->_internal_mutable_static_device_assignment()->::xla::DeviceAssignmentProto::MergeFrom(
        from._internal_static_device_assignment());
  }
  if (from._internal_has_pre_simulation_device_assignment()) {
    _this->_internal_mutable_pre_simulation_device_assignment()->::xla::DeviceAssignmentProto::MergeFrom(
        from._internal_pre_simulation_device_assignment());
  }
  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  if (from._internal_replica_count() != 0) {
    _this->_internal_set_replica_count(from._internal_replica_count());
  }
  if (from._internal_num_partitions() != 0) {
    _this->_internal_set_num_partitions(from._internal_num_partitions());
  }
  if (from._internal_launch_id() != 0) {
    _this->_internal_set_launch_id(from._internal_launch_id());
  }
  if (from._internal_use_spmd_partitioning() != 0) {
    _this->_internal_set_use_spmd_partitioning(from._internal_use_spmd_partitioning());
  }
  if (from._internal_use_auto_spmd_partitioning() != 0) {
    _this->_internal_set_use_auto_spmd_partitioning(from._internal_use_auto_spmd_partitioning());
  }
  if (from._internal_deduplicate_hlo() != 0) {
    _this->_internal_set_deduplicate_hlo(from._internal_deduplicate_hlo());
  }
  if (from._internal_allow_separate_sharding_programs() != 0) {
    _this->_internal_set_allow_separate_sharding_programs(from._internal_allow_separate_sharding_programs());
  }
  if (from._internal_intra_op_parallelism_threads() != 0) {
    _this->_internal_set_intra_op_parallelism_threads(from._internal_intra_op_parallelism_threads());
  }
  if (from._internal_fusion_config_collection() != 0) {
    _this->_internal_set_fusion_config_collection(from._internal_fusion_config_collection());
  }
  if (from._internal_alias_passthrough_params() != 0) {
    _this->_internal_set_alias_passthrough_params(from._internal_alias_passthrough_params());
  }
  if (from._internal_content_aware_computation_sorting() != 0) {
    _this->_internal_set_content_aware_computation_sorting(from._internal_content_aware_computation_sorting());
  }
  if (from._internal_use_shardy_partitioner() != 0) {
    _this->_internal_set_use_shardy_partitioner(from._internal_use_shardy_partitioner());
  }
  if (from._internal_phase_index() != 0) {
    _this->_internal_set_phase_index(from._internal_phase_index());
  }
  if (from._internal_matrix_unit_operand_precision() != 0) {
    _this->_internal_set_matrix_unit_operand_precision(from._internal_matrix_unit_operand_precision());
  }
  if (from._internal_device_memory_size() != 0) {
    _this->_internal_set_device_memory_size(from._internal_device_memory_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleConfigProto::CopyFrom(const HloModuleConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleConfigProto::IsInitialized() const {
  return true;
}

void HloModuleConfigProto::InternalSwap(HloModuleConfigProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_requires_broadcast_via_collectives_.InternalSwap(&other->_impl_.param_requires_broadcast_via_collectives_);
  _impl_.auto_spmd_partitioning_mesh_shape_.InternalSwap(&other->_impl_.auto_spmd_partitioning_mesh_shape_);
  _impl_.auto_spmd_partitioning_mesh_ids_.InternalSwap(&other->_impl_.auto_spmd_partitioning_mesh_ids_);
  _impl_.shardable_value_update_pairs_.InternalSwap(&other->_impl_.shardable_value_update_pairs_);
  _impl_.fusion_config_.InternalSwap(&other->_impl_.fusion_config_);
  _impl_.dot_config_.InternalSwap(&other->_impl_.dot_config_);
  _impl_.layout_config_.InternalSwap(&other->_impl_.layout_config_);
  _impl_.memory_space_assignment_config_.InternalSwap(&other->_impl_.memory_space_assignment_config_);
  _impl_.phase_ordering_config_.InternalSwap(&other->_impl_.phase_ordering_config_);
  _impl_.allow_spmd_sharding_propagation_to_output_.InternalSwap(&other->_impl_.allow_spmd_sharding_propagation_to_output_);
  _impl_.analysis_allowance_map_.InternalSwap(&other->_impl_.analysis_allowance_map_);
  _impl_.allow_spmd_sharding_propagation_to_parameters_.InternalSwap(&other->_impl_.allow_spmd_sharding_propagation_to_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_type_, lhs_arena,
      &other->_impl_.device_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fdo_profile_, lhs_arena,
      &other->_impl_.fdo_profile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.device_memory_size_)
      + sizeof(HloModuleConfigProto::_impl_.device_memory_size_)
      - PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.entry_computation_layout_)>(
          reinterpret_cast<char*>(&_impl_.entry_computation_layout_),
          reinterpret_cast<char*>(&other->_impl_.entry_computation_layout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleConfigProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[11]);
}

// ===================================================================

class HloModuleProtoWithConfig::_Internal {
 public:
  static const ::xla::HloModuleProto& hlo_module(const HloModuleProtoWithConfig* msg);
  static const ::xla::HloModuleConfigProto& config(const HloModuleProtoWithConfig* msg);
};

const ::xla::HloModuleProto&
HloModuleProtoWithConfig::_Internal::hlo_module(const HloModuleProtoWithConfig* msg) {
  return *msg->_impl_.hlo_module_;
}
const ::xla::HloModuleConfigProto&
HloModuleProtoWithConfig::_Internal::config(const HloModuleProtoWithConfig* msg) {
  return *msg->_impl_.config_;
}
void HloModuleProtoWithConfig::clear_hlo_module() {
  if (GetArenaForAllocation() == nullptr && _impl_.hlo_module_ != nullptr) {
    delete _impl_.hlo_module_;
  }
  _impl_.hlo_module_ = nullptr;
}
HloModuleProtoWithConfig::HloModuleProtoWithConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleProtoWithConfig)
}
HloModuleProtoWithConfig::HloModuleProtoWithConfig(const HloModuleProtoWithConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleProtoWithConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hlo_module_){nullptr}
    , decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hlo_module()) {
    _this->_impl_.hlo_module_ = new ::xla::HloModuleProto(*from._impl_.hlo_module_);
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::xla::HloModuleConfigProto(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleProtoWithConfig)
}

inline void HloModuleProtoWithConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hlo_module_){nullptr}
    , decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloModuleProtoWithConfig::~HloModuleProtoWithConfig() {
  // @@protoc_insertion_point(destructor:xla.HloModuleProtoWithConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloModuleProtoWithConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hlo_module_;
  if (this != internal_default_instance()) delete _impl_.config_;
}

void HloModuleProtoWithConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleProtoWithConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleProtoWithConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hlo_module_ != nullptr) {
    delete _impl_.hlo_module_;
  }
  _impl_.hlo_module_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleProtoWithConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.HloModuleProto hlo_module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hlo_module(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.HloModuleConfigProto config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleProtoWithConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleProtoWithConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.HloModuleProto hlo_module = 1;
  if (this->_internal_has_hlo_module()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hlo_module(this),
        _Internal::hlo_module(this).GetCachedSize(), target, stream);
  }

  // .xla.HloModuleConfigProto config = 2;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleProtoWithConfig)
  return target;
}

size_t HloModuleProtoWithConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleProtoWithConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xla.HloModuleProto hlo_module = 1;
  if (this->_internal_has_hlo_module()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hlo_module_);
  }

  // .xla.HloModuleConfigProto config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleProtoWithConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleProtoWithConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleProtoWithConfig::GetClassData() const { return &_class_data_; }


void HloModuleProtoWithConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleProtoWithConfig*>(&to_msg);
  auto& from = static_cast<const HloModuleProtoWithConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleProtoWithConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hlo_module()) {
    _this->_internal_mutable_hlo_module()->::xla::HloModuleProto::MergeFrom(
        from._internal_hlo_module());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::xla::HloModuleConfigProto::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleProtoWithConfig::CopyFrom(const HloModuleProtoWithConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleProtoWithConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleProtoWithConfig::IsInitialized() const {
  return true;
}

void HloModuleProtoWithConfig::InternalSwap(HloModuleProtoWithConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_.config_)
      + sizeof(HloModuleProtoWithConfig::_impl_.config_)
      - PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_.hlo_module_)>(
          reinterpret_cast<char*>(&_impl_.hlo_module_),
          reinterpret_cast<char*>(&other->_impl_.hlo_module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleProtoWithConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[12]);
}

// ===================================================================

class ScheduleProto_Instruction::_Internal {
 public:
};

ScheduleProto_Instruction::ScheduleProto_Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ScheduleProto.Instruction)
}
ScheduleProto_Instruction::ScheduleProto_Instruction(const ScheduleProto_Instruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleProto_Instruction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.start_timestamp_cycles_){}
    , decltype(_impl_.end_timestamp_cycles_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_timestamp_cycles_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.end_timestamp_cycles_));
  // @@protoc_insertion_point(copy_constructor:xla.ScheduleProto.Instruction)
}

inline void ScheduleProto_Instruction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.start_timestamp_cycles_){0}
    , decltype(_impl_.end_timestamp_cycles_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScheduleProto_Instruction::~ScheduleProto_Instruction() {
  // @@protoc_insertion_point(destructor:xla.ScheduleProto.Instruction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleProto_Instruction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScheduleProto_Instruction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleProto_Instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ScheduleProto.Instruction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_timestamp_cycles_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.end_timestamp_cycles_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleProto_Instruction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double start_timestamp_cycles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.start_timestamp_cycles_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_timestamp_cycles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.end_timestamp_cycles_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleProto_Instruction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ScheduleProto.Instruction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // double start_timestamp_cycles = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp_cycles = this->_internal_start_timestamp_cycles();
  uint64_t raw_start_timestamp_cycles;
  memcpy(&raw_start_timestamp_cycles, &tmp_start_timestamp_cycles, sizeof(tmp_start_timestamp_cycles));
  if (raw_start_timestamp_cycles != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_timestamp_cycles(), target);
  }

  // double end_timestamp_cycles = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp_cycles = this->_internal_end_timestamp_cycles();
  uint64_t raw_end_timestamp_cycles;
  memcpy(&raw_end_timestamp_cycles, &tmp_end_timestamp_cycles, sizeof(tmp_end_timestamp_cycles));
  if (raw_end_timestamp_cycles != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_timestamp_cycles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ScheduleProto.Instruction)
  return target;
}

size_t ScheduleProto_Instruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ScheduleProto.Instruction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // double start_timestamp_cycles = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp_cycles = this->_internal_start_timestamp_cycles();
  uint64_t raw_start_timestamp_cycles;
  memcpy(&raw_start_timestamp_cycles, &tmp_start_timestamp_cycles, sizeof(tmp_start_timestamp_cycles));
  if (raw_start_timestamp_cycles != 0) {
    total_size += 1 + 8;
  }

  // double end_timestamp_cycles = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp_cycles = this->_internal_end_timestamp_cycles();
  uint64_t raw_end_timestamp_cycles;
  memcpy(&raw_end_timestamp_cycles, &tmp_end_timestamp_cycles, sizeof(tmp_end_timestamp_cycles));
  if (raw_end_timestamp_cycles != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleProto_Instruction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleProto_Instruction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleProto_Instruction::GetClassData() const { return &_class_data_; }


void ScheduleProto_Instruction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleProto_Instruction*>(&to_msg);
  auto& from = static_cast<const ScheduleProto_Instruction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ScheduleProto.Instruction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp_cycles = from._internal_start_timestamp_cycles();
  uint64_t raw_start_timestamp_cycles;
  memcpy(&raw_start_timestamp_cycles, &tmp_start_timestamp_cycles, sizeof(tmp_start_timestamp_cycles));
  if (raw_start_timestamp_cycles != 0) {
    _this->_internal_set_start_timestamp_cycles(from._internal_start_timestamp_cycles());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp_cycles = from._internal_end_timestamp_cycles();
  uint64_t raw_end_timestamp_cycles;
  memcpy(&raw_end_timestamp_cycles, &tmp_end_timestamp_cycles, sizeof(tmp_end_timestamp_cycles));
  if (raw_end_timestamp_cycles != 0) {
    _this->_internal_set_end_timestamp_cycles(from._internal_end_timestamp_cycles());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleProto_Instruction::CopyFrom(const ScheduleProto_Instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ScheduleProto.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleProto_Instruction::IsInitialized() const {
  return true;
}

void ScheduleProto_Instruction::InternalSwap(ScheduleProto_Instruction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.end_timestamp_cycles_)
      + sizeof(ScheduleProto_Instruction::_impl_.end_timestamp_cycles_)
      - PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleProto_Instruction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[13]);
}

// ===================================================================

class ScheduleProto::_Internal {
 public:
  static const ::xla::HloModuleProto& hlo_module(const ScheduleProto* msg);
};

const ::xla::HloModuleProto&
ScheduleProto::_Internal::hlo_module(const ScheduleProto* msg) {
  return *msg->_impl_.hlo_module_;
}
void ScheduleProto::clear_hlo_module() {
  if (GetArenaForAllocation() == nullptr && _impl_.hlo_module_ != nullptr) {
    delete _impl_.hlo_module_;
  }
  _impl_.hlo_module_ = nullptr;
}
ScheduleProto::ScheduleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ScheduleProto)
}
ScheduleProto::ScheduleProto(const ScheduleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instructions_){from._impl_.instructions_}
    , decltype(_impl_.hlo_module_){nullptr}
    , decltype(_impl_.computation_id_){}
    , decltype(_impl_.cycles_per_microsecond_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hlo_module()) {
    _this->_impl_.hlo_module_ = new ::xla::HloModuleProto(*from._impl_.hlo_module_);
  }
  ::memcpy(&_impl_.computation_id_, &from._impl_.computation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cycles_per_microsecond_) -
    reinterpret_cast<char*>(&_impl_.computation_id_)) + sizeof(_impl_.cycles_per_microsecond_));
  // @@protoc_insertion_point(copy_constructor:xla.ScheduleProto)
}

inline void ScheduleProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instructions_){arena}
    , decltype(_impl_.hlo_module_){nullptr}
    , decltype(_impl_.computation_id_){int64_t{0}}
    , decltype(_impl_.cycles_per_microsecond_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScheduleProto::~ScheduleProto() {
  // @@protoc_insertion_point(destructor:xla.ScheduleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instructions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.hlo_module_;
}

void ScheduleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ScheduleProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instructions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.hlo_module_ != nullptr) {
    delete _impl_.hlo_module_;
  }
  _impl_.hlo_module_ = nullptr;
  ::memset(&_impl_.computation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cycles_per_microsecond_) -
      reinterpret_cast<char*>(&_impl_.computation_id_)) + sizeof(_impl_.cycles_per_microsecond_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.ScheduleProto.Instruction instructions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instructions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 computation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.computation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.HloModuleProto hlo_module = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hlo_module(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cycles_per_microsecond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cycles_per_microsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ScheduleProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.ScheduleProto.Instruction instructions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instructions_size()); i < n; i++) {
    const auto& repfield = this->_internal_instructions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 computation_id = 2;
  if (this->_internal_computation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_computation_id(), target);
  }

  // .xla.HloModuleProto hlo_module = 3;
  if (this->_internal_has_hlo_module()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::hlo_module(this),
        _Internal::hlo_module(this).GetCachedSize(), target, stream);
  }

  // int64 cycles_per_microsecond = 4;
  if (this->_internal_cycles_per_microsecond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_cycles_per_microsecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ScheduleProto)
  return target;
}

size_t ScheduleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ScheduleProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.ScheduleProto.Instruction instructions = 1;
  total_size += 1UL * this->_internal_instructions_size();
  for (const auto& msg : this->_impl_.instructions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xla.HloModuleProto hlo_module = 3;
  if (this->_internal_has_hlo_module()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hlo_module_);
  }

  // int64 computation_id = 2;
  if (this->_internal_computation_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_computation_id());
  }

  // int64 cycles_per_microsecond = 4;
  if (this->_internal_cycles_per_microsecond() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cycles_per_microsecond());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleProto::GetClassData() const { return &_class_data_; }


void ScheduleProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleProto*>(&to_msg);
  auto& from = static_cast<const ScheduleProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ScheduleProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instructions_.MergeFrom(from._impl_.instructions_);
  if (from._internal_has_hlo_module()) {
    _this->_internal_mutable_hlo_module()->::xla::HloModuleProto::MergeFrom(
        from._internal_hlo_module());
  }
  if (from._internal_computation_id() != 0) {
    _this->_internal_set_computation_id(from._internal_computation_id());
  }
  if (from._internal_cycles_per_microsecond() != 0) {
    _this->_internal_set_cycles_per_microsecond(from._internal_cycles_per_microsecond());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleProto::CopyFrom(const ScheduleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ScheduleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleProto::IsInitialized() const {
  return true;
}

void ScheduleProto::InternalSwap(ScheduleProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instructions_.InternalSwap(&other->_impl_.instructions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.cycles_per_microsecond_)
      + sizeof(ScheduleProto::_impl_.cycles_per_microsecond_)
      - PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.hlo_module_)>(
          reinterpret_cast<char*>(&_impl_.hlo_module_),
          reinterpret_cast<char*>(&other->_impl_.hlo_module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_2eproto_getter, &descriptor_table_xla_2fxla_2eproto_once,
      file_level_metadata_xla_2fxla_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xla::CompilationEnvironmentsProto*
Arena::CreateMaybeMessage< ::xla::CompilationEnvironmentsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::CompilationEnvironmentsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::DebugOptions*
Arena::CreateMaybeMessage< ::xla::DebugOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::DebugOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::GpuCompilationEnvironment*
Arena::CreateMaybeMessage< ::xla::GpuCompilationEnvironment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::GpuCompilationEnvironment >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ShardableValueUpdatePairProto*
Arena::CreateMaybeMessage< ::xla::ShardableValueUpdatePairProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ShardableValueUpdatePairProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ExecutionOptions*
Arena::CreateMaybeMessage< ::xla::ExecutionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ExecutionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleConfigProto_BoolList*
Arena::CreateMaybeMessage< ::xla::HloModuleConfigProto_BoolList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleConfigProto_BoolList >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleConfigProto_Int64List*
Arena::CreateMaybeMessage< ::xla::HloModuleConfigProto_Int64List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleConfigProto_Int64List >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleConfigProto_Int64ListList*
Arena::CreateMaybeMessage< ::xla::HloModuleConfigProto_Int64ListList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleConfigProto_Int64ListList >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleConfigProto*
Arena::CreateMaybeMessage< ::xla::HloModuleConfigProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleConfigProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleProtoWithConfig*
Arena::CreateMaybeMessage< ::xla::HloModuleProtoWithConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleProtoWithConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ScheduleProto_Instruction*
Arena::CreateMaybeMessage< ::xla::ScheduleProto_Instruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ScheduleProto_Instruction >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ScheduleProto*
Arena::CreateMaybeMessage< ::xla::ScheduleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ScheduleProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
