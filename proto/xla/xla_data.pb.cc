// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/xla_data.proto

#include "xla/xla_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xla {
PROTOBUF_CONSTEXPR PaddingConfig_PaddingConfigDimension::PaddingConfig_PaddingConfigDimension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edge_padding_low_)*/int64_t{0}
  , /*decltype(_impl_.edge_padding_high_)*/int64_t{0}
  , /*decltype(_impl_.interior_padding_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaddingConfig_PaddingConfigDimensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaddingConfig_PaddingConfigDimensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaddingConfig_PaddingConfigDimensionDefaultTypeInternal() {}
  union {
    PaddingConfig_PaddingConfigDimension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaddingConfig_PaddingConfigDimensionDefaultTypeInternal _PaddingConfig_PaddingConfigDimension_default_instance_;
PROTOBUF_CONSTEXPR PaddingConfig::PaddingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaddingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaddingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaddingConfigDefaultTypeInternal() {}
  union {
    PaddingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaddingConfigDefaultTypeInternal _PaddingConfig_default_instance_;
PROTOBUF_CONSTEXPR TileProto::TileProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TileProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileProtoDefaultTypeInternal() {}
  union {
    TileProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileProtoDefaultTypeInternal _TileProto_default_instance_;
PROTOBUF_CONSTEXPR SplitConfigProto::SplitConfigProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.split_indices_)*/{}
  , /*decltype(_impl_._split_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.dimension_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SplitConfigProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitConfigProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitConfigProtoDefaultTypeInternal() {}
  union {
    SplitConfigProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitConfigProtoDefaultTypeInternal _SplitConfigProto_default_instance_;
PROTOBUF_CONSTEXPR LayoutProto::LayoutProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.minor_to_major_)*/{}
  , /*decltype(_impl_._minor_to_major_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tiles_)*/{}
  , /*decltype(_impl_.dim_level_types_)*/{}
  , /*decltype(_impl_._dim_level_types_cached_byte_size_)*/{0}
  , /*decltype(_impl_.dim_unique_)*/{}
  , /*decltype(_impl_.dim_ordered_)*/{}
  , /*decltype(_impl_.split_configs_)*/{}
  , /*decltype(_impl_.physical_shape_)*/nullptr
  , /*decltype(_impl_.element_size_in_bits_)*/int64_t{0}
  , /*decltype(_impl_.memory_space_)*/int64_t{0}
  , /*decltype(_impl_.index_primitive_type_)*/0
  , /*decltype(_impl_.pointer_primitive_type_)*/0
  , /*decltype(_impl_.dynamic_shape_metadata_prefix_bytes_)*/int64_t{0}
  , /*decltype(_impl_.tail_padding_alignment_in_elements_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayoutProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayoutProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayoutProtoDefaultTypeInternal() {}
  union {
    LayoutProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayoutProtoDefaultTypeInternal _LayoutProto_default_instance_;
PROTOBUF_CONSTEXPR ShapeProto::ShapeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tuple_shapes_)*/{}
  , /*decltype(_impl_.is_dynamic_dimension_)*/{}
  , /*decltype(_impl_.layout_)*/nullptr
  , /*decltype(_impl_.element_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShapeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShapeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShapeProtoDefaultTypeInternal() {}
  union {
    ShapeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShapeProtoDefaultTypeInternal _ShapeProto_default_instance_;
PROTOBUF_CONSTEXPR ProgramShapeProto::ProgramShapeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_.parameter_names_)*/{}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProgramShapeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramShapeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramShapeProtoDefaultTypeInternal() {}
  union {
    ProgramShapeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramShapeProtoDefaultTypeInternal _ProgramShapeProto_default_instance_;
PROTOBUF_CONSTEXPR ComputationStats::ComputationStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flop_count_)*/0
  , /*decltype(_impl_.transcendental_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComputationStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputationStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputationStatsDefaultTypeInternal() {}
  union {
    ComputationStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputationStatsDefaultTypeInternal _ComputationStats_default_instance_;
PROTOBUF_CONSTEXPR OpMetadata_ProfileInfo::OpMetadata_ProfileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.profile_type_)*/{}
  , /*decltype(_impl_._profile_type_cached_byte_size_)*/{0}
  , /*decltype(_impl_.relative_speedup_)*/0
  , /*decltype(_impl_.profile_source_)*/0
  , /*decltype(_impl_.compilation_event_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpMetadata_ProfileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpMetadata_ProfileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpMetadata_ProfileInfoDefaultTypeInternal() {}
  union {
    OpMetadata_ProfileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpMetadata_ProfileInfoDefaultTypeInternal _OpMetadata_ProfileInfo_default_instance_;
PROTOBUF_CONSTEXPR OpMetadata::OpMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.profile_type_)*/{}
  , /*decltype(_impl_._profile_type_cached_byte_size_)*/{0}
  , /*decltype(_impl_.op_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deduplicated_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scheduling_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_info_)*/nullptr
  , /*decltype(_impl_.size_of_generated_code_in_bytes_)*/int64_t{0}
  , /*decltype(_impl_.source_line_)*/0
  , /*decltype(_impl_.preserve_layout_)*/false
  , /*decltype(_impl_.size_of_memory_working_set_in_bytes_)*/int64_t{0}
  , /*decltype(_impl_.stack_frame_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpMetadataDefaultTypeInternal() {}
  union {
    OpMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpMetadataDefaultTypeInternal _OpMetadata_default_instance_;
PROTOBUF_CONSTEXPR ExecutionProfile::ExecutionProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compile_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.compute_cycle_count_)*/int64_t{0}
  , /*decltype(_impl_.compute_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.compute_and_transfer_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.executable_size_in_bytes_)*/int64_t{0}
  , /*decltype(_impl_.compilation_cache_hit_)*/false
  , /*decltype(_impl_.profile_cache_hit_)*/false
  , /*decltype(_impl_.warmup_run_executed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecutionProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionProfileDefaultTypeInternal() {}
  union {
    ExecutionProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionProfileDefaultTypeInternal _ExecutionProfile_default_instance_;
PROTOBUF_CONSTEXPR ExecutionHandle::ExecutionHandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.handle_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecutionHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionHandleDefaultTypeInternal() {}
  union {
    ExecutionHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionHandleDefaultTypeInternal _ExecutionHandle_default_instance_;
PROTOBUF_CONSTEXPR GlobalDataHandle::GlobalDataHandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.handle_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GlobalDataHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalDataHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalDataHandleDefaultTypeInternal() {}
  union {
    GlobalDataHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalDataHandleDefaultTypeInternal _GlobalDataHandle_default_instance_;
PROTOBUF_CONSTEXPR DeviceHandle::DeviceHandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.handle_)*/int64_t{0}
  , /*decltype(_impl_.device_count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceHandleDefaultTypeInternal() {}
  union {
    DeviceHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceHandleDefaultTypeInternal _DeviceHandle_default_instance_;
PROTOBUF_CONSTEXPR ChannelHandle::ChannelHandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.handle_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelHandleDefaultTypeInternal() {}
  union {
    ChannelHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelHandleDefaultTypeInternal _ChannelHandle_default_instance_;
PROTOBUF_CONSTEXPR DeviceAssignmentProto_ComputationDevice::DeviceAssignmentProto_ComputationDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replica_device_ids_)*/{}
  , /*decltype(_impl_._replica_device_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceAssignmentProto_ComputationDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceAssignmentProto_ComputationDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceAssignmentProto_ComputationDeviceDefaultTypeInternal() {}
  union {
    DeviceAssignmentProto_ComputationDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceAssignmentProto_ComputationDeviceDefaultTypeInternal _DeviceAssignmentProto_ComputationDevice_default_instance_;
PROTOBUF_CONSTEXPR DeviceAssignmentProto::DeviceAssignmentProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.computation_devices_)*/{}
  , /*decltype(_impl_.replica_count_)*/0
  , /*decltype(_impl_.computation_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceAssignmentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceAssignmentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceAssignmentProtoDefaultTypeInternal() {}
  union {
    DeviceAssignmentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceAssignmentProtoDefaultTypeInternal _DeviceAssignmentProto_default_instance_;
PROTOBUF_CONSTEXPR LiteralProto::LiteralProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preds_)*/{}
  , /*decltype(_impl_.s32s_)*/{}
  , /*decltype(_impl_._s32s_cached_byte_size_)*/{0}
  , /*decltype(_impl_.s64s_)*/{}
  , /*decltype(_impl_._s64s_cached_byte_size_)*/{0}
  , /*decltype(_impl_.u32s_)*/{}
  , /*decltype(_impl_._u32s_cached_byte_size_)*/{0}
  , /*decltype(_impl_.u64s_)*/{}
  , /*decltype(_impl_._u64s_cached_byte_size_)*/{0}
  , /*decltype(_impl_.f32s_)*/{}
  , /*decltype(_impl_.f64s_)*/{}
  , /*decltype(_impl_.tuple_literals_)*/{}
  , /*decltype(_impl_.c64s_)*/{}
  , /*decltype(_impl_.sparse_indices_)*/{}
  , /*decltype(_impl_._sparse_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.c128s_)*/{}
  , /*decltype(_impl_.u8s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f16s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bf16s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s8s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.u16s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s16s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f8e5m2s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f8e4m3fns_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s4s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.u4s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f8e4m3b11fnuzs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f8e5m2fnuzs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f8e4m3fnuzs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s2s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.u2s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LiteralProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiteralProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiteralProtoDefaultTypeInternal() {}
  union {
    LiteralProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiteralProtoDefaultTypeInternal _LiteralProto_default_instance_;
PROTOBUF_CONSTEXPR WindowDimension::WindowDimension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.stride_)*/int64_t{0}
  , /*decltype(_impl_.padding_low_)*/int64_t{0}
  , /*decltype(_impl_.padding_high_)*/int64_t{0}
  , /*decltype(_impl_.window_dilation_)*/int64_t{0}
  , /*decltype(_impl_.base_dilation_)*/int64_t{0}
  , /*decltype(_impl_.window_reversal_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WindowDimensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WindowDimensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WindowDimensionDefaultTypeInternal() {}
  union {
    WindowDimension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WindowDimensionDefaultTypeInternal _WindowDimension_default_instance_;
PROTOBUF_CONSTEXPR Window::Window(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WindowDefaultTypeInternal() {}
  union {
    Window _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WindowDefaultTypeInternal _Window_default_instance_;
PROTOBUF_CONSTEXPR GatherDimensionNumbers::GatherDimensionNumbers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_dims_)*/{}
  , /*decltype(_impl_._offset_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.collapsed_slice_dims_)*/{}
  , /*decltype(_impl_._collapsed_slice_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.start_index_map_)*/{}
  , /*decltype(_impl_._start_index_map_cached_byte_size_)*/{0}
  , /*decltype(_impl_.operand_batching_dims_)*/{}
  , /*decltype(_impl_._operand_batching_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.start_indices_batching_dims_)*/{}
  , /*decltype(_impl_._start_indices_batching_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.index_vector_dim_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GatherDimensionNumbersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GatherDimensionNumbersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GatherDimensionNumbersDefaultTypeInternal() {}
  union {
    GatherDimensionNumbers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GatherDimensionNumbersDefaultTypeInternal _GatherDimensionNumbers_default_instance_;
PROTOBUF_CONSTEXPR ScatterDimensionNumbers::ScatterDimensionNumbers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.update_window_dims_)*/{}
  , /*decltype(_impl_._update_window_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.inserted_window_dims_)*/{}
  , /*decltype(_impl_._inserted_window_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.scatter_dims_to_operand_dims_)*/{}
  , /*decltype(_impl_._scatter_dims_to_operand_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.input_batching_dims_)*/{}
  , /*decltype(_impl_._input_batching_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.scatter_indices_batching_dims_)*/{}
  , /*decltype(_impl_._scatter_indices_batching_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.index_vector_dim_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScatterDimensionNumbersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScatterDimensionNumbersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScatterDimensionNumbersDefaultTypeInternal() {}
  union {
    ScatterDimensionNumbers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScatterDimensionNumbersDefaultTypeInternal _ScatterDimensionNumbers_default_instance_;
PROTOBUF_CONSTEXPR ConvolutionDimensionNumbers::ConvolutionDimensionNumbers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kernel_spatial_dimensions_)*/{}
  , /*decltype(_impl_._kernel_spatial_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.input_spatial_dimensions_)*/{}
  , /*decltype(_impl_._input_spatial_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.output_spatial_dimensions_)*/{}
  , /*decltype(_impl_._output_spatial_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.kernel_input_feature_dimension_)*/int64_t{0}
  , /*decltype(_impl_.kernel_output_feature_dimension_)*/int64_t{0}
  , /*decltype(_impl_.input_batch_dimension_)*/int64_t{0}
  , /*decltype(_impl_.input_feature_dimension_)*/int64_t{0}
  , /*decltype(_impl_.output_batch_dimension_)*/int64_t{0}
  , /*decltype(_impl_.output_feature_dimension_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConvolutionDimensionNumbersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConvolutionDimensionNumbersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConvolutionDimensionNumbersDefaultTypeInternal() {}
  union {
    ConvolutionDimensionNumbers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConvolutionDimensionNumbersDefaultTypeInternal _ConvolutionDimensionNumbers_default_instance_;
PROTOBUF_CONSTEXPR DotDimensionNumbers::DotDimensionNumbers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lhs_contracting_dimensions_)*/{}
  , /*decltype(_impl_._lhs_contracting_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rhs_contracting_dimensions_)*/{}
  , /*decltype(_impl_._rhs_contracting_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.lhs_batch_dimensions_)*/{}
  , /*decltype(_impl_._lhs_batch_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rhs_batch_dimensions_)*/{}
  , /*decltype(_impl_._rhs_batch_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DotDimensionNumbersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DotDimensionNumbersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DotDimensionNumbersDefaultTypeInternal() {}
  union {
    DotDimensionNumbers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DotDimensionNumbersDefaultTypeInternal _DotDimensionNumbers_default_instance_;
PROTOBUF_CONSTEXPR SparsityDescriptor::SparsityDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.dimension_)*/0
  , /*decltype(_impl_.n_)*/0
  , /*decltype(_impl_.m_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SparsityDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparsityDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparsityDescriptorDefaultTypeInternal() {}
  union {
    SparsityDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparsityDescriptorDefaultTypeInternal _SparsityDescriptor_default_instance_;
PROTOBUF_CONSTEXPR TriangularSolveOptions::TriangularSolveOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.left_side_)*/false
  , /*decltype(_impl_.lower_)*/false
  , /*decltype(_impl_.unit_diagonal_)*/false
  , /*decltype(_impl_.transpose_a_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TriangularSolveOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriangularSolveOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriangularSolveOptionsDefaultTypeInternal() {}
  union {
    TriangularSolveOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriangularSolveOptionsDefaultTypeInternal _TriangularSolveOptions_default_instance_;
PROTOBUF_CONSTEXPR CholeskyOptions::CholeskyOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lower_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CholeskyOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CholeskyOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CholeskyOptionsDefaultTypeInternal() {}
  union {
    CholeskyOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CholeskyOptionsDefaultTypeInternal _CholeskyOptions_default_instance_;
PROTOBUF_CONSTEXPR SortOptions::SortOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.descending_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SortOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortOptionsDefaultTypeInternal() {}
  union {
    SortOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortOptionsDefaultTypeInternal _SortOptions_default_instance_;
PROTOBUF_CONSTEXPR FrontendAttributes_MapEntry_DoNotUse::FrontendAttributes_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FrontendAttributes_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrontendAttributes_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrontendAttributes_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FrontendAttributes_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrontendAttributes_MapEntry_DoNotUseDefaultTypeInternal _FrontendAttributes_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FrontendAttributes::FrontendAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrontendAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrontendAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrontendAttributesDefaultTypeInternal() {}
  union {
    FrontendAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrontendAttributesDefaultTypeInternal _FrontendAttributes_default_instance_;
PROTOBUF_CONSTEXPR Statistic::Statistic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stat_val_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatisticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticDefaultTypeInternal() {}
  union {
    Statistic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticDefaultTypeInternal _Statistic_default_instance_;
PROTOBUF_CONSTEXPR StatisticsViz::StatisticsViz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statistics_)*/{}
  , /*decltype(_impl_.stat_index_to_visualize_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatisticsVizDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticsVizDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticsVizDefaultTypeInternal() {}
  union {
    StatisticsViz _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticsVizDefaultTypeInternal _StatisticsViz_default_instance_;
PROTOBUF_CONSTEXPR OpSharding::OpSharding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tile_assignment_dimensions_)*/{}
  , /*decltype(_impl_._tile_assignment_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tile_assignment_devices_)*/{}
  , /*decltype(_impl_._tile_assignment_devices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tuple_shardings_)*/{}
  , /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.last_tile_dims_)*/{}
  , /*decltype(_impl_._last_tile_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.iota_reshape_dims_)*/{}
  , /*decltype(_impl_._iota_reshape_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.iota_transpose_perm_)*/{}
  , /*decltype(_impl_._iota_transpose_perm_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tile_shape_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.replicate_on_last_tile_dim_)*/false
  , /*decltype(_impl_.is_shard_group_)*/false
  , /*decltype(_impl_.shard_group_id_)*/int64_t{0}
  , /*decltype(_impl_.shard_group_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpShardingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpShardingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpShardingDefaultTypeInternal() {}
  union {
    OpSharding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpShardingDefaultTypeInternal _OpSharding_default_instance_;
PROTOBUF_CONSTEXPR ReplicaGroup::ReplicaGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replica_ids_)*/{}
  , /*decltype(_impl_._replica_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplicaGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicaGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicaGroupDefaultTypeInternal() {}
  union {
    ReplicaGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicaGroupDefaultTypeInternal _ReplicaGroup_default_instance_;
PROTOBUF_CONSTEXPR IotaReplicaGroupListProto::IotaReplicaGroupListProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iota_reshape_dims_)*/{}
  , /*decltype(_impl_._iota_reshape_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.iota_transpose_perm_)*/{}
  , /*decltype(_impl_._iota_transpose_perm_cached_byte_size_)*/{0}
  , /*decltype(_impl_.num_replica_groups_)*/int64_t{0}
  , /*decltype(_impl_.num_devices_per_group_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IotaReplicaGroupListProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IotaReplicaGroupListProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IotaReplicaGroupListProtoDefaultTypeInternal() {}
  union {
    IotaReplicaGroupListProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IotaReplicaGroupListProtoDefaultTypeInternal _IotaReplicaGroupListProto_default_instance_;
PROTOBUF_CONSTEXPR CollectiveDeviceListProto::CollectiveDeviceListProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replica_groups_)*/{}
  , /*decltype(_impl_.iota_replica_group_list_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectiveDeviceListProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectiveDeviceListProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectiveDeviceListProtoDefaultTypeInternal() {}
  union {
    CollectiveDeviceListProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectiveDeviceListProtoDefaultTypeInternal _CollectiveDeviceListProto_default_instance_;
PROTOBUF_CONSTEXPR SourceTarget::SourceTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_)*/int64_t{0}
  , /*decltype(_impl_.target_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceTargetDefaultTypeInternal() {}
  union {
    SourceTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceTargetDefaultTypeInternal _SourceTarget_default_instance_;
PROTOBUF_CONSTEXPR PrecisionConfig::PrecisionConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operand_precision_)*/{}
  , /*decltype(_impl_._operand_precision_cached_byte_size_)*/{0}
  , /*decltype(_impl_.algorithm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrecisionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrecisionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrecisionConfigDefaultTypeInternal() {}
  union {
    PrecisionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrecisionConfigDefaultTypeInternal _PrecisionConfig_default_instance_;
PROTOBUF_CONSTEXPR ParameterReplication::ParameterReplication(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replicated_at_leaf_buffers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParameterReplicationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParameterReplicationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParameterReplicationDefaultTypeInternal() {}
  union {
    ParameterReplication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParameterReplicationDefaultTypeInternal _ParameterReplication_default_instance_;
PROTOBUF_CONSTEXPR WhileLoopBackendConfig_KnownTripCount::WhileLoopBackendConfig_KnownTripCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.n_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WhileLoopBackendConfig_KnownTripCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WhileLoopBackendConfig_KnownTripCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WhileLoopBackendConfig_KnownTripCountDefaultTypeInternal() {}
  union {
    WhileLoopBackendConfig_KnownTripCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WhileLoopBackendConfig_KnownTripCountDefaultTypeInternal _WhileLoopBackendConfig_KnownTripCount_default_instance_;
PROTOBUF_CONSTEXPR WhileLoopBackendConfig::WhileLoopBackendConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.known_trip_count_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WhileLoopBackendConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WhileLoopBackendConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WhileLoopBackendConfigDefaultTypeInternal() {}
  union {
    WhileLoopBackendConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WhileLoopBackendConfigDefaultTypeInternal _WhileLoopBackendConfig_default_instance_;
PROTOBUF_CONSTEXPR OutputOperandAliasing::OutputOperandAliasing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_shape_index_)*/{}
  , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.operand_shape_index_)*/{}
  , /*decltype(_impl_._operand_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.operand_index_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputOperandAliasingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputOperandAliasingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputOperandAliasingDefaultTypeInternal() {}
  union {
    OutputOperandAliasing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputOperandAliasingDefaultTypeInternal _OutputOperandAliasing_default_instance_;
PROTOBUF_CONSTEXPR OriginalArrayProto::OriginalArrayProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leaf_shape_index_)*/{}
  , /*decltype(_impl_._leaf_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.shape_index_)*/{}
  , /*decltype(_impl_._shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.instruction_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OriginalArrayProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginalArrayProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginalArrayProtoDefaultTypeInternal() {}
  union {
    OriginalArrayProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginalArrayProtoDefaultTypeInternal _OriginalArrayProto_default_instance_;
PROTOBUF_CONSTEXPR OriginalValueProto::OriginalValueProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leaves_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OriginalValueProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginalValueProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginalValueProtoDefaultTypeInternal() {}
  union {
    OriginalValueProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginalValueProtoDefaultTypeInternal _OriginalValueProto_default_instance_;
}  // namespace xla
static ::_pb::Metadata file_level_metadata_xla_2fxla_5fdata_2eproto[44];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[16];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xla_2fxla_5fdata_2eproto = nullptr;

const uint32_t TableStruct_xla_2fxla_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::PaddingConfig_PaddingConfigDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::PaddingConfig_PaddingConfigDimension, _impl_.edge_padding_low_),
  PROTOBUF_FIELD_OFFSET(::xla::PaddingConfig_PaddingConfigDimension, _impl_.edge_padding_high_),
  PROTOBUF_FIELD_OFFSET(::xla::PaddingConfig_PaddingConfigDimension, _impl_.interior_padding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::PaddingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::PaddingConfig, _impl_.dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::TileProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::TileProto, _impl_.dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::SplitConfigProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::SplitConfigProto, _impl_.dimension_),
  PROTOBUF_FIELD_OFFSET(::xla::SplitConfigProto, _impl_.split_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.dim_level_types_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.dim_unique_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.dim_ordered_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.minor_to_major_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.tiles_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.tail_padding_alignment_in_elements_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.element_size_in_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.memory_space_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.index_primitive_type_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.pointer_primitive_type_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.physical_shape_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.dynamic_shape_metadata_prefix_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::LayoutProto, _impl_.split_configs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ShapeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ShapeProto, _impl_.element_type_),
  PROTOBUF_FIELD_OFFSET(::xla::ShapeProto, _impl_.dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::ShapeProto, _impl_.tuple_shapes_),
  PROTOBUF_FIELD_OFFSET(::xla::ShapeProto, _impl_.layout_),
  PROTOBUF_FIELD_OFFSET(::xla::ShapeProto, _impl_.is_dynamic_dimension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ProgramShapeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ProgramShapeProto, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::xla::ProgramShapeProto, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::xla::ProgramShapeProto, _impl_.parameter_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ComputationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ComputationStats, _impl_.flop_count_),
  PROTOBUF_FIELD_OFFSET(::xla::ComputationStats, _impl_.transcendental_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata_ProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata_ProfileInfo, _impl_.profile_type_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata_ProfileInfo, _impl_.relative_speedup_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata_ProfileInfo, _impl_.profile_source_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata_ProfileInfo, _impl_.compilation_event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.op_type_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.op_name_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.source_file_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.source_line_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.profile_type_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.size_of_generated_code_in_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.size_of_memory_working_set_in_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.profile_info_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.deduplicated_name_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.preserve_layout_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.stack_frame_id_),
  PROTOBUF_FIELD_OFFSET(::xla::OpMetadata, _impl_.scheduling_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _impl_.compilation_cache_hit_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _impl_.compile_time_ms_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _impl_.compute_cycle_count_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _impl_.compute_time_ns_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _impl_.compute_and_transfer_time_ns_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _impl_.executable_size_in_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _impl_.profile_cache_hit_),
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionProfile, _impl_.warmup_run_executed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ExecutionHandle, _impl_.handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::GlobalDataHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::GlobalDataHandle, _impl_.handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::DeviceHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::DeviceHandle, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::xla::DeviceHandle, _impl_.device_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ChannelHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ChannelHandle, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::xla::ChannelHandle, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::DeviceAssignmentProto_ComputationDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::DeviceAssignmentProto_ComputationDevice, _impl_.replica_device_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::DeviceAssignmentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::DeviceAssignmentProto, _impl_.replica_count_),
  PROTOBUF_FIELD_OFFSET(::xla::DeviceAssignmentProto, _impl_.computation_count_),
  PROTOBUF_FIELD_OFFSET(::xla::DeviceAssignmentProto, _impl_.computation_devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.preds_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.s2s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.s4s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.s8s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.u2s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.u4s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.u8s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.s32s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.s64s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.u32s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.u64s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.f32s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.f64s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.c64s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.c128s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.tuple_literals_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.f16s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.bf16s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.u16s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.s16s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.f8e5m2s_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.f8e4m3fns_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.f8e4m3b11fnuzs_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.f8e5m2fnuzs_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.f8e4m3fnuzs_),
  PROTOBUF_FIELD_OFFSET(::xla::LiteralProto, _impl_.sparse_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::WindowDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::WindowDimension, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::xla::WindowDimension, _impl_.stride_),
  PROTOBUF_FIELD_OFFSET(::xla::WindowDimension, _impl_.padding_low_),
  PROTOBUF_FIELD_OFFSET(::xla::WindowDimension, _impl_.padding_high_),
  PROTOBUF_FIELD_OFFSET(::xla::WindowDimension, _impl_.window_dilation_),
  PROTOBUF_FIELD_OFFSET(::xla::WindowDimension, _impl_.base_dilation_),
  PROTOBUF_FIELD_OFFSET(::xla::WindowDimension, _impl_.window_reversal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::Window, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::Window, _impl_.dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::GatherDimensionNumbers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::GatherDimensionNumbers, _impl_.offset_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::GatherDimensionNumbers, _impl_.collapsed_slice_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::GatherDimensionNumbers, _impl_.start_index_map_),
  PROTOBUF_FIELD_OFFSET(::xla::GatherDimensionNumbers, _impl_.index_vector_dim_),
  PROTOBUF_FIELD_OFFSET(::xla::GatherDimensionNumbers, _impl_.operand_batching_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::GatherDimensionNumbers, _impl_.start_indices_batching_dims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ScatterDimensionNumbers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ScatterDimensionNumbers, _impl_.update_window_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::ScatterDimensionNumbers, _impl_.inserted_window_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::ScatterDimensionNumbers, _impl_.scatter_dims_to_operand_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::ScatterDimensionNumbers, _impl_.index_vector_dim_),
  PROTOBUF_FIELD_OFFSET(::xla::ScatterDimensionNumbers, _impl_.input_batching_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::ScatterDimensionNumbers, _impl_.scatter_indices_batching_dims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.input_batch_dimension_),
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.input_feature_dimension_),
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.input_spatial_dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.kernel_input_feature_dimension_),
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.kernel_output_feature_dimension_),
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.kernel_spatial_dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.output_batch_dimension_),
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.output_feature_dimension_),
  PROTOBUF_FIELD_OFFSET(::xla::ConvolutionDimensionNumbers, _impl_.output_spatial_dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::DotDimensionNumbers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::DotDimensionNumbers, _impl_.lhs_contracting_dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::DotDimensionNumbers, _impl_.rhs_contracting_dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::DotDimensionNumbers, _impl_.lhs_batch_dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::DotDimensionNumbers, _impl_.rhs_batch_dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::SparsityDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::SparsityDescriptor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::xla::SparsityDescriptor, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::xla::SparsityDescriptor, _impl_.dimension_),
  PROTOBUF_FIELD_OFFSET(::xla::SparsityDescriptor, _impl_.n_),
  PROTOBUF_FIELD_OFFSET(::xla::SparsityDescriptor, _impl_.m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::TriangularSolveOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::TriangularSolveOptions, _impl_.left_side_),
  PROTOBUF_FIELD_OFFSET(::xla::TriangularSolveOptions, _impl_.lower_),
  PROTOBUF_FIELD_OFFSET(::xla::TriangularSolveOptions, _impl_.unit_diagonal_),
  PROTOBUF_FIELD_OFFSET(::xla::TriangularSolveOptions, _impl_.transpose_a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::CholeskyOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::CholeskyOptions, _impl_.lower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::SortOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::SortOptions, _impl_.descending_),
  PROTOBUF_FIELD_OFFSET(::xla::FrontendAttributes_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::FrontendAttributes_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::FrontendAttributes_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xla::FrontendAttributes_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::FrontendAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::FrontendAttributes, _impl_.map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::Statistic, _impl_.stat_name_),
  PROTOBUF_FIELD_OFFSET(::xla::Statistic, _impl_.stat_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::StatisticsViz, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::StatisticsViz, _impl_.stat_index_to_visualize_),
  PROTOBUF_FIELD_OFFSET(::xla::StatisticsViz, _impl_.statistics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.tile_shape_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.tile_assignment_dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.tile_assignment_devices_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.tuple_shardings_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.replicate_on_last_tile_dim_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.last_tile_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.iota_reshape_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.iota_transpose_perm_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.is_shard_group_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.shard_group_id_),
  PROTOBUF_FIELD_OFFSET(::xla::OpSharding, _impl_.shard_group_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ReplicaGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ReplicaGroup, _impl_.replica_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::IotaReplicaGroupListProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::IotaReplicaGroupListProto, _impl_.num_replica_groups_),
  PROTOBUF_FIELD_OFFSET(::xla::IotaReplicaGroupListProto, _impl_.num_devices_per_group_),
  PROTOBUF_FIELD_OFFSET(::xla::IotaReplicaGroupListProto, _impl_.iota_reshape_dims_),
  PROTOBUF_FIELD_OFFSET(::xla::IotaReplicaGroupListProto, _impl_.iota_transpose_perm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::CollectiveDeviceListProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::CollectiveDeviceListProto, _impl_.replica_groups_),
  PROTOBUF_FIELD_OFFSET(::xla::CollectiveDeviceListProto, _impl_.iota_replica_group_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::SourceTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::SourceTarget, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::xla::SourceTarget, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::PrecisionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::PrecisionConfig, _impl_.operand_precision_),
  PROTOBUF_FIELD_OFFSET(::xla::PrecisionConfig, _impl_.algorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::ParameterReplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::ParameterReplication, _impl_.replicated_at_leaf_buffers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::WhileLoopBackendConfig_KnownTripCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::WhileLoopBackendConfig_KnownTripCount, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::WhileLoopBackendConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::WhileLoopBackendConfig, _impl_.known_trip_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::OutputOperandAliasing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::OutputOperandAliasing, _impl_.output_shape_index_),
  PROTOBUF_FIELD_OFFSET(::xla::OutputOperandAliasing, _impl_.operand_index_),
  PROTOBUF_FIELD_OFFSET(::xla::OutputOperandAliasing, _impl_.operand_shape_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::OriginalArrayProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::OriginalArrayProto, _impl_.leaf_shape_index_),
  PROTOBUF_FIELD_OFFSET(::xla::OriginalArrayProto, _impl_.instruction_name_),
  PROTOBUF_FIELD_OFFSET(::xla::OriginalArrayProto, _impl_.shape_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::OriginalValueProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::OriginalValueProto, _impl_.leaves_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xla::PaddingConfig_PaddingConfigDimension)},
  { 9, -1, -1, sizeof(::xla::PaddingConfig)},
  { 16, -1, -1, sizeof(::xla::TileProto)},
  { 23, -1, -1, sizeof(::xla::SplitConfigProto)},
  { 31, -1, -1, sizeof(::xla::LayoutProto)},
  { 50, -1, -1, sizeof(::xla::ShapeProto)},
  { 61, -1, -1, sizeof(::xla::ProgramShapeProto)},
  { 70, -1, -1, sizeof(::xla::ComputationStats)},
  { 78, -1, -1, sizeof(::xla::OpMetadata_ProfileInfo)},
  { 88, -1, -1, sizeof(::xla::OpMetadata)},
  { 106, -1, -1, sizeof(::xla::ExecutionProfile)},
  { 120, -1, -1, sizeof(::xla::ExecutionHandle)},
  { 127, -1, -1, sizeof(::xla::GlobalDataHandle)},
  { 134, -1, -1, sizeof(::xla::DeviceHandle)},
  { 142, -1, -1, sizeof(::xla::ChannelHandle)},
  { 150, -1, -1, sizeof(::xla::DeviceAssignmentProto_ComputationDevice)},
  { 157, -1, -1, sizeof(::xla::DeviceAssignmentProto)},
  { 166, -1, -1, sizeof(::xla::LiteralProto)},
  { 199, -1, -1, sizeof(::xla::WindowDimension)},
  { 212, -1, -1, sizeof(::xla::Window)},
  { 219, -1, -1, sizeof(::xla::GatherDimensionNumbers)},
  { 231, -1, -1, sizeof(::xla::ScatterDimensionNumbers)},
  { 243, -1, -1, sizeof(::xla::ConvolutionDimensionNumbers)},
  { 258, -1, -1, sizeof(::xla::DotDimensionNumbers)},
  { 268, -1, -1, sizeof(::xla::SparsityDescriptor)},
  { 279, -1, -1, sizeof(::xla::TriangularSolveOptions)},
  { 289, -1, -1, sizeof(::xla::CholeskyOptions)},
  { 296, -1, -1, sizeof(::xla::SortOptions)},
  { 303, 311, -1, sizeof(::xla::FrontendAttributes_MapEntry_DoNotUse)},
  { 313, -1, -1, sizeof(::xla::FrontendAttributes)},
  { 320, -1, -1, sizeof(::xla::Statistic)},
  { 328, -1, -1, sizeof(::xla::StatisticsViz)},
  { 336, -1, -1, sizeof(::xla::OpSharding)},
  { 355, -1, -1, sizeof(::xla::ReplicaGroup)},
  { 362, -1, -1, sizeof(::xla::IotaReplicaGroupListProto)},
  { 372, -1, -1, sizeof(::xla::CollectiveDeviceListProto)},
  { 380, -1, -1, sizeof(::xla::SourceTarget)},
  { 388, -1, -1, sizeof(::xla::PrecisionConfig)},
  { 396, -1, -1, sizeof(::xla::ParameterReplication)},
  { 403, -1, -1, sizeof(::xla::WhileLoopBackendConfig_KnownTripCount)},
  { 410, -1, -1, sizeof(::xla::WhileLoopBackendConfig)},
  { 417, -1, -1, sizeof(::xla::OutputOperandAliasing)},
  { 426, -1, -1, sizeof(::xla::OriginalArrayProto)},
  { 435, -1, -1, sizeof(::xla::OriginalValueProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xla::_PaddingConfig_PaddingConfigDimension_default_instance_._instance,
  &::xla::_PaddingConfig_default_instance_._instance,
  &::xla::_TileProto_default_instance_._instance,
  &::xla::_SplitConfigProto_default_instance_._instance,
  &::xla::_LayoutProto_default_instance_._instance,
  &::xla::_ShapeProto_default_instance_._instance,
  &::xla::_ProgramShapeProto_default_instance_._instance,
  &::xla::_ComputationStats_default_instance_._instance,
  &::xla::_OpMetadata_ProfileInfo_default_instance_._instance,
  &::xla::_OpMetadata_default_instance_._instance,
  &::xla::_ExecutionProfile_default_instance_._instance,
  &::xla::_ExecutionHandle_default_instance_._instance,
  &::xla::_GlobalDataHandle_default_instance_._instance,
  &::xla::_DeviceHandle_default_instance_._instance,
  &::xla::_ChannelHandle_default_instance_._instance,
  &::xla::_DeviceAssignmentProto_ComputationDevice_default_instance_._instance,
  &::xla::_DeviceAssignmentProto_default_instance_._instance,
  &::xla::_LiteralProto_default_instance_._instance,
  &::xla::_WindowDimension_default_instance_._instance,
  &::xla::_Window_default_instance_._instance,
  &::xla::_GatherDimensionNumbers_default_instance_._instance,
  &::xla::_ScatterDimensionNumbers_default_instance_._instance,
  &::xla::_ConvolutionDimensionNumbers_default_instance_._instance,
  &::xla::_DotDimensionNumbers_default_instance_._instance,
  &::xla::_SparsityDescriptor_default_instance_._instance,
  &::xla::_TriangularSolveOptions_default_instance_._instance,
  &::xla::_CholeskyOptions_default_instance_._instance,
  &::xla::_SortOptions_default_instance_._instance,
  &::xla::_FrontendAttributes_MapEntry_DoNotUse_default_instance_._instance,
  &::xla::_FrontendAttributes_default_instance_._instance,
  &::xla::_Statistic_default_instance_._instance,
  &::xla::_StatisticsViz_default_instance_._instance,
  &::xla::_OpSharding_default_instance_._instance,
  &::xla::_ReplicaGroup_default_instance_._instance,
  &::xla::_IotaReplicaGroupListProto_default_instance_._instance,
  &::xla::_CollectiveDeviceListProto_default_instance_._instance,
  &::xla::_SourceTarget_default_instance_._instance,
  &::xla::_PrecisionConfig_default_instance_._instance,
  &::xla::_ParameterReplication_default_instance_._instance,
  &::xla::_WhileLoopBackendConfig_KnownTripCount_default_instance_._instance,
  &::xla::_WhileLoopBackendConfig_default_instance_._instance,
  &::xla::_OutputOperandAliasing_default_instance_._instance,
  &::xla::_OriginalArrayProto_default_instance_._instance,
  &::xla::_OriginalValueProto_default_instance_._instance,
};

const char descriptor_table_protodef_xla_2fxla_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022xla/xla_data.proto\022\003xla\"\267\001\n\rPaddingCon"
  "fig\022=\n\ndimensions\030\001 \003(\0132).xla.PaddingCon"
  "fig.PaddingConfigDimension\032g\n\026PaddingCon"
  "figDimension\022\030\n\020edge_padding_low\030\001 \001(\003\022\031"
  "\n\021edge_padding_high\030\002 \001(\003\022\030\n\020interior_pa"
  "dding\030\003 \001(\003\"\037\n\tTileProto\022\022\n\ndimensions\030\001"
  " \003(\003\"<\n\020SplitConfigProto\022\021\n\tdimension\030\001 "
  "\001(\003\022\025\n\rsplit_indices\030\002 \003(\003\"\272\004\n\013LayoutPro"
  "to\022*\n\017dim_level_types\030\t \003(\0162\021.xla.DimLev"
  "elType\022\022\n\ndim_unique\030\r \003(\010\022\023\n\013dim_ordere"
  "d\030\016 \003(\010\022\026\n\016minor_to_major\030\001 \003(\003\022\035\n\005tiles"
  "\030\006 \003(\0132\016.xla.TileProto\022*\n\"tail_padding_a"
  "lignment_in_elements\030\020 \001(\003\022\034\n\024element_si"
  "ze_in_bits\030\007 \001(\003\022\024\n\014memory_space\030\010 \001(\003\0220"
  "\n\024index_primitive_type\030\013 \001(\0162\022.xla.Primi"
  "tiveType\0222\n\026pointer_primitive_type\030\014 \001(\016"
  "2\022.xla.PrimitiveType\022\'\n\016physical_shape\030\n"
  " \001(\0132\017.xla.ShapeProto\022+\n#dynamic_shape_m"
  "etadata_prefix_bytes\030\017 \001(\003\022,\n\rsplit_conf"
  "igs\030\021 \003(\0132\025.xla.SplitConfigProtoJ\004\010\002\020\003J\004"
  "\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006R\021padded_dimensionsR\rpad"
  "ding_valueR\006formatR\023max_sparse_elements\""
  "\275\001\n\nShapeProto\022(\n\014element_type\030\002 \001(\0162\022.x"
  "la.PrimitiveType\022\022\n\ndimensions\030\003 \003(\003\022%\n\014"
  "tuple_shapes\030\004 \003(\0132\017.xla.ShapeProto\022 \n\006l"
  "ayout\030\005 \001(\0132\020.xla.LayoutProto\022\034\n\024is_dyna"
  "mic_dimension\030\006 \003(\010J\004\010\001\020\002R\004rank\"r\n\021Progr"
  "amShapeProto\022#\n\nparameters\030\001 \003(\0132\017.xla.S"
  "hapeProto\022\037\n\006result\030\002 \001(\0132\017.xla.ShapePro"
  "to\022\027\n\017parameter_names\030\003 \003(\t\"D\n\020Computati"
  "onStats\022\022\n\nflop_count\030\001 \001(\001\022\034\n\024transcend"
  "ental_count\030\002 \001(\001\"\340\004\n\nOpMetadata\022\017\n\007op_t"
  "ype\030\001 \001(\t\022\017\n\007op_name\030\002 \001(\t\022\023\n\013source_fil"
  "e\030\003 \001(\t\022\023\n\013source_line\030\004 \001(\005\022*\n\014profile_"
  "type\030\005 \003(\0162\020.xla.ProfileTypeB\002\030\001\022\'\n\037size"
  "_of_generated_code_in_bytes\030\010 \001(\003\022+\n#siz"
  "e_of_memory_working_set_in_bytes\030\t \001(\003\0221"
  "\n\014profile_info\030\n \001(\0132\033.xla.OpMetadata.Pr"
  "ofileInfo\022\031\n\021deduplicated_name\030\014 \001(\t\022\027\n\017"
  "preserve_layout\030\r \001(\010\022\026\n\016stack_frame_id\030"
  "\017 \001(\005\022\027\n\017scheduling_name\030\020 \001(\t\032\255\001\n\013Profi"
  "leInfo\022&\n\014profile_type\030\001 \003(\0162\020.xla.Profi"
  "leType\022\030\n\020relative_speedup\030\002 \001(\001\022*\n\016prof"
  "ile_source\030\003 \001(\0162\022.xla.ProfileSource\0220\n\021"
  "compilation_event\030\004 \001(\0162\025.xla.Compilatio"
  "nEventJ\004\010\006\020\007J\004\010\007\020\010J\004\010\016\020\017R\020creation_pass_"
  "idR\030logical_creation_pass_id\"\200\002\n\020Executi"
  "onProfile\022\035\n\025compilation_cache_hit\030\001 \001(\010"
  "\022\027\n\017compile_time_ms\030\002 \001(\003\022\033\n\023compute_cyc"
  "le_count\030\003 \001(\003\022\027\n\017compute_time_ns\030\004 \001(\003\022"
  "$\n\034compute_and_transfer_time_ns\030\005 \001(\003\022 \n"
  "\030executable_size_in_bytes\030\006 \001(\003\022\031\n\021profi"
  "le_cache_hit\030\007 \001(\010\022\033\n\023warmup_run_execute"
  "d\030\010 \001(\010\"!\n\017ExecutionHandle\022\016\n\006handle\030\001 \001"
  "(\003\"\"\n\020GlobalDataHandle\022\016\n\006handle\030\001 \001(\003\"4"
  "\n\014DeviceHandle\022\016\n\006handle\030\001 \001(\003\022\024\n\014device"
  "_count\030\002 \001(\003\"\264\001\n\rChannelHandle\022\016\n\006handle"
  "\030\001 \001(\003\022,\n\004type\030\002 \001(\0162\036.xla.ChannelHandle"
  ".ChannelType\"e\n\013ChannelType\022\030\n\024CHANNEL_T"
  "YPE_INVALID\020\000\022\024\n\020DEVICE_TO_DEVICE\020\001\022\022\n\016D"
  "EVICE_TO_HOST\020\002\022\022\n\016HOST_TO_DEVICE\020\003\"\305\001\n\025"
  "DeviceAssignmentProto\022\025\n\rreplica_count\030\001"
  " \001(\005\022\031\n\021computation_count\030\002 \001(\005\022I\n\023compu"
  "tation_devices\030\003 \003(\0132,.xla.DeviceAssignm"
  "entProto.ComputationDevice\032/\n\021Computatio"
  "nDevice\022\032\n\022replica_device_ids\030\001 \003(\003\"\336\003\n\014"
  "LiteralProto\022\036\n\005shape\030\001 \001(\0132\017.xla.ShapeP"
  "roto\022\r\n\005preds\030\002 \003(\010\022\013\n\003s2s\030\032 \001(\014\022\013\n\003s4s\030"
  "\025 \001(\014\022\013\n\003s8s\030\017 \001(\014\022\013\n\003u2s\030\033 \001(\014\022\013\n\003u4s\030\026"
  " \001(\014\022\013\n\003u8s\030\003 \001(\014\022\014\n\004s32s\030\004 \003(\005\022\014\n\004s64s\030"
  "\005 \003(\003\022\014\n\004u32s\030\006 \003(\r\022\014\n\004u64s\030\007 \003(\004\022\014\n\004f32"
  "s\030\010 \003(\002\022\014\n\004f64s\030\t \003(\001\022\014\n\004c64s\030\014 \003(\002\022\r\n\005c"
  "128s\030\022 \003(\001\022)\n\016tuple_literals\030\n \003(\0132\021.xla"
  ".LiteralProto\022\014\n\004f16s\030\013 \001(\014\022\r\n\005bf16s\030\r \001"
  "(\014\022\014\n\004u16s\030\020 \001(\014\022\014\n\004s16s\030\021 \001(\014\022\017\n\007f8e5m2"
  "s\030\023 \001(\014\022\021\n\tf8e4m3fns\030\024 \001(\014\022\026\n\016f8e4m3b11f"
  "nuzs\030\027 \001(\014\022\023\n\013f8e5m2fnuzs\030\030 \001(\014\022\023\n\013f8e4m"
  "3fnuzs\030\031 \001(\014\022\026\n\016sparse_indices\030\016 \003(\003\"\243\001\n"
  "\017WindowDimension\022\014\n\004size\030\001 \001(\003\022\016\n\006stride"
  "\030\002 \001(\003\022\023\n\013padding_low\030\003 \001(\003\022\024\n\014padding_h"
  "igh\030\004 \001(\003\022\027\n\017window_dilation\030\005 \001(\003\022\025\n\rba"
  "se_dilation\030\006 \001(\003\022\027\n\017window_reversal\030\007 \001"
  "(\010\"2\n\006Window\022(\n\ndimensions\030\001 \003(\0132\024.xla.W"
  "indowDimension\"\302\001\n\026GatherDimensionNumber"
  "s\022\023\n\013offset_dims\030\001 \003(\003\022\034\n\024collapsed_slic"
  "e_dims\030\002 \003(\003\022\027\n\017start_index_map\030\003 \003(\003\022\030\n"
  "\020index_vector_dim\030\004 \001(\003\022\035\n\025operand_batch"
  "ing_dims\030\005 \003(\003\022#\n\033start_indices_batching"
  "_dims\030\006 \003(\003\"\327\001\n\027ScatterDimensionNumbers\022"
  "\032\n\022update_window_dims\030\001 \003(\003\022\034\n\024inserted_"
  "window_dims\030\002 \003(\003\022$\n\034scatter_dims_to_ope"
  "rand_dims\030\003 \003(\003\022\030\n\020index_vector_dim\030\004 \001("
  "\003\022\033\n\023input_batching_dims\030\005 \003(\003\022%\n\035scatte"
  "r_indices_batching_dims\030\006 \003(\003\"\330\002\n\033Convol"
  "utionDimensionNumbers\022\035\n\025input_batch_dim"
  "ension\030\007 \001(\003\022\037\n\027input_feature_dimension\030"
  "\010 \001(\003\022 \n\030input_spatial_dimensions\030\013 \003(\003\022"
  "&\n\036kernel_input_feature_dimension\030\003 \001(\003\022"
  "\'\n\037kernel_output_feature_dimension\030\004 \001(\003"
  "\022!\n\031kernel_spatial_dimensions\030\006 \003(\003\022\036\n\026o"
  "utput_batch_dimension\030\t \001(\003\022 \n\030output_fe"
  "ature_dimension\030\n \001(\003\022!\n\031output_spatial_"
  "dimensions\030\014 \003(\003\"\231\001\n\023DotDimensionNumbers"
  "\022\"\n\032lhs_contracting_dimensions\030\001 \003(\003\022\"\n\032"
  "rhs_contracting_dimensions\030\002 \003(\003\022\034\n\024lhs_"
  "batch_dimensions\030\003 \003(\003\022\034\n\024rhs_batch_dime"
  "nsions\030\004 \003(\003\"m\n\022SparsityDescriptor\022\037\n\004ty"
  "pe\030\001 \001(\0162\021.xla.SparsityType\022\r\n\005index\030\002 \001"
  "(\005\022\021\n\tdimension\030\003 \001(\005\022\t\n\001n\030\004 \001(\005\022\t\n\001m\030\005 "
  "\001(\005\"\337\001\n\026TriangularSolveOptions\022\021\n\tleft_s"
  "ide\030\001 \001(\010\022\r\n\005lower\030\002 \001(\010\022\025\n\runit_diagona"
  "l\030\003 \001(\010\022:\n\013transpose_a\030\004 \001(\0162%.xla.Trian"
  "gularSolveOptions.Transpose\"P\n\tTranspose"
  "\022\025\n\021TRANSPOSE_INVALID\020\000\022\020\n\014NO_TRANSPOSE\020"
  "\001\022\r\n\tTRANSPOSE\020\002\022\013\n\007ADJOINT\020\003\" \n\017Cholesk"
  "yOptions\022\r\n\005lower\030\001 \001(\010\"!\n\013SortOptions\022\022"
  "\n\ndescending\030\001 \001(\010\"o\n\022FrontendAttributes"
  "\022-\n\003map\030\001 \003(\0132 .xla.FrontendAttributes.M"
  "apEntry\032*\n\010MapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001\"0\n\tStatistic\022\021\n\tstat_name\030\001 "
  "\001(\t\022\020\n\010stat_val\030\002 \001(\001\"T\n\rStatisticsViz\022\037"
  "\n\027stat_index_to_visualize\030\001 \001(\003\022\"\n\nstati"
  "stics\030\002 \003(\0132\016.xla.Statistic\"\323\004\n\nOpShardi"
  "ng\022\"\n\004type\030\001 \001(\0162\024.xla.OpSharding.Type\022#"
  "\n\ntile_shape\030\002 \001(\0132\017.xla.ShapeProto\022\"\n\032t"
  "ile_assignment_dimensions\030\003 \003(\003\022\037\n\027tile_"
  "assignment_devices\030\004 \003(\003\022(\n\017tuple_shardi"
  "ngs\030\005 \003(\0132\017.xla.OpSharding\022\"\n\032replicate_"
  "on_last_tile_dim\030\006 \001(\010\022!\n\010metadata\030\007 \003(\013"
  "2\017.xla.OpMetadata\022,\n\016last_tile_dims\030\010 \003("
  "\0162\024.xla.OpSharding.Type\022\031\n\021iota_reshape_"
  "dims\030\t \003(\003\022\033\n\023iota_transpose_perm\030\n \003(\005\022"
  "\026\n\016is_shard_group\030\013 \001(\010\022\026\n\016shard_group_i"
  "d\030\014 \001(\003\0228\n\020shard_group_type\030\r \001(\0162\036.xla."
  "OpSharding.ShardGroupType\"R\n\004Type\022\016\n\nREP"
  "LICATED\020\000\022\013\n\007MAXIMAL\020\001\022\t\n\005TUPLE\020\002\022\t\n\005OTH"
  "ER\020\003\022\n\n\006MANUAL\020\004\022\013\n\007UNKNOWN\020\005\"\"\n\016ShardGr"
  "oupType\022\006\n\002AS\020\000\022\010\n\004LIKE\020\001\"#\n\014ReplicaGrou"
  "p\022\023\n\013replica_ids\030\001 \003(\003\"\216\001\n\031IotaReplicaGr"
  "oupListProto\022\032\n\022num_replica_groups\030\001 \001(\003"
  "\022\035\n\025num_devices_per_group\030\002 \001(\003\022\031\n\021iota_"
  "reshape_dims\030\003 \003(\003\022\033\n\023iota_transpose_per"
  "m\030\004 \003(\005\"\207\001\n\031CollectiveDeviceListProto\022)\n"
  "\016replica_groups\030\001 \003(\0132\021.xla.ReplicaGroup"
  "\022\?\n\027iota_replica_group_list\030\002 \001(\0132\036.xla."
  "IotaReplicaGroupListProto\".\n\014SourceTarge"
  "t\022\016\n\006source\030\001 \001(\003\022\016\n\006target\030\002 \001(\003\"\271\004\n\017Pr"
  "ecisionConfig\0229\n\021operand_precision\030\001 \003(\016"
  "2\036.xla.PrecisionConfig.Precision\0221\n\talgo"
  "rithm\030\002 \001(\0162\036.xla.PrecisionConfig.Algori"
  "thm\"B\n\tPrecision\022\013\n\007DEFAULT\020\000\022\010\n\004HIGH\020\001\022"
  "\013\n\007HIGHEST\020\002\022\021\n\rPACKED_NIBBLE\020\003\"\363\002\n\tAlgo"
  "rithm\022\r\n\tALG_UNSET\020\000\022\035\n\031ALG_DOT_ANY_F8_A"
  "NY_F8_F32\020\001\022(\n$ALG_DOT_ANY_F8_ANY_F8_F32"
  "_FAST_ACCUM\020\002\022\027\n\023ALG_DOT_F16_F16_F16\020\003\022\027"
  "\n\023ALG_DOT_F16_F16_F32\020\004\022\032\n\026ALG_DOT_BF16_"
  "BF16_BF16\020\005\022\031\n\025ALG_DOT_BF16_BF16_F32\020\006\022\034"
  "\n\030ALG_DOT_BF16_BF16_F32_X3\020\007\022\034\n\030ALG_DOT_"
  "BF16_BF16_F32_X6\020\010\022\031\n\025ALG_DOT_TF32_TF32_"
  "F32\020\t\022\034\n\030ALG_DOT_TF32_TF32_F32_X3\020\n\022\027\n\023A"
  "LG_DOT_F32_F32_F32\020\013\022\027\n\023ALG_DOT_F64_F64_"
  "F64\020\014\":\n\024ParameterReplication\022\"\n\032replica"
  "ted_at_leaf_buffers\030\001 \003(\010\"{\n\026WhileLoopBa"
  "ckendConfig\022D\n\020known_trip_count\030\001 \001(\0132*."
  "xla.WhileLoopBackendConfig.KnownTripCoun"
  "t\032\033\n\016KnownTripCount\022\t\n\001n\030\001 \001(\003\"g\n\025Output"
  "OperandAliasing\022\032\n\022output_shape_index\030\001 "
  "\003(\003\022\025\n\roperand_index\030\002 \001(\003\022\033\n\023operand_sh"
  "ape_index\030\003 \003(\003\"]\n\022OriginalArrayProto\022\030\n"
  "\020leaf_shape_index\030\001 \003(\003\022\030\n\020instruction_n"
  "ame\030\002 \001(\t\022\023\n\013shape_index\030\003 \003(\003\"=\n\022Origin"
  "alValueProto\022\'\n\006leaves\030\001 \003(\0132\027.xla.Origi"
  "nalArrayProto*\307\002\n\rPrimitiveType\022\032\n\026PRIMI"
  "TIVE_TYPE_INVALID\020\000\022\010\n\004PRED\020\001\022\006\n\002S2\020\032\022\006\n"
  "\002S4\020\025\022\006\n\002S8\020\002\022\007\n\003S16\020\003\022\007\n\003S32\020\004\022\007\n\003S64\020\005"
  "\022\006\n\002U2\020\033\022\006\n\002U4\020\026\022\006\n\002U8\020\006\022\007\n\003U16\020\007\022\007\n\003U32"
  "\020\010\022\007\n\003U64\020\t\022\007\n\003F16\020\n\022\007\n\003F32\020\013\022\010\n\004BF16\020\020\022"
  "\007\n\003F64\020\014\022\n\n\006F8E5M2\020\023\022\014\n\010F8E4M3FN\020\024\022\021\n\rF8"
  "E4M3B11FNUZ\020\027\022\016\n\nF8E5M2FNUZ\020\030\022\016\n\nF8E4M3F"
  "NUZ\020\031\022\007\n\003C64\020\017\022\010\n\004C128\020\022\022\t\n\005TUPLE\020\r\022\017\n\013O"
  "PAQUE_TYPE\020\016\022\t\n\005TOKEN\020\021*^\n\014DimLevelType\022"
  "\r\n\tDIM_DENSE\020\000\022\022\n\016DIM_COMPRESSED\020\001\022\021\n\rDI"
  "M_SINGLETON\020\002\022\030\n\024DIM_LOOSE_COMPRESSED\020\003*"
  "=\n\013ProfileType\022\013\n\007INVALID\020\000\022\n\n\006WINDOW\020\001\022"
  "\010\n\004FLAG\020\002\022\013\n\007INTEGER\020\003*j\n\rProfileSource\022"
  "!\n\035PROFILE_SOURCE_UNKNOWN_SOURCE\020\000\022\033\n\027PR"
  "OFILE_SOURCE_EMBEDDED\020\001\022\031\n\025PROFILE_SOURC"
  "E_REMOTE\020\002*\205\001\n\020CompilationEvent\022#\n\037COMPI"
  "LATION_EVENT_UNKNOWN_EVENT\020\000\022\'\n#COMPILAT"
  "ION_EVENT_FIRST_COMPILATION\020\001\022#\n\037COMPILA"
  "TION_EVENT_RECOMPILATION\020\002*G\n\013PaddingTyp"
  "e\022\023\n\017PADDING_INVALID\020\000\022\021\n\rPADDING_VALID\020"
  "\001\022\020\n\014PADDING_SAME\020\002*1\n\007FftType\022\007\n\003FFT\020\000\022"
  "\010\n\004IFFT\020\001\022\010\n\004RFFT\020\002\022\t\n\005IRFFT\020\003*A\n\014Sparsi"
  "tyType\022\024\n\020SPARSITY_INVALID\020\000\022\033\n\027SPARSITY"
  "_STRUCTURED_N_M\020\001*F\n\022RandomDistribution\022"
  "\017\n\013RNG_INVALID\020\000\022\017\n\013RNG_UNIFORM\020\001\022\016\n\nRNG"
  "_NORMAL\020\002*E\n\017RandomAlgorithm\022\017\n\013RNG_DEFA"
  "ULT\020\000\022\021\n\rRNG_THREE_FRY\020\001\022\016\n\nRNG_PHILOX\020\002"
  "B\003\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_xla_2fxla_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xla_2fxla_5fdata_2eproto = {
    false, false, 7973, descriptor_table_protodef_xla_2fxla_5fdata_2eproto,
    "xla/xla_data.proto",
    &descriptor_table_xla_2fxla_5fdata_2eproto_once, nullptr, 0, 44,
    schemas, file_default_instances, TableStruct_xla_2fxla_5fdata_2eproto::offsets,
    file_level_metadata_xla_2fxla_5fdata_2eproto, file_level_enum_descriptors_xla_2fxla_5fdata_2eproto,
    file_level_service_descriptors_xla_2fxla_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xla_2fxla_5fdata_2eproto_getter() {
  return &descriptor_table_xla_2fxla_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xla_2fxla_5fdata_2eproto(&descriptor_table_xla_2fxla_5fdata_2eproto);
namespace xla {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelHandle_ChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[0];
}
bool ChannelHandle_ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChannelHandle_ChannelType ChannelHandle::CHANNEL_TYPE_INVALID;
constexpr ChannelHandle_ChannelType ChannelHandle::DEVICE_TO_DEVICE;
constexpr ChannelHandle_ChannelType ChannelHandle::DEVICE_TO_HOST;
constexpr ChannelHandle_ChannelType ChannelHandle::HOST_TO_DEVICE;
constexpr ChannelHandle_ChannelType ChannelHandle::ChannelType_MIN;
constexpr ChannelHandle_ChannelType ChannelHandle::ChannelType_MAX;
constexpr int ChannelHandle::ChannelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TriangularSolveOptions_Transpose_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[1];
}
bool TriangularSolveOptions_Transpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TriangularSolveOptions_Transpose TriangularSolveOptions::TRANSPOSE_INVALID;
constexpr TriangularSolveOptions_Transpose TriangularSolveOptions::NO_TRANSPOSE;
constexpr TriangularSolveOptions_Transpose TriangularSolveOptions::TRANSPOSE;
constexpr TriangularSolveOptions_Transpose TriangularSolveOptions::ADJOINT;
constexpr TriangularSolveOptions_Transpose TriangularSolveOptions::Transpose_MIN;
constexpr TriangularSolveOptions_Transpose TriangularSolveOptions::Transpose_MAX;
constexpr int TriangularSolveOptions::Transpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpSharding_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[2];
}
bool OpSharding_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OpSharding_Type OpSharding::REPLICATED;
constexpr OpSharding_Type OpSharding::MAXIMAL;
constexpr OpSharding_Type OpSharding::TUPLE;
constexpr OpSharding_Type OpSharding::OTHER;
constexpr OpSharding_Type OpSharding::MANUAL;
constexpr OpSharding_Type OpSharding::UNKNOWN;
constexpr OpSharding_Type OpSharding::Type_MIN;
constexpr OpSharding_Type OpSharding::Type_MAX;
constexpr int OpSharding::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpSharding_ShardGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[3];
}
bool OpSharding_ShardGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OpSharding_ShardGroupType OpSharding::AS;
constexpr OpSharding_ShardGroupType OpSharding::LIKE;
constexpr OpSharding_ShardGroupType OpSharding::ShardGroupType_MIN;
constexpr OpSharding_ShardGroupType OpSharding::ShardGroupType_MAX;
constexpr int OpSharding::ShardGroupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrecisionConfig_Precision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[4];
}
bool PrecisionConfig_Precision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PrecisionConfig_Precision PrecisionConfig::DEFAULT;
constexpr PrecisionConfig_Precision PrecisionConfig::HIGH;
constexpr PrecisionConfig_Precision PrecisionConfig::HIGHEST;
constexpr PrecisionConfig_Precision PrecisionConfig::PACKED_NIBBLE;
constexpr PrecisionConfig_Precision PrecisionConfig::Precision_MIN;
constexpr PrecisionConfig_Precision PrecisionConfig::Precision_MAX;
constexpr int PrecisionConfig::Precision_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrecisionConfig_Algorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[5];
}
bool PrecisionConfig_Algorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_UNSET;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_ANY_F8_ANY_F8_F32;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_ANY_F8_ANY_F8_F32_FAST_ACCUM;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_F16_F16_F16;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_F16_F16_F32;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_BF16_BF16_BF16;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_BF16_BF16_F32;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_BF16_BF16_F32_X3;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_BF16_BF16_F32_X6;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_TF32_TF32_F32;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_TF32_TF32_F32_X3;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_F32_F32_F32;
constexpr PrecisionConfig_Algorithm PrecisionConfig::ALG_DOT_F64_F64_F64;
constexpr PrecisionConfig_Algorithm PrecisionConfig::Algorithm_MIN;
constexpr PrecisionConfig_Algorithm PrecisionConfig::Algorithm_MAX;
constexpr int PrecisionConfig::Algorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[6];
}
bool PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimLevelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[7];
}
bool DimLevelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[8];
}
bool ProfileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfileSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[9];
}
bool ProfileSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompilationEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[10];
}
bool CompilationEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaddingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[11];
}
bool PaddingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FftType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[12];
}
bool FftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SparsityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[13];
}
bool SparsityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RandomDistribution_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[14];
}
bool RandomDistribution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RandomAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fxla_5fdata_2eproto);
  return file_level_enum_descriptors_xla_2fxla_5fdata_2eproto[15];
}
bool RandomAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PaddingConfig_PaddingConfigDimension::_Internal {
 public:
};

PaddingConfig_PaddingConfigDimension::PaddingConfig_PaddingConfigDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.PaddingConfig.PaddingConfigDimension)
}
PaddingConfig_PaddingConfigDimension::PaddingConfig_PaddingConfigDimension(const PaddingConfig_PaddingConfigDimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaddingConfig_PaddingConfigDimension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_padding_low_){}
    , decltype(_impl_.edge_padding_high_){}
    , decltype(_impl_.interior_padding_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.edge_padding_low_, &from._impl_.edge_padding_low_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.interior_padding_) -
    reinterpret_cast<char*>(&_impl_.edge_padding_low_)) + sizeof(_impl_.interior_padding_));
  // @@protoc_insertion_point(copy_constructor:xla.PaddingConfig.PaddingConfigDimension)
}

inline void PaddingConfig_PaddingConfigDimension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_padding_low_){int64_t{0}}
    , decltype(_impl_.edge_padding_high_){int64_t{0}}
    , decltype(_impl_.interior_padding_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PaddingConfig_PaddingConfigDimension::~PaddingConfig_PaddingConfigDimension() {
  // @@protoc_insertion_point(destructor:xla.PaddingConfig.PaddingConfigDimension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaddingConfig_PaddingConfigDimension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PaddingConfig_PaddingConfigDimension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaddingConfig_PaddingConfigDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.PaddingConfig.PaddingConfigDimension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.edge_padding_low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.interior_padding_) -
      reinterpret_cast<char*>(&_impl_.edge_padding_low_)) + sizeof(_impl_.interior_padding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaddingConfig_PaddingConfigDimension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 edge_padding_low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.edge_padding_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 edge_padding_high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.edge_padding_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 interior_padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.interior_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaddingConfig_PaddingConfigDimension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.PaddingConfig.PaddingConfigDimension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 edge_padding_low = 1;
  if (this->_internal_edge_padding_low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_edge_padding_low(), target);
  }

  // int64 edge_padding_high = 2;
  if (this->_internal_edge_padding_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_edge_padding_high(), target);
  }

  // int64 interior_padding = 3;
  if (this->_internal_interior_padding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_interior_padding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.PaddingConfig.PaddingConfigDimension)
  return target;
}

size_t PaddingConfig_PaddingConfigDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.PaddingConfig.PaddingConfigDimension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 edge_padding_low = 1;
  if (this->_internal_edge_padding_low() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_edge_padding_low());
  }

  // int64 edge_padding_high = 2;
  if (this->_internal_edge_padding_high() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_edge_padding_high());
  }

  // int64 interior_padding = 3;
  if (this->_internal_interior_padding() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_interior_padding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaddingConfig_PaddingConfigDimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaddingConfig_PaddingConfigDimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaddingConfig_PaddingConfigDimension::GetClassData() const { return &_class_data_; }


void PaddingConfig_PaddingConfigDimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaddingConfig_PaddingConfigDimension*>(&to_msg);
  auto& from = static_cast<const PaddingConfig_PaddingConfigDimension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.PaddingConfig.PaddingConfigDimension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_edge_padding_low() != 0) {
    _this->_internal_set_edge_padding_low(from._internal_edge_padding_low());
  }
  if (from._internal_edge_padding_high() != 0) {
    _this->_internal_set_edge_padding_high(from._internal_edge_padding_high());
  }
  if (from._internal_interior_padding() != 0) {
    _this->_internal_set_interior_padding(from._internal_interior_padding());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaddingConfig_PaddingConfigDimension::CopyFrom(const PaddingConfig_PaddingConfigDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.PaddingConfig.PaddingConfigDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingConfig_PaddingConfigDimension::IsInitialized() const {
  return true;
}

void PaddingConfig_PaddingConfigDimension::InternalSwap(PaddingConfig_PaddingConfigDimension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaddingConfig_PaddingConfigDimension, _impl_.interior_padding_)
      + sizeof(PaddingConfig_PaddingConfigDimension::_impl_.interior_padding_)
      - PROTOBUF_FIELD_OFFSET(PaddingConfig_PaddingConfigDimension, _impl_.edge_padding_low_)>(
          reinterpret_cast<char*>(&_impl_.edge_padding_low_),
          reinterpret_cast<char*>(&other->_impl_.edge_padding_low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaddingConfig_PaddingConfigDimension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[0]);
}

// ===================================================================

class PaddingConfig::_Internal {
 public:
};

PaddingConfig::PaddingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.PaddingConfig)
}
PaddingConfig::PaddingConfig(const PaddingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaddingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.PaddingConfig)
}

inline void PaddingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PaddingConfig::~PaddingConfig() {
  // @@protoc_insertion_point(destructor:xla.PaddingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaddingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedPtrField();
}

void PaddingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaddingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.PaddingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaddingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaddingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.PaddingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.PaddingConfig)
  return target;
}

size_t PaddingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.PaddingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->_impl_.dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaddingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaddingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaddingConfig::GetClassData() const { return &_class_data_; }


void PaddingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaddingConfig*>(&to_msg);
  auto& from = static_cast<const PaddingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.PaddingConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaddingConfig::CopyFrom(const PaddingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.PaddingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingConfig::IsInitialized() const {
  return true;
}

void PaddingConfig::InternalSwap(PaddingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaddingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[1]);
}

// ===================================================================

class TileProto::_Internal {
 public:
};

TileProto::TileProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.TileProto)
}
TileProto::TileProto(const TileProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TileProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.TileProto)
}

inline void TileProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TileProto::~TileProto() {
  // @@protoc_insertion_point(destructor:xla.TileProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedField();
}

void TileProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TileProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.TileProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dimensions = 1;
  {
    int byte_size = _impl_._dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dimensions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.TileProto)
  return target;
}

size_t TileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TileProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dimensions = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TileProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileProto::GetClassData() const { return &_class_data_; }


void TileProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TileProto*>(&to_msg);
  auto& from = static_cast<const TileProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.TileProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileProto::CopyFrom(const TileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileProto::IsInitialized() const {
  return true;
}

void TileProto::InternalSwap(TileProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[2]);
}

// ===================================================================

class SplitConfigProto::_Internal {
 public:
};

SplitConfigProto::SplitConfigProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.SplitConfigProto)
}
SplitConfigProto::SplitConfigProto(const SplitConfigProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SplitConfigProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.split_indices_){from._impl_.split_indices_}
    , /*decltype(_impl_._split_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.dimension_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dimension_ = from._impl_.dimension_;
  // @@protoc_insertion_point(copy_constructor:xla.SplitConfigProto)
}

inline void SplitConfigProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.split_indices_){arena}
    , /*decltype(_impl_._split_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.dimension_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SplitConfigProto::~SplitConfigProto() {
  // @@protoc_insertion_point(destructor:xla.SplitConfigProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SplitConfigProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.split_indices_.~RepeatedField();
}

void SplitConfigProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SplitConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SplitConfigProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.split_indices_.Clear();
  _impl_.dimension_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitConfigProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 split_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_split_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_split_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitConfigProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.SplitConfigProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dimension = 1;
  if (this->_internal_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_dimension(), target);
  }

  // repeated int64 split_indices = 2;
  {
    int byte_size = _impl_._split_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_split_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.SplitConfigProto)
  return target;
}

size_t SplitConfigProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SplitConfigProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 split_indices = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.split_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._split_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 dimension = 1;
  if (this->_internal_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dimension());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitConfigProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SplitConfigProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitConfigProto::GetClassData() const { return &_class_data_; }


void SplitConfigProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SplitConfigProto*>(&to_msg);
  auto& from = static_cast<const SplitConfigProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.SplitConfigProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.split_indices_.MergeFrom(from._impl_.split_indices_);
  if (from._internal_dimension() != 0) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitConfigProto::CopyFrom(const SplitConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SplitConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitConfigProto::IsInitialized() const {
  return true;
}

void SplitConfigProto::InternalSwap(SplitConfigProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.split_indices_.InternalSwap(&other->_impl_.split_indices_);
  swap(_impl_.dimension_, other->_impl_.dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitConfigProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[3]);
}

// ===================================================================

class LayoutProto::_Internal {
 public:
  static const ::xla::ShapeProto& physical_shape(const LayoutProto* msg);
};

const ::xla::ShapeProto&
LayoutProto::_Internal::physical_shape(const LayoutProto* msg) {
  return *msg->_impl_.physical_shape_;
}
LayoutProto::LayoutProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.LayoutProto)
}
LayoutProto::LayoutProto(const LayoutProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayoutProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.minor_to_major_){from._impl_.minor_to_major_}
    , /*decltype(_impl_._minor_to_major_cached_byte_size_)*/{0}
    , decltype(_impl_.tiles_){from._impl_.tiles_}
    , decltype(_impl_.dim_level_types_){from._impl_.dim_level_types_}
    , /*decltype(_impl_._dim_level_types_cached_byte_size_)*/{0}
    , decltype(_impl_.dim_unique_){from._impl_.dim_unique_}
    , decltype(_impl_.dim_ordered_){from._impl_.dim_ordered_}
    , decltype(_impl_.split_configs_){from._impl_.split_configs_}
    , decltype(_impl_.physical_shape_){nullptr}
    , decltype(_impl_.element_size_in_bits_){}
    , decltype(_impl_.memory_space_){}
    , decltype(_impl_.index_primitive_type_){}
    , decltype(_impl_.pointer_primitive_type_){}
    , decltype(_impl_.dynamic_shape_metadata_prefix_bytes_){}
    , decltype(_impl_.tail_padding_alignment_in_elements_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_physical_shape()) {
    _this->_impl_.physical_shape_ = new ::xla::ShapeProto(*from._impl_.physical_shape_);
  }
  ::memcpy(&_impl_.element_size_in_bits_, &from._impl_.element_size_in_bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tail_padding_alignment_in_elements_) -
    reinterpret_cast<char*>(&_impl_.element_size_in_bits_)) + sizeof(_impl_.tail_padding_alignment_in_elements_));
  // @@protoc_insertion_point(copy_constructor:xla.LayoutProto)
}

inline void LayoutProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.minor_to_major_){arena}
    , /*decltype(_impl_._minor_to_major_cached_byte_size_)*/{0}
    , decltype(_impl_.tiles_){arena}
    , decltype(_impl_.dim_level_types_){arena}
    , /*decltype(_impl_._dim_level_types_cached_byte_size_)*/{0}
    , decltype(_impl_.dim_unique_){arena}
    , decltype(_impl_.dim_ordered_){arena}
    , decltype(_impl_.split_configs_){arena}
    , decltype(_impl_.physical_shape_){nullptr}
    , decltype(_impl_.element_size_in_bits_){int64_t{0}}
    , decltype(_impl_.memory_space_){int64_t{0}}
    , decltype(_impl_.index_primitive_type_){0}
    , decltype(_impl_.pointer_primitive_type_){0}
    , decltype(_impl_.dynamic_shape_metadata_prefix_bytes_){int64_t{0}}
    , decltype(_impl_.tail_padding_alignment_in_elements_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LayoutProto::~LayoutProto() {
  // @@protoc_insertion_point(destructor:xla.LayoutProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayoutProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.minor_to_major_.~RepeatedField();
  _impl_.tiles_.~RepeatedPtrField();
  _impl_.dim_level_types_.~RepeatedField();
  _impl_.dim_unique_.~RepeatedField();
  _impl_.dim_ordered_.~RepeatedField();
  _impl_.split_configs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.physical_shape_;
}

void LayoutProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayoutProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.LayoutProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.minor_to_major_.Clear();
  _impl_.tiles_.Clear();
  _impl_.dim_level_types_.Clear();
  _impl_.dim_unique_.Clear();
  _impl_.dim_ordered_.Clear();
  _impl_.split_configs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.physical_shape_ != nullptr) {
    delete _impl_.physical_shape_;
  }
  _impl_.physical_shape_ = nullptr;
  ::memset(&_impl_.element_size_in_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tail_padding_alignment_in_elements_) -
      reinterpret_cast<char*>(&_impl_.element_size_in_bits_)) + sizeof(_impl_.tail_padding_alignment_in_elements_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 minor_to_major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_minor_to_major(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_minor_to_major(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.TileProto tiles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 element_size_in_bits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.element_size_in_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 memory_space = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.memory_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.DimLevelType dim_level_types = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_dim_level_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_dim_level_types(static_cast<::xla::DimLevelType>(val));
        } else
          goto handle_unusual;
        continue;
      // .xla.ShapeProto physical_shape = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_physical_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.PrimitiveType index_primitive_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index_primitive_type(static_cast<::xla::PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // .xla.PrimitiveType pointer_primitive_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pointer_primitive_type(static_cast<::xla::PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated bool dim_unique = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_dim_unique(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_dim_unique(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool dim_ordered = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_dim_ordered(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_dim_ordered(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dynamic_shape_metadata_prefix_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.dynamic_shape_metadata_prefix_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 tail_padding_alignment_in_elements = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.tail_padding_alignment_in_elements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.SplitConfigProto split_configs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_split_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayoutProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.LayoutProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 minor_to_major = 1;
  {
    int byte_size = _impl_._minor_to_major_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_minor_to_major(), byte_size, target);
    }
  }

  // repeated .xla.TileProto tiles = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_tiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 element_size_in_bits = 7;
  if (this->_internal_element_size_in_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_element_size_in_bits(), target);
  }

  // int64 memory_space = 8;
  if (this->_internal_memory_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_memory_space(), target);
  }

  // repeated .xla.DimLevelType dim_level_types = 9;
  {
    int byte_size = _impl_._dim_level_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, _impl_.dim_level_types_, byte_size, target);
    }
  }

  // .xla.ShapeProto physical_shape = 10;
  if (this->_internal_has_physical_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::physical_shape(this),
        _Internal::physical_shape(this).GetCachedSize(), target, stream);
  }

  // .xla.PrimitiveType index_primitive_type = 11;
  if (this->_internal_index_primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_index_primitive_type(), target);
  }

  // .xla.PrimitiveType pointer_primitive_type = 12;
  if (this->_internal_pointer_primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_pointer_primitive_type(), target);
  }

  // repeated bool dim_unique = 13;
  if (this->_internal_dim_unique_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_dim_unique(), target);
  }

  // repeated bool dim_ordered = 14;
  if (this->_internal_dim_ordered_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_dim_ordered(), target);
  }

  // int64 dynamic_shape_metadata_prefix_bytes = 15;
  if (this->_internal_dynamic_shape_metadata_prefix_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_dynamic_shape_metadata_prefix_bytes(), target);
  }

  // int64 tail_padding_alignment_in_elements = 16;
  if (this->_internal_tail_padding_alignment_in_elements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_tail_padding_alignment_in_elements(), target);
  }

  // repeated .xla.SplitConfigProto split_configs = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_split_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_split_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.LayoutProto)
  return target;
}

size_t LayoutProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.LayoutProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 minor_to_major = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.minor_to_major_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._minor_to_major_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.TileProto tiles = 6;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->_impl_.tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.DimLevelType dim_level_types = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_dim_level_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_dim_level_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dim_level_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool dim_unique = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dim_unique_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool dim_ordered = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dim_ordered_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .xla.SplitConfigProto split_configs = 17;
  total_size += 2UL * this->_internal_split_configs_size();
  for (const auto& msg : this->_impl_.split_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xla.ShapeProto physical_shape = 10;
  if (this->_internal_has_physical_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.physical_shape_);
  }

  // int64 element_size_in_bits = 7;
  if (this->_internal_element_size_in_bits() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_element_size_in_bits());
  }

  // int64 memory_space = 8;
  if (this->_internal_memory_space() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_memory_space());
  }

  // .xla.PrimitiveType index_primitive_type = 11;
  if (this->_internal_index_primitive_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_index_primitive_type());
  }

  // .xla.PrimitiveType pointer_primitive_type = 12;
  if (this->_internal_pointer_primitive_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pointer_primitive_type());
  }

  // int64 dynamic_shape_metadata_prefix_bytes = 15;
  if (this->_internal_dynamic_shape_metadata_prefix_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dynamic_shape_metadata_prefix_bytes());
  }

  // int64 tail_padding_alignment_in_elements = 16;
  if (this->_internal_tail_padding_alignment_in_elements() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tail_padding_alignment_in_elements());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayoutProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayoutProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayoutProto::GetClassData() const { return &_class_data_; }


void LayoutProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayoutProto*>(&to_msg);
  auto& from = static_cast<const LayoutProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.LayoutProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.minor_to_major_.MergeFrom(from._impl_.minor_to_major_);
  _this->_impl_.tiles_.MergeFrom(from._impl_.tiles_);
  _this->_impl_.dim_level_types_.MergeFrom(from._impl_.dim_level_types_);
  _this->_impl_.dim_unique_.MergeFrom(from._impl_.dim_unique_);
  _this->_impl_.dim_ordered_.MergeFrom(from._impl_.dim_ordered_);
  _this->_impl_.split_configs_.MergeFrom(from._impl_.split_configs_);
  if (from._internal_has_physical_shape()) {
    _this->_internal_mutable_physical_shape()->::xla::ShapeProto::MergeFrom(
        from._internal_physical_shape());
  }
  if (from._internal_element_size_in_bits() != 0) {
    _this->_internal_set_element_size_in_bits(from._internal_element_size_in_bits());
  }
  if (from._internal_memory_space() != 0) {
    _this->_internal_set_memory_space(from._internal_memory_space());
  }
  if (from._internal_index_primitive_type() != 0) {
    _this->_internal_set_index_primitive_type(from._internal_index_primitive_type());
  }
  if (from._internal_pointer_primitive_type() != 0) {
    _this->_internal_set_pointer_primitive_type(from._internal_pointer_primitive_type());
  }
  if (from._internal_dynamic_shape_metadata_prefix_bytes() != 0) {
    _this->_internal_set_dynamic_shape_metadata_prefix_bytes(from._internal_dynamic_shape_metadata_prefix_bytes());
  }
  if (from._internal_tail_padding_alignment_in_elements() != 0) {
    _this->_internal_set_tail_padding_alignment_in_elements(from._internal_tail_padding_alignment_in_elements());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayoutProto::CopyFrom(const LayoutProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.LayoutProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutProto::IsInitialized() const {
  return true;
}

void LayoutProto::InternalSwap(LayoutProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.minor_to_major_.InternalSwap(&other->_impl_.minor_to_major_);
  _impl_.tiles_.InternalSwap(&other->_impl_.tiles_);
  _impl_.dim_level_types_.InternalSwap(&other->_impl_.dim_level_types_);
  _impl_.dim_unique_.InternalSwap(&other->_impl_.dim_unique_);
  _impl_.dim_ordered_.InternalSwap(&other->_impl_.dim_ordered_);
  _impl_.split_configs_.InternalSwap(&other->_impl_.split_configs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayoutProto, _impl_.tail_padding_alignment_in_elements_)
      + sizeof(LayoutProto::_impl_.tail_padding_alignment_in_elements_)
      - PROTOBUF_FIELD_OFFSET(LayoutProto, _impl_.physical_shape_)>(
          reinterpret_cast<char*>(&_impl_.physical_shape_),
          reinterpret_cast<char*>(&other->_impl_.physical_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[4]);
}

// ===================================================================

class ShapeProto::_Internal {
 public:
  static const ::xla::LayoutProto& layout(const ShapeProto* msg);
};

const ::xla::LayoutProto&
ShapeProto::_Internal::layout(const ShapeProto* msg) {
  return *msg->_impl_.layout_;
}
ShapeProto::ShapeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ShapeProto)
}
ShapeProto::ShapeProto(const ShapeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShapeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.tuple_shapes_){from._impl_.tuple_shapes_}
    , decltype(_impl_.is_dynamic_dimension_){from._impl_.is_dynamic_dimension_}
    , decltype(_impl_.layout_){nullptr}
    , decltype(_impl_.element_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_layout()) {
    _this->_impl_.layout_ = new ::xla::LayoutProto(*from._impl_.layout_);
  }
  _this->_impl_.element_type_ = from._impl_.element_type_;
  // @@protoc_insertion_point(copy_constructor:xla.ShapeProto)
}

inline void ShapeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.tuple_shapes_){arena}
    , decltype(_impl_.is_dynamic_dimension_){arena}
    , decltype(_impl_.layout_){nullptr}
    , decltype(_impl_.element_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShapeProto::~ShapeProto() {
  // @@protoc_insertion_point(destructor:xla.ShapeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShapeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedField();
  _impl_.tuple_shapes_.~RepeatedPtrField();
  _impl_.is_dynamic_dimension_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.layout_;
}

void ShapeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ShapeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _impl_.tuple_shapes_.Clear();
  _impl_.is_dynamic_dimension_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.layout_ != nullptr) {
    delete _impl_.layout_;
  }
  _impl_.layout_ = nullptr;
  _impl_.element_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.PrimitiveType element_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_element_type(static_cast<::xla::PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 dimensions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.ShapeProto tuple_shapes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuple_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.LayoutProto layout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool is_dynamic_dimension = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_dynamic_dimension(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_is_dynamic_dimension(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShapeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ShapeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.PrimitiveType element_type = 2;
  if (this->_internal_element_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_element_type(), target);
  }

  // repeated int64 dimensions = 3;
  {
    int byte_size = _impl_._dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_dimensions(), byte_size, target);
    }
  }

  // repeated .xla.ShapeProto tuple_shapes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuple_shapes_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuple_shapes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.LayoutProto layout = 5;
  if (this->_internal_has_layout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::layout(this),
        _Internal::layout(this).GetCachedSize(), target, stream);
  }

  // repeated bool is_dynamic_dimension = 6;
  if (this->_internal_is_dynamic_dimension_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_is_dynamic_dimension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ShapeProto)
  return target;
}

size_t ShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ShapeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dimensions = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.ShapeProto tuple_shapes = 4;
  total_size += 1UL * this->_internal_tuple_shapes_size();
  for (const auto& msg : this->_impl_.tuple_shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool is_dynamic_dimension = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_dynamic_dimension_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .xla.LayoutProto layout = 5;
  if (this->_internal_has_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layout_);
  }

  // .xla.PrimitiveType element_type = 2;
  if (this->_internal_element_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_element_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShapeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeProto::GetClassData() const { return &_class_data_; }


void ShapeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShapeProto*>(&to_msg);
  auto& from = static_cast<const ShapeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ShapeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_impl_.tuple_shapes_.MergeFrom(from._impl_.tuple_shapes_);
  _this->_impl_.is_dynamic_dimension_.MergeFrom(from._impl_.is_dynamic_dimension_);
  if (from._internal_has_layout()) {
    _this->_internal_mutable_layout()->::xla::LayoutProto::MergeFrom(
        from._internal_layout());
  }
  if (from._internal_element_type() != 0) {
    _this->_internal_set_element_type(from._internal_element_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeProto::CopyFrom(const ShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeProto::IsInitialized() const {
  return true;
}

void ShapeProto::InternalSwap(ShapeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
  _impl_.tuple_shapes_.InternalSwap(&other->_impl_.tuple_shapes_);
  _impl_.is_dynamic_dimension_.InternalSwap(&other->_impl_.is_dynamic_dimension_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeProto, _impl_.element_type_)
      + sizeof(ShapeProto::_impl_.element_type_)
      - PROTOBUF_FIELD_OFFSET(ShapeProto, _impl_.layout_)>(
          reinterpret_cast<char*>(&_impl_.layout_),
          reinterpret_cast<char*>(&other->_impl_.layout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[5]);
}

// ===================================================================

class ProgramShapeProto::_Internal {
 public:
  static const ::xla::ShapeProto& result(const ProgramShapeProto* msg);
};

const ::xla::ShapeProto&
ProgramShapeProto::_Internal::result(const ProgramShapeProto* msg) {
  return *msg->_impl_.result_;
}
ProgramShapeProto::ProgramShapeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ProgramShapeProto)
}
ProgramShapeProto::ProgramShapeProto(const ProgramShapeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProgramShapeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameters_){from._impl_.parameters_}
    , decltype(_impl_.parameter_names_){from._impl_.parameter_names_}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::xla::ShapeProto(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:xla.ProgramShapeProto)
}

inline void ProgramShapeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parameters_){arena}
    , decltype(_impl_.parameter_names_){arena}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProgramShapeProto::~ProgramShapeProto() {
  // @@protoc_insertion_point(destructor:xla.ProgramShapeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProgramShapeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameters_.~RepeatedPtrField();
  _impl_.parameter_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void ProgramShapeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProgramShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ProgramShapeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.parameter_names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgramShapeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.ShapeProto parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.ShapeProto result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string parameter_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parameter_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.ProgramShapeProto.parameter_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProgramShapeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ProgramShapeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.ShapeProto parameters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.ShapeProto result = 2;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // repeated string parameter_names = 3;
  for (int i = 0, n = this->_internal_parameter_names_size(); i < n; i++) {
    const auto& s = this->_internal_parameter_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.ProgramShapeProto.parameter_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ProgramShapeProto)
  return target;
}

size_t ProgramShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ProgramShapeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.ShapeProto parameters = 1;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->_impl_.parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string parameter_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.parameter_names_.size());
  for (int i = 0, n = _impl_.parameter_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.parameter_names_.Get(i));
  }

  // .xla.ShapeProto result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgramShapeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProgramShapeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgramShapeProto::GetClassData() const { return &_class_data_; }


void ProgramShapeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProgramShapeProto*>(&to_msg);
  auto& from = static_cast<const ProgramShapeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ProgramShapeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  _this->_impl_.parameter_names_.MergeFrom(from._impl_.parameter_names_);
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::xla::ShapeProto::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgramShapeProto::CopyFrom(const ProgramShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ProgramShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramShapeProto::IsInitialized() const {
  return true;
}

void ProgramShapeProto::InternalSwap(ProgramShapeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  _impl_.parameter_names_.InternalSwap(&other->_impl_.parameter_names_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramShapeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[6]);
}

// ===================================================================

class ComputationStats::_Internal {
 public:
};

ComputationStats::ComputationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ComputationStats)
}
ComputationStats::ComputationStats(const ComputationStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComputationStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flop_count_){}
    , decltype(_impl_.transcendental_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.flop_count_, &from._impl_.flop_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transcendental_count_) -
    reinterpret_cast<char*>(&_impl_.flop_count_)) + sizeof(_impl_.transcendental_count_));
  // @@protoc_insertion_point(copy_constructor:xla.ComputationStats)
}

inline void ComputationStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flop_count_){0}
    , decltype(_impl_.transcendental_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComputationStats::~ComputationStats() {
  // @@protoc_insertion_point(destructor:xla.ComputationStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComputationStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComputationStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComputationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputationStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.flop_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transcendental_count_) -
      reinterpret_cast<char*>(&_impl_.flop_count_)) + sizeof(_impl_.transcendental_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputationStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double flop_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.flop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double transcendental_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.transcendental_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComputationStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputationStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double flop_count = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flop_count = this->_internal_flop_count();
  uint64_t raw_flop_count;
  memcpy(&raw_flop_count, &tmp_flop_count, sizeof(tmp_flop_count));
  if (raw_flop_count != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_flop_count(), target);
  }

  // double transcendental_count = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_transcendental_count = this->_internal_transcendental_count();
  uint64_t raw_transcendental_count;
  memcpy(&raw_transcendental_count, &tmp_transcendental_count, sizeof(tmp_transcendental_count));
  if (raw_transcendental_count != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_transcendental_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputationStats)
  return target;
}

size_t ComputationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputationStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double flop_count = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flop_count = this->_internal_flop_count();
  uint64_t raw_flop_count;
  memcpy(&raw_flop_count, &tmp_flop_count, sizeof(tmp_flop_count));
  if (raw_flop_count != 0) {
    total_size += 1 + 8;
  }

  // double transcendental_count = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_transcendental_count = this->_internal_transcendental_count();
  uint64_t raw_transcendental_count;
  memcpy(&raw_transcendental_count, &tmp_transcendental_count, sizeof(tmp_transcendental_count));
  if (raw_transcendental_count != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComputationStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComputationStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComputationStats::GetClassData() const { return &_class_data_; }


void ComputationStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComputationStats*>(&to_msg);
  auto& from = static_cast<const ComputationStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputationStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flop_count = from._internal_flop_count();
  uint64_t raw_flop_count;
  memcpy(&raw_flop_count, &tmp_flop_count, sizeof(tmp_flop_count));
  if (raw_flop_count != 0) {
    _this->_internal_set_flop_count(from._internal_flop_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_transcendental_count = from._internal_transcendental_count();
  uint64_t raw_transcendental_count;
  memcpy(&raw_transcendental_count, &tmp_transcendental_count, sizeof(tmp_transcendental_count));
  if (raw_transcendental_count != 0) {
    _this->_internal_set_transcendental_count(from._internal_transcendental_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComputationStats::CopyFrom(const ComputationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationStats::IsInitialized() const {
  return true;
}

void ComputationStats::InternalSwap(ComputationStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputationStats, _impl_.transcendental_count_)
      + sizeof(ComputationStats::_impl_.transcendental_count_)
      - PROTOBUF_FIELD_OFFSET(ComputationStats, _impl_.flop_count_)>(
          reinterpret_cast<char*>(&_impl_.flop_count_),
          reinterpret_cast<char*>(&other->_impl_.flop_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputationStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[7]);
}

// ===================================================================

class OpMetadata_ProfileInfo::_Internal {
 public:
};

OpMetadata_ProfileInfo::OpMetadata_ProfileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.OpMetadata.ProfileInfo)
}
OpMetadata_ProfileInfo::OpMetadata_ProfileInfo(const OpMetadata_ProfileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpMetadata_ProfileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.profile_type_){from._impl_.profile_type_}
    , /*decltype(_impl_._profile_type_cached_byte_size_)*/{0}
    , decltype(_impl_.relative_speedup_){}
    , decltype(_impl_.profile_source_){}
    , decltype(_impl_.compilation_event_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.relative_speedup_, &from._impl_.relative_speedup_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compilation_event_) -
    reinterpret_cast<char*>(&_impl_.relative_speedup_)) + sizeof(_impl_.compilation_event_));
  // @@protoc_insertion_point(copy_constructor:xla.OpMetadata.ProfileInfo)
}

inline void OpMetadata_ProfileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.profile_type_){arena}
    , /*decltype(_impl_._profile_type_cached_byte_size_)*/{0}
    , decltype(_impl_.relative_speedup_){0}
    , decltype(_impl_.profile_source_){0}
    , decltype(_impl_.compilation_event_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpMetadata_ProfileInfo::~OpMetadata_ProfileInfo() {
  // @@protoc_insertion_point(destructor:xla.OpMetadata.ProfileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpMetadata_ProfileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.profile_type_.~RepeatedField();
}

void OpMetadata_ProfileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpMetadata_ProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OpMetadata.ProfileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.profile_type_.Clear();
  ::memset(&_impl_.relative_speedup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compilation_event_) -
      reinterpret_cast<char*>(&_impl_.relative_speedup_)) + sizeof(_impl_.compilation_event_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpMetadata_ProfileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.ProfileType profile_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_profile_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_profile_type(static_cast<::xla::ProfileType>(val));
        } else
          goto handle_unusual;
        continue;
      // double relative_speedup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.relative_speedup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .xla.ProfileSource profile_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_profile_source(static_cast<::xla::ProfileSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .xla.CompilationEvent compilation_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compilation_event(static_cast<::xla::CompilationEvent>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpMetadata_ProfileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.OpMetadata.ProfileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.ProfileType profile_type = 1;
  {
    int byte_size = _impl_._profile_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.profile_type_, byte_size, target);
    }
  }

  // double relative_speedup = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_speedup = this->_internal_relative_speedup();
  uint64_t raw_relative_speedup;
  memcpy(&raw_relative_speedup, &tmp_relative_speedup, sizeof(tmp_relative_speedup));
  if (raw_relative_speedup != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_relative_speedup(), target);
  }

  // .xla.ProfileSource profile_source = 3;
  if (this->_internal_profile_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_profile_source(), target);
  }

  // .xla.CompilationEvent compilation_event = 4;
  if (this->_internal_compilation_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_compilation_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.OpMetadata.ProfileInfo)
  return target;
}

size_t OpMetadata_ProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OpMetadata.ProfileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.ProfileType profile_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_profile_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_profile_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._profile_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double relative_speedup = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_speedup = this->_internal_relative_speedup();
  uint64_t raw_relative_speedup;
  memcpy(&raw_relative_speedup, &tmp_relative_speedup, sizeof(tmp_relative_speedup));
  if (raw_relative_speedup != 0) {
    total_size += 1 + 8;
  }

  // .xla.ProfileSource profile_source = 3;
  if (this->_internal_profile_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_profile_source());
  }

  // .xla.CompilationEvent compilation_event = 4;
  if (this->_internal_compilation_event() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compilation_event());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpMetadata_ProfileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpMetadata_ProfileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpMetadata_ProfileInfo::GetClassData() const { return &_class_data_; }


void OpMetadata_ProfileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpMetadata_ProfileInfo*>(&to_msg);
  auto& from = static_cast<const OpMetadata_ProfileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.OpMetadata.ProfileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.profile_type_.MergeFrom(from._impl_.profile_type_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_speedup = from._internal_relative_speedup();
  uint64_t raw_relative_speedup;
  memcpy(&raw_relative_speedup, &tmp_relative_speedup, sizeof(tmp_relative_speedup));
  if (raw_relative_speedup != 0) {
    _this->_internal_set_relative_speedup(from._internal_relative_speedup());
  }
  if (from._internal_profile_source() != 0) {
    _this->_internal_set_profile_source(from._internal_profile_source());
  }
  if (from._internal_compilation_event() != 0) {
    _this->_internal_set_compilation_event(from._internal_compilation_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpMetadata_ProfileInfo::CopyFrom(const OpMetadata_ProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OpMetadata.ProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpMetadata_ProfileInfo::IsInitialized() const {
  return true;
}

void OpMetadata_ProfileInfo::InternalSwap(OpMetadata_ProfileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.profile_type_.InternalSwap(&other->_impl_.profile_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpMetadata_ProfileInfo, _impl_.compilation_event_)
      + sizeof(OpMetadata_ProfileInfo::_impl_.compilation_event_)
      - PROTOBUF_FIELD_OFFSET(OpMetadata_ProfileInfo, _impl_.relative_speedup_)>(
          reinterpret_cast<char*>(&_impl_.relative_speedup_),
          reinterpret_cast<char*>(&other->_impl_.relative_speedup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpMetadata_ProfileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[8]);
}

// ===================================================================

class OpMetadata::_Internal {
 public:
  static const ::xla::OpMetadata_ProfileInfo& profile_info(const OpMetadata* msg);
};

const ::xla::OpMetadata_ProfileInfo&
OpMetadata::_Internal::profile_info(const OpMetadata* msg) {
  return *msg->_impl_.profile_info_;
}
OpMetadata::OpMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.OpMetadata)
}
OpMetadata::OpMetadata(const OpMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.profile_type_){from._impl_.profile_type_}
    , /*decltype(_impl_._profile_type_cached_byte_size_)*/{0}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.op_name_){}
    , decltype(_impl_.source_file_){}
    , decltype(_impl_.deduplicated_name_){}
    , decltype(_impl_.scheduling_name_){}
    , decltype(_impl_.profile_info_){nullptr}
    , decltype(_impl_.size_of_generated_code_in_bytes_){}
    , decltype(_impl_.source_line_){}
    , decltype(_impl_.preserve_layout_){}
    , decltype(_impl_.size_of_memory_working_set_in_bytes_){}
    , decltype(_impl_.stack_frame_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op_type().empty()) {
    _this->_impl_.op_type_.Set(from._internal_op_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op_name().empty()) {
    _this->_impl_.op_name_.Set(from._internal_op_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_file().empty()) {
    _this->_impl_.source_file_.Set(from._internal_source_file(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deduplicated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deduplicated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deduplicated_name().empty()) {
    _this->_impl_.deduplicated_name_.Set(from._internal_deduplicated_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scheduling_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scheduling_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scheduling_name().empty()) {
    _this->_impl_.scheduling_name_.Set(from._internal_scheduling_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_profile_info()) {
    _this->_impl_.profile_info_ = new ::xla::OpMetadata_ProfileInfo(*from._impl_.profile_info_);
  }
  ::memcpy(&_impl_.size_of_generated_code_in_bytes_, &from._impl_.size_of_generated_code_in_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stack_frame_id_) -
    reinterpret_cast<char*>(&_impl_.size_of_generated_code_in_bytes_)) + sizeof(_impl_.stack_frame_id_));
  // @@protoc_insertion_point(copy_constructor:xla.OpMetadata)
}

inline void OpMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.profile_type_){arena}
    , /*decltype(_impl_._profile_type_cached_byte_size_)*/{0}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.op_name_){}
    , decltype(_impl_.source_file_){}
    , decltype(_impl_.deduplicated_name_){}
    , decltype(_impl_.scheduling_name_){}
    , decltype(_impl_.profile_info_){nullptr}
    , decltype(_impl_.size_of_generated_code_in_bytes_){int64_t{0}}
    , decltype(_impl_.source_line_){0}
    , decltype(_impl_.preserve_layout_){false}
    , decltype(_impl_.size_of_memory_working_set_in_bytes_){int64_t{0}}
    , decltype(_impl_.stack_frame_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deduplicated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deduplicated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scheduling_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scheduling_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpMetadata::~OpMetadata() {
  // @@protoc_insertion_point(destructor:xla.OpMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.profile_type_.~RepeatedField();
  _impl_.op_type_.Destroy();
  _impl_.op_name_.Destroy();
  _impl_.source_file_.Destroy();
  _impl_.deduplicated_name_.Destroy();
  _impl_.scheduling_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.profile_info_;
}

void OpMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OpMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.profile_type_.Clear();
  _impl_.op_type_.ClearToEmpty();
  _impl_.op_name_.ClearToEmpty();
  _impl_.source_file_.ClearToEmpty();
  _impl_.deduplicated_name_.ClearToEmpty();
  _impl_.scheduling_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.profile_info_ != nullptr) {
    delete _impl_.profile_info_;
  }
  _impl_.profile_info_ = nullptr;
  ::memset(&_impl_.size_of_generated_code_in_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stack_frame_id_) -
      reinterpret_cast<char*>(&_impl_.size_of_generated_code_in_bytes_)) + sizeof(_impl_.stack_frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_op_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.OpMetadata.op_type"));
        } else
          goto handle_unusual;
        continue;
      // string op_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_op_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.OpMetadata.op_name"));
        } else
          goto handle_unusual;
        continue;
      // string source_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.OpMetadata.source_file"));
        } else
          goto handle_unusual;
        continue;
      // int32 source_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.source_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.ProfileType profile_type = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_profile_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_profile_type(static_cast<::xla::ProfileType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 size_of_generated_code_in_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.size_of_generated_code_in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size_of_memory_working_set_in_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.size_of_memory_working_set_in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.OpMetadata.ProfileInfo profile_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deduplicated_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_deduplicated_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.OpMetadata.deduplicated_name"));
        } else
          goto handle_unusual;
        continue;
      // bool preserve_layout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.preserve_layout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stack_frame_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.stack_frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string scheduling_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_scheduling_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.OpMetadata.scheduling_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.OpMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_type = 1;
  if (!this->_internal_op_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.op_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_type(), target);
  }

  // string op_name = 2;
  if (!this->_internal_op_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.op_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_op_name(), target);
  }

  // string source_file = 3;
  if (!this->_internal_source_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_file().data(), static_cast<int>(this->_internal_source_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.source_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source_file(), target);
  }

  // int32 source_line = 4;
  if (this->_internal_source_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_source_line(), target);
  }

  // repeated .xla.ProfileType profile_type = 5 [deprecated = true];
  {
    int byte_size = _impl_._profile_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, _impl_.profile_type_, byte_size, target);
    }
  }

  // int64 size_of_generated_code_in_bytes = 8;
  if (this->_internal_size_of_generated_code_in_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_size_of_generated_code_in_bytes(), target);
  }

  // int64 size_of_memory_working_set_in_bytes = 9;
  if (this->_internal_size_of_memory_working_set_in_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_size_of_memory_working_set_in_bytes(), target);
  }

  // .xla.OpMetadata.ProfileInfo profile_info = 10;
  if (this->_internal_has_profile_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::profile_info(this),
        _Internal::profile_info(this).GetCachedSize(), target, stream);
  }

  // string deduplicated_name = 12;
  if (!this->_internal_deduplicated_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deduplicated_name().data(), static_cast<int>(this->_internal_deduplicated_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.deduplicated_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_deduplicated_name(), target);
  }

  // bool preserve_layout = 13;
  if (this->_internal_preserve_layout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_preserve_layout(), target);
  }

  // int32 stack_frame_id = 15;
  if (this->_internal_stack_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_stack_frame_id(), target);
  }

  // string scheduling_name = 16;
  if (!this->_internal_scheduling_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scheduling_name().data(), static_cast<int>(this->_internal_scheduling_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.scheduling_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_scheduling_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.OpMetadata)
  return target;
}

size_t OpMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OpMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.ProfileType profile_type = 5 [deprecated = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_profile_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_profile_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._profile_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string op_type = 1;
  if (!this->_internal_op_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_type());
  }

  // string op_name = 2;
  if (!this->_internal_op_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // string source_file = 3;
  if (!this->_internal_source_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_file());
  }

  // string deduplicated_name = 12;
  if (!this->_internal_deduplicated_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deduplicated_name());
  }

  // string scheduling_name = 16;
  if (!this->_internal_scheduling_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheduling_name());
  }

  // .xla.OpMetadata.ProfileInfo profile_info = 10;
  if (this->_internal_has_profile_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profile_info_);
  }

  // int64 size_of_generated_code_in_bytes = 8;
  if (this->_internal_size_of_generated_code_in_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size_of_generated_code_in_bytes());
  }

  // int32 source_line = 4;
  if (this->_internal_source_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_line());
  }

  // bool preserve_layout = 13;
  if (this->_internal_preserve_layout() != 0) {
    total_size += 1 + 1;
  }

  // int64 size_of_memory_working_set_in_bytes = 9;
  if (this->_internal_size_of_memory_working_set_in_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size_of_memory_working_set_in_bytes());
  }

  // int32 stack_frame_id = 15;
  if (this->_internal_stack_frame_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stack_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpMetadata::GetClassData() const { return &_class_data_; }


void OpMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpMetadata*>(&to_msg);
  auto& from = static_cast<const OpMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.OpMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.profile_type_.MergeFrom(from._impl_.profile_type_);
  if (!from._internal_op_type().empty()) {
    _this->_internal_set_op_type(from._internal_op_type());
  }
  if (!from._internal_op_name().empty()) {
    _this->_internal_set_op_name(from._internal_op_name());
  }
  if (!from._internal_source_file().empty()) {
    _this->_internal_set_source_file(from._internal_source_file());
  }
  if (!from._internal_deduplicated_name().empty()) {
    _this->_internal_set_deduplicated_name(from._internal_deduplicated_name());
  }
  if (!from._internal_scheduling_name().empty()) {
    _this->_internal_set_scheduling_name(from._internal_scheduling_name());
  }
  if (from._internal_has_profile_info()) {
    _this->_internal_mutable_profile_info()->::xla::OpMetadata_ProfileInfo::MergeFrom(
        from._internal_profile_info());
  }
  if (from._internal_size_of_generated_code_in_bytes() != 0) {
    _this->_internal_set_size_of_generated_code_in_bytes(from._internal_size_of_generated_code_in_bytes());
  }
  if (from._internal_source_line() != 0) {
    _this->_internal_set_source_line(from._internal_source_line());
  }
  if (from._internal_preserve_layout() != 0) {
    _this->_internal_set_preserve_layout(from._internal_preserve_layout());
  }
  if (from._internal_size_of_memory_working_set_in_bytes() != 0) {
    _this->_internal_set_size_of_memory_working_set_in_bytes(from._internal_size_of_memory_working_set_in_bytes());
  }
  if (from._internal_stack_frame_id() != 0) {
    _this->_internal_set_stack_frame_id(from._internal_stack_frame_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpMetadata::CopyFrom(const OpMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OpMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpMetadata::IsInitialized() const {
  return true;
}

void OpMetadata::InternalSwap(OpMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.profile_type_.InternalSwap(&other->_impl_.profile_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_type_, lhs_arena,
      &other->_impl_.op_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_name_, lhs_arena,
      &other->_impl_.op_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_file_, lhs_arena,
      &other->_impl_.source_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deduplicated_name_, lhs_arena,
      &other->_impl_.deduplicated_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scheduling_name_, lhs_arena,
      &other->_impl_.scheduling_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpMetadata, _impl_.stack_frame_id_)
      + sizeof(OpMetadata::_impl_.stack_frame_id_)
      - PROTOBUF_FIELD_OFFSET(OpMetadata, _impl_.profile_info_)>(
          reinterpret_cast<char*>(&_impl_.profile_info_),
          reinterpret_cast<char*>(&other->_impl_.profile_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[9]);
}

// ===================================================================

class ExecutionProfile::_Internal {
 public:
};

ExecutionProfile::ExecutionProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ExecutionProfile)
}
ExecutionProfile::ExecutionProfile(const ExecutionProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecutionProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compile_time_ms_){}
    , decltype(_impl_.compute_cycle_count_){}
    , decltype(_impl_.compute_time_ns_){}
    , decltype(_impl_.compute_and_transfer_time_ns_){}
    , decltype(_impl_.executable_size_in_bytes_){}
    , decltype(_impl_.compilation_cache_hit_){}
    , decltype(_impl_.profile_cache_hit_){}
    , decltype(_impl_.warmup_run_executed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.compile_time_ms_, &from._impl_.compile_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.warmup_run_executed_) -
    reinterpret_cast<char*>(&_impl_.compile_time_ms_)) + sizeof(_impl_.warmup_run_executed_));
  // @@protoc_insertion_point(copy_constructor:xla.ExecutionProfile)
}

inline void ExecutionProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compile_time_ms_){int64_t{0}}
    , decltype(_impl_.compute_cycle_count_){int64_t{0}}
    , decltype(_impl_.compute_time_ns_){int64_t{0}}
    , decltype(_impl_.compute_and_transfer_time_ns_){int64_t{0}}
    , decltype(_impl_.executable_size_in_bytes_){int64_t{0}}
    , decltype(_impl_.compilation_cache_hit_){false}
    , decltype(_impl_.profile_cache_hit_){false}
    , decltype(_impl_.warmup_run_executed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExecutionProfile::~ExecutionProfile() {
  // @@protoc_insertion_point(destructor:xla.ExecutionProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecutionProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExecutionProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecutionProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.compile_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.warmup_run_executed_) -
      reinterpret_cast<char*>(&_impl_.compile_time_ms_)) + sizeof(_impl_.warmup_run_executed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool compilation_cache_hit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.compilation_cache_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compile_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.compile_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compute_cycle_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.compute_cycle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compute_time_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.compute_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compute_and_transfer_time_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.compute_and_transfer_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 executable_size_in_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.executable_size_in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool profile_cache_hit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.profile_cache_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool warmup_run_executed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.warmup_run_executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecutionProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool compilation_cache_hit = 1;
  if (this->_internal_compilation_cache_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_compilation_cache_hit(), target);
  }

  // int64 compile_time_ms = 2;
  if (this->_internal_compile_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_compile_time_ms(), target);
  }

  // int64 compute_cycle_count = 3;
  if (this->_internal_compute_cycle_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_compute_cycle_count(), target);
  }

  // int64 compute_time_ns = 4;
  if (this->_internal_compute_time_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_compute_time_ns(), target);
  }

  // int64 compute_and_transfer_time_ns = 5;
  if (this->_internal_compute_and_transfer_time_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_compute_and_transfer_time_ns(), target);
  }

  // int64 executable_size_in_bytes = 6;
  if (this->_internal_executable_size_in_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_executable_size_in_bytes(), target);
  }

  // bool profile_cache_hit = 7;
  if (this->_internal_profile_cache_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_profile_cache_hit(), target);
  }

  // bool warmup_run_executed = 8;
  if (this->_internal_warmup_run_executed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_warmup_run_executed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecutionProfile)
  return target;
}

size_t ExecutionProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecutionProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 compile_time_ms = 2;
  if (this->_internal_compile_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compile_time_ms());
  }

  // int64 compute_cycle_count = 3;
  if (this->_internal_compute_cycle_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compute_cycle_count());
  }

  // int64 compute_time_ns = 4;
  if (this->_internal_compute_time_ns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compute_time_ns());
  }

  // int64 compute_and_transfer_time_ns = 5;
  if (this->_internal_compute_and_transfer_time_ns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compute_and_transfer_time_ns());
  }

  // int64 executable_size_in_bytes = 6;
  if (this->_internal_executable_size_in_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_executable_size_in_bytes());
  }

  // bool compilation_cache_hit = 1;
  if (this->_internal_compilation_cache_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool profile_cache_hit = 7;
  if (this->_internal_profile_cache_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool warmup_run_executed = 8;
  if (this->_internal_warmup_run_executed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionProfile::GetClassData() const { return &_class_data_; }


void ExecutionProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionProfile*>(&to_msg);
  auto& from = static_cast<const ExecutionProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecutionProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_compile_time_ms() != 0) {
    _this->_internal_set_compile_time_ms(from._internal_compile_time_ms());
  }
  if (from._internal_compute_cycle_count() != 0) {
    _this->_internal_set_compute_cycle_count(from._internal_compute_cycle_count());
  }
  if (from._internal_compute_time_ns() != 0) {
    _this->_internal_set_compute_time_ns(from._internal_compute_time_ns());
  }
  if (from._internal_compute_and_transfer_time_ns() != 0) {
    _this->_internal_set_compute_and_transfer_time_ns(from._internal_compute_and_transfer_time_ns());
  }
  if (from._internal_executable_size_in_bytes() != 0) {
    _this->_internal_set_executable_size_in_bytes(from._internal_executable_size_in_bytes());
  }
  if (from._internal_compilation_cache_hit() != 0) {
    _this->_internal_set_compilation_cache_hit(from._internal_compilation_cache_hit());
  }
  if (from._internal_profile_cache_hit() != 0) {
    _this->_internal_set_profile_cache_hit(from._internal_profile_cache_hit());
  }
  if (from._internal_warmup_run_executed() != 0) {
    _this->_internal_set_warmup_run_executed(from._internal_warmup_run_executed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionProfile::CopyFrom(const ExecutionProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecutionProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionProfile::IsInitialized() const {
  return true;
}

void ExecutionProfile::InternalSwap(ExecutionProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionProfile, _impl_.warmup_run_executed_)
      + sizeof(ExecutionProfile::_impl_.warmup_run_executed_)
      - PROTOBUF_FIELD_OFFSET(ExecutionProfile, _impl_.compile_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.compile_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.compile_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[10]);
}

// ===================================================================

class ExecutionHandle::_Internal {
 public:
};

ExecutionHandle::ExecutionHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ExecutionHandle)
}
ExecutionHandle::ExecutionHandle(const ExecutionHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecutionHandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.handle_ = from._impl_.handle_;
  // @@protoc_insertion_point(copy_constructor:xla.ExecutionHandle)
}

inline void ExecutionHandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExecutionHandle::~ExecutionHandle() {
  // @@protoc_insertion_point(destructor:xla.ExecutionHandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecutionHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExecutionHandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecutionHandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.handle_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionHandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionHandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecutionHandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecutionHandle)
  return target;
}

size_t ExecutionHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecutionHandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionHandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionHandle::GetClassData() const { return &_class_data_; }


void ExecutionHandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionHandle*>(&to_msg);
  auto& from = static_cast<const ExecutionHandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecutionHandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_handle() != 0) {
    _this->_internal_set_handle(from._internal_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionHandle::CopyFrom(const ExecutionHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecutionHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionHandle::IsInitialized() const {
  return true;
}

void ExecutionHandle::InternalSwap(ExecutionHandle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.handle_, other->_impl_.handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[11]);
}

// ===================================================================

class GlobalDataHandle::_Internal {
 public:
};

GlobalDataHandle::GlobalDataHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.GlobalDataHandle)
}
GlobalDataHandle::GlobalDataHandle(const GlobalDataHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlobalDataHandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.handle_ = from._impl_.handle_;
  // @@protoc_insertion_point(copy_constructor:xla.GlobalDataHandle)
}

inline void GlobalDataHandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GlobalDataHandle::~GlobalDataHandle() {
  // @@protoc_insertion_point(destructor:xla.GlobalDataHandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalDataHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlobalDataHandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalDataHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GlobalDataHandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.handle_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalDataHandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalDataHandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.GlobalDataHandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.GlobalDataHandle)
  return target;
}

size_t GlobalDataHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GlobalDataHandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalDataHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalDataHandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalDataHandle::GetClassData() const { return &_class_data_; }


void GlobalDataHandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalDataHandle*>(&to_msg);
  auto& from = static_cast<const GlobalDataHandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.GlobalDataHandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_handle() != 0) {
    _this->_internal_set_handle(from._internal_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalDataHandle::CopyFrom(const GlobalDataHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GlobalDataHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDataHandle::IsInitialized() const {
  return true;
}

void GlobalDataHandle::InternalSwap(GlobalDataHandle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.handle_, other->_impl_.handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalDataHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[12]);
}

// ===================================================================

class DeviceHandle::_Internal {
 public:
};

DeviceHandle::DeviceHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.DeviceHandle)
}
DeviceHandle::DeviceHandle(const DeviceHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceHandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){}
    , decltype(_impl_.device_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.handle_, &from._impl_.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_count_) -
    reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.device_count_));
  // @@protoc_insertion_point(copy_constructor:xla.DeviceHandle)
}

inline void DeviceHandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){int64_t{0}}
    , decltype(_impl_.device_count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceHandle::~DeviceHandle() {
  // @@protoc_insertion_point(destructor:xla.DeviceHandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceHandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DeviceHandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.device_count_) -
      reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.device_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceHandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 device_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.device_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceHandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.DeviceHandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_handle(), target);
  }

  // int64 device_count = 2;
  if (this->_internal_device_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_device_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.DeviceHandle)
  return target;
}

size_t DeviceHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DeviceHandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
  }

  // int64 device_count = 2;
  if (this->_internal_device_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_device_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceHandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceHandle::GetClassData() const { return &_class_data_; }


void DeviceHandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceHandle*>(&to_msg);
  auto& from = static_cast<const DeviceHandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.DeviceHandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_handle() != 0) {
    _this->_internal_set_handle(from._internal_handle());
  }
  if (from._internal_device_count() != 0) {
    _this->_internal_set_device_count(from._internal_device_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceHandle::CopyFrom(const DeviceHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DeviceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceHandle::IsInitialized() const {
  return true;
}

void DeviceHandle::InternalSwap(DeviceHandle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceHandle, _impl_.device_count_)
      + sizeof(DeviceHandle::_impl_.device_count_)
      - PROTOBUF_FIELD_OFFSET(DeviceHandle, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[13]);
}

// ===================================================================

class ChannelHandle::_Internal {
 public:
};

ChannelHandle::ChannelHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ChannelHandle)
}
ChannelHandle::ChannelHandle(const ChannelHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelHandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.handle_, &from._impl_.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:xla.ChannelHandle)
}

inline void ChannelHandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelHandle::~ChannelHandle() {
  // @@protoc_insertion_point(destructor:xla.ChannelHandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelHandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ChannelHandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelHandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.ChannelHandle.ChannelType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::xla::ChannelHandle_ChannelType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelHandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ChannelHandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_handle(), target);
  }

  // .xla.ChannelHandle.ChannelType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ChannelHandle)
  return target;
}

size_t ChannelHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ChannelHandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
  }

  // .xla.ChannelHandle.ChannelType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelHandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelHandle::GetClassData() const { return &_class_data_; }


void ChannelHandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelHandle*>(&to_msg);
  auto& from = static_cast<const ChannelHandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ChannelHandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_handle() != 0) {
    _this->_internal_set_handle(from._internal_handle());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelHandle::CopyFrom(const ChannelHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ChannelHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelHandle::IsInitialized() const {
  return true;
}

void ChannelHandle::InternalSwap(ChannelHandle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelHandle, _impl_.type_)
      + sizeof(ChannelHandle::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ChannelHandle, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[14]);
}

// ===================================================================

class DeviceAssignmentProto_ComputationDevice::_Internal {
 public:
};

DeviceAssignmentProto_ComputationDevice::DeviceAssignmentProto_ComputationDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.DeviceAssignmentProto.ComputationDevice)
}
DeviceAssignmentProto_ComputationDevice::DeviceAssignmentProto_ComputationDevice(const DeviceAssignmentProto_ComputationDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceAssignmentProto_ComputationDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_device_ids_){from._impl_.replica_device_ids_}
    , /*decltype(_impl_._replica_device_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.DeviceAssignmentProto.ComputationDevice)
}

inline void DeviceAssignmentProto_ComputationDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_device_ids_){arena}
    , /*decltype(_impl_._replica_device_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceAssignmentProto_ComputationDevice::~DeviceAssignmentProto_ComputationDevice() {
  // @@protoc_insertion_point(destructor:xla.DeviceAssignmentProto.ComputationDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceAssignmentProto_ComputationDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replica_device_ids_.~RepeatedField();
}

void DeviceAssignmentProto_ComputationDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceAssignmentProto_ComputationDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DeviceAssignmentProto.ComputationDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replica_device_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceAssignmentProto_ComputationDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 replica_device_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_replica_device_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_replica_device_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceAssignmentProto_ComputationDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.DeviceAssignmentProto.ComputationDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 replica_device_ids = 1;
  {
    int byte_size = _impl_._replica_device_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_replica_device_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.DeviceAssignmentProto.ComputationDevice)
  return target;
}

size_t DeviceAssignmentProto_ComputationDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DeviceAssignmentProto.ComputationDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 replica_device_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.replica_device_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._replica_device_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceAssignmentProto_ComputationDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceAssignmentProto_ComputationDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceAssignmentProto_ComputationDevice::GetClassData() const { return &_class_data_; }


void DeviceAssignmentProto_ComputationDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceAssignmentProto_ComputationDevice*>(&to_msg);
  auto& from = static_cast<const DeviceAssignmentProto_ComputationDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.DeviceAssignmentProto.ComputationDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replica_device_ids_.MergeFrom(from._impl_.replica_device_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceAssignmentProto_ComputationDevice::CopyFrom(const DeviceAssignmentProto_ComputationDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DeviceAssignmentProto.ComputationDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAssignmentProto_ComputationDevice::IsInitialized() const {
  return true;
}

void DeviceAssignmentProto_ComputationDevice::InternalSwap(DeviceAssignmentProto_ComputationDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replica_device_ids_.InternalSwap(&other->_impl_.replica_device_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceAssignmentProto_ComputationDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[15]);
}

// ===================================================================

class DeviceAssignmentProto::_Internal {
 public:
};

DeviceAssignmentProto::DeviceAssignmentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.DeviceAssignmentProto)
}
DeviceAssignmentProto::DeviceAssignmentProto(const DeviceAssignmentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceAssignmentProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.computation_devices_){from._impl_.computation_devices_}
    , decltype(_impl_.replica_count_){}
    , decltype(_impl_.computation_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.replica_count_, &from._impl_.replica_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.computation_count_) -
    reinterpret_cast<char*>(&_impl_.replica_count_)) + sizeof(_impl_.computation_count_));
  // @@protoc_insertion_point(copy_constructor:xla.DeviceAssignmentProto)
}

inline void DeviceAssignmentProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.computation_devices_){arena}
    , decltype(_impl_.replica_count_){0}
    , decltype(_impl_.computation_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceAssignmentProto::~DeviceAssignmentProto() {
  // @@protoc_insertion_point(destructor:xla.DeviceAssignmentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceAssignmentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.computation_devices_.~RepeatedPtrField();
}

void DeviceAssignmentProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceAssignmentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DeviceAssignmentProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.computation_devices_.Clear();
  ::memset(&_impl_.replica_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.computation_count_) -
      reinterpret_cast<char*>(&_impl_.replica_count_)) + sizeof(_impl_.computation_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceAssignmentProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 replica_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.replica_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 computation_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.computation_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.DeviceAssignmentProto.ComputationDevice computation_devices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_computation_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceAssignmentProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.DeviceAssignmentProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 replica_count = 1;
  if (this->_internal_replica_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_replica_count(), target);
  }

  // int32 computation_count = 2;
  if (this->_internal_computation_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_computation_count(), target);
  }

  // repeated .xla.DeviceAssignmentProto.ComputationDevice computation_devices = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_computation_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_computation_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.DeviceAssignmentProto)
  return target;
}

size_t DeviceAssignmentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DeviceAssignmentProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.DeviceAssignmentProto.ComputationDevice computation_devices = 3;
  total_size += 1UL * this->_internal_computation_devices_size();
  for (const auto& msg : this->_impl_.computation_devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 replica_count = 1;
  if (this->_internal_replica_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replica_count());
  }

  // int32 computation_count = 2;
  if (this->_internal_computation_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_computation_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceAssignmentProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceAssignmentProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceAssignmentProto::GetClassData() const { return &_class_data_; }


void DeviceAssignmentProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceAssignmentProto*>(&to_msg);
  auto& from = static_cast<const DeviceAssignmentProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.DeviceAssignmentProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.computation_devices_.MergeFrom(from._impl_.computation_devices_);
  if (from._internal_replica_count() != 0) {
    _this->_internal_set_replica_count(from._internal_replica_count());
  }
  if (from._internal_computation_count() != 0) {
    _this->_internal_set_computation_count(from._internal_computation_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceAssignmentProto::CopyFrom(const DeviceAssignmentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DeviceAssignmentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAssignmentProto::IsInitialized() const {
  return true;
}

void DeviceAssignmentProto::InternalSwap(DeviceAssignmentProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.computation_devices_.InternalSwap(&other->_impl_.computation_devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceAssignmentProto, _impl_.computation_count_)
      + sizeof(DeviceAssignmentProto::_impl_.computation_count_)
      - PROTOBUF_FIELD_OFFSET(DeviceAssignmentProto, _impl_.replica_count_)>(
          reinterpret_cast<char*>(&_impl_.replica_count_),
          reinterpret_cast<char*>(&other->_impl_.replica_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceAssignmentProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[16]);
}

// ===================================================================

class LiteralProto::_Internal {
 public:
  static const ::xla::ShapeProto& shape(const LiteralProto* msg);
};

const ::xla::ShapeProto&
LiteralProto::_Internal::shape(const LiteralProto* msg) {
  return *msg->_impl_.shape_;
}
LiteralProto::LiteralProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.LiteralProto)
}
LiteralProto::LiteralProto(const LiteralProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiteralProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preds_){from._impl_.preds_}
    , decltype(_impl_.s32s_){from._impl_.s32s_}
    , /*decltype(_impl_._s32s_cached_byte_size_)*/{0}
    , decltype(_impl_.s64s_){from._impl_.s64s_}
    , /*decltype(_impl_._s64s_cached_byte_size_)*/{0}
    , decltype(_impl_.u32s_){from._impl_.u32s_}
    , /*decltype(_impl_._u32s_cached_byte_size_)*/{0}
    , decltype(_impl_.u64s_){from._impl_.u64s_}
    , /*decltype(_impl_._u64s_cached_byte_size_)*/{0}
    , decltype(_impl_.f32s_){from._impl_.f32s_}
    , decltype(_impl_.f64s_){from._impl_.f64s_}
    , decltype(_impl_.tuple_literals_){from._impl_.tuple_literals_}
    , decltype(_impl_.c64s_){from._impl_.c64s_}
    , decltype(_impl_.sparse_indices_){from._impl_.sparse_indices_}
    , /*decltype(_impl_._sparse_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.c128s_){from._impl_.c128s_}
    , decltype(_impl_.u8s_){}
    , decltype(_impl_.f16s_){}
    , decltype(_impl_.bf16s_){}
    , decltype(_impl_.s8s_){}
    , decltype(_impl_.u16s_){}
    , decltype(_impl_.s16s_){}
    , decltype(_impl_.f8e5m2s_){}
    , decltype(_impl_.f8e4m3fns_){}
    , decltype(_impl_.s4s_){}
    , decltype(_impl_.u4s_){}
    , decltype(_impl_.f8e4m3b11fnuzs_){}
    , decltype(_impl_.f8e5m2fnuzs_){}
    , decltype(_impl_.f8e4m3fnuzs_){}
    , decltype(_impl_.s2s_){}
    , decltype(_impl_.u2s_){}
    , decltype(_impl_.shape_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.u8s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.u8s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_u8s().empty()) {
    _this->_impl_.u8s_.Set(from._internal_u8s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f16s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f16s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f16s().empty()) {
    _this->_impl_.f16s_.Set(from._internal_f16s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bf16s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bf16s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bf16s().empty()) {
    _this->_impl_.bf16s_.Set(from._internal_bf16s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s8s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s8s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s8s().empty()) {
    _this->_impl_.s8s_.Set(from._internal_s8s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.u16s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.u16s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_u16s().empty()) {
    _this->_impl_.u16s_.Set(from._internal_u16s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s16s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s16s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s16s().empty()) {
    _this->_impl_.s16s_.Set(from._internal_s16s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f8e5m2s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e5m2s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f8e5m2s().empty()) {
    _this->_impl_.f8e5m2s_.Set(from._internal_f8e5m2s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f8e4m3fns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e4m3fns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f8e4m3fns().empty()) {
    _this->_impl_.f8e4m3fns_.Set(from._internal_f8e4m3fns(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s4s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s4s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s4s().empty()) {
    _this->_impl_.s4s_.Set(from._internal_s4s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.u4s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.u4s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_u4s().empty()) {
    _this->_impl_.u4s_.Set(from._internal_u4s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f8e4m3b11fnuzs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e4m3b11fnuzs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f8e4m3b11fnuzs().empty()) {
    _this->_impl_.f8e4m3b11fnuzs_.Set(from._internal_f8e4m3b11fnuzs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f8e5m2fnuzs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e5m2fnuzs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f8e5m2fnuzs().empty()) {
    _this->_impl_.f8e5m2fnuzs_.Set(from._internal_f8e5m2fnuzs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f8e4m3fnuzs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e4m3fnuzs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f8e4m3fnuzs().empty()) {
    _this->_impl_.f8e4m3fnuzs_.Set(from._internal_f8e4m3fnuzs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s2s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s2s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s2s().empty()) {
    _this->_impl_.s2s_.Set(from._internal_s2s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.u2s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.u2s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_u2s().empty()) {
    _this->_impl_.u2s_.Set(from._internal_u2s(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::xla::ShapeProto(*from._impl_.shape_);
  }
  // @@protoc_insertion_point(copy_constructor:xla.LiteralProto)
}

inline void LiteralProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preds_){arena}
    , decltype(_impl_.s32s_){arena}
    , /*decltype(_impl_._s32s_cached_byte_size_)*/{0}
    , decltype(_impl_.s64s_){arena}
    , /*decltype(_impl_._s64s_cached_byte_size_)*/{0}
    , decltype(_impl_.u32s_){arena}
    , /*decltype(_impl_._u32s_cached_byte_size_)*/{0}
    , decltype(_impl_.u64s_){arena}
    , /*decltype(_impl_._u64s_cached_byte_size_)*/{0}
    , decltype(_impl_.f32s_){arena}
    , decltype(_impl_.f64s_){arena}
    , decltype(_impl_.tuple_literals_){arena}
    , decltype(_impl_.c64s_){arena}
    , decltype(_impl_.sparse_indices_){arena}
    , /*decltype(_impl_._sparse_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.c128s_){arena}
    , decltype(_impl_.u8s_){}
    , decltype(_impl_.f16s_){}
    , decltype(_impl_.bf16s_){}
    , decltype(_impl_.s8s_){}
    , decltype(_impl_.u16s_){}
    , decltype(_impl_.s16s_){}
    , decltype(_impl_.f8e5m2s_){}
    , decltype(_impl_.f8e4m3fns_){}
    , decltype(_impl_.s4s_){}
    , decltype(_impl_.u4s_){}
    , decltype(_impl_.f8e4m3b11fnuzs_){}
    , decltype(_impl_.f8e5m2fnuzs_){}
    , decltype(_impl_.f8e4m3fnuzs_){}
    , decltype(_impl_.s2s_){}
    , decltype(_impl_.u2s_){}
    , decltype(_impl_.shape_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.u8s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.u8s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f16s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f16s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bf16s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bf16s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s8s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s8s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.u16s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.u16s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s16s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s16s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f8e5m2s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e5m2s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f8e4m3fns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e4m3fns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s4s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s4s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.u4s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.u4s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f8e4m3b11fnuzs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e4m3b11fnuzs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f8e5m2fnuzs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e5m2fnuzs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f8e4m3fnuzs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f8e4m3fnuzs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s2s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s2s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.u2s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.u2s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LiteralProto::~LiteralProto() {
  // @@protoc_insertion_point(destructor:xla.LiteralProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiteralProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preds_.~RepeatedField();
  _impl_.s32s_.~RepeatedField();
  _impl_.s64s_.~RepeatedField();
  _impl_.u32s_.~RepeatedField();
  _impl_.u64s_.~RepeatedField();
  _impl_.f32s_.~RepeatedField();
  _impl_.f64s_.~RepeatedField();
  _impl_.tuple_literals_.~RepeatedPtrField();
  _impl_.c64s_.~RepeatedField();
  _impl_.sparse_indices_.~RepeatedField();
  _impl_.c128s_.~RepeatedField();
  _impl_.u8s_.Destroy();
  _impl_.f16s_.Destroy();
  _impl_.bf16s_.Destroy();
  _impl_.s8s_.Destroy();
  _impl_.u16s_.Destroy();
  _impl_.s16s_.Destroy();
  _impl_.f8e5m2s_.Destroy();
  _impl_.f8e4m3fns_.Destroy();
  _impl_.s4s_.Destroy();
  _impl_.u4s_.Destroy();
  _impl_.f8e4m3b11fnuzs_.Destroy();
  _impl_.f8e5m2fnuzs_.Destroy();
  _impl_.f8e4m3fnuzs_.Destroy();
  _impl_.s2s_.Destroy();
  _impl_.u2s_.Destroy();
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void LiteralProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiteralProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.LiteralProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.preds_.Clear();
  _impl_.s32s_.Clear();
  _impl_.s64s_.Clear();
  _impl_.u32s_.Clear();
  _impl_.u64s_.Clear();
  _impl_.f32s_.Clear();
  _impl_.f64s_.Clear();
  _impl_.tuple_literals_.Clear();
  _impl_.c64s_.Clear();
  _impl_.sparse_indices_.Clear();
  _impl_.c128s_.Clear();
  _impl_.u8s_.ClearToEmpty();
  _impl_.f16s_.ClearToEmpty();
  _impl_.bf16s_.ClearToEmpty();
  _impl_.s8s_.ClearToEmpty();
  _impl_.u16s_.ClearToEmpty();
  _impl_.s16s_.ClearToEmpty();
  _impl_.f8e5m2s_.ClearToEmpty();
  _impl_.f8e4m3fns_.ClearToEmpty();
  _impl_.s4s_.ClearToEmpty();
  _impl_.u4s_.ClearToEmpty();
  _impl_.f8e4m3b11fnuzs_.ClearToEmpty();
  _impl_.f8e5m2fnuzs_.ClearToEmpty();
  _impl_.f8e4m3fnuzs_.ClearToEmpty();
  _impl_.s2s_.ClearToEmpty();
  _impl_.u2s_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiteralProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.ShapeProto shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool preds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_preds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_preds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes u8s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_u8s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 s32s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_s32s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_s32s(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 s64s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_s64s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_s64s(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 u32s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_u32s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_u32s(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 u64s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_u64s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_u64s(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float f32s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_f32s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 69) {
          _internal_add_f32s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated double f64s = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_f64s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 73) {
          _internal_add_f64s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.LiteralProto tuple_literals = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuple_literals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes f16s = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_f16s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float c64s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_c64s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 101) {
          _internal_add_c64s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bytes bf16s = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_bf16s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 sparse_indices = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sparse_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_sparse_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes s8s = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_s8s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes u16s = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_u16s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes s16s = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_s16s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double c128s = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_c128s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 145) {
          _internal_add_c128s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes f8e5m2s = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_f8e5m2s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes f8e4m3fns = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_f8e4m3fns();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes s4s = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_s4s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes u4s = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_u4s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes f8e4m3b11fnuzs = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_f8e4m3b11fnuzs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes f8e5m2fnuzs = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_f8e5m2fnuzs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes f8e4m3fnuzs = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_f8e4m3fnuzs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes s2s = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_s2s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes u2s = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_u2s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiteralProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.LiteralProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.ShapeProto shape = 1;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // repeated bool preds = 2;
  if (this->_internal_preds_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_preds(), target);
  }

  // bytes u8s = 3;
  if (!this->_internal_u8s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_u8s(), target);
  }

  // repeated int32 s32s = 4;
  {
    int byte_size = _impl_._s32s_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_s32s(), byte_size, target);
    }
  }

  // repeated int64 s64s = 5;
  {
    int byte_size = _impl_._s64s_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_s64s(), byte_size, target);
    }
  }

  // repeated uint32 u32s = 6;
  {
    int byte_size = _impl_._u32s_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_u32s(), byte_size, target);
    }
  }

  // repeated uint64 u64s = 7;
  {
    int byte_size = _impl_._u64s_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_u64s(), byte_size, target);
    }
  }

  // repeated float f32s = 8;
  if (this->_internal_f32s_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_f32s(), target);
  }

  // repeated double f64s = 9;
  if (this->_internal_f64s_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_f64s(), target);
  }

  // repeated .xla.LiteralProto tuple_literals = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuple_literals_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuple_literals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes f16s = 11;
  if (!this->_internal_f16s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_f16s(), target);
  }

  // repeated float c64s = 12;
  if (this->_internal_c64s_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_c64s(), target);
  }

  // bytes bf16s = 13;
  if (!this->_internal_bf16s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_bf16s(), target);
  }

  // repeated int64 sparse_indices = 14;
  {
    int byte_size = _impl_._sparse_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          14, _internal_sparse_indices(), byte_size, target);
    }
  }

  // bytes s8s = 15;
  if (!this->_internal_s8s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_s8s(), target);
  }

  // bytes u16s = 16;
  if (!this->_internal_u16s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_u16s(), target);
  }

  // bytes s16s = 17;
  if (!this->_internal_s16s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_s16s(), target);
  }

  // repeated double c128s = 18;
  if (this->_internal_c128s_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_c128s(), target);
  }

  // bytes f8e5m2s = 19;
  if (!this->_internal_f8e5m2s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_f8e5m2s(), target);
  }

  // bytes f8e4m3fns = 20;
  if (!this->_internal_f8e4m3fns().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_f8e4m3fns(), target);
  }

  // bytes s4s = 21;
  if (!this->_internal_s4s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_s4s(), target);
  }

  // bytes u4s = 22;
  if (!this->_internal_u4s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_u4s(), target);
  }

  // bytes f8e4m3b11fnuzs = 23;
  if (!this->_internal_f8e4m3b11fnuzs().empty()) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_f8e4m3b11fnuzs(), target);
  }

  // bytes f8e5m2fnuzs = 24;
  if (!this->_internal_f8e5m2fnuzs().empty()) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_f8e5m2fnuzs(), target);
  }

  // bytes f8e4m3fnuzs = 25;
  if (!this->_internal_f8e4m3fnuzs().empty()) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_f8e4m3fnuzs(), target);
  }

  // bytes s2s = 26;
  if (!this->_internal_s2s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_s2s(), target);
  }

  // bytes u2s = 27;
  if (!this->_internal_u2s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_u2s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.LiteralProto)
  return target;
}

size_t LiteralProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.LiteralProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool preds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_preds_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 s32s = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.s32s_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._s32s_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 s64s = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.s64s_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._s64s_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 u32s = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.u32s_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._u32s_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 u64s = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.u64s_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._u64s_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float f32s = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f32s_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double f64s = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f64s_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .xla.LiteralProto tuple_literals = 10;
  total_size += 1UL * this->_internal_tuple_literals_size();
  for (const auto& msg : this->_impl_.tuple_literals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float c64s = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_c64s_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int64 sparse_indices = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sparse_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sparse_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double c128s = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_c128s_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // bytes u8s = 3;
  if (!this->_internal_u8s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_u8s());
  }

  // bytes f16s = 11;
  if (!this->_internal_f16s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f16s());
  }

  // bytes bf16s = 13;
  if (!this->_internal_bf16s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bf16s());
  }

  // bytes s8s = 15;
  if (!this->_internal_s8s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_s8s());
  }

  // bytes u16s = 16;
  if (!this->_internal_u16s().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_u16s());
  }

  // bytes s16s = 17;
  if (!this->_internal_s16s().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_s16s());
  }

  // bytes f8e5m2s = 19;
  if (!this->_internal_f8e5m2s().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f8e5m2s());
  }

  // bytes f8e4m3fns = 20;
  if (!this->_internal_f8e4m3fns().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f8e4m3fns());
  }

  // bytes s4s = 21;
  if (!this->_internal_s4s().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_s4s());
  }

  // bytes u4s = 22;
  if (!this->_internal_u4s().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_u4s());
  }

  // bytes f8e4m3b11fnuzs = 23;
  if (!this->_internal_f8e4m3b11fnuzs().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f8e4m3b11fnuzs());
  }

  // bytes f8e5m2fnuzs = 24;
  if (!this->_internal_f8e5m2fnuzs().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f8e5m2fnuzs());
  }

  // bytes f8e4m3fnuzs = 25;
  if (!this->_internal_f8e4m3fnuzs().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f8e4m3fnuzs());
  }

  // bytes s2s = 26;
  if (!this->_internal_s2s().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_s2s());
  }

  // bytes u2s = 27;
  if (!this->_internal_u2s().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_u2s());
  }

  // .xla.ShapeProto shape = 1;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiteralProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiteralProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiteralProto::GetClassData() const { return &_class_data_; }


void LiteralProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiteralProto*>(&to_msg);
  auto& from = static_cast<const LiteralProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.LiteralProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.preds_.MergeFrom(from._impl_.preds_);
  _this->_impl_.s32s_.MergeFrom(from._impl_.s32s_);
  _this->_impl_.s64s_.MergeFrom(from._impl_.s64s_);
  _this->_impl_.u32s_.MergeFrom(from._impl_.u32s_);
  _this->_impl_.u64s_.MergeFrom(from._impl_.u64s_);
  _this->_impl_.f32s_.MergeFrom(from._impl_.f32s_);
  _this->_impl_.f64s_.MergeFrom(from._impl_.f64s_);
  _this->_impl_.tuple_literals_.MergeFrom(from._impl_.tuple_literals_);
  _this->_impl_.c64s_.MergeFrom(from._impl_.c64s_);
  _this->_impl_.sparse_indices_.MergeFrom(from._impl_.sparse_indices_);
  _this->_impl_.c128s_.MergeFrom(from._impl_.c128s_);
  if (!from._internal_u8s().empty()) {
    _this->_internal_set_u8s(from._internal_u8s());
  }
  if (!from._internal_f16s().empty()) {
    _this->_internal_set_f16s(from._internal_f16s());
  }
  if (!from._internal_bf16s().empty()) {
    _this->_internal_set_bf16s(from._internal_bf16s());
  }
  if (!from._internal_s8s().empty()) {
    _this->_internal_set_s8s(from._internal_s8s());
  }
  if (!from._internal_u16s().empty()) {
    _this->_internal_set_u16s(from._internal_u16s());
  }
  if (!from._internal_s16s().empty()) {
    _this->_internal_set_s16s(from._internal_s16s());
  }
  if (!from._internal_f8e5m2s().empty()) {
    _this->_internal_set_f8e5m2s(from._internal_f8e5m2s());
  }
  if (!from._internal_f8e4m3fns().empty()) {
    _this->_internal_set_f8e4m3fns(from._internal_f8e4m3fns());
  }
  if (!from._internal_s4s().empty()) {
    _this->_internal_set_s4s(from._internal_s4s());
  }
  if (!from._internal_u4s().empty()) {
    _this->_internal_set_u4s(from._internal_u4s());
  }
  if (!from._internal_f8e4m3b11fnuzs().empty()) {
    _this->_internal_set_f8e4m3b11fnuzs(from._internal_f8e4m3b11fnuzs());
  }
  if (!from._internal_f8e5m2fnuzs().empty()) {
    _this->_internal_set_f8e5m2fnuzs(from._internal_f8e5m2fnuzs());
  }
  if (!from._internal_f8e4m3fnuzs().empty()) {
    _this->_internal_set_f8e4m3fnuzs(from._internal_f8e4m3fnuzs());
  }
  if (!from._internal_s2s().empty()) {
    _this->_internal_set_s2s(from._internal_s2s());
  }
  if (!from._internal_u2s().empty()) {
    _this->_internal_set_u2s(from._internal_u2s());
  }
  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::xla::ShapeProto::MergeFrom(
        from._internal_shape());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiteralProto::CopyFrom(const LiteralProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.LiteralProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiteralProto::IsInitialized() const {
  return true;
}

void LiteralProto::InternalSwap(LiteralProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.preds_.InternalSwap(&other->_impl_.preds_);
  _impl_.s32s_.InternalSwap(&other->_impl_.s32s_);
  _impl_.s64s_.InternalSwap(&other->_impl_.s64s_);
  _impl_.u32s_.InternalSwap(&other->_impl_.u32s_);
  _impl_.u64s_.InternalSwap(&other->_impl_.u64s_);
  _impl_.f32s_.InternalSwap(&other->_impl_.f32s_);
  _impl_.f64s_.InternalSwap(&other->_impl_.f64s_);
  _impl_.tuple_literals_.InternalSwap(&other->_impl_.tuple_literals_);
  _impl_.c64s_.InternalSwap(&other->_impl_.c64s_);
  _impl_.sparse_indices_.InternalSwap(&other->_impl_.sparse_indices_);
  _impl_.c128s_.InternalSwap(&other->_impl_.c128s_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.u8s_, lhs_arena,
      &other->_impl_.u8s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f16s_, lhs_arena,
      &other->_impl_.f16s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bf16s_, lhs_arena,
      &other->_impl_.bf16s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s8s_, lhs_arena,
      &other->_impl_.s8s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.u16s_, lhs_arena,
      &other->_impl_.u16s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s16s_, lhs_arena,
      &other->_impl_.s16s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f8e5m2s_, lhs_arena,
      &other->_impl_.f8e5m2s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f8e4m3fns_, lhs_arena,
      &other->_impl_.f8e4m3fns_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s4s_, lhs_arena,
      &other->_impl_.s4s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.u4s_, lhs_arena,
      &other->_impl_.u4s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f8e4m3b11fnuzs_, lhs_arena,
      &other->_impl_.f8e4m3b11fnuzs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f8e5m2fnuzs_, lhs_arena,
      &other->_impl_.f8e5m2fnuzs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f8e4m3fnuzs_, lhs_arena,
      &other->_impl_.f8e4m3fnuzs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s2s_, lhs_arena,
      &other->_impl_.s2s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.u2s_, lhs_arena,
      &other->_impl_.u2s_, rhs_arena
  );
  swap(_impl_.shape_, other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiteralProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[17]);
}

// ===================================================================

class WindowDimension::_Internal {
 public:
};

WindowDimension::WindowDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.WindowDimension)
}
WindowDimension::WindowDimension(const WindowDimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WindowDimension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , decltype(_impl_.stride_){}
    , decltype(_impl_.padding_low_){}
    , decltype(_impl_.padding_high_){}
    , decltype(_impl_.window_dilation_){}
    , decltype(_impl_.base_dilation_){}
    , decltype(_impl_.window_reversal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.window_reversal_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.window_reversal_));
  // @@protoc_insertion_point(copy_constructor:xla.WindowDimension)
}

inline void WindowDimension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.stride_){int64_t{0}}
    , decltype(_impl_.padding_low_){int64_t{0}}
    , decltype(_impl_.padding_high_){int64_t{0}}
    , decltype(_impl_.window_dilation_){int64_t{0}}
    , decltype(_impl_.base_dilation_){int64_t{0}}
    , decltype(_impl_.window_reversal_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WindowDimension::~WindowDimension() {
  // @@protoc_insertion_point(destructor:xla.WindowDimension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WindowDimension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WindowDimension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WindowDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.WindowDimension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.window_reversal_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.window_reversal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowDimension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 padding_low = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.padding_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 padding_high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.padding_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 window_dilation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.window_dilation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 base_dilation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.base_dilation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool window_reversal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.window_reversal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WindowDimension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.WindowDimension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_size(), target);
  }

  // int64 stride = 2;
  if (this->_internal_stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_stride(), target);
  }

  // int64 padding_low = 3;
  if (this->_internal_padding_low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_padding_low(), target);
  }

  // int64 padding_high = 4;
  if (this->_internal_padding_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_padding_high(), target);
  }

  // int64 window_dilation = 5;
  if (this->_internal_window_dilation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_window_dilation(), target);
  }

  // int64 base_dilation = 6;
  if (this->_internal_base_dilation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_base_dilation(), target);
  }

  // bool window_reversal = 7;
  if (this->_internal_window_reversal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_window_reversal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.WindowDimension)
  return target;
}

size_t WindowDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.WindowDimension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 stride = 2;
  if (this->_internal_stride() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stride());
  }

  // int64 padding_low = 3;
  if (this->_internal_padding_low() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_padding_low());
  }

  // int64 padding_high = 4;
  if (this->_internal_padding_high() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_padding_high());
  }

  // int64 window_dilation = 5;
  if (this->_internal_window_dilation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_window_dilation());
  }

  // int64 base_dilation = 6;
  if (this->_internal_base_dilation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_base_dilation());
  }

  // bool window_reversal = 7;
  if (this->_internal_window_reversal() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WindowDimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WindowDimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WindowDimension::GetClassData() const { return &_class_data_; }


void WindowDimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WindowDimension*>(&to_msg);
  auto& from = static_cast<const WindowDimension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.WindowDimension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_stride() != 0) {
    _this->_internal_set_stride(from._internal_stride());
  }
  if (from._internal_padding_low() != 0) {
    _this->_internal_set_padding_low(from._internal_padding_low());
  }
  if (from._internal_padding_high() != 0) {
    _this->_internal_set_padding_high(from._internal_padding_high());
  }
  if (from._internal_window_dilation() != 0) {
    _this->_internal_set_window_dilation(from._internal_window_dilation());
  }
  if (from._internal_base_dilation() != 0) {
    _this->_internal_set_base_dilation(from._internal_base_dilation());
  }
  if (from._internal_window_reversal() != 0) {
    _this->_internal_set_window_reversal(from._internal_window_reversal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WindowDimension::CopyFrom(const WindowDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.WindowDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowDimension::IsInitialized() const {
  return true;
}

void WindowDimension::InternalSwap(WindowDimension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowDimension, _impl_.window_reversal_)
      + sizeof(WindowDimension::_impl_.window_reversal_)
      - PROTOBUF_FIELD_OFFSET(WindowDimension, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowDimension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[18]);
}

// ===================================================================

class Window::_Internal {
 public:
};

Window::Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.Window)
}
Window::Window(const Window& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Window* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.Window)
}

inline void Window::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Window::~Window() {
  // @@protoc_insertion_point(destructor:xla.Window)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Window::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedPtrField();
}

void Window::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Window::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.Window)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Window::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.WindowDimension dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Window::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.Window)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.WindowDimension dimensions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.Window)
  return target;
}

size_t Window::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.Window)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.WindowDimension dimensions = 1;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->_impl_.dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Window::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Window::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Window::GetClassData() const { return &_class_data_; }


void Window::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Window*>(&to_msg);
  auto& from = static_cast<const Window&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.Window)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Window::CopyFrom(const Window& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Window::IsInitialized() const {
  return true;
}

void Window::InternalSwap(Window* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Window::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[19]);
}

// ===================================================================

class GatherDimensionNumbers::_Internal {
 public:
};

GatherDimensionNumbers::GatherDimensionNumbers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.GatherDimensionNumbers)
}
GatherDimensionNumbers::GatherDimensionNumbers(const GatherDimensionNumbers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GatherDimensionNumbers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_dims_){from._impl_.offset_dims_}
    , /*decltype(_impl_._offset_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.collapsed_slice_dims_){from._impl_.collapsed_slice_dims_}
    , /*decltype(_impl_._collapsed_slice_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.start_index_map_){from._impl_.start_index_map_}
    , /*decltype(_impl_._start_index_map_cached_byte_size_)*/{0}
    , decltype(_impl_.operand_batching_dims_){from._impl_.operand_batching_dims_}
    , /*decltype(_impl_._operand_batching_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.start_indices_batching_dims_){from._impl_.start_indices_batching_dims_}
    , /*decltype(_impl_._start_indices_batching_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.index_vector_dim_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_vector_dim_ = from._impl_.index_vector_dim_;
  // @@protoc_insertion_point(copy_constructor:xla.GatherDimensionNumbers)
}

inline void GatherDimensionNumbers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_dims_){arena}
    , /*decltype(_impl_._offset_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.collapsed_slice_dims_){arena}
    , /*decltype(_impl_._collapsed_slice_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.start_index_map_){arena}
    , /*decltype(_impl_._start_index_map_cached_byte_size_)*/{0}
    , decltype(_impl_.operand_batching_dims_){arena}
    , /*decltype(_impl_._operand_batching_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.start_indices_batching_dims_){arena}
    , /*decltype(_impl_._start_indices_batching_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.index_vector_dim_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GatherDimensionNumbers::~GatherDimensionNumbers() {
  // @@protoc_insertion_point(destructor:xla.GatherDimensionNumbers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GatherDimensionNumbers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.offset_dims_.~RepeatedField();
  _impl_.collapsed_slice_dims_.~RepeatedField();
  _impl_.start_index_map_.~RepeatedField();
  _impl_.operand_batching_dims_.~RepeatedField();
  _impl_.start_indices_batching_dims_.~RepeatedField();
}

void GatherDimensionNumbers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GatherDimensionNumbers::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GatherDimensionNumbers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offset_dims_.Clear();
  _impl_.collapsed_slice_dims_.Clear();
  _impl_.start_index_map_.Clear();
  _impl_.operand_batching_dims_.Clear();
  _impl_.start_indices_batching_dims_.Clear();
  _impl_.index_vector_dim_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatherDimensionNumbers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 offset_dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_offset_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_offset_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 collapsed_slice_dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_collapsed_slice_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_collapsed_slice_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 start_index_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_start_index_map(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_start_index_map(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 index_vector_dim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.index_vector_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 operand_batching_dims = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_operand_batching_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_operand_batching_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 start_indices_batching_dims = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_start_indices_batching_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_start_indices_batching_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GatherDimensionNumbers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.GatherDimensionNumbers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 offset_dims = 1;
  {
    int byte_size = _impl_._offset_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_offset_dims(), byte_size, target);
    }
  }

  // repeated int64 collapsed_slice_dims = 2;
  {
    int byte_size = _impl_._collapsed_slice_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_collapsed_slice_dims(), byte_size, target);
    }
  }

  // repeated int64 start_index_map = 3;
  {
    int byte_size = _impl_._start_index_map_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_start_index_map(), byte_size, target);
    }
  }

  // int64 index_vector_dim = 4;
  if (this->_internal_index_vector_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_index_vector_dim(), target);
  }

  // repeated int64 operand_batching_dims = 5;
  {
    int byte_size = _impl_._operand_batching_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_operand_batching_dims(), byte_size, target);
    }
  }

  // repeated int64 start_indices_batching_dims = 6;
  {
    int byte_size = _impl_._start_indices_batching_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_start_indices_batching_dims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.GatherDimensionNumbers)
  return target;
}

size_t GatherDimensionNumbers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GatherDimensionNumbers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 offset_dims = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.offset_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._offset_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 collapsed_slice_dims = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.collapsed_slice_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._collapsed_slice_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 start_index_map = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.start_index_map_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._start_index_map_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 operand_batching_dims = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.operand_batching_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._operand_batching_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 start_indices_batching_dims = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.start_indices_batching_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._start_indices_batching_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 index_vector_dim = 4;
  if (this->_internal_index_vector_dim() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index_vector_dim());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GatherDimensionNumbers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GatherDimensionNumbers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GatherDimensionNumbers::GetClassData() const { return &_class_data_; }


void GatherDimensionNumbers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GatherDimensionNumbers*>(&to_msg);
  auto& from = static_cast<const GatherDimensionNumbers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.GatherDimensionNumbers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.offset_dims_.MergeFrom(from._impl_.offset_dims_);
  _this->_impl_.collapsed_slice_dims_.MergeFrom(from._impl_.collapsed_slice_dims_);
  _this->_impl_.start_index_map_.MergeFrom(from._impl_.start_index_map_);
  _this->_impl_.operand_batching_dims_.MergeFrom(from._impl_.operand_batching_dims_);
  _this->_impl_.start_indices_batching_dims_.MergeFrom(from._impl_.start_indices_batching_dims_);
  if (from._internal_index_vector_dim() != 0) {
    _this->_internal_set_index_vector_dim(from._internal_index_vector_dim());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GatherDimensionNumbers::CopyFrom(const GatherDimensionNumbers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GatherDimensionNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatherDimensionNumbers::IsInitialized() const {
  return true;
}

void GatherDimensionNumbers::InternalSwap(GatherDimensionNumbers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.offset_dims_.InternalSwap(&other->_impl_.offset_dims_);
  _impl_.collapsed_slice_dims_.InternalSwap(&other->_impl_.collapsed_slice_dims_);
  _impl_.start_index_map_.InternalSwap(&other->_impl_.start_index_map_);
  _impl_.operand_batching_dims_.InternalSwap(&other->_impl_.operand_batching_dims_);
  _impl_.start_indices_batching_dims_.InternalSwap(&other->_impl_.start_indices_batching_dims_);
  swap(_impl_.index_vector_dim_, other->_impl_.index_vector_dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GatherDimensionNumbers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[20]);
}

// ===================================================================

class ScatterDimensionNumbers::_Internal {
 public:
};

ScatterDimensionNumbers::ScatterDimensionNumbers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ScatterDimensionNumbers)
}
ScatterDimensionNumbers::ScatterDimensionNumbers(const ScatterDimensionNumbers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScatterDimensionNumbers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.update_window_dims_){from._impl_.update_window_dims_}
    , /*decltype(_impl_._update_window_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.inserted_window_dims_){from._impl_.inserted_window_dims_}
    , /*decltype(_impl_._inserted_window_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.scatter_dims_to_operand_dims_){from._impl_.scatter_dims_to_operand_dims_}
    , /*decltype(_impl_._scatter_dims_to_operand_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.input_batching_dims_){from._impl_.input_batching_dims_}
    , /*decltype(_impl_._input_batching_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.scatter_indices_batching_dims_){from._impl_.scatter_indices_batching_dims_}
    , /*decltype(_impl_._scatter_indices_batching_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.index_vector_dim_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_vector_dim_ = from._impl_.index_vector_dim_;
  // @@protoc_insertion_point(copy_constructor:xla.ScatterDimensionNumbers)
}

inline void ScatterDimensionNumbers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.update_window_dims_){arena}
    , /*decltype(_impl_._update_window_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.inserted_window_dims_){arena}
    , /*decltype(_impl_._inserted_window_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.scatter_dims_to_operand_dims_){arena}
    , /*decltype(_impl_._scatter_dims_to_operand_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.input_batching_dims_){arena}
    , /*decltype(_impl_._input_batching_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.scatter_indices_batching_dims_){arena}
    , /*decltype(_impl_._scatter_indices_batching_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.index_vector_dim_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScatterDimensionNumbers::~ScatterDimensionNumbers() {
  // @@protoc_insertion_point(destructor:xla.ScatterDimensionNumbers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScatterDimensionNumbers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.update_window_dims_.~RepeatedField();
  _impl_.inserted_window_dims_.~RepeatedField();
  _impl_.scatter_dims_to_operand_dims_.~RepeatedField();
  _impl_.input_batching_dims_.~RepeatedField();
  _impl_.scatter_indices_batching_dims_.~RepeatedField();
}

void ScatterDimensionNumbers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScatterDimensionNumbers::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ScatterDimensionNumbers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.update_window_dims_.Clear();
  _impl_.inserted_window_dims_.Clear();
  _impl_.scatter_dims_to_operand_dims_.Clear();
  _impl_.input_batching_dims_.Clear();
  _impl_.scatter_indices_batching_dims_.Clear();
  _impl_.index_vector_dim_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScatterDimensionNumbers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 update_window_dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_update_window_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_update_window_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 inserted_window_dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_inserted_window_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_inserted_window_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 scatter_dims_to_operand_dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_scatter_dims_to_operand_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_scatter_dims_to_operand_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 index_vector_dim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.index_vector_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 input_batching_dims = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_input_batching_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_input_batching_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 scatter_indices_batching_dims = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_scatter_indices_batching_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_scatter_indices_batching_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScatterDimensionNumbers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ScatterDimensionNumbers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 update_window_dims = 1;
  {
    int byte_size = _impl_._update_window_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_update_window_dims(), byte_size, target);
    }
  }

  // repeated int64 inserted_window_dims = 2;
  {
    int byte_size = _impl_._inserted_window_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_inserted_window_dims(), byte_size, target);
    }
  }

  // repeated int64 scatter_dims_to_operand_dims = 3;
  {
    int byte_size = _impl_._scatter_dims_to_operand_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_scatter_dims_to_operand_dims(), byte_size, target);
    }
  }

  // int64 index_vector_dim = 4;
  if (this->_internal_index_vector_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_index_vector_dim(), target);
  }

  // repeated int64 input_batching_dims = 5;
  {
    int byte_size = _impl_._input_batching_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_input_batching_dims(), byte_size, target);
    }
  }

  // repeated int64 scatter_indices_batching_dims = 6;
  {
    int byte_size = _impl_._scatter_indices_batching_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_scatter_indices_batching_dims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ScatterDimensionNumbers)
  return target;
}

size_t ScatterDimensionNumbers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ScatterDimensionNumbers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 update_window_dims = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.update_window_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._update_window_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 inserted_window_dims = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.inserted_window_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._inserted_window_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 scatter_dims_to_operand_dims = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.scatter_dims_to_operand_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._scatter_dims_to_operand_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 input_batching_dims = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.input_batching_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._input_batching_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 scatter_indices_batching_dims = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.scatter_indices_batching_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._scatter_indices_batching_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 index_vector_dim = 4;
  if (this->_internal_index_vector_dim() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index_vector_dim());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScatterDimensionNumbers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScatterDimensionNumbers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScatterDimensionNumbers::GetClassData() const { return &_class_data_; }


void ScatterDimensionNumbers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScatterDimensionNumbers*>(&to_msg);
  auto& from = static_cast<const ScatterDimensionNumbers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ScatterDimensionNumbers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.update_window_dims_.MergeFrom(from._impl_.update_window_dims_);
  _this->_impl_.inserted_window_dims_.MergeFrom(from._impl_.inserted_window_dims_);
  _this->_impl_.scatter_dims_to_operand_dims_.MergeFrom(from._impl_.scatter_dims_to_operand_dims_);
  _this->_impl_.input_batching_dims_.MergeFrom(from._impl_.input_batching_dims_);
  _this->_impl_.scatter_indices_batching_dims_.MergeFrom(from._impl_.scatter_indices_batching_dims_);
  if (from._internal_index_vector_dim() != 0) {
    _this->_internal_set_index_vector_dim(from._internal_index_vector_dim());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScatterDimensionNumbers::CopyFrom(const ScatterDimensionNumbers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ScatterDimensionNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScatterDimensionNumbers::IsInitialized() const {
  return true;
}

void ScatterDimensionNumbers::InternalSwap(ScatterDimensionNumbers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.update_window_dims_.InternalSwap(&other->_impl_.update_window_dims_);
  _impl_.inserted_window_dims_.InternalSwap(&other->_impl_.inserted_window_dims_);
  _impl_.scatter_dims_to_operand_dims_.InternalSwap(&other->_impl_.scatter_dims_to_operand_dims_);
  _impl_.input_batching_dims_.InternalSwap(&other->_impl_.input_batching_dims_);
  _impl_.scatter_indices_batching_dims_.InternalSwap(&other->_impl_.scatter_indices_batching_dims_);
  swap(_impl_.index_vector_dim_, other->_impl_.index_vector_dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScatterDimensionNumbers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[21]);
}

// ===================================================================

class ConvolutionDimensionNumbers::_Internal {
 public:
};

ConvolutionDimensionNumbers::ConvolutionDimensionNumbers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ConvolutionDimensionNumbers)
}
ConvolutionDimensionNumbers::ConvolutionDimensionNumbers(const ConvolutionDimensionNumbers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConvolutionDimensionNumbers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kernel_spatial_dimensions_){from._impl_.kernel_spatial_dimensions_}
    , /*decltype(_impl_._kernel_spatial_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.input_spatial_dimensions_){from._impl_.input_spatial_dimensions_}
    , /*decltype(_impl_._input_spatial_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.output_spatial_dimensions_){from._impl_.output_spatial_dimensions_}
    , /*decltype(_impl_._output_spatial_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.kernel_input_feature_dimension_){}
    , decltype(_impl_.kernel_output_feature_dimension_){}
    , decltype(_impl_.input_batch_dimension_){}
    , decltype(_impl_.input_feature_dimension_){}
    , decltype(_impl_.output_batch_dimension_){}
    , decltype(_impl_.output_feature_dimension_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kernel_input_feature_dimension_, &from._impl_.kernel_input_feature_dimension_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_feature_dimension_) -
    reinterpret_cast<char*>(&_impl_.kernel_input_feature_dimension_)) + sizeof(_impl_.output_feature_dimension_));
  // @@protoc_insertion_point(copy_constructor:xla.ConvolutionDimensionNumbers)
}

inline void ConvolutionDimensionNumbers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kernel_spatial_dimensions_){arena}
    , /*decltype(_impl_._kernel_spatial_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.input_spatial_dimensions_){arena}
    , /*decltype(_impl_._input_spatial_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.output_spatial_dimensions_){arena}
    , /*decltype(_impl_._output_spatial_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.kernel_input_feature_dimension_){int64_t{0}}
    , decltype(_impl_.kernel_output_feature_dimension_){int64_t{0}}
    , decltype(_impl_.input_batch_dimension_){int64_t{0}}
    , decltype(_impl_.input_feature_dimension_){int64_t{0}}
    , decltype(_impl_.output_batch_dimension_){int64_t{0}}
    , decltype(_impl_.output_feature_dimension_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConvolutionDimensionNumbers::~ConvolutionDimensionNumbers() {
  // @@protoc_insertion_point(destructor:xla.ConvolutionDimensionNumbers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConvolutionDimensionNumbers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kernel_spatial_dimensions_.~RepeatedField();
  _impl_.input_spatial_dimensions_.~RepeatedField();
  _impl_.output_spatial_dimensions_.~RepeatedField();
}

void ConvolutionDimensionNumbers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConvolutionDimensionNumbers::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ConvolutionDimensionNumbers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kernel_spatial_dimensions_.Clear();
  _impl_.input_spatial_dimensions_.Clear();
  _impl_.output_spatial_dimensions_.Clear();
  ::memset(&_impl_.kernel_input_feature_dimension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.output_feature_dimension_) -
      reinterpret_cast<char*>(&_impl_.kernel_input_feature_dimension_)) + sizeof(_impl_.output_feature_dimension_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvolutionDimensionNumbers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 kernel_input_feature_dimension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.kernel_input_feature_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 kernel_output_feature_dimension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.kernel_output_feature_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 kernel_spatial_dimensions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_kernel_spatial_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_kernel_spatial_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 input_batch_dimension = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.input_batch_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 input_feature_dimension = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.input_feature_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 output_batch_dimension = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.output_batch_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 output_feature_dimension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.output_feature_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 input_spatial_dimensions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_input_spatial_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_input_spatial_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 output_spatial_dimensions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_spatial_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_output_spatial_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConvolutionDimensionNumbers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ConvolutionDimensionNumbers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 kernel_input_feature_dimension = 3;
  if (this->_internal_kernel_input_feature_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_kernel_input_feature_dimension(), target);
  }

  // int64 kernel_output_feature_dimension = 4;
  if (this->_internal_kernel_output_feature_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_kernel_output_feature_dimension(), target);
  }

  // repeated int64 kernel_spatial_dimensions = 6;
  {
    int byte_size = _impl_._kernel_spatial_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_kernel_spatial_dimensions(), byte_size, target);
    }
  }

  // int64 input_batch_dimension = 7;
  if (this->_internal_input_batch_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_input_batch_dimension(), target);
  }

  // int64 input_feature_dimension = 8;
  if (this->_internal_input_feature_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_input_feature_dimension(), target);
  }

  // int64 output_batch_dimension = 9;
  if (this->_internal_output_batch_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_output_batch_dimension(), target);
  }

  // int64 output_feature_dimension = 10;
  if (this->_internal_output_feature_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_output_feature_dimension(), target);
  }

  // repeated int64 input_spatial_dimensions = 11;
  {
    int byte_size = _impl_._input_spatial_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          11, _internal_input_spatial_dimensions(), byte_size, target);
    }
  }

  // repeated int64 output_spatial_dimensions = 12;
  {
    int byte_size = _impl_._output_spatial_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          12, _internal_output_spatial_dimensions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ConvolutionDimensionNumbers)
  return target;
}

size_t ConvolutionDimensionNumbers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ConvolutionDimensionNumbers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 kernel_spatial_dimensions = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.kernel_spatial_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._kernel_spatial_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 input_spatial_dimensions = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.input_spatial_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._input_spatial_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 output_spatial_dimensions = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_spatial_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_spatial_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 kernel_input_feature_dimension = 3;
  if (this->_internal_kernel_input_feature_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_kernel_input_feature_dimension());
  }

  // int64 kernel_output_feature_dimension = 4;
  if (this->_internal_kernel_output_feature_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_kernel_output_feature_dimension());
  }

  // int64 input_batch_dimension = 7;
  if (this->_internal_input_batch_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_input_batch_dimension());
  }

  // int64 input_feature_dimension = 8;
  if (this->_internal_input_feature_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_input_feature_dimension());
  }

  // int64 output_batch_dimension = 9;
  if (this->_internal_output_batch_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_output_batch_dimension());
  }

  // int64 output_feature_dimension = 10;
  if (this->_internal_output_feature_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_output_feature_dimension());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvolutionDimensionNumbers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConvolutionDimensionNumbers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvolutionDimensionNumbers::GetClassData() const { return &_class_data_; }


void ConvolutionDimensionNumbers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConvolutionDimensionNumbers*>(&to_msg);
  auto& from = static_cast<const ConvolutionDimensionNumbers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ConvolutionDimensionNumbers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kernel_spatial_dimensions_.MergeFrom(from._impl_.kernel_spatial_dimensions_);
  _this->_impl_.input_spatial_dimensions_.MergeFrom(from._impl_.input_spatial_dimensions_);
  _this->_impl_.output_spatial_dimensions_.MergeFrom(from._impl_.output_spatial_dimensions_);
  if (from._internal_kernel_input_feature_dimension() != 0) {
    _this->_internal_set_kernel_input_feature_dimension(from._internal_kernel_input_feature_dimension());
  }
  if (from._internal_kernel_output_feature_dimension() != 0) {
    _this->_internal_set_kernel_output_feature_dimension(from._internal_kernel_output_feature_dimension());
  }
  if (from._internal_input_batch_dimension() != 0) {
    _this->_internal_set_input_batch_dimension(from._internal_input_batch_dimension());
  }
  if (from._internal_input_feature_dimension() != 0) {
    _this->_internal_set_input_feature_dimension(from._internal_input_feature_dimension());
  }
  if (from._internal_output_batch_dimension() != 0) {
    _this->_internal_set_output_batch_dimension(from._internal_output_batch_dimension());
  }
  if (from._internal_output_feature_dimension() != 0) {
    _this->_internal_set_output_feature_dimension(from._internal_output_feature_dimension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvolutionDimensionNumbers::CopyFrom(const ConvolutionDimensionNumbers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ConvolutionDimensionNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionDimensionNumbers::IsInitialized() const {
  return true;
}

void ConvolutionDimensionNumbers::InternalSwap(ConvolutionDimensionNumbers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kernel_spatial_dimensions_.InternalSwap(&other->_impl_.kernel_spatial_dimensions_);
  _impl_.input_spatial_dimensions_.InternalSwap(&other->_impl_.input_spatial_dimensions_);
  _impl_.output_spatial_dimensions_.InternalSwap(&other->_impl_.output_spatial_dimensions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvolutionDimensionNumbers, _impl_.output_feature_dimension_)
      + sizeof(ConvolutionDimensionNumbers::_impl_.output_feature_dimension_)
      - PROTOBUF_FIELD_OFFSET(ConvolutionDimensionNumbers, _impl_.kernel_input_feature_dimension_)>(
          reinterpret_cast<char*>(&_impl_.kernel_input_feature_dimension_),
          reinterpret_cast<char*>(&other->_impl_.kernel_input_feature_dimension_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionDimensionNumbers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[22]);
}

// ===================================================================

class DotDimensionNumbers::_Internal {
 public:
};

DotDimensionNumbers::DotDimensionNumbers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.DotDimensionNumbers)
}
DotDimensionNumbers::DotDimensionNumbers(const DotDimensionNumbers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DotDimensionNumbers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lhs_contracting_dimensions_){from._impl_.lhs_contracting_dimensions_}
    , /*decltype(_impl_._lhs_contracting_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.rhs_contracting_dimensions_){from._impl_.rhs_contracting_dimensions_}
    , /*decltype(_impl_._rhs_contracting_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.lhs_batch_dimensions_){from._impl_.lhs_batch_dimensions_}
    , /*decltype(_impl_._lhs_batch_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.rhs_batch_dimensions_){from._impl_.rhs_batch_dimensions_}
    , /*decltype(_impl_._rhs_batch_dimensions_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.DotDimensionNumbers)
}

inline void DotDimensionNumbers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lhs_contracting_dimensions_){arena}
    , /*decltype(_impl_._lhs_contracting_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.rhs_contracting_dimensions_){arena}
    , /*decltype(_impl_._rhs_contracting_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.lhs_batch_dimensions_){arena}
    , /*decltype(_impl_._lhs_batch_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.rhs_batch_dimensions_){arena}
    , /*decltype(_impl_._rhs_batch_dimensions_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DotDimensionNumbers::~DotDimensionNumbers() {
  // @@protoc_insertion_point(destructor:xla.DotDimensionNumbers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DotDimensionNumbers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lhs_contracting_dimensions_.~RepeatedField();
  _impl_.rhs_contracting_dimensions_.~RepeatedField();
  _impl_.lhs_batch_dimensions_.~RepeatedField();
  _impl_.rhs_batch_dimensions_.~RepeatedField();
}

void DotDimensionNumbers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DotDimensionNumbers::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DotDimensionNumbers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lhs_contracting_dimensions_.Clear();
  _impl_.rhs_contracting_dimensions_.Clear();
  _impl_.lhs_batch_dimensions_.Clear();
  _impl_.rhs_batch_dimensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DotDimensionNumbers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 lhs_contracting_dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_lhs_contracting_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_lhs_contracting_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 rhs_contracting_dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_rhs_contracting_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_rhs_contracting_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 lhs_batch_dimensions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_lhs_batch_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_lhs_batch_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 rhs_batch_dimensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_rhs_batch_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_rhs_batch_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DotDimensionNumbers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.DotDimensionNumbers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 lhs_contracting_dimensions = 1;
  {
    int byte_size = _impl_._lhs_contracting_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_lhs_contracting_dimensions(), byte_size, target);
    }
  }

  // repeated int64 rhs_contracting_dimensions = 2;
  {
    int byte_size = _impl_._rhs_contracting_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_rhs_contracting_dimensions(), byte_size, target);
    }
  }

  // repeated int64 lhs_batch_dimensions = 3;
  {
    int byte_size = _impl_._lhs_batch_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_lhs_batch_dimensions(), byte_size, target);
    }
  }

  // repeated int64 rhs_batch_dimensions = 4;
  {
    int byte_size = _impl_._rhs_batch_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_rhs_batch_dimensions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.DotDimensionNumbers)
  return target;
}

size_t DotDimensionNumbers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DotDimensionNumbers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 lhs_contracting_dimensions = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.lhs_contracting_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._lhs_contracting_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 rhs_contracting_dimensions = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.rhs_contracting_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rhs_contracting_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 lhs_batch_dimensions = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.lhs_batch_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._lhs_batch_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 rhs_batch_dimensions = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.rhs_batch_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rhs_batch_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DotDimensionNumbers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DotDimensionNumbers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DotDimensionNumbers::GetClassData() const { return &_class_data_; }


void DotDimensionNumbers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DotDimensionNumbers*>(&to_msg);
  auto& from = static_cast<const DotDimensionNumbers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.DotDimensionNumbers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lhs_contracting_dimensions_.MergeFrom(from._impl_.lhs_contracting_dimensions_);
  _this->_impl_.rhs_contracting_dimensions_.MergeFrom(from._impl_.rhs_contracting_dimensions_);
  _this->_impl_.lhs_batch_dimensions_.MergeFrom(from._impl_.lhs_batch_dimensions_);
  _this->_impl_.rhs_batch_dimensions_.MergeFrom(from._impl_.rhs_batch_dimensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DotDimensionNumbers::CopyFrom(const DotDimensionNumbers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DotDimensionNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotDimensionNumbers::IsInitialized() const {
  return true;
}

void DotDimensionNumbers::InternalSwap(DotDimensionNumbers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lhs_contracting_dimensions_.InternalSwap(&other->_impl_.lhs_contracting_dimensions_);
  _impl_.rhs_contracting_dimensions_.InternalSwap(&other->_impl_.rhs_contracting_dimensions_);
  _impl_.lhs_batch_dimensions_.InternalSwap(&other->_impl_.lhs_batch_dimensions_);
  _impl_.rhs_batch_dimensions_.InternalSwap(&other->_impl_.rhs_batch_dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DotDimensionNumbers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[23]);
}

// ===================================================================

class SparsityDescriptor::_Internal {
 public:
};

SparsityDescriptor::SparsityDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.SparsityDescriptor)
}
SparsityDescriptor::SparsityDescriptor(const SparsityDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparsityDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.dimension_){}
    , decltype(_impl_.n_){}
    , decltype(_impl_.m_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.m_));
  // @@protoc_insertion_point(copy_constructor:xla.SparsityDescriptor)
}

inline void SparsityDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.dimension_){0}
    , decltype(_impl_.n_){0}
    , decltype(_impl_.m_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SparsityDescriptor::~SparsityDescriptor() {
  // @@protoc_insertion_point(destructor:xla.SparsityDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparsityDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SparsityDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparsityDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SparsityDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.m_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparsityDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.SparsityType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::xla::SparsityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dimension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparsityDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.SparsityDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.SparsityType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 dimension = 3;
  if (this->_internal_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_dimension(), target);
  }

  // int32 n = 4;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_n(), target);
  }

  // int32 m = 5;
  if (this->_internal_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.SparsityDescriptor)
  return target;
}

size_t SparsityDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SparsityDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xla.SparsityType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 dimension = 3;
  if (this->_internal_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dimension());
  }

  // int32 n = 4;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  // int32 m = 5;
  if (this->_internal_m() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparsityDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparsityDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparsityDescriptor::GetClassData() const { return &_class_data_; }


void SparsityDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparsityDescriptor*>(&to_msg);
  auto& from = static_cast<const SparsityDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.SparsityDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_dimension() != 0) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  if (from._internal_m() != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparsityDescriptor::CopyFrom(const SparsityDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SparsityDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityDescriptor::IsInitialized() const {
  return true;
}

void SparsityDescriptor::InternalSwap(SparsityDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparsityDescriptor, _impl_.m_)
      + sizeof(SparsityDescriptor::_impl_.m_)
      - PROTOBUF_FIELD_OFFSET(SparsityDescriptor, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparsityDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[24]);
}

// ===================================================================

class TriangularSolveOptions::_Internal {
 public:
};

TriangularSolveOptions::TriangularSolveOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.TriangularSolveOptions)
}
TriangularSolveOptions::TriangularSolveOptions(const TriangularSolveOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TriangularSolveOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.left_side_){}
    , decltype(_impl_.lower_){}
    , decltype(_impl_.unit_diagonal_){}
    , decltype(_impl_.transpose_a_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.left_side_, &from._impl_.left_side_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transpose_a_) -
    reinterpret_cast<char*>(&_impl_.left_side_)) + sizeof(_impl_.transpose_a_));
  // @@protoc_insertion_point(copy_constructor:xla.TriangularSolveOptions)
}

inline void TriangularSolveOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.left_side_){false}
    , decltype(_impl_.lower_){false}
    , decltype(_impl_.unit_diagonal_){false}
    , decltype(_impl_.transpose_a_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TriangularSolveOptions::~TriangularSolveOptions() {
  // @@protoc_insertion_point(destructor:xla.TriangularSolveOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TriangularSolveOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TriangularSolveOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TriangularSolveOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TriangularSolveOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.left_side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transpose_a_) -
      reinterpret_cast<char*>(&_impl_.left_side_)) + sizeof(_impl_.transpose_a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TriangularSolveOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool left_side = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.left_side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool lower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unit_diagonal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.unit_diagonal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.TriangularSolveOptions.Transpose transpose_a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transpose_a(static_cast<::xla::TriangularSolveOptions_Transpose>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TriangularSolveOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.TriangularSolveOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool left_side = 1;
  if (this->_internal_left_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_left_side(), target);
  }

  // bool lower = 2;
  if (this->_internal_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_lower(), target);
  }

  // bool unit_diagonal = 3;
  if (this->_internal_unit_diagonal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_unit_diagonal(), target);
  }

  // .xla.TriangularSolveOptions.Transpose transpose_a = 4;
  if (this->_internal_transpose_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_transpose_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.TriangularSolveOptions)
  return target;
}

size_t TriangularSolveOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TriangularSolveOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool left_side = 1;
  if (this->_internal_left_side() != 0) {
    total_size += 1 + 1;
  }

  // bool lower = 2;
  if (this->_internal_lower() != 0) {
    total_size += 1 + 1;
  }

  // bool unit_diagonal = 3;
  if (this->_internal_unit_diagonal() != 0) {
    total_size += 1 + 1;
  }

  // .xla.TriangularSolveOptions.Transpose transpose_a = 4;
  if (this->_internal_transpose_a() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_transpose_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TriangularSolveOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TriangularSolveOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TriangularSolveOptions::GetClassData() const { return &_class_data_; }


void TriangularSolveOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TriangularSolveOptions*>(&to_msg);
  auto& from = static_cast<const TriangularSolveOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.TriangularSolveOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_left_side() != 0) {
    _this->_internal_set_left_side(from._internal_left_side());
  }
  if (from._internal_lower() != 0) {
    _this->_internal_set_lower(from._internal_lower());
  }
  if (from._internal_unit_diagonal() != 0) {
    _this->_internal_set_unit_diagonal(from._internal_unit_diagonal());
  }
  if (from._internal_transpose_a() != 0) {
    _this->_internal_set_transpose_a(from._internal_transpose_a());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TriangularSolveOptions::CopyFrom(const TriangularSolveOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TriangularSolveOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriangularSolveOptions::IsInitialized() const {
  return true;
}

void TriangularSolveOptions::InternalSwap(TriangularSolveOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriangularSolveOptions, _impl_.transpose_a_)
      + sizeof(TriangularSolveOptions::_impl_.transpose_a_)
      - PROTOBUF_FIELD_OFFSET(TriangularSolveOptions, _impl_.left_side_)>(
          reinterpret_cast<char*>(&_impl_.left_side_),
          reinterpret_cast<char*>(&other->_impl_.left_side_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TriangularSolveOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[25]);
}

// ===================================================================

class CholeskyOptions::_Internal {
 public:
};

CholeskyOptions::CholeskyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.CholeskyOptions)
}
CholeskyOptions::CholeskyOptions(const CholeskyOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CholeskyOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lower_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.lower_ = from._impl_.lower_;
  // @@protoc_insertion_point(copy_constructor:xla.CholeskyOptions)
}

inline void CholeskyOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lower_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CholeskyOptions::~CholeskyOptions() {
  // @@protoc_insertion_point(destructor:xla.CholeskyOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CholeskyOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CholeskyOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CholeskyOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CholeskyOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lower_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CholeskyOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool lower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CholeskyOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.CholeskyOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool lower = 1;
  if (this->_internal_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_lower(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.CholeskyOptions)
  return target;
}

size_t CholeskyOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CholeskyOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool lower = 1;
  if (this->_internal_lower() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CholeskyOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CholeskyOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CholeskyOptions::GetClassData() const { return &_class_data_; }


void CholeskyOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CholeskyOptions*>(&to_msg);
  auto& from = static_cast<const CholeskyOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.CholeskyOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lower() != 0) {
    _this->_internal_set_lower(from._internal_lower());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CholeskyOptions::CopyFrom(const CholeskyOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CholeskyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CholeskyOptions::IsInitialized() const {
  return true;
}

void CholeskyOptions::InternalSwap(CholeskyOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.lower_, other->_impl_.lower_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CholeskyOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[26]);
}

// ===================================================================

class SortOptions::_Internal {
 public:
};

SortOptions::SortOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.SortOptions)
}
SortOptions::SortOptions(const SortOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SortOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.descending_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.descending_ = from._impl_.descending_;
  // @@protoc_insertion_point(copy_constructor:xla.SortOptions)
}

inline void SortOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.descending_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SortOptions::~SortOptions() {
  // @@protoc_insertion_point(destructor:xla.SortOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SortOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SortOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SortOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SortOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.descending_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool descending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.descending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.SortOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool descending = 1;
  if (this->_internal_descending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_descending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.SortOptions)
  return target;
}

size_t SortOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SortOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool descending = 1;
  if (this->_internal_descending() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SortOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortOptions::GetClassData() const { return &_class_data_; }


void SortOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SortOptions*>(&to_msg);
  auto& from = static_cast<const SortOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.SortOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_descending() != 0) {
    _this->_internal_set_descending(from._internal_descending());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortOptions::CopyFrom(const SortOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SortOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortOptions::IsInitialized() const {
  return true;
}

void SortOptions::InternalSwap(SortOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.descending_, other->_impl_.descending_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[27]);
}

// ===================================================================

FrontendAttributes_MapEntry_DoNotUse::FrontendAttributes_MapEntry_DoNotUse() {}
FrontendAttributes_MapEntry_DoNotUse::FrontendAttributes_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FrontendAttributes_MapEntry_DoNotUse::MergeFrom(const FrontendAttributes_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FrontendAttributes_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[28]);
}

// ===================================================================

class FrontendAttributes::_Internal {
 public:
};

FrontendAttributes::FrontendAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FrontendAttributes::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:xla.FrontendAttributes)
}
FrontendAttributes::FrontendAttributes(const FrontendAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrontendAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.map_.MergeFrom(from._impl_.map_);
  // @@protoc_insertion_point(copy_constructor:xla.FrontendAttributes)
}

inline void FrontendAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FrontendAttributes::~FrontendAttributes() {
  // @@protoc_insertion_point(destructor:xla.FrontendAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FrontendAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_.Destruct();
  _impl_.map_.~MapField();
}

void FrontendAttributes::ArenaDtor(void* object) {
  FrontendAttributes* _this = reinterpret_cast< FrontendAttributes* >(object);
  _this->_impl_.map_.Destruct();
}
void FrontendAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrontendAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.FrontendAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrontendAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrontendAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.FrontendAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = FrontendAttributes_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xla.FrontendAttributes.MapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xla.FrontendAttributes.MapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.FrontendAttributes)
  return target;
}

size_t FrontendAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.FrontendAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += FrontendAttributes_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrontendAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrontendAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrontendAttributes::GetClassData() const { return &_class_data_; }


void FrontendAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrontendAttributes*>(&to_msg);
  auto& from = static_cast<const FrontendAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.FrontendAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_.MergeFrom(from._impl_.map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrontendAttributes::CopyFrom(const FrontendAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.FrontendAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrontendAttributes::IsInitialized() const {
  return true;
}

void FrontendAttributes::InternalSwap(FrontendAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_.InternalSwap(&other->_impl_.map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrontendAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[29]);
}

// ===================================================================

class Statistic::_Internal {
 public:
};

Statistic::Statistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.Statistic)
}
Statistic::Statistic(const Statistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Statistic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_name_){}
    , decltype(_impl_.stat_val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stat_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stat_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stat_name().empty()) {
    _this->_impl_.stat_name_.Set(from._internal_stat_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.stat_val_ = from._impl_.stat_val_;
  // @@protoc_insertion_point(copy_constructor:xla.Statistic)
}

inline void Statistic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_name_){}
    , decltype(_impl_.stat_val_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stat_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stat_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:xla.Statistic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Statistic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_name_.Destroy();
}

void Statistic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.Statistic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_name_.ClearToEmpty();
  _impl_.stat_val_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stat_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stat_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.Statistic.stat_name"));
        } else
          goto handle_unusual;
        continue;
      // double stat_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.stat_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Statistic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.Statistic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stat_name = 1;
  if (!this->_internal_stat_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stat_name().data(), static_cast<int>(this->_internal_stat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.Statistic.stat_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stat_name(), target);
  }

  // double stat_val = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stat_val = this->_internal_stat_val();
  uint64_t raw_stat_val;
  memcpy(&raw_stat_val, &tmp_stat_val, sizeof(tmp_stat_val));
  if (raw_stat_val != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_stat_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.Statistic)
  return target;
}

size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.Statistic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stat_name = 1;
  if (!this->_internal_stat_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stat_name());
  }

  // double stat_val = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stat_val = this->_internal_stat_val();
  uint64_t raw_stat_val;
  memcpy(&raw_stat_val, &tmp_stat_val, sizeof(tmp_stat_val));
  if (raw_stat_val != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Statistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Statistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Statistic::GetClassData() const { return &_class_data_; }


void Statistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Statistic*>(&to_msg);
  auto& from = static_cast<const Statistic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.Statistic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stat_name().empty()) {
    _this->_internal_set_stat_name(from._internal_stat_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stat_val = from._internal_stat_val();
  uint64_t raw_stat_val;
  memcpy(&raw_stat_val, &tmp_stat_val, sizeof(tmp_stat_val));
  if (raw_stat_val != 0) {
    _this->_internal_set_stat_val(from._internal_stat_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  return true;
}

void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stat_name_, lhs_arena,
      &other->_impl_.stat_name_, rhs_arena
  );
  swap(_impl_.stat_val_, other->_impl_.stat_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[30]);
}

// ===================================================================

class StatisticsViz::_Internal {
 public:
};

StatisticsViz::StatisticsViz(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.StatisticsViz)
}
StatisticsViz::StatisticsViz(const StatisticsViz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatisticsViz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statistics_){from._impl_.statistics_}
    , decltype(_impl_.stat_index_to_visualize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stat_index_to_visualize_ = from._impl_.stat_index_to_visualize_;
  // @@protoc_insertion_point(copy_constructor:xla.StatisticsViz)
}

inline void StatisticsViz::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statistics_){arena}
    , decltype(_impl_.stat_index_to_visualize_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatisticsViz::~StatisticsViz() {
  // @@protoc_insertion_point(destructor:xla.StatisticsViz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatisticsViz::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.statistics_.~RepeatedPtrField();
}

void StatisticsViz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatisticsViz::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.StatisticsViz)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.statistics_.Clear();
  _impl_.stat_index_to_visualize_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticsViz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 stat_index_to_visualize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stat_index_to_visualize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.Statistic statistics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatisticsViz::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.StatisticsViz)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 stat_index_to_visualize = 1;
  if (this->_internal_stat_index_to_visualize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_stat_index_to_visualize(), target);
  }

  // repeated .xla.Statistic statistics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.StatisticsViz)
  return target;
}

size_t StatisticsViz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.StatisticsViz)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.Statistic statistics = 2;
  total_size += 1UL * this->_internal_statistics_size();
  for (const auto& msg : this->_impl_.statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 stat_index_to_visualize = 1;
  if (this->_internal_stat_index_to_visualize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stat_index_to_visualize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatisticsViz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatisticsViz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatisticsViz::GetClassData() const { return &_class_data_; }


void StatisticsViz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatisticsViz*>(&to_msg);
  auto& from = static_cast<const StatisticsViz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.StatisticsViz)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.statistics_.MergeFrom(from._impl_.statistics_);
  if (from._internal_stat_index_to_visualize() != 0) {
    _this->_internal_set_stat_index_to_visualize(from._internal_stat_index_to_visualize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatisticsViz::CopyFrom(const StatisticsViz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.StatisticsViz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsViz::IsInitialized() const {
  return true;
}

void StatisticsViz::InternalSwap(StatisticsViz* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.statistics_.InternalSwap(&other->_impl_.statistics_);
  swap(_impl_.stat_index_to_visualize_, other->_impl_.stat_index_to_visualize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticsViz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[31]);
}

// ===================================================================

class OpSharding::_Internal {
 public:
  static const ::xla::ShapeProto& tile_shape(const OpSharding* msg);
};

const ::xla::ShapeProto&
OpSharding::_Internal::tile_shape(const OpSharding* msg) {
  return *msg->_impl_.tile_shape_;
}
OpSharding::OpSharding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.OpSharding)
}
OpSharding::OpSharding(const OpSharding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpSharding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tile_assignment_dimensions_){from._impl_.tile_assignment_dimensions_}
    , /*decltype(_impl_._tile_assignment_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.tile_assignment_devices_){from._impl_.tile_assignment_devices_}
    , /*decltype(_impl_._tile_assignment_devices_cached_byte_size_)*/{0}
    , decltype(_impl_.tuple_shardings_){from._impl_.tuple_shardings_}
    , decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.last_tile_dims_){from._impl_.last_tile_dims_}
    , /*decltype(_impl_._last_tile_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.iota_reshape_dims_){from._impl_.iota_reshape_dims_}
    , /*decltype(_impl_._iota_reshape_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.iota_transpose_perm_){from._impl_.iota_transpose_perm_}
    , /*decltype(_impl_._iota_transpose_perm_cached_byte_size_)*/{0}
    , decltype(_impl_.tile_shape_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.replicate_on_last_tile_dim_){}
    , decltype(_impl_.is_shard_group_){}
    , decltype(_impl_.shard_group_id_){}
    , decltype(_impl_.shard_group_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tile_shape()) {
    _this->_impl_.tile_shape_ = new ::xla::ShapeProto(*from._impl_.tile_shape_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shard_group_type_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.shard_group_type_));
  // @@protoc_insertion_point(copy_constructor:xla.OpSharding)
}

inline void OpSharding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tile_assignment_dimensions_){arena}
    , /*decltype(_impl_._tile_assignment_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.tile_assignment_devices_){arena}
    , /*decltype(_impl_._tile_assignment_devices_cached_byte_size_)*/{0}
    , decltype(_impl_.tuple_shardings_){arena}
    , decltype(_impl_.metadata_){arena}
    , decltype(_impl_.last_tile_dims_){arena}
    , /*decltype(_impl_._last_tile_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.iota_reshape_dims_){arena}
    , /*decltype(_impl_._iota_reshape_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.iota_transpose_perm_){arena}
    , /*decltype(_impl_._iota_transpose_perm_cached_byte_size_)*/{0}
    , decltype(_impl_.tile_shape_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.replicate_on_last_tile_dim_){false}
    , decltype(_impl_.is_shard_group_){false}
    , decltype(_impl_.shard_group_id_){int64_t{0}}
    , decltype(_impl_.shard_group_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpSharding::~OpSharding() {
  // @@protoc_insertion_point(destructor:xla.OpSharding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpSharding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tile_assignment_dimensions_.~RepeatedField();
  _impl_.tile_assignment_devices_.~RepeatedField();
  _impl_.tuple_shardings_.~RepeatedPtrField();
  _impl_.metadata_.~RepeatedPtrField();
  _impl_.last_tile_dims_.~RepeatedField();
  _impl_.iota_reshape_dims_.~RepeatedField();
  _impl_.iota_transpose_perm_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.tile_shape_;
}

void OpSharding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpSharding::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OpSharding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tile_assignment_dimensions_.Clear();
  _impl_.tile_assignment_devices_.Clear();
  _impl_.tuple_shardings_.Clear();
  _impl_.metadata_.Clear();
  _impl_.last_tile_dims_.Clear();
  _impl_.iota_reshape_dims_.Clear();
  _impl_.iota_transpose_perm_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.tile_shape_ != nullptr) {
    delete _impl_.tile_shape_;
  }
  _impl_.tile_shape_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shard_group_type_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.shard_group_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpSharding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.OpSharding.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::xla::OpSharding_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .xla.ShapeProto tile_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 tile_assignment_dimensions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_tile_assignment_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_tile_assignment_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 tile_assignment_devices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_tile_assignment_devices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_tile_assignment_devices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.OpSharding tuple_shardings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuple_shardings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool replicate_on_last_tile_dim = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.replicate_on_last_tile_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.OpMetadata metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.OpSharding.Type last_tile_dims = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_last_tile_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_last_tile_dims(static_cast<::xla::OpSharding_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 iota_reshape_dims = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_iota_reshape_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_iota_reshape_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 iota_transpose_perm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_iota_transpose_perm(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_iota_transpose_perm(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_shard_group = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_shard_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 shard_group_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.shard_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.OpSharding.ShardGroupType shard_group_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shard_group_type(static_cast<::xla::OpSharding_ShardGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpSharding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.OpSharding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.OpSharding.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .xla.ShapeProto tile_shape = 2;
  if (this->_internal_has_tile_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tile_shape(this),
        _Internal::tile_shape(this).GetCachedSize(), target, stream);
  }

  // repeated int64 tile_assignment_dimensions = 3;
  {
    int byte_size = _impl_._tile_assignment_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_tile_assignment_dimensions(), byte_size, target);
    }
  }

  // repeated int64 tile_assignment_devices = 4;
  {
    int byte_size = _impl_._tile_assignment_devices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_tile_assignment_devices(), byte_size, target);
    }
  }

  // repeated .xla.OpSharding tuple_shardings = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tuple_shardings_size()); i < n; i++) {
    const auto& repfield = this->_internal_tuple_shardings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool replicate_on_last_tile_dim = 6;
  if (this->_internal_replicate_on_last_tile_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_replicate_on_last_tile_dim(), target);
  }

  // repeated .xla.OpMetadata metadata = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xla.OpSharding.Type last_tile_dims = 8;
  {
    int byte_size = _impl_._last_tile_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, _impl_.last_tile_dims_, byte_size, target);
    }
  }

  // repeated int64 iota_reshape_dims = 9;
  {
    int byte_size = _impl_._iota_reshape_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_iota_reshape_dims(), byte_size, target);
    }
  }

  // repeated int32 iota_transpose_perm = 10;
  {
    int byte_size = _impl_._iota_transpose_perm_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_iota_transpose_perm(), byte_size, target);
    }
  }

  // bool is_shard_group = 11;
  if (this->_internal_is_shard_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_shard_group(), target);
  }

  // int64 shard_group_id = 12;
  if (this->_internal_shard_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_shard_group_id(), target);
  }

  // .xla.OpSharding.ShardGroupType shard_group_type = 13;
  if (this->_internal_shard_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_shard_group_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.OpSharding)
  return target;
}

size_t OpSharding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OpSharding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 tile_assignment_dimensions = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.tile_assignment_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tile_assignment_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 tile_assignment_devices = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.tile_assignment_devices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tile_assignment_devices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.OpSharding tuple_shardings = 5;
  total_size += 1UL * this->_internal_tuple_shardings_size();
  for (const auto& msg : this->_impl_.tuple_shardings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.OpMetadata metadata = 7;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_impl_.metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.OpSharding.Type last_tile_dims = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_last_tile_dims_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_last_tile_dims(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._last_tile_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 iota_reshape_dims = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.iota_reshape_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._iota_reshape_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 iota_transpose_perm = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.iota_transpose_perm_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._iota_transpose_perm_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .xla.ShapeProto tile_shape = 2;
  if (this->_internal_has_tile_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tile_shape_);
  }

  // .xla.OpSharding.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool replicate_on_last_tile_dim = 6;
  if (this->_internal_replicate_on_last_tile_dim() != 0) {
    total_size += 1 + 1;
  }

  // bool is_shard_group = 11;
  if (this->_internal_is_shard_group() != 0) {
    total_size += 1 + 1;
  }

  // int64 shard_group_id = 12;
  if (this->_internal_shard_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shard_group_id());
  }

  // .xla.OpSharding.ShardGroupType shard_group_type = 13;
  if (this->_internal_shard_group_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_shard_group_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpSharding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpSharding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpSharding::GetClassData() const { return &_class_data_; }


void OpSharding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpSharding*>(&to_msg);
  auto& from = static_cast<const OpSharding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.OpSharding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tile_assignment_dimensions_.MergeFrom(from._impl_.tile_assignment_dimensions_);
  _this->_impl_.tile_assignment_devices_.MergeFrom(from._impl_.tile_assignment_devices_);
  _this->_impl_.tuple_shardings_.MergeFrom(from._impl_.tuple_shardings_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_impl_.last_tile_dims_.MergeFrom(from._impl_.last_tile_dims_);
  _this->_impl_.iota_reshape_dims_.MergeFrom(from._impl_.iota_reshape_dims_);
  _this->_impl_.iota_transpose_perm_.MergeFrom(from._impl_.iota_transpose_perm_);
  if (from._internal_has_tile_shape()) {
    _this->_internal_mutable_tile_shape()->::xla::ShapeProto::MergeFrom(
        from._internal_tile_shape());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_replicate_on_last_tile_dim() != 0) {
    _this->_internal_set_replicate_on_last_tile_dim(from._internal_replicate_on_last_tile_dim());
  }
  if (from._internal_is_shard_group() != 0) {
    _this->_internal_set_is_shard_group(from._internal_is_shard_group());
  }
  if (from._internal_shard_group_id() != 0) {
    _this->_internal_set_shard_group_id(from._internal_shard_group_id());
  }
  if (from._internal_shard_group_type() != 0) {
    _this->_internal_set_shard_group_type(from._internal_shard_group_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpSharding::CopyFrom(const OpSharding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OpSharding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpSharding::IsInitialized() const {
  return true;
}

void OpSharding::InternalSwap(OpSharding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tile_assignment_dimensions_.InternalSwap(&other->_impl_.tile_assignment_dimensions_);
  _impl_.tile_assignment_devices_.InternalSwap(&other->_impl_.tile_assignment_devices_);
  _impl_.tuple_shardings_.InternalSwap(&other->_impl_.tuple_shardings_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.last_tile_dims_.InternalSwap(&other->_impl_.last_tile_dims_);
  _impl_.iota_reshape_dims_.InternalSwap(&other->_impl_.iota_reshape_dims_);
  _impl_.iota_transpose_perm_.InternalSwap(&other->_impl_.iota_transpose_perm_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpSharding, _impl_.shard_group_type_)
      + sizeof(OpSharding::_impl_.shard_group_type_)
      - PROTOBUF_FIELD_OFFSET(OpSharding, _impl_.tile_shape_)>(
          reinterpret_cast<char*>(&_impl_.tile_shape_),
          reinterpret_cast<char*>(&other->_impl_.tile_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpSharding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[32]);
}

// ===================================================================

class ReplicaGroup::_Internal {
 public:
};

ReplicaGroup::ReplicaGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ReplicaGroup)
}
ReplicaGroup::ReplicaGroup(const ReplicaGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplicaGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_ids_){from._impl_.replica_ids_}
    , /*decltype(_impl_._replica_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.ReplicaGroup)
}

inline void ReplicaGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_ids_){arena}
    , /*decltype(_impl_._replica_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReplicaGroup::~ReplicaGroup() {
  // @@protoc_insertion_point(destructor:xla.ReplicaGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplicaGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replica_ids_.~RepeatedField();
}

void ReplicaGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplicaGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ReplicaGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replica_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 replica_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_replica_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_replica_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplicaGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ReplicaGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 replica_ids = 1;
  {
    int byte_size = _impl_._replica_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_replica_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ReplicaGroup)
  return target;
}

size_t ReplicaGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ReplicaGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 replica_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.replica_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._replica_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplicaGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplicaGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplicaGroup::GetClassData() const { return &_class_data_; }


void ReplicaGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplicaGroup*>(&to_msg);
  auto& from = static_cast<const ReplicaGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ReplicaGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replica_ids_.MergeFrom(from._impl_.replica_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplicaGroup::CopyFrom(const ReplicaGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ReplicaGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaGroup::IsInitialized() const {
  return true;
}

void ReplicaGroup::InternalSwap(ReplicaGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replica_ids_.InternalSwap(&other->_impl_.replica_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[33]);
}

// ===================================================================

class IotaReplicaGroupListProto::_Internal {
 public:
};

IotaReplicaGroupListProto::IotaReplicaGroupListProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.IotaReplicaGroupListProto)
}
IotaReplicaGroupListProto::IotaReplicaGroupListProto(const IotaReplicaGroupListProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IotaReplicaGroupListProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iota_reshape_dims_){from._impl_.iota_reshape_dims_}
    , /*decltype(_impl_._iota_reshape_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.iota_transpose_perm_){from._impl_.iota_transpose_perm_}
    , /*decltype(_impl_._iota_transpose_perm_cached_byte_size_)*/{0}
    , decltype(_impl_.num_replica_groups_){}
    , decltype(_impl_.num_devices_per_group_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_replica_groups_, &from._impl_.num_replica_groups_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_devices_per_group_) -
    reinterpret_cast<char*>(&_impl_.num_replica_groups_)) + sizeof(_impl_.num_devices_per_group_));
  // @@protoc_insertion_point(copy_constructor:xla.IotaReplicaGroupListProto)
}

inline void IotaReplicaGroupListProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iota_reshape_dims_){arena}
    , /*decltype(_impl_._iota_reshape_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.iota_transpose_perm_){arena}
    , /*decltype(_impl_._iota_transpose_perm_cached_byte_size_)*/{0}
    , decltype(_impl_.num_replica_groups_){int64_t{0}}
    , decltype(_impl_.num_devices_per_group_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IotaReplicaGroupListProto::~IotaReplicaGroupListProto() {
  // @@protoc_insertion_point(destructor:xla.IotaReplicaGroupListProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IotaReplicaGroupListProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iota_reshape_dims_.~RepeatedField();
  _impl_.iota_transpose_perm_.~RepeatedField();
}

void IotaReplicaGroupListProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IotaReplicaGroupListProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.IotaReplicaGroupListProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iota_reshape_dims_.Clear();
  _impl_.iota_transpose_perm_.Clear();
  ::memset(&_impl_.num_replica_groups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_devices_per_group_) -
      reinterpret_cast<char*>(&_impl_.num_replica_groups_)) + sizeof(_impl_.num_devices_per_group_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IotaReplicaGroupListProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 num_replica_groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_replica_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_devices_per_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_devices_per_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 iota_reshape_dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_iota_reshape_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_iota_reshape_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 iota_transpose_perm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_iota_transpose_perm(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_iota_transpose_perm(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IotaReplicaGroupListProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.IotaReplicaGroupListProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_replica_groups = 1;
  if (this->_internal_num_replica_groups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_replica_groups(), target);
  }

  // int64 num_devices_per_group = 2;
  if (this->_internal_num_devices_per_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_devices_per_group(), target);
  }

  // repeated int64 iota_reshape_dims = 3;
  {
    int byte_size = _impl_._iota_reshape_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_iota_reshape_dims(), byte_size, target);
    }
  }

  // repeated int32 iota_transpose_perm = 4;
  {
    int byte_size = _impl_._iota_transpose_perm_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_iota_transpose_perm(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.IotaReplicaGroupListProto)
  return target;
}

size_t IotaReplicaGroupListProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.IotaReplicaGroupListProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 iota_reshape_dims = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.iota_reshape_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._iota_reshape_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 iota_transpose_perm = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.iota_transpose_perm_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._iota_transpose_perm_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 num_replica_groups = 1;
  if (this->_internal_num_replica_groups() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_replica_groups());
  }

  // int64 num_devices_per_group = 2;
  if (this->_internal_num_devices_per_group() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_devices_per_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IotaReplicaGroupListProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IotaReplicaGroupListProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IotaReplicaGroupListProto::GetClassData() const { return &_class_data_; }


void IotaReplicaGroupListProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IotaReplicaGroupListProto*>(&to_msg);
  auto& from = static_cast<const IotaReplicaGroupListProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.IotaReplicaGroupListProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.iota_reshape_dims_.MergeFrom(from._impl_.iota_reshape_dims_);
  _this->_impl_.iota_transpose_perm_.MergeFrom(from._impl_.iota_transpose_perm_);
  if (from._internal_num_replica_groups() != 0) {
    _this->_internal_set_num_replica_groups(from._internal_num_replica_groups());
  }
  if (from._internal_num_devices_per_group() != 0) {
    _this->_internal_set_num_devices_per_group(from._internal_num_devices_per_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IotaReplicaGroupListProto::CopyFrom(const IotaReplicaGroupListProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.IotaReplicaGroupListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IotaReplicaGroupListProto::IsInitialized() const {
  return true;
}

void IotaReplicaGroupListProto::InternalSwap(IotaReplicaGroupListProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.iota_reshape_dims_.InternalSwap(&other->_impl_.iota_reshape_dims_);
  _impl_.iota_transpose_perm_.InternalSwap(&other->_impl_.iota_transpose_perm_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IotaReplicaGroupListProto, _impl_.num_devices_per_group_)
      + sizeof(IotaReplicaGroupListProto::_impl_.num_devices_per_group_)
      - PROTOBUF_FIELD_OFFSET(IotaReplicaGroupListProto, _impl_.num_replica_groups_)>(
          reinterpret_cast<char*>(&_impl_.num_replica_groups_),
          reinterpret_cast<char*>(&other->_impl_.num_replica_groups_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IotaReplicaGroupListProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[34]);
}

// ===================================================================

class CollectiveDeviceListProto::_Internal {
 public:
  static const ::xla::IotaReplicaGroupListProto& iota_replica_group_list(const CollectiveDeviceListProto* msg);
};

const ::xla::IotaReplicaGroupListProto&
CollectiveDeviceListProto::_Internal::iota_replica_group_list(const CollectiveDeviceListProto* msg) {
  return *msg->_impl_.iota_replica_group_list_;
}
CollectiveDeviceListProto::CollectiveDeviceListProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.CollectiveDeviceListProto)
}
CollectiveDeviceListProto::CollectiveDeviceListProto(const CollectiveDeviceListProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectiveDeviceListProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_groups_){from._impl_.replica_groups_}
    , decltype(_impl_.iota_replica_group_list_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iota_replica_group_list()) {
    _this->_impl_.iota_replica_group_list_ = new ::xla::IotaReplicaGroupListProto(*from._impl_.iota_replica_group_list_);
  }
  // @@protoc_insertion_point(copy_constructor:xla.CollectiveDeviceListProto)
}

inline void CollectiveDeviceListProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_groups_){arena}
    , decltype(_impl_.iota_replica_group_list_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectiveDeviceListProto::~CollectiveDeviceListProto() {
  // @@protoc_insertion_point(destructor:xla.CollectiveDeviceListProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectiveDeviceListProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replica_groups_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.iota_replica_group_list_;
}

void CollectiveDeviceListProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectiveDeviceListProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CollectiveDeviceListProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replica_groups_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.iota_replica_group_list_ != nullptr) {
    delete _impl_.iota_replica_group_list_;
  }
  _impl_.iota_replica_group_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectiveDeviceListProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.ReplicaGroup replica_groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replica_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.IotaReplicaGroupListProto iota_replica_group_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_iota_replica_group_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectiveDeviceListProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.CollectiveDeviceListProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.ReplicaGroup replica_groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_replica_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_replica_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.IotaReplicaGroupListProto iota_replica_group_list = 2;
  if (this->_internal_has_iota_replica_group_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::iota_replica_group_list(this),
        _Internal::iota_replica_group_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.CollectiveDeviceListProto)
  return target;
}

size_t CollectiveDeviceListProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CollectiveDeviceListProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.ReplicaGroup replica_groups = 1;
  total_size += 1UL * this->_internal_replica_groups_size();
  for (const auto& msg : this->_impl_.replica_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xla.IotaReplicaGroupListProto iota_replica_group_list = 2;
  if (this->_internal_has_iota_replica_group_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.iota_replica_group_list_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectiveDeviceListProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectiveDeviceListProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectiveDeviceListProto::GetClassData() const { return &_class_data_; }


void CollectiveDeviceListProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectiveDeviceListProto*>(&to_msg);
  auto& from = static_cast<const CollectiveDeviceListProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.CollectiveDeviceListProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replica_groups_.MergeFrom(from._impl_.replica_groups_);
  if (from._internal_has_iota_replica_group_list()) {
    _this->_internal_mutable_iota_replica_group_list()->::xla::IotaReplicaGroupListProto::MergeFrom(
        from._internal_iota_replica_group_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectiveDeviceListProto::CopyFrom(const CollectiveDeviceListProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CollectiveDeviceListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectiveDeviceListProto::IsInitialized() const {
  return true;
}

void CollectiveDeviceListProto::InternalSwap(CollectiveDeviceListProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replica_groups_.InternalSwap(&other->_impl_.replica_groups_);
  swap(_impl_.iota_replica_group_list_, other->_impl_.iota_replica_group_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectiveDeviceListProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[35]);
}

// ===================================================================

class SourceTarget::_Internal {
 public:
};

SourceTarget::SourceTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.SourceTarget)
}
SourceTarget::SourceTarget(const SourceTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SourceTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.source_, &from._impl_.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_) -
    reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.target_));
  // @@protoc_insertion_point(copy_constructor:xla.SourceTarget)
}

inline void SourceTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){int64_t{0}}
    , decltype(_impl_.target_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SourceTarget::~SourceTarget() {
  // @@protoc_insertion_point(destructor:xla.SourceTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SourceTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SourceTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SourceTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_) -
      reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SourceTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.SourceTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 source = 1;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_source(), target);
  }

  // int64 target = 2;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.SourceTarget)
  return target;
}

size_t SourceTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SourceTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 source = 1;
  if (this->_internal_source() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_source());
  }

  // int64 target = 2;
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SourceTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceTarget::GetClassData() const { return &_class_data_; }


void SourceTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SourceTarget*>(&to_msg);
  auto& from = static_cast<const SourceTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.SourceTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_target() != 0) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceTarget::CopyFrom(const SourceTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SourceTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceTarget::IsInitialized() const {
  return true;
}

void SourceTarget::InternalSwap(SourceTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceTarget, _impl_.target_)
      + sizeof(SourceTarget::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(SourceTarget, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[36]);
}

// ===================================================================

class PrecisionConfig::_Internal {
 public:
};

PrecisionConfig::PrecisionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.PrecisionConfig)
}
PrecisionConfig::PrecisionConfig(const PrecisionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrecisionConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operand_precision_){from._impl_.operand_precision_}
    , /*decltype(_impl_._operand_precision_cached_byte_size_)*/{0}
    , decltype(_impl_.algorithm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.algorithm_ = from._impl_.algorithm_;
  // @@protoc_insertion_point(copy_constructor:xla.PrecisionConfig)
}

inline void PrecisionConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operand_precision_){arena}
    , /*decltype(_impl_._operand_precision_cached_byte_size_)*/{0}
    , decltype(_impl_.algorithm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrecisionConfig::~PrecisionConfig() {
  // @@protoc_insertion_point(destructor:xla.PrecisionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrecisionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operand_precision_.~RepeatedField();
}

void PrecisionConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrecisionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.PrecisionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operand_precision_.Clear();
  _impl_.algorithm_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrecisionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.PrecisionConfig.Precision operand_precision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_operand_precision(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_operand_precision(static_cast<::xla::PrecisionConfig_Precision>(val));
        } else
          goto handle_unusual;
        continue;
      // .xla.PrecisionConfig.Algorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::xla::PrecisionConfig_Algorithm>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrecisionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.PrecisionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.PrecisionConfig.Precision operand_precision = 1;
  {
    int byte_size = _impl_._operand_precision_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.operand_precision_, byte_size, target);
    }
  }

  // .xla.PrecisionConfig.Algorithm algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.PrecisionConfig)
  return target;
}

size_t PrecisionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.PrecisionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.PrecisionConfig.Precision operand_precision = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_operand_precision_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_operand_precision(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._operand_precision_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .xla.PrecisionConfig.Algorithm algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrecisionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrecisionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrecisionConfig::GetClassData() const { return &_class_data_; }


void PrecisionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrecisionConfig*>(&to_msg);
  auto& from = static_cast<const PrecisionConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.PrecisionConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operand_precision_.MergeFrom(from._impl_.operand_precision_);
  if (from._internal_algorithm() != 0) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrecisionConfig::CopyFrom(const PrecisionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.PrecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecisionConfig::IsInitialized() const {
  return true;
}

void PrecisionConfig::InternalSwap(PrecisionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operand_precision_.InternalSwap(&other->_impl_.operand_precision_);
  swap(_impl_.algorithm_, other->_impl_.algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrecisionConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[37]);
}

// ===================================================================

class ParameterReplication::_Internal {
 public:
};

ParameterReplication::ParameterReplication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.ParameterReplication)
}
ParameterReplication::ParameterReplication(const ParameterReplication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParameterReplication* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replicated_at_leaf_buffers_){from._impl_.replicated_at_leaf_buffers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.ParameterReplication)
}

inline void ParameterReplication::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replicated_at_leaf_buffers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParameterReplication::~ParameterReplication() {
  // @@protoc_insertion_point(destructor:xla.ParameterReplication)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParameterReplication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replicated_at_leaf_buffers_.~RepeatedField();
}

void ParameterReplication::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParameterReplication::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ParameterReplication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replicated_at_leaf_buffers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterReplication::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool replicated_at_leaf_buffers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_replicated_at_leaf_buffers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_replicated_at_leaf_buffers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParameterReplication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.ParameterReplication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool replicated_at_leaf_buffers = 1;
  if (this->_internal_replicated_at_leaf_buffers_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_replicated_at_leaf_buffers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.ParameterReplication)
  return target;
}

size_t ParameterReplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ParameterReplication)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool replicated_at_leaf_buffers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_replicated_at_leaf_buffers_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParameterReplication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParameterReplication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParameterReplication::GetClassData() const { return &_class_data_; }


void ParameterReplication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParameterReplication*>(&to_msg);
  auto& from = static_cast<const ParameterReplication&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ParameterReplication)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replicated_at_leaf_buffers_.MergeFrom(from._impl_.replicated_at_leaf_buffers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterReplication::CopyFrom(const ParameterReplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ParameterReplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterReplication::IsInitialized() const {
  return true;
}

void ParameterReplication::InternalSwap(ParameterReplication* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replicated_at_leaf_buffers_.InternalSwap(&other->_impl_.replicated_at_leaf_buffers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterReplication::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[38]);
}

// ===================================================================

class WhileLoopBackendConfig_KnownTripCount::_Internal {
 public:
};

WhileLoopBackendConfig_KnownTripCount::WhileLoopBackendConfig_KnownTripCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.WhileLoopBackendConfig.KnownTripCount)
}
WhileLoopBackendConfig_KnownTripCount::WhileLoopBackendConfig_KnownTripCount(const WhileLoopBackendConfig_KnownTripCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WhileLoopBackendConfig_KnownTripCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.n_ = from._impl_.n_;
  // @@protoc_insertion_point(copy_constructor:xla.WhileLoopBackendConfig.KnownTripCount)
}

inline void WhileLoopBackendConfig_KnownTripCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.n_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WhileLoopBackendConfig_KnownTripCount::~WhileLoopBackendConfig_KnownTripCount() {
  // @@protoc_insertion_point(destructor:xla.WhileLoopBackendConfig.KnownTripCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WhileLoopBackendConfig_KnownTripCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WhileLoopBackendConfig_KnownTripCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WhileLoopBackendConfig_KnownTripCount::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.WhileLoopBackendConfig.KnownTripCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.n_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhileLoopBackendConfig_KnownTripCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WhileLoopBackendConfig_KnownTripCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.WhileLoopBackendConfig.KnownTripCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 n = 1;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.WhileLoopBackendConfig.KnownTripCount)
  return target;
}

size_t WhileLoopBackendConfig_KnownTripCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.WhileLoopBackendConfig.KnownTripCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 n = 1;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WhileLoopBackendConfig_KnownTripCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WhileLoopBackendConfig_KnownTripCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WhileLoopBackendConfig_KnownTripCount::GetClassData() const { return &_class_data_; }


void WhileLoopBackendConfig_KnownTripCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WhileLoopBackendConfig_KnownTripCount*>(&to_msg);
  auto& from = static_cast<const WhileLoopBackendConfig_KnownTripCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.WhileLoopBackendConfig.KnownTripCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WhileLoopBackendConfig_KnownTripCount::CopyFrom(const WhileLoopBackendConfig_KnownTripCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.WhileLoopBackendConfig.KnownTripCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhileLoopBackendConfig_KnownTripCount::IsInitialized() const {
  return true;
}

void WhileLoopBackendConfig_KnownTripCount::InternalSwap(WhileLoopBackendConfig_KnownTripCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.n_, other->_impl_.n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WhileLoopBackendConfig_KnownTripCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[39]);
}

// ===================================================================

class WhileLoopBackendConfig::_Internal {
 public:
  static const ::xla::WhileLoopBackendConfig_KnownTripCount& known_trip_count(const WhileLoopBackendConfig* msg);
};

const ::xla::WhileLoopBackendConfig_KnownTripCount&
WhileLoopBackendConfig::_Internal::known_trip_count(const WhileLoopBackendConfig* msg) {
  return *msg->_impl_.known_trip_count_;
}
WhileLoopBackendConfig::WhileLoopBackendConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.WhileLoopBackendConfig)
}
WhileLoopBackendConfig::WhileLoopBackendConfig(const WhileLoopBackendConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WhileLoopBackendConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.known_trip_count_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_known_trip_count()) {
    _this->_impl_.known_trip_count_ = new ::xla::WhileLoopBackendConfig_KnownTripCount(*from._impl_.known_trip_count_);
  }
  // @@protoc_insertion_point(copy_constructor:xla.WhileLoopBackendConfig)
}

inline void WhileLoopBackendConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.known_trip_count_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WhileLoopBackendConfig::~WhileLoopBackendConfig() {
  // @@protoc_insertion_point(destructor:xla.WhileLoopBackendConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WhileLoopBackendConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.known_trip_count_;
}

void WhileLoopBackendConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WhileLoopBackendConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.WhileLoopBackendConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.known_trip_count_ != nullptr) {
    delete _impl_.known_trip_count_;
  }
  _impl_.known_trip_count_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhileLoopBackendConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.WhileLoopBackendConfig.KnownTripCount known_trip_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_known_trip_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WhileLoopBackendConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.WhileLoopBackendConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.WhileLoopBackendConfig.KnownTripCount known_trip_count = 1;
  if (this->_internal_has_known_trip_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::known_trip_count(this),
        _Internal::known_trip_count(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.WhileLoopBackendConfig)
  return target;
}

size_t WhileLoopBackendConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.WhileLoopBackendConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xla.WhileLoopBackendConfig.KnownTripCount known_trip_count = 1;
  if (this->_internal_has_known_trip_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.known_trip_count_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WhileLoopBackendConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WhileLoopBackendConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WhileLoopBackendConfig::GetClassData() const { return &_class_data_; }


void WhileLoopBackendConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WhileLoopBackendConfig*>(&to_msg);
  auto& from = static_cast<const WhileLoopBackendConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.WhileLoopBackendConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_known_trip_count()) {
    _this->_internal_mutable_known_trip_count()->::xla::WhileLoopBackendConfig_KnownTripCount::MergeFrom(
        from._internal_known_trip_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WhileLoopBackendConfig::CopyFrom(const WhileLoopBackendConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.WhileLoopBackendConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhileLoopBackendConfig::IsInitialized() const {
  return true;
}

void WhileLoopBackendConfig::InternalSwap(WhileLoopBackendConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.known_trip_count_, other->_impl_.known_trip_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WhileLoopBackendConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[40]);
}

// ===================================================================

class OutputOperandAliasing::_Internal {
 public:
};

OutputOperandAliasing::OutputOperandAliasing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.OutputOperandAliasing)
}
OutputOperandAliasing::OutputOperandAliasing(const OutputOperandAliasing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutputOperandAliasing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_shape_index_){from._impl_.output_shape_index_}
    , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.operand_shape_index_){from._impl_.operand_shape_index_}
    , /*decltype(_impl_._operand_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.operand_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.operand_index_ = from._impl_.operand_index_;
  // @@protoc_insertion_point(copy_constructor:xla.OutputOperandAliasing)
}

inline void OutputOperandAliasing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_shape_index_){arena}
    , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.operand_shape_index_){arena}
    , /*decltype(_impl_._operand_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.operand_index_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OutputOperandAliasing::~OutputOperandAliasing() {
  // @@protoc_insertion_point(destructor:xla.OutputOperandAliasing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputOperandAliasing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_shape_index_.~RepeatedField();
  _impl_.operand_shape_index_.~RepeatedField();
}

void OutputOperandAliasing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputOperandAliasing::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OutputOperandAliasing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_shape_index_.Clear();
  _impl_.operand_shape_index_.Clear();
  _impl_.operand_index_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputOperandAliasing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 output_shape_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_output_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 operand_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.operand_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 operand_shape_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_operand_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_operand_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputOperandAliasing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.OutputOperandAliasing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 output_shape_index = 1;
  {
    int byte_size = _impl_._output_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_output_shape_index(), byte_size, target);
    }
  }

  // int64 operand_index = 2;
  if (this->_internal_operand_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_operand_index(), target);
  }

  // repeated int64 operand_shape_index = 3;
  {
    int byte_size = _impl_._operand_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_operand_shape_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.OutputOperandAliasing)
  return target;
}

size_t OutputOperandAliasing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OutputOperandAliasing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 output_shape_index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 operand_shape_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.operand_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._operand_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 operand_index = 2;
  if (this->_internal_operand_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_operand_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputOperandAliasing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutputOperandAliasing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputOperandAliasing::GetClassData() const { return &_class_data_; }


void OutputOperandAliasing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutputOperandAliasing*>(&to_msg);
  auto& from = static_cast<const OutputOperandAliasing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.OutputOperandAliasing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.output_shape_index_.MergeFrom(from._impl_.output_shape_index_);
  _this->_impl_.operand_shape_index_.MergeFrom(from._impl_.operand_shape_index_);
  if (from._internal_operand_index() != 0) {
    _this->_internal_set_operand_index(from._internal_operand_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputOperandAliasing::CopyFrom(const OutputOperandAliasing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OutputOperandAliasing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputOperandAliasing::IsInitialized() const {
  return true;
}

void OutputOperandAliasing::InternalSwap(OutputOperandAliasing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.output_shape_index_.InternalSwap(&other->_impl_.output_shape_index_);
  _impl_.operand_shape_index_.InternalSwap(&other->_impl_.operand_shape_index_);
  swap(_impl_.operand_index_, other->_impl_.operand_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputOperandAliasing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[41]);
}

// ===================================================================

class OriginalArrayProto::_Internal {
 public:
};

OriginalArrayProto::OriginalArrayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.OriginalArrayProto)
}
OriginalArrayProto::OriginalArrayProto(const OriginalArrayProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OriginalArrayProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leaf_shape_index_){from._impl_.leaf_shape_index_}
    , /*decltype(_impl_._leaf_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.shape_index_){from._impl_.shape_index_}
    , /*decltype(_impl_._shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.instruction_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instruction_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instruction_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instruction_name().empty()) {
    _this->_impl_.instruction_name_.Set(from._internal_instruction_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xla.OriginalArrayProto)
}

inline void OriginalArrayProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leaf_shape_index_){arena}
    , /*decltype(_impl_._leaf_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.shape_index_){arena}
    , /*decltype(_impl_._shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.instruction_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instruction_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instruction_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OriginalArrayProto::~OriginalArrayProto() {
  // @@protoc_insertion_point(destructor:xla.OriginalArrayProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OriginalArrayProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.leaf_shape_index_.~RepeatedField();
  _impl_.shape_index_.~RepeatedField();
  _impl_.instruction_name_.Destroy();
}

void OriginalArrayProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OriginalArrayProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OriginalArrayProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leaf_shape_index_.Clear();
  _impl_.shape_index_.Clear();
  _impl_.instruction_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginalArrayProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 leaf_shape_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_leaf_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_leaf_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instruction_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instruction_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.OriginalArrayProto.instruction_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 shape_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginalArrayProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.OriginalArrayProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 leaf_shape_index = 1;
  {
    int byte_size = _impl_._leaf_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_leaf_shape_index(), byte_size, target);
    }
  }

  // string instruction_name = 2;
  if (!this->_internal_instruction_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instruction_name().data(), static_cast<int>(this->_internal_instruction_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.OriginalArrayProto.instruction_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instruction_name(), target);
  }

  // repeated int64 shape_index = 3;
  {
    int byte_size = _impl_._shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_shape_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.OriginalArrayProto)
  return target;
}

size_t OriginalArrayProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OriginalArrayProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 leaf_shape_index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.leaf_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._leaf_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 shape_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string instruction_name = 2;
  if (!this->_internal_instruction_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instruction_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OriginalArrayProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OriginalArrayProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OriginalArrayProto::GetClassData() const { return &_class_data_; }


void OriginalArrayProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OriginalArrayProto*>(&to_msg);
  auto& from = static_cast<const OriginalArrayProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.OriginalArrayProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.leaf_shape_index_.MergeFrom(from._impl_.leaf_shape_index_);
  _this->_impl_.shape_index_.MergeFrom(from._impl_.shape_index_);
  if (!from._internal_instruction_name().empty()) {
    _this->_internal_set_instruction_name(from._internal_instruction_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OriginalArrayProto::CopyFrom(const OriginalArrayProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OriginalArrayProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalArrayProto::IsInitialized() const {
  return true;
}

void OriginalArrayProto::InternalSwap(OriginalArrayProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.leaf_shape_index_.InternalSwap(&other->_impl_.leaf_shape_index_);
  _impl_.shape_index_.InternalSwap(&other->_impl_.shape_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instruction_name_, lhs_arena,
      &other->_impl_.instruction_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginalArrayProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[42]);
}

// ===================================================================

class OriginalValueProto::_Internal {
 public:
};

OriginalValueProto::OriginalValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.OriginalValueProto)
}
OriginalValueProto::OriginalValueProto(const OriginalValueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OriginalValueProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leaves_){from._impl_.leaves_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.OriginalValueProto)
}

inline void OriginalValueProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leaves_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OriginalValueProto::~OriginalValueProto() {
  // @@protoc_insertion_point(destructor:xla.OriginalValueProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OriginalValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.leaves_.~RepeatedPtrField();
}

void OriginalValueProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OriginalValueProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OriginalValueProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leaves_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginalValueProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.OriginalArrayProto leaves = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginalValueProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.OriginalValueProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.OriginalArrayProto leaves = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_leaves_size()); i < n; i++) {
    const auto& repfield = this->_internal_leaves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.OriginalValueProto)
  return target;
}

size_t OriginalValueProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OriginalValueProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.OriginalArrayProto leaves = 1;
  total_size += 1UL * this->_internal_leaves_size();
  for (const auto& msg : this->_impl_.leaves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OriginalValueProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OriginalValueProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OriginalValueProto::GetClassData() const { return &_class_data_; }


void OriginalValueProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OriginalValueProto*>(&to_msg);
  auto& from = static_cast<const OriginalValueProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.OriginalValueProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.leaves_.MergeFrom(from._impl_.leaves_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OriginalValueProto::CopyFrom(const OriginalValueProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OriginalValueProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalValueProto::IsInitialized() const {
  return true;
}

void OriginalValueProto::InternalSwap(OriginalValueProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.leaves_.InternalSwap(&other->_impl_.leaves_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginalValueProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fxla_5fdata_2eproto_getter, &descriptor_table_xla_2fxla_5fdata_2eproto_once,
      file_level_metadata_xla_2fxla_5fdata_2eproto[43]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xla::PaddingConfig_PaddingConfigDimension*
Arena::CreateMaybeMessage< ::xla::PaddingConfig_PaddingConfigDimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::PaddingConfig_PaddingConfigDimension >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::PaddingConfig*
Arena::CreateMaybeMessage< ::xla::PaddingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::PaddingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::TileProto*
Arena::CreateMaybeMessage< ::xla::TileProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::TileProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::SplitConfigProto*
Arena::CreateMaybeMessage< ::xla::SplitConfigProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::SplitConfigProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::LayoutProto*
Arena::CreateMaybeMessage< ::xla::LayoutProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::LayoutProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ShapeProto*
Arena::CreateMaybeMessage< ::xla::ShapeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ShapeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ProgramShapeProto*
Arena::CreateMaybeMessage< ::xla::ProgramShapeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ProgramShapeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ComputationStats*
Arena::CreateMaybeMessage< ::xla::ComputationStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ComputationStats >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::OpMetadata_ProfileInfo*
Arena::CreateMaybeMessage< ::xla::OpMetadata_ProfileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::OpMetadata_ProfileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::OpMetadata*
Arena::CreateMaybeMessage< ::xla::OpMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::OpMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ExecutionProfile*
Arena::CreateMaybeMessage< ::xla::ExecutionProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ExecutionProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ExecutionHandle*
Arena::CreateMaybeMessage< ::xla::ExecutionHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ExecutionHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::GlobalDataHandle*
Arena::CreateMaybeMessage< ::xla::GlobalDataHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::GlobalDataHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::DeviceHandle*
Arena::CreateMaybeMessage< ::xla::DeviceHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::DeviceHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ChannelHandle*
Arena::CreateMaybeMessage< ::xla::ChannelHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ChannelHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::DeviceAssignmentProto_ComputationDevice*
Arena::CreateMaybeMessage< ::xla::DeviceAssignmentProto_ComputationDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::DeviceAssignmentProto_ComputationDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::DeviceAssignmentProto*
Arena::CreateMaybeMessage< ::xla::DeviceAssignmentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::DeviceAssignmentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::LiteralProto*
Arena::CreateMaybeMessage< ::xla::LiteralProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::LiteralProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::WindowDimension*
Arena::CreateMaybeMessage< ::xla::WindowDimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::WindowDimension >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::Window*
Arena::CreateMaybeMessage< ::xla::Window >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::Window >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::GatherDimensionNumbers*
Arena::CreateMaybeMessage< ::xla::GatherDimensionNumbers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::GatherDimensionNumbers >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ScatterDimensionNumbers*
Arena::CreateMaybeMessage< ::xla::ScatterDimensionNumbers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ScatterDimensionNumbers >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ConvolutionDimensionNumbers*
Arena::CreateMaybeMessage< ::xla::ConvolutionDimensionNumbers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ConvolutionDimensionNumbers >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::DotDimensionNumbers*
Arena::CreateMaybeMessage< ::xla::DotDimensionNumbers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::DotDimensionNumbers >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::SparsityDescriptor*
Arena::CreateMaybeMessage< ::xla::SparsityDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::SparsityDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::TriangularSolveOptions*
Arena::CreateMaybeMessage< ::xla::TriangularSolveOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::TriangularSolveOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::CholeskyOptions*
Arena::CreateMaybeMessage< ::xla::CholeskyOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::CholeskyOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::SortOptions*
Arena::CreateMaybeMessage< ::xla::SortOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::SortOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::FrontendAttributes_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xla::FrontendAttributes_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::FrontendAttributes_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::FrontendAttributes*
Arena::CreateMaybeMessage< ::xla::FrontendAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::FrontendAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::Statistic*
Arena::CreateMaybeMessage< ::xla::Statistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::Statistic >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::StatisticsViz*
Arena::CreateMaybeMessage< ::xla::StatisticsViz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::StatisticsViz >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::OpSharding*
Arena::CreateMaybeMessage< ::xla::OpSharding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::OpSharding >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ReplicaGroup*
Arena::CreateMaybeMessage< ::xla::ReplicaGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ReplicaGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::IotaReplicaGroupListProto*
Arena::CreateMaybeMessage< ::xla::IotaReplicaGroupListProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::IotaReplicaGroupListProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::CollectiveDeviceListProto*
Arena::CreateMaybeMessage< ::xla::CollectiveDeviceListProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::CollectiveDeviceListProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::SourceTarget*
Arena::CreateMaybeMessage< ::xla::SourceTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::SourceTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::PrecisionConfig*
Arena::CreateMaybeMessage< ::xla::PrecisionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::PrecisionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::ParameterReplication*
Arena::CreateMaybeMessage< ::xla::ParameterReplication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::ParameterReplication >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::WhileLoopBackendConfig_KnownTripCount*
Arena::CreateMaybeMessage< ::xla::WhileLoopBackendConfig_KnownTripCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::WhileLoopBackendConfig_KnownTripCount >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::WhileLoopBackendConfig*
Arena::CreateMaybeMessage< ::xla::WhileLoopBackendConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::WhileLoopBackendConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::OutputOperandAliasing*
Arena::CreateMaybeMessage< ::xla::OutputOperandAliasing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::OutputOperandAliasing >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::OriginalArrayProto*
Arena::CreateMaybeMessage< ::xla::OriginalArrayProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::OriginalArrayProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::OriginalValueProto*
Arena::CreateMaybeMessage< ::xla::OriginalValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::OriginalValueProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
