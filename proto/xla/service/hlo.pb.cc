// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/hlo.proto

#include "xla/service/hlo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xla {
PROTOBUF_CONSTEXPR HloInstructionProto_SliceDimensions::HloInstructionProto_SliceDimensions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/int64_t{0}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_.stride_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloInstructionProto_SliceDimensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloInstructionProto_SliceDimensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloInstructionProto_SliceDimensionsDefaultTypeInternal() {}
  union {
    HloInstructionProto_SliceDimensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloInstructionProto_SliceDimensionsDefaultTypeInternal _HloInstructionProto_SliceDimensions_default_instance_;
PROTOBUF_CONSTEXPR HloInstructionProto::HloInstructionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.slice_dimensions_)*/{}
  , /*decltype(_impl_.dynamic_slice_sizes_)*/{}
  , /*decltype(_impl_._dynamic_slice_sizes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.fft_length_)*/{}
  , /*decltype(_impl_._fft_length_cached_byte_size_)*/{0}
  , /*decltype(_impl_.gather_slice_sizes_)*/{}
  , /*decltype(_impl_._gather_slice_sizes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.operand_ids_)*/{}
  , /*decltype(_impl_._operand_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.control_predecessor_ids_)*/{}
  , /*decltype(_impl_._control_predecessor_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.called_computation_ids_)*/{}
  , /*decltype(_impl_._called_computation_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.replica_groups_)*/{}
  , /*decltype(_impl_.source_target_pairs_)*/{}
  , /*decltype(_impl_.operand_shapes_with_layout_)*/{}
  , /*decltype(_impl_.output_operand_aliasing_)*/{}
  , /*decltype(_impl_.dot_sparsity_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.opcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fusion_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outfeed_config_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.infeed_config_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_call_target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backend_config_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comparison_direction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comparison_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.async_execution_thread_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.literal_)*/nullptr
  , /*decltype(_impl_.window_)*/nullptr
  , /*decltype(_impl_.convolution_dimension_numbers_)*/nullptr
  , /*decltype(_impl_.padding_config_)*/nullptr
  , /*decltype(_impl_.outfeed_shape_)*/nullptr
  , /*decltype(_impl_.dot_dimension_numbers_)*/nullptr
  , /*decltype(_impl_.gather_dimension_numbers_)*/nullptr
  , /*decltype(_impl_.sharding_)*/nullptr
  , /*decltype(_impl_.scatter_dimension_numbers_)*/nullptr
  , /*decltype(_impl_.precision_config_)*/nullptr
  , /*decltype(_impl_.domain_entry_sharding_)*/nullptr
  , /*decltype(_impl_.domain_exit_sharding_)*/nullptr
  , /*decltype(_impl_.triangular_solve_options_)*/nullptr
  , /*decltype(_impl_.parameter_replication_)*/nullptr
  , /*decltype(_impl_.cholesky_options_)*/nullptr
  , /*decltype(_impl_.frontend_attributes_)*/nullptr
  , /*decltype(_impl_.statistics_viz_)*/nullptr
  , /*decltype(_impl_.collective_device_list_)*/nullptr
  , /*decltype(_impl_.original_value_)*/nullptr
  , /*decltype(_impl_.parameter_number_)*/int64_t{0}
  , /*decltype(_impl_.tuple_index_)*/int64_t{0}
  , /*decltype(_impl_.exponent_bits_)*/0
  , /*decltype(_impl_.mantissa_bits_)*/0
  , /*decltype(_impl_.distribution_)*/0
  , /*decltype(_impl_.epsilon_)*/0
  , /*decltype(_impl_.feature_index_)*/int64_t{0}
  , /*decltype(_impl_.channel_id_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.all_reduce_id_)*/int64_t{0}
  , /*decltype(_impl_.feature_group_count_)*/int64_t{0}
  , /*decltype(_impl_.fft_type_)*/0
  , /*decltype(_impl_.use_global_device_ids_)*/false
  , /*decltype(_impl_.is_host_transfer_)*/false
  , /*decltype(_impl_.is_stable_)*/false
  , /*decltype(_impl_.constrain_layout_)*/false
  , /*decltype(_impl_.batch_group_count_)*/int64_t{0}
  , /*decltype(_impl_.delta_)*/int64_t{0}
  , /*decltype(_impl_.custom_call_has_side_effect_)*/false
  , /*decltype(_impl_.indices_are_sorted_)*/false
  , /*decltype(_impl_.unique_indices_)*/false
  , /*decltype(_impl_.is_cross_program_prefetch_)*/false
  , /*decltype(_impl_.rng_algorithm_)*/0
  , /*decltype(_impl_.padding_type_)*/0
  , /*decltype(_impl_.custom_call_schedule_)*/0
  , /*decltype(_impl_.k_)*/int64_t{0}
  , /*decltype(_impl_.custom_call_api_version_)*/0
  , /*decltype(_impl_.largest_)*/false
  , /*decltype(_impl_.is_composite_)*/false
  , /*decltype(_impl_.optional_cross_program_prefetch_index_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HloInstructionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloInstructionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloInstructionProtoDefaultTypeInternal() {}
  union {
    HloInstructionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloInstructionProtoDefaultTypeInternal _HloInstructionProto_default_instance_;
PROTOBUF_CONSTEXPR HloComputationProto::HloComputationProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instructions_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execution_thread_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.program_shape_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.root_id_)*/int64_t{0}
  , /*decltype(_impl_.is_fusion_computation_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloComputationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloComputationProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloComputationProtoDefaultTypeInternal() {}
  union {
    HloComputationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloComputationProtoDefaultTypeInternal _HloComputationProto_default_instance_;
PROTOBUF_CONSTEXPR HloScheduleProto_InstructionSequence::HloScheduleProto_InstructionSequence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruction_ids_)*/{}
  , /*decltype(_impl_._instruction_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloScheduleProto_InstructionSequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloScheduleProto_InstructionSequenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloScheduleProto_InstructionSequenceDefaultTypeInternal() {}
  union {
    HloScheduleProto_InstructionSequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloScheduleProto_InstructionSequenceDefaultTypeInternal _HloScheduleProto_InstructionSequence_default_instance_;
PROTOBUF_CONSTEXPR HloScheduleProto_SequencesEntry_DoNotUse::HloScheduleProto_SequencesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HloScheduleProto_SequencesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloScheduleProto_SequencesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloScheduleProto_SequencesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HloScheduleProto_SequencesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloScheduleProto_SequencesEntry_DoNotUseDefaultTypeInternal _HloScheduleProto_SequencesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HloScheduleProto::HloScheduleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sequences_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloScheduleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloScheduleProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloScheduleProtoDefaultTypeInternal() {}
  union {
    HloScheduleProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloScheduleProtoDefaultTypeInternal _HloScheduleProto_default_instance_;
PROTOBUF_CONSTEXPR HloInputOutputAliasProto_AliasEntryProto::HloInputOutputAliasProto_AliasEntryProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_shape_index_)*/{}
  , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.parameter_shape_index_)*/{}
  , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.parameter_number_)*/int64_t{0}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloInputOutputAliasProto_AliasEntryProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloInputOutputAliasProto_AliasEntryProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloInputOutputAliasProto_AliasEntryProtoDefaultTypeInternal() {}
  union {
    HloInputOutputAliasProto_AliasEntryProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloInputOutputAliasProto_AliasEntryProtoDefaultTypeInternal _HloInputOutputAliasProto_AliasEntryProto_default_instance_;
PROTOBUF_CONSTEXPR HloInputOutputAliasProto::HloInputOutputAliasProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloInputOutputAliasProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloInputOutputAliasProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloInputOutputAliasProtoDefaultTypeInternal() {}
  union {
    HloInputOutputAliasProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloInputOutputAliasProtoDefaultTypeInternal _HloInputOutputAliasProto_default_instance_;
PROTOBUF_CONSTEXPR HloBufferDonorProto_BufferDonorEntryProto::HloBufferDonorProto_BufferDonorEntryProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameter_shape_index_)*/{}
  , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.parameter_number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloBufferDonorProto_BufferDonorEntryProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloBufferDonorProto_BufferDonorEntryProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloBufferDonorProto_BufferDonorEntryProtoDefaultTypeInternal() {}
  union {
    HloBufferDonorProto_BufferDonorEntryProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloBufferDonorProto_BufferDonorEntryProtoDefaultTypeInternal _HloBufferDonorProto_BufferDonorEntryProto_default_instance_;
PROTOBUF_CONSTEXPR HloBufferDonorProto::HloBufferDonorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloBufferDonorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloBufferDonorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloBufferDonorProtoDefaultTypeInternal() {}
  union {
    HloBufferDonorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloBufferDonorProtoDefaultTypeInternal _HloBufferDonorProto_default_instance_;
PROTOBUF_CONSTEXPR CrossProgramPrefetch::CrossProgramPrefetch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_._index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.parameter_)*/int64_t{0}
  , /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CrossProgramPrefetchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossProgramPrefetchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossProgramPrefetchDefaultTypeInternal() {}
  union {
    CrossProgramPrefetch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossProgramPrefetchDefaultTypeInternal _CrossProgramPrefetch_default_instance_;
PROTOBUF_CONSTEXPR StackFrameIndexProto_FileLocation::StackFrameIndexProto_FileLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_id_)*/0
  , /*decltype(_impl_.function_name_id_)*/0
  , /*decltype(_impl_.line_)*/0
  , /*decltype(_impl_.column_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackFrameIndexProto_FileLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackFrameIndexProto_FileLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackFrameIndexProto_FileLocationDefaultTypeInternal() {}
  union {
    StackFrameIndexProto_FileLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackFrameIndexProto_FileLocationDefaultTypeInternal _StackFrameIndexProto_FileLocation_default_instance_;
PROTOBUF_CONSTEXPR StackFrameIndexProto_StackFrame::StackFrameIndexProto_StackFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_location_id_)*/0
  , /*decltype(_impl_.parent_frame_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackFrameIndexProto_StackFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackFrameIndexProto_StackFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackFrameIndexProto_StackFrameDefaultTypeInternal() {}
  union {
    StackFrameIndexProto_StackFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackFrameIndexProto_StackFrameDefaultTypeInternal _StackFrameIndexProto_StackFrame_default_instance_;
PROTOBUF_CONSTEXPR StackFrameIndexProto::StackFrameIndexProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_names_)*/{}
  , /*decltype(_impl_.function_names_)*/{}
  , /*decltype(_impl_.file_locations_)*/{}
  , /*decltype(_impl_.stack_frames_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackFrameIndexProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackFrameIndexProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackFrameIndexProtoDefaultTypeInternal() {}
  union {
    StackFrameIndexProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackFrameIndexProtoDefaultTypeInternal _StackFrameIndexProto_default_instance_;
PROTOBUF_CONSTEXPR HloModuleProto_ProfileInfo::HloModuleProto_ProfileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fingerprint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.relative_speedup_)*/0
  , /*decltype(_impl_.profile_type_)*/0
  , /*decltype(_impl_.profile_source_)*/0
  , /*decltype(_impl_.compilation_event_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleProto_ProfileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleProto_ProfileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleProto_ProfileInfoDefaultTypeInternal() {}
  union {
    HloModuleProto_ProfileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleProto_ProfileInfoDefaultTypeInternal _HloModuleProto_ProfileInfo_default_instance_;
PROTOBUF_CONSTEXPR HloModuleProto::HloModuleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.computations_)*/{}
  , /*decltype(_impl_.cross_program_prefetches_)*/{}
  , /*decltype(_impl_.profile_info_)*/{}
  , /*decltype(_impl_.spmd_parameters_shardings_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entry_computation_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_program_shape_)*/nullptr
  , /*decltype(_impl_.schedule_)*/nullptr
  , /*decltype(_impl_.input_output_alias_)*/nullptr
  , /*decltype(_impl_.spmd_output_sharding_)*/nullptr
  , /*decltype(_impl_.device_assignment_)*/nullptr
  , /*decltype(_impl_.stack_frame_index_)*/nullptr
  , /*decltype(_impl_.buffer_donor_)*/nullptr
  , /*decltype(_impl_.frontend_attributes_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.entry_computation_id_)*/int64_t{0}
  , /*decltype(_impl_.is_dynamic_)*/false
  , /*decltype(_impl_.use_auto_spmd_partitioning_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleProtoDefaultTypeInternal() {}
  union {
    HloModuleProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleProtoDefaultTypeInternal _HloModuleProto_default_instance_;
PROTOBUF_CONSTEXPR LogicalBufferProto_Location::LogicalBufferProto_Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_index_)*/{}
  , /*decltype(_impl_._shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.instruction_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instruction_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicalBufferProto_LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalBufferProto_LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalBufferProto_LocationDefaultTypeInternal() {}
  union {
    LogicalBufferProto_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalBufferProto_LocationDefaultTypeInternal _LogicalBufferProto_Location_default_instance_;
PROTOBUF_CONSTEXPR LogicalBufferProto::LogicalBufferProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.defined_at_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.color_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicalBufferProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalBufferProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalBufferProtoDefaultTypeInternal() {}
  union {
    LogicalBufferProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalBufferProtoDefaultTypeInternal _LogicalBufferProto_default_instance_;
PROTOBUF_CONSTEXPR BufferAllocationProto_Assigned::BufferAllocationProto_Assigned(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logical_buffer_id_)*/int64_t{0}
  , /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferAllocationProto_AssignedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferAllocationProto_AssignedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferAllocationProto_AssignedDefaultTypeInternal() {}
  union {
    BufferAllocationProto_Assigned _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferAllocationProto_AssignedDefaultTypeInternal _BufferAllocationProto_Assigned_default_instance_;
PROTOBUF_CONSTEXPR BufferAllocationProto::BufferAllocationProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.assigned_)*/{}
  , /*decltype(_impl_.parameter_shape_index_)*/{}
  , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.index_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.parameter_number_)*/int64_t{0}
  , /*decltype(_impl_.maybe_live_out_)*/false
  , /*decltype(_impl_.is_thread_local_)*/false
  , /*decltype(_impl_.is_tuple_)*/false
  , /*decltype(_impl_.is_entry_computation_parameter_)*/false
  , /*decltype(_impl_.is_constant_)*/false
  , /*decltype(_impl_.color_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferAllocationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferAllocationProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferAllocationProtoDefaultTypeInternal() {}
  union {
    BufferAllocationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferAllocationProtoDefaultTypeInternal _BufferAllocationProto_default_instance_;
PROTOBUF_CONSTEXPR HeapSimulatorTrace_Event::HeapSimulatorTrace_Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.computation_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instruction_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buffer_id_)*/int64_t{0}
  , /*decltype(_impl_.share_with_canonical_id_)*/int64_t{0}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeapSimulatorTrace_EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapSimulatorTrace_EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapSimulatorTrace_EventDefaultTypeInternal() {}
  union {
    HeapSimulatorTrace_Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapSimulatorTrace_EventDefaultTypeInternal _HeapSimulatorTrace_Event_default_instance_;
PROTOBUF_CONSTEXPR HeapSimulatorTrace::HeapSimulatorTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.buffer_allocation_index_)*/int64_t{0}
  , /*decltype(_impl_.whole_module_simulation_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeapSimulatorTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapSimulatorTraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapSimulatorTraceDefaultTypeInternal() {}
  union {
    HeapSimulatorTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapSimulatorTraceDefaultTypeInternal _HeapSimulatorTrace_default_instance_;
PROTOBUF_CONSTEXPR HloModuleGroupProto::HloModuleGroupProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hlo_modules_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleGroupProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleGroupProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleGroupProtoDefaultTypeInternal() {}
  union {
    HloModuleGroupProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleGroupProtoDefaultTypeInternal _HloModuleGroupProto_default_instance_;
PROTOBUF_CONSTEXPR BufferAssignmentProto_BufferAlias::BufferAssignmentProto_BufferAlias(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.source_buffer_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferAssignmentProto_BufferAliasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferAssignmentProto_BufferAliasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferAssignmentProto_BufferAliasDefaultTypeInternal() {}
  union {
    BufferAssignmentProto_BufferAlias _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferAssignmentProto_BufferAliasDefaultTypeInternal _BufferAssignmentProto_BufferAlias_default_instance_;
PROTOBUF_CONSTEXPR BufferAssignmentProto::BufferAssignmentProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logical_buffers_)*/{}
  , /*decltype(_impl_.buffer_aliases_)*/{}
  , /*decltype(_impl_.buffer_allocations_)*/{}
  , /*decltype(_impl_.heap_simulator_traces_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferAssignmentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferAssignmentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferAssignmentProtoDefaultTypeInternal() {}
  union {
    BufferAssignmentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferAssignmentProtoDefaultTypeInternal _BufferAssignmentProto_default_instance_;
PROTOBUF_CONSTEXPR HloProto::HloProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hlo_module_)*/nullptr
  , /*decltype(_impl_.buffer_assignment_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloProtoDefaultTypeInternal() {}
  union {
    HloProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloProtoDefaultTypeInternal _HloProto_default_instance_;
PROTOBUF_CONSTEXPR HloSnapshot::HloSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.execution_platform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hlo_)*/nullptr
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloSnapshotDefaultTypeInternal() {}
  union {
    HloSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloSnapshotDefaultTypeInternal _HloSnapshot_default_instance_;
PROTOBUF_CONSTEXPR HloModuleMetadataProto::HloModuleMetadataProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitioned_module_ids_)*/{}
  , /*decltype(_impl_._partitioned_module_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pass_metadata_)*/{}
  , /*decltype(_impl_.module_group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.canonical_module_id_)*/int64_t{0}
  , /*decltype(_impl_.original_module_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloModuleMetadataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleMetadataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleMetadataProtoDefaultTypeInternal() {}
  union {
    HloModuleMetadataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleMetadataProtoDefaultTypeInternal _HloModuleMetadataProto_default_instance_;
PROTOBUF_CONSTEXPR HloPassMetadata::HloPassMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dump_filenames_)*/{}
  , /*decltype(_impl_.module_group_module_ids_)*/{}
  , /*decltype(_impl_._module_group_module_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pass_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pipeline_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_metadata_)*/nullptr
  , /*decltype(_impl_.pass_id_)*/int64_t{0}
  , /*decltype(_impl_.module_id_)*/int64_t{0}
  , /*decltype(_impl_.start_timestamp_usec_)*/int64_t{0}
  , /*decltype(_impl_.end_timestamp_usec_)*/int64_t{0}
  , /*decltype(_impl_.module_changed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloPassMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloPassMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloPassMetadataDefaultTypeInternal() {}
  union {
    HloPassMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloPassMetadataDefaultTypeInternal _HloPassMetadata_default_instance_;
}  // namespace xla
static ::_pb::Metadata file_level_metadata_xla_2fservice_2fhlo_2eproto[29];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_xla_2fservice_2fhlo_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xla_2fservice_2fhlo_2eproto = nullptr;

const uint32_t TableStruct_xla_2fservice_2fhlo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto_SliceDimensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto_SliceDimensions, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto_SliceDimensions, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto_SliceDimensions, _impl_.stride_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.opcode_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.literal_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.parameter_number_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.fusion_kind_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.tuple_index_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.window_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.convolution_dimension_numbers_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.feature_group_count_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.batch_group_count_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.slice_dimensions_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.exponent_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.mantissa_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.dynamic_slice_sizes_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.padding_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.outfeed_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.distribution_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.epsilon_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.feature_index_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.infeed_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.custom_call_target_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.outfeed_shape_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.dot_dimension_numbers_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.fft_type_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.fft_length_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.comparison_direction_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.gather_dimension_numbers_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.gather_slice_sizes_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.operand_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.control_predecessor_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.called_computation_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.sharding_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.backend_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.replica_groups_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.all_reduce_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.use_global_device_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.is_host_transfer_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.is_stable_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.scatter_dimension_numbers_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.precision_config_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.source_target_pairs_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.domain_entry_sharding_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.domain_exit_sharding_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.constrain_layout_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.operand_shapes_with_layout_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.triangular_solve_options_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.cholesky_options_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.parameter_replication_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.custom_call_has_side_effect_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.output_operand_aliasing_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.custom_call_schedule_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.delta_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.indices_are_sorted_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.frontend_attributes_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.unique_indices_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.rng_algorithm_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.comparison_type_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.is_cross_program_prefetch_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.padding_type_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.custom_call_api_version_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.async_execution_thread_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.largest_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.statistics_viz_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.dot_sparsity_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.collective_device_list_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.original_value_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.is_composite_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInstructionProto, _impl_.optional_cross_program_prefetch_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloComputationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloComputationProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloComputationProto, _impl_.instructions_),
  PROTOBUF_FIELD_OFFSET(::xla::HloComputationProto, _impl_.program_shape_),
  PROTOBUF_FIELD_OFFSET(::xla::HloComputationProto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloComputationProto, _impl_.root_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloComputationProto, _impl_.is_fusion_computation_),
  PROTOBUF_FIELD_OFFSET(::xla::HloComputationProto, _impl_.execution_thread_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloScheduleProto_InstructionSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloScheduleProto_InstructionSequence, _impl_.instruction_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::HloScheduleProto_SequencesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::HloScheduleProto_SequencesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloScheduleProto_SequencesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xla::HloScheduleProto_SequencesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloScheduleProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloScheduleProto, _impl_.sequences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloInputOutputAliasProto_AliasEntryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloInputOutputAliasProto_AliasEntryProto, _impl_.output_shape_index_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInputOutputAliasProto_AliasEntryProto, _impl_.parameter_number_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInputOutputAliasProto_AliasEntryProto, _impl_.parameter_shape_index_),
  PROTOBUF_FIELD_OFFSET(::xla::HloInputOutputAliasProto_AliasEntryProto, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloInputOutputAliasProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloInputOutputAliasProto, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloBufferDonorProto_BufferDonorEntryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloBufferDonorProto_BufferDonorEntryProto, _impl_.parameter_number_),
  PROTOBUF_FIELD_OFFSET(::xla::HloBufferDonorProto_BufferDonorEntryProto, _impl_.parameter_shape_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloBufferDonorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloBufferDonorProto, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::CrossProgramPrefetch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::CrossProgramPrefetch, _impl_.parameter_),
  PROTOBUF_FIELD_OFFSET(::xla::CrossProgramPrefetch, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::xla::CrossProgramPrefetch, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto_FileLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto_FileLocation, _impl_.file_name_id_),
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto_FileLocation, _impl_.function_name_id_),
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto_FileLocation, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto_FileLocation, _impl_.column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto_StackFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto_StackFrame, _impl_.file_location_id_),
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto_StackFrame, _impl_.parent_frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto, _impl_.file_names_),
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto, _impl_.function_names_),
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto, _impl_.file_locations_),
  PROTOBUF_FIELD_OFFSET(::xla::StackFrameIndexProto, _impl_.stack_frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto_ProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto_ProfileInfo, _impl_.profile_type_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto_ProfileInfo, _impl_.relative_speedup_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto_ProfileInfo, _impl_.profile_source_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto_ProfileInfo, _impl_.compilation_event_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto_ProfileInfo, _impl_.fingerprint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.entry_computation_name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.entry_computation_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.computations_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.host_program_shape_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.schedule_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.input_output_alias_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.buffer_donor_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.cross_program_prefetches_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.is_dynamic_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.spmd_output_sharding_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.spmd_parameters_shardings_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.use_auto_spmd_partitioning_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.profile_info_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.device_assignment_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.stack_frame_index_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleProto, _impl_.frontend_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto_Location, _impl_.instruction_name_),
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto_Location, _impl_.instruction_id_),
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto_Location, _impl_.shape_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto, _impl_.defined_at_),
  PROTOBUF_FIELD_OFFSET(::xla::LogicalBufferProto, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto_Assigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto_Assigned, _impl_.logical_buffer_id_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto_Assigned, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto_Assigned, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.is_thread_local_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.is_tuple_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.is_entry_computation_parameter_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.is_constant_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.parameter_number_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.parameter_shape_index_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.maybe_live_out_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAllocationProto, _impl_.assigned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace_Event, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace_Event, _impl_.buffer_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace_Event, _impl_.computation_name_),
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace_Event, _impl_.instruction_name_),
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace_Event, _impl_.share_with_canonical_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace, _impl_.whole_module_simulation_),
  PROTOBUF_FIELD_OFFSET(::xla::HeapSimulatorTrace, _impl_.buffer_allocation_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleGroupProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleGroupProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleGroupProto, _impl_.hlo_modules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::BufferAssignmentProto_BufferAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::BufferAssignmentProto_BufferAlias, _impl_.source_buffer_id_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAssignmentProto_BufferAlias, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::BufferAssignmentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::BufferAssignmentProto, _impl_.logical_buffers_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAssignmentProto, _impl_.buffer_aliases_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAssignmentProto, _impl_.buffer_allocations_),
  PROTOBUF_FIELD_OFFSET(::xla::BufferAssignmentProto, _impl_.heap_simulator_traces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloProto, _impl_.hlo_module_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProto, _impl_.buffer_assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloSnapshot, _impl_.hlo_),
  PROTOBUF_FIELD_OFFSET(::xla::HloSnapshot, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::xla::HloSnapshot, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::xla::HloSnapshot, _impl_.execution_platform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleMetadataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleMetadataProto, _impl_.canonical_module_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleMetadataProto, _impl_.module_group_name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleMetadataProto, _impl_.original_module_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleMetadataProto, _impl_.partitioned_module_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::HloModuleMetadataProto, _impl_.pass_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.pass_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.pass_name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.dump_filenames_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.module_changed_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.module_id_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.module_group_module_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.start_timestamp_usec_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.end_timestamp_usec_),
  PROTOBUF_FIELD_OFFSET(::xla::HloPassMetadata, _impl_.custom_metadata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xla::HloInstructionProto_SliceDimensions)},
  { 9, -1, -1, sizeof(::xla::HloInstructionProto)},
  { 90, -1, -1, sizeof(::xla::HloComputationProto)},
  { 103, -1, -1, sizeof(::xla::HloScheduleProto_InstructionSequence)},
  { 110, 118, -1, sizeof(::xla::HloScheduleProto_SequencesEntry_DoNotUse)},
  { 120, -1, -1, sizeof(::xla::HloScheduleProto)},
  { 127, -1, -1, sizeof(::xla::HloInputOutputAliasProto_AliasEntryProto)},
  { 137, -1, -1, sizeof(::xla::HloInputOutputAliasProto)},
  { 144, -1, -1, sizeof(::xla::HloBufferDonorProto_BufferDonorEntryProto)},
  { 152, -1, -1, sizeof(::xla::HloBufferDonorProto)},
  { 159, -1, -1, sizeof(::xla::CrossProgramPrefetch)},
  { 168, -1, -1, sizeof(::xla::StackFrameIndexProto_FileLocation)},
  { 178, -1, -1, sizeof(::xla::StackFrameIndexProto_StackFrame)},
  { 186, -1, -1, sizeof(::xla::StackFrameIndexProto)},
  { 196, -1, -1, sizeof(::xla::HloModuleProto_ProfileInfo)},
  { 207, -1, -1, sizeof(::xla::HloModuleProto)},
  { 231, -1, -1, sizeof(::xla::LogicalBufferProto_Location)},
  { 240, -1, -1, sizeof(::xla::LogicalBufferProto)},
  { 250, -1, -1, sizeof(::xla::BufferAllocationProto_Assigned)},
  { 259, -1, -1, sizeof(::xla::BufferAllocationProto)},
  { 276, -1, -1, sizeof(::xla::HeapSimulatorTrace_Event)},
  { 287, -1, -1, sizeof(::xla::HeapSimulatorTrace)},
  { 296, -1, -1, sizeof(::xla::HloModuleGroupProto)},
  { 304, -1, -1, sizeof(::xla::BufferAssignmentProto_BufferAlias)},
  { 312, -1, -1, sizeof(::xla::BufferAssignmentProto)},
  { 322, -1, -1, sizeof(::xla::HloProto)},
  { 330, -1, -1, sizeof(::xla::HloSnapshot)},
  { 340, -1, -1, sizeof(::xla::HloModuleMetadataProto)},
  { 351, -1, -1, sizeof(::xla::HloPassMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xla::_HloInstructionProto_SliceDimensions_default_instance_._instance,
  &::xla::_HloInstructionProto_default_instance_._instance,
  &::xla::_HloComputationProto_default_instance_._instance,
  &::xla::_HloScheduleProto_InstructionSequence_default_instance_._instance,
  &::xla::_HloScheduleProto_SequencesEntry_DoNotUse_default_instance_._instance,
  &::xla::_HloScheduleProto_default_instance_._instance,
  &::xla::_HloInputOutputAliasProto_AliasEntryProto_default_instance_._instance,
  &::xla::_HloInputOutputAliasProto_default_instance_._instance,
  &::xla::_HloBufferDonorProto_BufferDonorEntryProto_default_instance_._instance,
  &::xla::_HloBufferDonorProto_default_instance_._instance,
  &::xla::_CrossProgramPrefetch_default_instance_._instance,
  &::xla::_StackFrameIndexProto_FileLocation_default_instance_._instance,
  &::xla::_StackFrameIndexProto_StackFrame_default_instance_._instance,
  &::xla::_StackFrameIndexProto_default_instance_._instance,
  &::xla::_HloModuleProto_ProfileInfo_default_instance_._instance,
  &::xla::_HloModuleProto_default_instance_._instance,
  &::xla::_LogicalBufferProto_Location_default_instance_._instance,
  &::xla::_LogicalBufferProto_default_instance_._instance,
  &::xla::_BufferAllocationProto_Assigned_default_instance_._instance,
  &::xla::_BufferAllocationProto_default_instance_._instance,
  &::xla::_HeapSimulatorTrace_Event_default_instance_._instance,
  &::xla::_HeapSimulatorTrace_default_instance_._instance,
  &::xla::_HloModuleGroupProto_default_instance_._instance,
  &::xla::_BufferAssignmentProto_BufferAlias_default_instance_._instance,
  &::xla::_BufferAssignmentProto_default_instance_._instance,
  &::xla::_HloProto_default_instance_._instance,
  &::xla::_HloSnapshot_default_instance_._instance,
  &::xla::_HloModuleMetadataProto_default_instance_._instance,
  &::xla::_HloPassMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_xla_2fservice_2fhlo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025xla/service/hlo.proto\022\003xla\032\031google/pro"
  "tobuf/any.proto\032\022xla/xla_data.proto\"\320\027\n\023"
  "HloInstructionProto\022\014\n\004name\030\001 \001(\t\022\016\n\006opc"
  "ode\030\002 \001(\t\022\036\n\005shape\030\003 \001(\0132\017.xla.ShapeProt"
  "o\022!\n\010metadata\030\007 \001(\0132\017.xla.OpMetadata\022\"\n\007"
  "literal\030\010 \001(\0132\021.xla.LiteralProto\022\030\n\020para"
  "meter_number\030\t \001(\003\022\023\n\013fusion_kind\030\013 \001(\t\022"
  "\023\n\013tuple_index\030\r \001(\003\022\022\n\ndimensions\030\016 \003(\003"
  "\022\033\n\006window\030\017 \001(\0132\013.xla.Window\022G\n\035convolu"
  "tion_dimension_numbers\030\020 \001(\0132 .xla.Convo"
  "lutionDimensionNumbers\022\033\n\023feature_group_"
  "count\0302 \001(\003\022\031\n\021batch_group_count\030: \001(\003\022B"
  "\n\020slice_dimensions\030\021 \003(\0132(.xla.HloInstru"
  "ctionProto.SliceDimensions\022\025\n\rexponent_b"
  "its\030\022 \001(\005\022\025\n\rmantissa_bits\030\023 \001(\005\022\033\n\023dyna"
  "mic_slice_sizes\030\024 \003(\003\022*\n\016padding_config\030"
  "\025 \001(\0132\022.xla.PaddingConfig\022\026\n\016outfeed_con"
  "fig\030\026 \001(\014\022-\n\014distribution\030\027 \001(\0162\027.xla.Ra"
  "ndomDistribution\022\017\n\007epsilon\030\030 \001(\002\022\025\n\rfea"
  "ture_index\030\031 \001(\003\022\022\n\nchannel_id\030\032 \001(\003\022\025\n\r"
  "infeed_config\030\033 \001(\014\022\032\n\022custom_call_targe"
  "t\030\034 \001(\t\022&\n\routfeed_shape\030\035 \001(\0132\017.xla.Sha"
  "peProto\0227\n\025dot_dimension_numbers\030\036 \001(\0132\030"
  ".xla.DotDimensionNumbers\022\036\n\010fft_type\030\037 \001"
  "(\0162\014.xla.FftType\022\022\n\nfft_length\030  \003(\003\022\034\n\024"
  "comparison_direction\030\? \001(\t\022=\n\030gather_dim"
  "ension_numbers\030! \001(\0132\033.xla.GatherDimensi"
  "onNumbers\022\032\n\022gather_slice_sizes\030\" \003(\003\022\n\n"
  "\002id\030# \001(\003\022\023\n\013operand_ids\030$ \003(\003\022\037\n\027contro"
  "l_predecessor_ids\030% \003(\003\022\036\n\026called_comput"
  "ation_ids\030& \003(\003\022!\n\010sharding\030( \001(\0132\017.xla."
  "OpSharding\022\026\n\016backend_config\030+ \001(\014\022-\n\016re"
  "plica_groups\0301 \003(\0132\021.xla.ReplicaGroupB\002\030"
  "\001\022\031\n\rall_reduce_id\030- \001(\003B\002\030\001\022\035\n\025use_glob"
  "al_device_ids\030G \001(\010\022\030\n\020is_host_transfer\030"
  "/ \001(\010\022\021\n\tis_stable\030< \001(\010\022\?\n\031scatter_dime"
  "nsion_numbers\0300 \001(\0132\034.xla.ScatterDimensi"
  "onNumbers\022.\n\020precision_config\0303 \001(\0132\024.xl"
  "a.PrecisionConfig\022.\n\023source_target_pairs"
  "\0304 \003(\0132\021.xla.SourceTarget\022.\n\025domain_entr"
  "y_sharding\0306 \001(\0132\017.xla.OpSharding\022-\n\024dom"
  "ain_exit_sharding\0307 \001(\0132\017.xla.OpSharding"
  "\022\030\n\020constrain_layout\0308 \001(\010\0223\n\032operand_sh"
  "apes_with_layout\0309 \003(\0132\017.xla.ShapeProto\022"
  "=\n\030triangular_solve_options\030; \001(\0132\033.xla."
  "TriangularSolveOptions\022.\n\020cholesky_optio"
  "ns\030> \001(\0132\024.xla.CholeskyOptions\0228\n\025parame"
  "ter_replication\030= \001(\0132\031.xla.ParameterRep"
  "lication\022#\n\033custom_call_has_side_effect\030"
  "A \001(\010\022;\n\027output_operand_aliasing\030J \003(\0132\032"
  ".xla.OutputOperandAliasing\0225\n\024custom_cal"
  "l_schedule\030L \001(\0162\027.xla.CustomCallSchedul"
  "e\022\r\n\005delta\030B \001(\003\022\032\n\022indices_are_sorted\030C"
  " \001(\010\0224\n\023frontend_attributes\030D \001(\0132\027.xla."
  "FrontendAttributes\022\026\n\016unique_indices\030E \001"
  "(\010\022+\n\rrng_algorithm\030F \001(\0162\024.xla.RandomAl"
  "gorithm\022\027\n\017comparison_type\030H \001(\t\022%\n\031is_c"
  "ross_program_prefetch\030I \001(\010B\002\030\001\022&\n\034cross"
  "_program_prefetch_index\030P \001(\005H\000\022&\n\014paddi"
  "ng_type\030K \001(\0162\020.xla.PaddingType\022:\n\027custo"
  "m_call_api_version\030M \001(\0162\031.xla.CustomCal"
  "lApiVersion\022\036\n\026async_execution_thread\030O "
  "\001(\t\022\t\n\001k\030Q \001(\003\022\017\n\007largest\030U \001(\010\022*\n\016stati"
  "stics_viz\030R \001(\0132\022.xla.StatisticsViz\022-\n\014d"
  "ot_sparsity\030V \003(\0132\027.xla.SparsityDescript"
  "or\022>\n\026collective_device_list\030W \001(\0132\036.xla"
  ".CollectiveDeviceListProto\022/\n\016original_v"
  "alue\030X \001(\0132\027.xla.OriginalValueProto\022\024\n\014i"
  "s_composite\030Y \001(\010\032\?\n\017SliceDimensions\022\r\n\005"
  "start\030\001 \001(\003\022\r\n\005limit\030\002 \001(\003\022\016\n\006stride\030\003 \001"
  "(\003B\'\n%optional_cross_program_prefetch_in"
  "dexJ\004\010\n\020\013J\004\010\014\020\rJ\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004\010,\020-J"
  "\004\0105\0206J\004\010.\020/J\004\010)\020*J\004\010*\020+J\004\010@\020AJ\004\010N\020OJ\004\010S\020"
  "TJ\004\010T\020UR\016parameter_nameR\036fused_instructi"
  "ons_computationR\roperand_namesR\031control_"
  "predecessor_namesR\030called_computation_na"
  "mesR\021replica_group_idsR\022custom_call_opaq"
  "ueR\022all_reduce_barrier\"\351\001\n\023HloComputatio"
  "nProto\022\014\n\004name\030\001 \001(\t\022.\n\014instructions\030\002 \003"
  "(\0132\030.xla.HloInstructionProto\022-\n\rprogram_"
  "shape\030\004 \001(\0132\026.xla.ProgramShapeProto\022\n\n\002i"
  "d\030\005 \001(\003\022\017\n\007root_id\030\006 \001(\003\022\035\n\025is_fusion_co"
  "mputation\030\007 \001(\010\022\030\n\020execution_thread\030\010 \001("
  "\tJ\004\010\003\020\004R\troot_name\"\330\001\n\020HloScheduleProto\022"
  "7\n\tsequences\030\001 \003(\0132$.xla.HloScheduleProt"
  "o.SequencesEntry\032.\n\023InstructionSequence\022"
  "\027\n\017instruction_ids\030\001 \003(\003\032[\n\016SequencesEnt"
  "ry\022\013\n\003key\030\001 \001(\003\0228\n\005value\030\002 \001(\0132).xla.Hlo"
  "ScheduleProto.InstructionSequence:\0028\001\"\333\001"
  "\n\030HloInputOutputAliasProto\022>\n\007entries\030\001 "
  "\003(\0132-.xla.HloInputOutputAliasProto.Alias"
  "EntryProto\032\177\n\017AliasEntryProto\022\032\n\022output_"
  "shape_index\030\001 \003(\003\022\030\n\020parameter_number\030\002 "
  "\001(\003\022\035\n\025parameter_shape_index\030\003 \003(\003\022\027\n\004ki"
  "nd\030\004 \001(\0162\t.xla.Kind\"\250\001\n\023HloBufferDonorPr"
  "oto\022\?\n\007entries\030\001 \003(\0132..xla.HloBufferDono"
  "rProto.BufferDonorEntryProto\032P\n\025BufferDo"
  "norEntryProto\022\030\n\020parameter_number\030\001 \001(\003\022"
  "\035\n\025parameter_shape_index\030\002 \003(\003\"H\n\024CrossP"
  "rogramPrefetch\022\021\n\tparameter\030\001 \001(\003\022\r\n\005ind"
  "ex\030\002 \003(\003\022\016\n\006offset\030\003 \001(\003\"\335\002\n\024StackFrameI"
  "ndexProto\022\022\n\nfile_names\030\001 \003(\t\022\026\n\016functio"
  "n_names\030\002 \003(\t\022>\n\016file_locations\030\003 \003(\0132&."
  "xla.StackFrameIndexProto.FileLocation\022:\n"
  "\014stack_frames\030\004 \003(\0132$.xla.StackFrameInde"
  "xProto.StackFrame\032\\\n\014FileLocation\022\024\n\014fil"
  "e_name_id\030\001 \001(\005\022\030\n\020function_name_id\030\002 \001("
  "\005\022\014\n\004line\030\003 \001(\005\022\016\n\006column\030\004 \001(\005\032\?\n\nStack"
  "Frame\022\030\n\020file_location_id\030\001 \001(\005\022\027\n\017paren"
  "t_frame_id\030\002 \001(\005\"\333\010\n\016HloModuleProto\022\014\n\004n"
  "ame\030\001 \001(\t\022\036\n\026entry_computation_name\030\002 \001("
  "\t\022\034\n\024entry_computation_id\030\006 \001(\003\022.\n\014compu"
  "tations\030\003 \003(\0132\030.xla.HloComputationProto\022"
  "2\n\022host_program_shape\030\004 \001(\0132\026.xla.Progra"
  "mShapeProto\022\n\n\002id\030\005 \001(\003\022\'\n\010schedule\030\007 \001("
  "\0132\025.xla.HloScheduleProto\0229\n\022input_output"
  "_alias\030\010 \001(\0132\035.xla.HloInputOutputAliasPr"
  "oto\022.\n\014buffer_donor\030\022 \001(\0132\030.xla.HloBuffe"
  "rDonorProto\022;\n\030cross_program_prefetches\030"
  "\n \003(\0132\031.xla.CrossProgramPrefetch\022\022\n\nis_d"
  "ynamic\030\013 \001(\010\022-\n\024spmd_output_sharding\030\014 \001"
  "(\0132\017.xla.OpSharding\0222\n\031spmd_parameters_s"
  "hardings\030\016 \003(\0132\017.xla.OpSharding\022\"\n\032use_a"
  "uto_spmd_partitioning\030\020 \001(\010\0225\n\014profile_i"
  "nfo\030\r \003(\0132\037.xla.HloModuleProto.ProfileIn"
  "fo\0225\n\021device_assignment\030\017 \001(\0132\032.xla.Devi"
  "ceAssignmentProto\0224\n\021stack_frame_index\030\021"
  " \001(\0132\031.xla.StackFrameIndexProto\0224\n\023front"
  "end_attributes\030\023 \001(\0132\027.xla.FrontendAttri"
  "butes\032\321\001\n\013ProfileInfo\0225\n\014profile_type\030\001 "
  "\001(\0162\037.xla.HloModuleProto.ProfileType\022\030\n\020"
  "relative_speedup\030\002 \001(\001\022*\n\016profile_source"
  "\030\003 \001(\0162\022.xla.ProfileSource\0220\n\021compilatio"
  "n_event\030\004 \001(\0162\025.xla.CompilationEvent\022\023\n\013"
  "fingerprint\030\005 \001(\t\"R\n\013ProfileType\022\013\n\007INVA"
  "LID\020\000\022\010\n\004FLAG\020\001\022\n\n\006FUSION\020\002\022\n\n\006LAYOUT\020\003\022"
  "\007\n\003DOT\020\004\022\013\n\007FLAGNET\020\005J\004\010\t\020\nR\031dynamic_par"
  "ameter_binding\"\320\001\n\022LogicalBufferProto\022\n\n"
  "\002id\030\001 \001(\003\022\014\n\004size\030\002 \001(\003\0224\n\ndefined_at\030\003 "
  "\001(\0132 .xla.LogicalBufferProto.Location\022\r\n"
  "\005color\030\004 \001(\003\032[\n\010Location\022\034\n\020instruction_"
  "name\030\002 \001(\tB\002\030\001\022\026\n\016instruction_id\030\004 \001(\003\022\023"
  "\n\013shape_index\030\003 \003(\003J\004\010\001\020\002\"\370\002\n\025BufferAllo"
  "cationProto\022\r\n\005index\030\001 \001(\003\022\014\n\004size\030\002 \001(\003"
  "\022\027\n\017is_thread_local\030\003 \001(\010\022\020\n\010is_tuple\030\013 "
  "\001(\010\022&\n\036is_entry_computation_parameter\030\005 "
  "\001(\010\022\023\n\013is_constant\030\014 \001(\010\022\030\n\020parameter_nu"
  "mber\030\006 \001(\003\022\035\n\025parameter_shape_index\030\n \003("
  "\003\022\026\n\016maybe_live_out\030\007 \001(\010\022\r\n\005color\030\010 \001(\003"
  "\0225\n\010assigned\030\t \003(\0132#.xla.BufferAllocatio"
  "nProto.Assigned\032C\n\010Assigned\022\031\n\021logical_b"
  "uffer_id\030\001 \001(\003\022\016\n\006offset\030\002 \001(\003\022\014\n\004size\030\003"
  " \001(\003\"\326\002\n\022HeapSimulatorTrace\022-\n\006events\030\001 "
  "\003(\0132\035.xla.HeapSimulatorTrace.Event\022\037\n\027wh"
  "ole_module_simulation\030\002 \001(\010\022\037\n\027buffer_al"
  "location_index\030\003 \001(\003\032\316\001\n\005Event\0220\n\004kind\030\001"
  " \001(\0162\".xla.HeapSimulatorTrace.Event.Kind"
  "\022\021\n\tbuffer_id\030\002 \001(\003\022\030\n\020computation_name\030"
  "\003 \001(\t\022\030\n\020instruction_name\030\004 \001(\t\022\037\n\027share"
  "_with_canonical_id\030\005 \001(\003\"+\n\004Kind\022\t\n\005ALLO"
  "C\020\000\022\010\n\004FREE\020\001\022\016\n\nSHARE_WITH\020\002\"M\n\023HloModu"
  "leGroupProto\022\014\n\004name\030\001 \001(\t\022(\n\013hlo_module"
  "s\030\002 \003(\0132\023.xla.HloModuleProto\"\326\002\n\025BufferA"
  "ssignmentProto\0220\n\017logical_buffers\030\001 \003(\0132"
  "\027.xla.LogicalBufferProto\022>\n\016buffer_alias"
  "es\030\002 \003(\0132&.xla.BufferAssignmentProto.Buf"
  "ferAlias\0226\n\022buffer_allocations\030\003 \003(\0132\032.x"
  "la.BufferAllocationProto\0226\n\025heap_simulat"
  "or_traces\030\004 \003(\0132\027.xla.HeapSimulatorTrace"
  "\032[\n\013BufferAlias\022\030\n\020source_buffer_id\030\001 \001("
  "\003\0222\n\010location\030\002 \001(\0132 .xla.LogicalBufferP"
  "roto.Location\"~\n\010HloProto\022\'\n\nhlo_module\030"
  "\001 \001(\0132\023.xla.HloModuleProto\0225\n\021buffer_ass"
  "ignment\030\003 \001(\0132\032.xla.BufferAssignmentProt"
  "oJ\004\010\002\020\003R\014hlo_ordering\"\216\001\n\013HloSnapshot\022\032\n"
  "\003hlo\030\001 \001(\0132\r.xla.HloProto\022$\n\targuments\030\002"
  " \003(\0132\021.xla.LiteralProto\022!\n\006result\030\003 \001(\0132"
  "\021.xla.LiteralProto\022\032\n\022execution_platform"
  "\030\004 \001(\t\"\271\001\n\026HloModuleMetadataProto\022\033\n\023can"
  "onical_module_id\030\001 \001(\003\022\031\n\021module_group_n"
  "ame\030\002 \001(\t\022\032\n\022original_module_id\030\003 \001(\003\022\036\n"
  "\026partitioned_module_ids\030\004 \003(\003\022+\n\rpass_me"
  "tadata\030\005 \003(\0132\024.xla.HloPassMetadata\"\231\002\n\017H"
  "loPassMetadata\022\017\n\007pass_id\030\001 \001(\003\022\021\n\tpass_"
  "name\030\002 \001(\t\022\025\n\rpipeline_name\030\003 \001(\t\022\026\n\016dum"
  "p_filenames\030\004 \003(\t\022\026\n\016module_changed\030\005 \001("
  "\010\022\021\n\tmodule_id\030\006 \001(\003\022\037\n\027module_group_mod"
  "ule_ids\030\007 \003(\003\022\034\n\024start_timestamp_usec\030\010 "
  "\001(\003\022\032\n\022end_timestamp_usec\030\t \001(\003\022-\n\017custo"
  "m_metadata\030\n \001(\0132\024.google.protobuf.Any*S"
  "\n\022CustomCallSchedule\022\021\n\rSCHEDULE_NONE\020\000\022"
  "\023\n\017SCHEDULE_LATEST\020\001\022\025\n\021SCHEDULE_EARLIES"
  "T\020\002*\264\001\n\024CustomCallApiVersion\022\033\n\027API_VERS"
  "ION_UNSPECIFIED\020\000\022\030\n\024API_VERSION_ORIGINA"
  "L\020\001\022 \n\034API_VERSION_STATUS_RETURNING\020\002\022(\n"
  "$API_VERSION_STATUS_RETURNING_UNIFIED\020\003\022"
  "\031\n\025API_VERSION_TYPED_FFI\020\004*:\n\004Kind\022\023\n\017UN"
  "DEFINED_ALIAS\020\000\022\r\n\tMAY_ALIAS\020\001\022\016\n\nMUST_A"
  "LIAS\020\002B\003\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_xla_2fservice_2fhlo_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_xla_2fxla_5fdata_2eproto,
};
static ::_pbi::once_flag descriptor_table_xla_2fservice_2fhlo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xla_2fservice_2fhlo_2eproto = {
    false, false, 7939, descriptor_table_protodef_xla_2fservice_2fhlo_2eproto,
    "xla/service/hlo.proto",
    &descriptor_table_xla_2fservice_2fhlo_2eproto_once, descriptor_table_xla_2fservice_2fhlo_2eproto_deps, 2, 29,
    schemas, file_default_instances, TableStruct_xla_2fservice_2fhlo_2eproto::offsets,
    file_level_metadata_xla_2fservice_2fhlo_2eproto, file_level_enum_descriptors_xla_2fservice_2fhlo_2eproto,
    file_level_service_descriptors_xla_2fservice_2fhlo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xla_2fservice_2fhlo_2eproto_getter() {
  return &descriptor_table_xla_2fservice_2fhlo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xla_2fservice_2fhlo_2eproto(&descriptor_table_xla_2fservice_2fhlo_2eproto);
namespace xla {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HloModuleProto_ProfileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fservice_2fhlo_2eproto);
  return file_level_enum_descriptors_xla_2fservice_2fhlo_2eproto[0];
}
bool HloModuleProto_ProfileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HloModuleProto_ProfileType HloModuleProto::INVALID;
constexpr HloModuleProto_ProfileType HloModuleProto::FLAG;
constexpr HloModuleProto_ProfileType HloModuleProto::FUSION;
constexpr HloModuleProto_ProfileType HloModuleProto::LAYOUT;
constexpr HloModuleProto_ProfileType HloModuleProto::DOT;
constexpr HloModuleProto_ProfileType HloModuleProto::FLAGNET;
constexpr HloModuleProto_ProfileType HloModuleProto::ProfileType_MIN;
constexpr HloModuleProto_ProfileType HloModuleProto::ProfileType_MAX;
constexpr int HloModuleProto::ProfileType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeapSimulatorTrace_Event_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fservice_2fhlo_2eproto);
  return file_level_enum_descriptors_xla_2fservice_2fhlo_2eproto[1];
}
bool HeapSimulatorTrace_Event_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HeapSimulatorTrace_Event_Kind HeapSimulatorTrace_Event::ALLOC;
constexpr HeapSimulatorTrace_Event_Kind HeapSimulatorTrace_Event::FREE;
constexpr HeapSimulatorTrace_Event_Kind HeapSimulatorTrace_Event::SHARE_WITH;
constexpr HeapSimulatorTrace_Event_Kind HeapSimulatorTrace_Event::Kind_MIN;
constexpr HeapSimulatorTrace_Event_Kind HeapSimulatorTrace_Event::Kind_MAX;
constexpr int HeapSimulatorTrace_Event::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CustomCallSchedule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fservice_2fhlo_2eproto);
  return file_level_enum_descriptors_xla_2fservice_2fhlo_2eproto[2];
}
bool CustomCallSchedule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CustomCallApiVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fservice_2fhlo_2eproto);
  return file_level_enum_descriptors_xla_2fservice_2fhlo_2eproto[3];
}
bool CustomCallApiVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fservice_2fhlo_2eproto);
  return file_level_enum_descriptors_xla_2fservice_2fhlo_2eproto[4];
}
bool Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HloInstructionProto_SliceDimensions::_Internal {
 public:
};

HloInstructionProto_SliceDimensions::HloInstructionProto_SliceDimensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloInstructionProto.SliceDimensions)
}
HloInstructionProto_SliceDimensions::HloInstructionProto_SliceDimensions(const HloInstructionProto_SliceDimensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloInstructionProto_SliceDimensions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.stride_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stride_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.stride_));
  // @@protoc_insertion_point(copy_constructor:xla.HloInstructionProto.SliceDimensions)
}

inline void HloInstructionProto_SliceDimensions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){int64_t{0}}
    , decltype(_impl_.limit_){int64_t{0}}
    , decltype(_impl_.stride_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloInstructionProto_SliceDimensions::~HloInstructionProto_SliceDimensions() {
  // @@protoc_insertion_point(destructor:xla.HloInstructionProto.SliceDimensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloInstructionProto_SliceDimensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HloInstructionProto_SliceDimensions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloInstructionProto_SliceDimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloInstructionProto.SliceDimensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stride_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.stride_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloInstructionProto_SliceDimensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stride = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloInstructionProto_SliceDimensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloInstructionProto.SliceDimensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start(), target);
  }

  // int64 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit(), target);
  }

  // int64 stride = 3;
  if (this->_internal_stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloInstructionProto.SliceDimensions)
  return target;
}

size_t HloInstructionProto_SliceDimensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloInstructionProto.SliceDimensions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start());
  }

  // int64 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_limit());
  }

  // int64 stride = 3;
  if (this->_internal_stride() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stride());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloInstructionProto_SliceDimensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloInstructionProto_SliceDimensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloInstructionProto_SliceDimensions::GetClassData() const { return &_class_data_; }


void HloInstructionProto_SliceDimensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloInstructionProto_SliceDimensions*>(&to_msg);
  auto& from = static_cast<const HloInstructionProto_SliceDimensions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloInstructionProto.SliceDimensions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_stride() != 0) {
    _this->_internal_set_stride(from._internal_stride());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloInstructionProto_SliceDimensions::CopyFrom(const HloInstructionProto_SliceDimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloInstructionProto.SliceDimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloInstructionProto_SliceDimensions::IsInitialized() const {
  return true;
}

void HloInstructionProto_SliceDimensions::InternalSwap(HloInstructionProto_SliceDimensions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloInstructionProto_SliceDimensions, _impl_.stride_)
      + sizeof(HloInstructionProto_SliceDimensions::_impl_.stride_)
      - PROTOBUF_FIELD_OFFSET(HloInstructionProto_SliceDimensions, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloInstructionProto_SliceDimensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[0]);
}

// ===================================================================

class HloInstructionProto::_Internal {
 public:
  static const ::xla::ShapeProto& shape(const HloInstructionProto* msg);
  static const ::xla::OpMetadata& metadata(const HloInstructionProto* msg);
  static const ::xla::LiteralProto& literal(const HloInstructionProto* msg);
  static const ::xla::Window& window(const HloInstructionProto* msg);
  static const ::xla::ConvolutionDimensionNumbers& convolution_dimension_numbers(const HloInstructionProto* msg);
  static const ::xla::PaddingConfig& padding_config(const HloInstructionProto* msg);
  static const ::xla::ShapeProto& outfeed_shape(const HloInstructionProto* msg);
  static const ::xla::DotDimensionNumbers& dot_dimension_numbers(const HloInstructionProto* msg);
  static const ::xla::GatherDimensionNumbers& gather_dimension_numbers(const HloInstructionProto* msg);
  static const ::xla::OpSharding& sharding(const HloInstructionProto* msg);
  static const ::xla::ScatterDimensionNumbers& scatter_dimension_numbers(const HloInstructionProto* msg);
  static const ::xla::PrecisionConfig& precision_config(const HloInstructionProto* msg);
  static const ::xla::OpSharding& domain_entry_sharding(const HloInstructionProto* msg);
  static const ::xla::OpSharding& domain_exit_sharding(const HloInstructionProto* msg);
  static const ::xla::TriangularSolveOptions& triangular_solve_options(const HloInstructionProto* msg);
  static const ::xla::CholeskyOptions& cholesky_options(const HloInstructionProto* msg);
  static const ::xla::ParameterReplication& parameter_replication(const HloInstructionProto* msg);
  static const ::xla::FrontendAttributes& frontend_attributes(const HloInstructionProto* msg);
  static const ::xla::StatisticsViz& statistics_viz(const HloInstructionProto* msg);
  static const ::xla::CollectiveDeviceListProto& collective_device_list(const HloInstructionProto* msg);
  static const ::xla::OriginalValueProto& original_value(const HloInstructionProto* msg);
};

const ::xla::ShapeProto&
HloInstructionProto::_Internal::shape(const HloInstructionProto* msg) {
  return *msg->_impl_.shape_;
}
const ::xla::OpMetadata&
HloInstructionProto::_Internal::metadata(const HloInstructionProto* msg) {
  return *msg->_impl_.metadata_;
}
const ::xla::LiteralProto&
HloInstructionProto::_Internal::literal(const HloInstructionProto* msg) {
  return *msg->_impl_.literal_;
}
const ::xla::Window&
HloInstructionProto::_Internal::window(const HloInstructionProto* msg) {
  return *msg->_impl_.window_;
}
const ::xla::ConvolutionDimensionNumbers&
HloInstructionProto::_Internal::convolution_dimension_numbers(const HloInstructionProto* msg) {
  return *msg->_impl_.convolution_dimension_numbers_;
}
const ::xla::PaddingConfig&
HloInstructionProto::_Internal::padding_config(const HloInstructionProto* msg) {
  return *msg->_impl_.padding_config_;
}
const ::xla::ShapeProto&
HloInstructionProto::_Internal::outfeed_shape(const HloInstructionProto* msg) {
  return *msg->_impl_.outfeed_shape_;
}
const ::xla::DotDimensionNumbers&
HloInstructionProto::_Internal::dot_dimension_numbers(const HloInstructionProto* msg) {
  return *msg->_impl_.dot_dimension_numbers_;
}
const ::xla::GatherDimensionNumbers&
HloInstructionProto::_Internal::gather_dimension_numbers(const HloInstructionProto* msg) {
  return *msg->_impl_.gather_dimension_numbers_;
}
const ::xla::OpSharding&
HloInstructionProto::_Internal::sharding(const HloInstructionProto* msg) {
  return *msg->_impl_.sharding_;
}
const ::xla::ScatterDimensionNumbers&
HloInstructionProto::_Internal::scatter_dimension_numbers(const HloInstructionProto* msg) {
  return *msg->_impl_.scatter_dimension_numbers_;
}
const ::xla::PrecisionConfig&
HloInstructionProto::_Internal::precision_config(const HloInstructionProto* msg) {
  return *msg->_impl_.precision_config_;
}
const ::xla::OpSharding&
HloInstructionProto::_Internal::domain_entry_sharding(const HloInstructionProto* msg) {
  return *msg->_impl_.domain_entry_sharding_;
}
const ::xla::OpSharding&
HloInstructionProto::_Internal::domain_exit_sharding(const HloInstructionProto* msg) {
  return *msg->_impl_.domain_exit_sharding_;
}
const ::xla::TriangularSolveOptions&
HloInstructionProto::_Internal::triangular_solve_options(const HloInstructionProto* msg) {
  return *msg->_impl_.triangular_solve_options_;
}
const ::xla::CholeskyOptions&
HloInstructionProto::_Internal::cholesky_options(const HloInstructionProto* msg) {
  return *msg->_impl_.cholesky_options_;
}
const ::xla::ParameterReplication&
HloInstructionProto::_Internal::parameter_replication(const HloInstructionProto* msg) {
  return *msg->_impl_.parameter_replication_;
}
const ::xla::FrontendAttributes&
HloInstructionProto::_Internal::frontend_attributes(const HloInstructionProto* msg) {
  return *msg->_impl_.frontend_attributes_;
}
const ::xla::StatisticsViz&
HloInstructionProto::_Internal::statistics_viz(const HloInstructionProto* msg) {
  return *msg->_impl_.statistics_viz_;
}
const ::xla::CollectiveDeviceListProto&
HloInstructionProto::_Internal::collective_device_list(const HloInstructionProto* msg) {
  return *msg->_impl_.collective_device_list_;
}
const ::xla::OriginalValueProto&
HloInstructionProto::_Internal::original_value(const HloInstructionProto* msg) {
  return *msg->_impl_.original_value_;
}
void HloInstructionProto::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
void HloInstructionProto::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void HloInstructionProto::clear_literal() {
  if (GetArenaForAllocation() == nullptr && _impl_.literal_ != nullptr) {
    delete _impl_.literal_;
  }
  _impl_.literal_ = nullptr;
}
void HloInstructionProto::clear_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_ != nullptr) {
    delete _impl_.window_;
  }
  _impl_.window_ = nullptr;
}
void HloInstructionProto::clear_convolution_dimension_numbers() {
  if (GetArenaForAllocation() == nullptr && _impl_.convolution_dimension_numbers_ != nullptr) {
    delete _impl_.convolution_dimension_numbers_;
  }
  _impl_.convolution_dimension_numbers_ = nullptr;
}
void HloInstructionProto::clear_padding_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.padding_config_ != nullptr) {
    delete _impl_.padding_config_;
  }
  _impl_.padding_config_ = nullptr;
}
void HloInstructionProto::clear_outfeed_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.outfeed_shape_ != nullptr) {
    delete _impl_.outfeed_shape_;
  }
  _impl_.outfeed_shape_ = nullptr;
}
void HloInstructionProto::clear_dot_dimension_numbers() {
  if (GetArenaForAllocation() == nullptr && _impl_.dot_dimension_numbers_ != nullptr) {
    delete _impl_.dot_dimension_numbers_;
  }
  _impl_.dot_dimension_numbers_ = nullptr;
}
void HloInstructionProto::clear_gather_dimension_numbers() {
  if (GetArenaForAllocation() == nullptr && _impl_.gather_dimension_numbers_ != nullptr) {
    delete _impl_.gather_dimension_numbers_;
  }
  _impl_.gather_dimension_numbers_ = nullptr;
}
void HloInstructionProto::clear_sharding() {
  if (GetArenaForAllocation() == nullptr && _impl_.sharding_ != nullptr) {
    delete _impl_.sharding_;
  }
  _impl_.sharding_ = nullptr;
}
void HloInstructionProto::clear_replica_groups() {
  _impl_.replica_groups_.Clear();
}
void HloInstructionProto::clear_scatter_dimension_numbers() {
  if (GetArenaForAllocation() == nullptr && _impl_.scatter_dimension_numbers_ != nullptr) {
    delete _impl_.scatter_dimension_numbers_;
  }
  _impl_.scatter_dimension_numbers_ = nullptr;
}
void HloInstructionProto::clear_precision_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.precision_config_ != nullptr) {
    delete _impl_.precision_config_;
  }
  _impl_.precision_config_ = nullptr;
}
void HloInstructionProto::clear_source_target_pairs() {
  _impl_.source_target_pairs_.Clear();
}
void HloInstructionProto::clear_domain_entry_sharding() {
  if (GetArenaForAllocation() == nullptr && _impl_.domain_entry_sharding_ != nullptr) {
    delete _impl_.domain_entry_sharding_;
  }
  _impl_.domain_entry_sharding_ = nullptr;
}
void HloInstructionProto::clear_domain_exit_sharding() {
  if (GetArenaForAllocation() == nullptr && _impl_.domain_exit_sharding_ != nullptr) {
    delete _impl_.domain_exit_sharding_;
  }
  _impl_.domain_exit_sharding_ = nullptr;
}
void HloInstructionProto::clear_operand_shapes_with_layout() {
  _impl_.operand_shapes_with_layout_.Clear();
}
void HloInstructionProto::clear_triangular_solve_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.triangular_solve_options_ != nullptr) {
    delete _impl_.triangular_solve_options_;
  }
  _impl_.triangular_solve_options_ = nullptr;
}
void HloInstructionProto::clear_cholesky_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.cholesky_options_ != nullptr) {
    delete _impl_.cholesky_options_;
  }
  _impl_.cholesky_options_ = nullptr;
}
void HloInstructionProto::clear_parameter_replication() {
  if (GetArenaForAllocation() == nullptr && _impl_.parameter_replication_ != nullptr) {
    delete _impl_.parameter_replication_;
  }
  _impl_.parameter_replication_ = nullptr;
}
void HloInstructionProto::clear_output_operand_aliasing() {
  _impl_.output_operand_aliasing_.Clear();
}
void HloInstructionProto::clear_frontend_attributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.frontend_attributes_ != nullptr) {
    delete _impl_.frontend_attributes_;
  }
  _impl_.frontend_attributes_ = nullptr;
}
void HloInstructionProto::clear_statistics_viz() {
  if (GetArenaForAllocation() == nullptr && _impl_.statistics_viz_ != nullptr) {
    delete _impl_.statistics_viz_;
  }
  _impl_.statistics_viz_ = nullptr;
}
void HloInstructionProto::clear_dot_sparsity() {
  _impl_.dot_sparsity_.Clear();
}
void HloInstructionProto::clear_collective_device_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.collective_device_list_ != nullptr) {
    delete _impl_.collective_device_list_;
  }
  _impl_.collective_device_list_ = nullptr;
}
void HloInstructionProto::clear_original_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.original_value_ != nullptr) {
    delete _impl_.original_value_;
  }
  _impl_.original_value_ = nullptr;
}
HloInstructionProto::HloInstructionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloInstructionProto)
}
HloInstructionProto::HloInstructionProto(const HloInstructionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloInstructionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.slice_dimensions_){from._impl_.slice_dimensions_}
    , decltype(_impl_.dynamic_slice_sizes_){from._impl_.dynamic_slice_sizes_}
    , /*decltype(_impl_._dynamic_slice_sizes_cached_byte_size_)*/{0}
    , decltype(_impl_.fft_length_){from._impl_.fft_length_}
    , /*decltype(_impl_._fft_length_cached_byte_size_)*/{0}
    , decltype(_impl_.gather_slice_sizes_){from._impl_.gather_slice_sizes_}
    , /*decltype(_impl_._gather_slice_sizes_cached_byte_size_)*/{0}
    , decltype(_impl_.operand_ids_){from._impl_.operand_ids_}
    , /*decltype(_impl_._operand_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.control_predecessor_ids_){from._impl_.control_predecessor_ids_}
    , /*decltype(_impl_._control_predecessor_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.called_computation_ids_){from._impl_.called_computation_ids_}
    , /*decltype(_impl_._called_computation_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.replica_groups_){from._impl_.replica_groups_}
    , decltype(_impl_.source_target_pairs_){from._impl_.source_target_pairs_}
    , decltype(_impl_.operand_shapes_with_layout_){from._impl_.operand_shapes_with_layout_}
    , decltype(_impl_.output_operand_aliasing_){from._impl_.output_operand_aliasing_}
    , decltype(_impl_.dot_sparsity_){from._impl_.dot_sparsity_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.opcode_){}
    , decltype(_impl_.fusion_kind_){}
    , decltype(_impl_.outfeed_config_){}
    , decltype(_impl_.infeed_config_){}
    , decltype(_impl_.custom_call_target_){}
    , decltype(_impl_.backend_config_){}
    , decltype(_impl_.comparison_direction_){}
    , decltype(_impl_.comparison_type_){}
    , decltype(_impl_.async_execution_thread_){}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.literal_){nullptr}
    , decltype(_impl_.window_){nullptr}
    , decltype(_impl_.convolution_dimension_numbers_){nullptr}
    , decltype(_impl_.padding_config_){nullptr}
    , decltype(_impl_.outfeed_shape_){nullptr}
    , decltype(_impl_.dot_dimension_numbers_){nullptr}
    , decltype(_impl_.gather_dimension_numbers_){nullptr}
    , decltype(_impl_.sharding_){nullptr}
    , decltype(_impl_.scatter_dimension_numbers_){nullptr}
    , decltype(_impl_.precision_config_){nullptr}
    , decltype(_impl_.domain_entry_sharding_){nullptr}
    , decltype(_impl_.domain_exit_sharding_){nullptr}
    , decltype(_impl_.triangular_solve_options_){nullptr}
    , decltype(_impl_.parameter_replication_){nullptr}
    , decltype(_impl_.cholesky_options_){nullptr}
    , decltype(_impl_.frontend_attributes_){nullptr}
    , decltype(_impl_.statistics_viz_){nullptr}
    , decltype(_impl_.collective_device_list_){nullptr}
    , decltype(_impl_.original_value_){nullptr}
    , decltype(_impl_.parameter_number_){}
    , decltype(_impl_.tuple_index_){}
    , decltype(_impl_.exponent_bits_){}
    , decltype(_impl_.mantissa_bits_){}
    , decltype(_impl_.distribution_){}
    , decltype(_impl_.epsilon_){}
    , decltype(_impl_.feature_index_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.all_reduce_id_){}
    , decltype(_impl_.feature_group_count_){}
    , decltype(_impl_.fft_type_){}
    , decltype(_impl_.use_global_device_ids_){}
    , decltype(_impl_.is_host_transfer_){}
    , decltype(_impl_.is_stable_){}
    , decltype(_impl_.constrain_layout_){}
    , decltype(_impl_.batch_group_count_){}
    , decltype(_impl_.delta_){}
    , decltype(_impl_.custom_call_has_side_effect_){}
    , decltype(_impl_.indices_are_sorted_){}
    , decltype(_impl_.unique_indices_){}
    , decltype(_impl_.is_cross_program_prefetch_){}
    , decltype(_impl_.rng_algorithm_){}
    , decltype(_impl_.padding_type_){}
    , decltype(_impl_.custom_call_schedule_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.custom_call_api_version_){}
    , decltype(_impl_.largest_){}
    , decltype(_impl_.is_composite_){}
    , decltype(_impl_.optional_cross_program_prefetch_index_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.opcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opcode().empty()) {
    _this->_impl_.opcode_.Set(from._internal_opcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fusion_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fusion_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fusion_kind().empty()) {
    _this->_impl_.fusion_kind_.Set(from._internal_fusion_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outfeed_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outfeed_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outfeed_config().empty()) {
    _this->_impl_.outfeed_config_.Set(from._internal_outfeed_config(), 
      _this->GetArenaForAllocation());
  }
  _impl_.infeed_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.infeed_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_infeed_config().empty()) {
    _this->_impl_.infeed_config_.Set(from._internal_infeed_config(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_call_target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_call_target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_custom_call_target().empty()) {
    _this->_impl_.custom_call_target_.Set(from._internal_custom_call_target(), 
      _this->GetArenaForAllocation());
  }
  _impl_.backend_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backend_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_backend_config().empty()) {
    _this->_impl_.backend_config_.Set(from._internal_backend_config(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comparison_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comparison_direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comparison_direction().empty()) {
    _this->_impl_.comparison_direction_.Set(from._internal_comparison_direction(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comparison_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comparison_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comparison_type().empty()) {
    _this->_impl_.comparison_type_.Set(from._internal_comparison_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.async_execution_thread_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.async_execution_thread_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_async_execution_thread().empty()) {
    _this->_impl_.async_execution_thread_.Set(from._internal_async_execution_thread(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::xla::ShapeProto(*from._impl_.shape_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::xla::OpMetadata(*from._impl_.metadata_);
  }
  if (from._internal_has_literal()) {
    _this->_impl_.literal_ = new ::xla::LiteralProto(*from._impl_.literal_);
  }
  if (from._internal_has_window()) {
    _this->_impl_.window_ = new ::xla::Window(*from._impl_.window_);
  }
  if (from._internal_has_convolution_dimension_numbers()) {
    _this->_impl_.convolution_dimension_numbers_ = new ::xla::ConvolutionDimensionNumbers(*from._impl_.convolution_dimension_numbers_);
  }
  if (from._internal_has_padding_config()) {
    _this->_impl_.padding_config_ = new ::xla::PaddingConfig(*from._impl_.padding_config_);
  }
  if (from._internal_has_outfeed_shape()) {
    _this->_impl_.outfeed_shape_ = new ::xla::ShapeProto(*from._impl_.outfeed_shape_);
  }
  if (from._internal_has_dot_dimension_numbers()) {
    _this->_impl_.dot_dimension_numbers_ = new ::xla::DotDimensionNumbers(*from._impl_.dot_dimension_numbers_);
  }
  if (from._internal_has_gather_dimension_numbers()) {
    _this->_impl_.gather_dimension_numbers_ = new ::xla::GatherDimensionNumbers(*from._impl_.gather_dimension_numbers_);
  }
  if (from._internal_has_sharding()) {
    _this->_impl_.sharding_ = new ::xla::OpSharding(*from._impl_.sharding_);
  }
  if (from._internal_has_scatter_dimension_numbers()) {
    _this->_impl_.scatter_dimension_numbers_ = new ::xla::ScatterDimensionNumbers(*from._impl_.scatter_dimension_numbers_);
  }
  if (from._internal_has_precision_config()) {
    _this->_impl_.precision_config_ = new ::xla::PrecisionConfig(*from._impl_.precision_config_);
  }
  if (from._internal_has_domain_entry_sharding()) {
    _this->_impl_.domain_entry_sharding_ = new ::xla::OpSharding(*from._impl_.domain_entry_sharding_);
  }
  if (from._internal_has_domain_exit_sharding()) {
    _this->_impl_.domain_exit_sharding_ = new ::xla::OpSharding(*from._impl_.domain_exit_sharding_);
  }
  if (from._internal_has_triangular_solve_options()) {
    _this->_impl_.triangular_solve_options_ = new ::xla::TriangularSolveOptions(*from._impl_.triangular_solve_options_);
  }
  if (from._internal_has_parameter_replication()) {
    _this->_impl_.parameter_replication_ = new ::xla::ParameterReplication(*from._impl_.parameter_replication_);
  }
  if (from._internal_has_cholesky_options()) {
    _this->_impl_.cholesky_options_ = new ::xla::CholeskyOptions(*from._impl_.cholesky_options_);
  }
  if (from._internal_has_frontend_attributes()) {
    _this->_impl_.frontend_attributes_ = new ::xla::FrontendAttributes(*from._impl_.frontend_attributes_);
  }
  if (from._internal_has_statistics_viz()) {
    _this->_impl_.statistics_viz_ = new ::xla::StatisticsViz(*from._impl_.statistics_viz_);
  }
  if (from._internal_has_collective_device_list()) {
    _this->_impl_.collective_device_list_ = new ::xla::CollectiveDeviceListProto(*from._impl_.collective_device_list_);
  }
  if (from._internal_has_original_value()) {
    _this->_impl_.original_value_ = new ::xla::OriginalValueProto(*from._impl_.original_value_);
  }
  ::memcpy(&_impl_.parameter_number_, &from._impl_.parameter_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_composite_) -
    reinterpret_cast<char*>(&_impl_.parameter_number_)) + sizeof(_impl_.is_composite_));
  clear_has_optional_cross_program_prefetch_index();
  switch (from.optional_cross_program_prefetch_index_case()) {
    case kCrossProgramPrefetchIndex: {
      _this->_internal_set_cross_program_prefetch_index(from._internal_cross_program_prefetch_index());
      break;
    }
    case OPTIONAL_CROSS_PROGRAM_PREFETCH_INDEX_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:xla.HloInstructionProto)
}

inline void HloInstructionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.slice_dimensions_){arena}
    , decltype(_impl_.dynamic_slice_sizes_){arena}
    , /*decltype(_impl_._dynamic_slice_sizes_cached_byte_size_)*/{0}
    , decltype(_impl_.fft_length_){arena}
    , /*decltype(_impl_._fft_length_cached_byte_size_)*/{0}
    , decltype(_impl_.gather_slice_sizes_){arena}
    , /*decltype(_impl_._gather_slice_sizes_cached_byte_size_)*/{0}
    , decltype(_impl_.operand_ids_){arena}
    , /*decltype(_impl_._operand_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.control_predecessor_ids_){arena}
    , /*decltype(_impl_._control_predecessor_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.called_computation_ids_){arena}
    , /*decltype(_impl_._called_computation_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.replica_groups_){arena}
    , decltype(_impl_.source_target_pairs_){arena}
    , decltype(_impl_.operand_shapes_with_layout_){arena}
    , decltype(_impl_.output_operand_aliasing_){arena}
    , decltype(_impl_.dot_sparsity_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.opcode_){}
    , decltype(_impl_.fusion_kind_){}
    , decltype(_impl_.outfeed_config_){}
    , decltype(_impl_.infeed_config_){}
    , decltype(_impl_.custom_call_target_){}
    , decltype(_impl_.backend_config_){}
    , decltype(_impl_.comparison_direction_){}
    , decltype(_impl_.comparison_type_){}
    , decltype(_impl_.async_execution_thread_){}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.literal_){nullptr}
    , decltype(_impl_.window_){nullptr}
    , decltype(_impl_.convolution_dimension_numbers_){nullptr}
    , decltype(_impl_.padding_config_){nullptr}
    , decltype(_impl_.outfeed_shape_){nullptr}
    , decltype(_impl_.dot_dimension_numbers_){nullptr}
    , decltype(_impl_.gather_dimension_numbers_){nullptr}
    , decltype(_impl_.sharding_){nullptr}
    , decltype(_impl_.scatter_dimension_numbers_){nullptr}
    , decltype(_impl_.precision_config_){nullptr}
    , decltype(_impl_.domain_entry_sharding_){nullptr}
    , decltype(_impl_.domain_exit_sharding_){nullptr}
    , decltype(_impl_.triangular_solve_options_){nullptr}
    , decltype(_impl_.parameter_replication_){nullptr}
    , decltype(_impl_.cholesky_options_){nullptr}
    , decltype(_impl_.frontend_attributes_){nullptr}
    , decltype(_impl_.statistics_viz_){nullptr}
    , decltype(_impl_.collective_device_list_){nullptr}
    , decltype(_impl_.original_value_){nullptr}
    , decltype(_impl_.parameter_number_){int64_t{0}}
    , decltype(_impl_.tuple_index_){int64_t{0}}
    , decltype(_impl_.exponent_bits_){0}
    , decltype(_impl_.mantissa_bits_){0}
    , decltype(_impl_.distribution_){0}
    , decltype(_impl_.epsilon_){0}
    , decltype(_impl_.feature_index_){int64_t{0}}
    , decltype(_impl_.channel_id_){int64_t{0}}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.all_reduce_id_){int64_t{0}}
    , decltype(_impl_.feature_group_count_){int64_t{0}}
    , decltype(_impl_.fft_type_){0}
    , decltype(_impl_.use_global_device_ids_){false}
    , decltype(_impl_.is_host_transfer_){false}
    , decltype(_impl_.is_stable_){false}
    , decltype(_impl_.constrain_layout_){false}
    , decltype(_impl_.batch_group_count_){int64_t{0}}
    , decltype(_impl_.delta_){int64_t{0}}
    , decltype(_impl_.custom_call_has_side_effect_){false}
    , decltype(_impl_.indices_are_sorted_){false}
    , decltype(_impl_.unique_indices_){false}
    , decltype(_impl_.is_cross_program_prefetch_){false}
    , decltype(_impl_.rng_algorithm_){0}
    , decltype(_impl_.padding_type_){0}
    , decltype(_impl_.custom_call_schedule_){0}
    , decltype(_impl_.k_){int64_t{0}}
    , decltype(_impl_.custom_call_api_version_){0}
    , decltype(_impl_.largest_){false}
    , decltype(_impl_.is_composite_){false}
    , decltype(_impl_.optional_cross_program_prefetch_index_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.opcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fusion_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fusion_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outfeed_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outfeed_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.infeed_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.infeed_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_call_target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_call_target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.backend_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backend_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comparison_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comparison_direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comparison_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comparison_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.async_execution_thread_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.async_execution_thread_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_optional_cross_program_prefetch_index();
}

HloInstructionProto::~HloInstructionProto() {
  // @@protoc_insertion_point(destructor:xla.HloInstructionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloInstructionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedField();
  _impl_.slice_dimensions_.~RepeatedPtrField();
  _impl_.dynamic_slice_sizes_.~RepeatedField();
  _impl_.fft_length_.~RepeatedField();
  _impl_.gather_slice_sizes_.~RepeatedField();
  _impl_.operand_ids_.~RepeatedField();
  _impl_.control_predecessor_ids_.~RepeatedField();
  _impl_.called_computation_ids_.~RepeatedField();
  _impl_.replica_groups_.~RepeatedPtrField();
  _impl_.source_target_pairs_.~RepeatedPtrField();
  _impl_.operand_shapes_with_layout_.~RepeatedPtrField();
  _impl_.output_operand_aliasing_.~RepeatedPtrField();
  _impl_.dot_sparsity_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.opcode_.Destroy();
  _impl_.fusion_kind_.Destroy();
  _impl_.outfeed_config_.Destroy();
  _impl_.infeed_config_.Destroy();
  _impl_.custom_call_target_.Destroy();
  _impl_.backend_config_.Destroy();
  _impl_.comparison_direction_.Destroy();
  _impl_.comparison_type_.Destroy();
  _impl_.async_execution_thread_.Destroy();
  if (this != internal_default_instance()) delete _impl_.shape_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.literal_;
  if (this != internal_default_instance()) delete _impl_.window_;
  if (this != internal_default_instance()) delete _impl_.convolution_dimension_numbers_;
  if (this != internal_default_instance()) delete _impl_.padding_config_;
  if (this != internal_default_instance()) delete _impl_.outfeed_shape_;
  if (this != internal_default_instance()) delete _impl_.dot_dimension_numbers_;
  if (this != internal_default_instance()) delete _impl_.gather_dimension_numbers_;
  if (this != internal_default_instance()) delete _impl_.sharding_;
  if (this != internal_default_instance()) delete _impl_.scatter_dimension_numbers_;
  if (this != internal_default_instance()) delete _impl_.precision_config_;
  if (this != internal_default_instance()) delete _impl_.domain_entry_sharding_;
  if (this != internal_default_instance()) delete _impl_.domain_exit_sharding_;
  if (this != internal_default_instance()) delete _impl_.triangular_solve_options_;
  if (this != internal_default_instance()) delete _impl_.parameter_replication_;
  if (this != internal_default_instance()) delete _impl_.cholesky_options_;
  if (this != internal_default_instance()) delete _impl_.frontend_attributes_;
  if (this != internal_default_instance()) delete _impl_.statistics_viz_;
  if (this != internal_default_instance()) delete _impl_.collective_device_list_;
  if (this != internal_default_instance()) delete _impl_.original_value_;
  if (has_optional_cross_program_prefetch_index()) {
    clear_optional_cross_program_prefetch_index();
  }
}

void HloInstructionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloInstructionProto::clear_optional_cross_program_prefetch_index() {
// @@protoc_insertion_point(one_of_clear_start:xla.HloInstructionProto)
  switch (optional_cross_program_prefetch_index_case()) {
    case kCrossProgramPrefetchIndex: {
      // No need to clear
      break;
    }
    case OPTIONAL_CROSS_PROGRAM_PREFETCH_INDEX_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_CROSS_PROGRAM_PREFETCH_INDEX_NOT_SET;
}


void HloInstructionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloInstructionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _impl_.slice_dimensions_.Clear();
  _impl_.dynamic_slice_sizes_.Clear();
  _impl_.fft_length_.Clear();
  _impl_.gather_slice_sizes_.Clear();
  _impl_.operand_ids_.Clear();
  _impl_.control_predecessor_ids_.Clear();
  _impl_.called_computation_ids_.Clear();
  _impl_.replica_groups_.Clear();
  _impl_.source_target_pairs_.Clear();
  _impl_.operand_shapes_with_layout_.Clear();
  _impl_.output_operand_aliasing_.Clear();
  _impl_.dot_sparsity_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.opcode_.ClearToEmpty();
  _impl_.fusion_kind_.ClearToEmpty();
  _impl_.outfeed_config_.ClearToEmpty();
  _impl_.infeed_config_.ClearToEmpty();
  _impl_.custom_call_target_.ClearToEmpty();
  _impl_.backend_config_.ClearToEmpty();
  _impl_.comparison_direction_.ClearToEmpty();
  _impl_.comparison_type_.ClearToEmpty();
  _impl_.async_execution_thread_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.literal_ != nullptr) {
    delete _impl_.literal_;
  }
  _impl_.literal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_ != nullptr) {
    delete _impl_.window_;
  }
  _impl_.window_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.convolution_dimension_numbers_ != nullptr) {
    delete _impl_.convolution_dimension_numbers_;
  }
  _impl_.convolution_dimension_numbers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.padding_config_ != nullptr) {
    delete _impl_.padding_config_;
  }
  _impl_.padding_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.outfeed_shape_ != nullptr) {
    delete _impl_.outfeed_shape_;
  }
  _impl_.outfeed_shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dot_dimension_numbers_ != nullptr) {
    delete _impl_.dot_dimension_numbers_;
  }
  _impl_.dot_dimension_numbers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gather_dimension_numbers_ != nullptr) {
    delete _impl_.gather_dimension_numbers_;
  }
  _impl_.gather_dimension_numbers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sharding_ != nullptr) {
    delete _impl_.sharding_;
  }
  _impl_.sharding_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scatter_dimension_numbers_ != nullptr) {
    delete _impl_.scatter_dimension_numbers_;
  }
  _impl_.scatter_dimension_numbers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.precision_config_ != nullptr) {
    delete _impl_.precision_config_;
  }
  _impl_.precision_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.domain_entry_sharding_ != nullptr) {
    delete _impl_.domain_entry_sharding_;
  }
  _impl_.domain_entry_sharding_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.domain_exit_sharding_ != nullptr) {
    delete _impl_.domain_exit_sharding_;
  }
  _impl_.domain_exit_sharding_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.triangular_solve_options_ != nullptr) {
    delete _impl_.triangular_solve_options_;
  }
  _impl_.triangular_solve_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.parameter_replication_ != nullptr) {
    delete _impl_.parameter_replication_;
  }
  _impl_.parameter_replication_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cholesky_options_ != nullptr) {
    delete _impl_.cholesky_options_;
  }
  _impl_.cholesky_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.frontend_attributes_ != nullptr) {
    delete _impl_.frontend_attributes_;
  }
  _impl_.frontend_attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.statistics_viz_ != nullptr) {
    delete _impl_.statistics_viz_;
  }
  _impl_.statistics_viz_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collective_device_list_ != nullptr) {
    delete _impl_.collective_device_list_;
  }
  _impl_.collective_device_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.original_value_ != nullptr) {
    delete _impl_.original_value_;
  }
  _impl_.original_value_ = nullptr;
  ::memset(&_impl_.parameter_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_composite_) -
      reinterpret_cast<char*>(&_impl_.parameter_number_)) + sizeof(_impl_.is_composite_));
  clear_optional_cross_program_prefetch_index();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloInstructionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloInstructionProto.name"));
        } else
          goto handle_unusual;
        continue;
      // string opcode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_opcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloInstructionProto.opcode"));
        } else
          goto handle_unusual;
        continue;
      // .xla.ShapeProto shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.OpMetadata metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.LiteralProto literal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_literal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 parameter_number = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.parameter_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fusion_kind = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_fusion_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloInstructionProto.fusion_kind"));
        } else
          goto handle_unusual;
        continue;
      // int64 tuple_index = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.tuple_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 dimensions = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.Window window = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.ConvolutionDimensionNumbers convolution_dimension_numbers = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_convolution_dimension_numbers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloInstructionProto.SliceDimensions slice_dimensions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_slice_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 exponent_bits = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.exponent_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mantissa_bits = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.mantissa_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 dynamic_slice_sizes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dynamic_slice_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 160) {
          _internal_add_dynamic_slice_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.PaddingConfig padding_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes outfeed_config = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_outfeed_config();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.RandomDistribution distribution = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_distribution(static_cast<::xla::RandomDistribution>(val));
        } else
          goto handle_unusual;
        continue;
      // float epsilon = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 feature_index = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.feature_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 channel_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes infeed_config = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_infeed_config();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string custom_call_target = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_custom_call_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloInstructionProto.custom_call_target"));
        } else
          goto handle_unusual;
        continue;
      // .xla.ShapeProto outfeed_shape = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_outfeed_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.DotDimensionNumbers dot_dimension_numbers = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_dot_dimension_numbers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.FftType fft_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fft_type(static_cast<::xla::FftType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 fft_length = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_fft_length(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 0) {
          _internal_add_fft_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.GatherDimensionNumbers gather_dimension_numbers = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gather_dimension_numbers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 gather_slice_sizes = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_gather_slice_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_gather_slice_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 operand_ids = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_operand_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_operand_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 control_predecessor_ids = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_control_predecessor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_control_predecessor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 called_computation_ids = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_called_computation_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_called_computation_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.OpSharding sharding = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sharding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes backend_config = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_backend_config();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 all_reduce_id = 45 [deprecated = true];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.all_reduce_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_host_transfer = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.is_host_transfer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.ScatterDimensionNumbers scatter_dimension_numbers = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_scatter_dimension_numbers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.ReplicaGroup replica_groups = 49 [deprecated = true];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_replica_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 feature_group_count = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.feature_group_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.PrecisionConfig precision_config = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_precision_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.SourceTarget source_target_pairs = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_source_target_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<418>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.OpSharding domain_entry_sharding = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_domain_entry_sharding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.OpSharding domain_exit_sharding = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_domain_exit_sharding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool constrain_layout = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.constrain_layout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.ShapeProto operand_shapes_with_layout = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_operand_shapes_with_layout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 batch_group_count = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.batch_group_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.TriangularSolveOptions triangular_solve_options = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_triangular_solve_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_stable = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.is_stable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.ParameterReplication parameter_replication = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameter_replication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.CholeskyOptions cholesky_options = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_cholesky_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comparison_direction = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_comparison_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloInstructionProto.comparison_direction"));
        } else
          goto handle_unusual;
        continue;
      // bool custom_call_has_side_effect = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.custom_call_has_side_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 delta = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool indices_are_sorted = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.indices_are_sorted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.FrontendAttributes frontend_attributes = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_frontend_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unique_indices = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.unique_indices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.RandomAlgorithm rng_algorithm = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rng_algorithm(static_cast<::xla::RandomAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // bool use_global_device_ids = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.use_global_device_ids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comparison_type = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_comparison_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloInstructionProto.comparison_type"));
        } else
          goto handle_unusual;
        continue;
      // bool is_cross_program_prefetch = 73 [deprecated = true];
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.is_cross_program_prefetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.OutputOperandAliasing output_operand_aliasing = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_output_operand_aliasing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<594>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.PaddingType padding_type = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_padding_type(static_cast<::xla::PaddingType>(val));
        } else
          goto handle_unusual;
        continue;
      // .xla.CustomCallSchedule custom_call_schedule = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_custom_call_schedule(static_cast<::xla::CustomCallSchedule>(val));
        } else
          goto handle_unusual;
        continue;
      // .xla.CustomCallApiVersion custom_call_api_version = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_custom_call_api_version(static_cast<::xla::CustomCallApiVersion>(val));
        } else
          goto handle_unusual;
        continue;
      // string async_execution_thread = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_async_execution_thread();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloInstructionProto.async_execution_thread"));
        } else
          goto handle_unusual;
        continue;
      // int32 cross_program_prefetch_index = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _internal_set_cross_program_prefetch_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 k = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.StatisticsViz statistics_viz = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics_viz(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool largest = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.SparsityDescriptor dot_sparsity = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dot_sparsity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<690>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.CollectiveDeviceListProto collective_device_list = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_collective_device_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.OriginalValueProto original_value = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_composite = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.is_composite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloInstructionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloInstructionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloInstructionProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string opcode = 2;
  if (!this->_internal_opcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opcode().data(), static_cast<int>(this->_internal_opcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloInstructionProto.opcode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_opcode(), target);
  }

  // .xla.ShapeProto shape = 3;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // .xla.OpMetadata metadata = 7;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .xla.LiteralProto literal = 8;
  if (this->_internal_has_literal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::literal(this),
        _Internal::literal(this).GetCachedSize(), target, stream);
  }

  // int64 parameter_number = 9;
  if (this->_internal_parameter_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_parameter_number(), target);
  }

  // string fusion_kind = 11;
  if (!this->_internal_fusion_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fusion_kind().data(), static_cast<int>(this->_internal_fusion_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloInstructionProto.fusion_kind");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_fusion_kind(), target);
  }

  // int64 tuple_index = 13;
  if (this->_internal_tuple_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_tuple_index(), target);
  }

  // repeated int64 dimensions = 14;
  {
    int byte_size = _impl_._dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          14, _internal_dimensions(), byte_size, target);
    }
  }

  // .xla.Window window = 15;
  if (this->_internal_has_window()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::window(this),
        _Internal::window(this).GetCachedSize(), target, stream);
  }

  // .xla.ConvolutionDimensionNumbers convolution_dimension_numbers = 16;
  if (this->_internal_has_convolution_dimension_numbers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::convolution_dimension_numbers(this),
        _Internal::convolution_dimension_numbers(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.HloInstructionProto.SliceDimensions slice_dimensions = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slice_dimensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_slice_dimensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 exponent_bits = 18;
  if (this->_internal_exponent_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_exponent_bits(), target);
  }

  // int32 mantissa_bits = 19;
  if (this->_internal_mantissa_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_mantissa_bits(), target);
  }

  // repeated int64 dynamic_slice_sizes = 20;
  {
    int byte_size = _impl_._dynamic_slice_sizes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          20, _internal_dynamic_slice_sizes(), byte_size, target);
    }
  }

  // .xla.PaddingConfig padding_config = 21;
  if (this->_internal_has_padding_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::padding_config(this),
        _Internal::padding_config(this).GetCachedSize(), target, stream);
  }

  // bytes outfeed_config = 22;
  if (!this->_internal_outfeed_config().empty()) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_outfeed_config(), target);
  }

  // .xla.RandomDistribution distribution = 23;
  if (this->_internal_distribution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_distribution(), target);
  }

  // float epsilon = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_epsilon = this->_internal_epsilon();
  uint32_t raw_epsilon;
  memcpy(&raw_epsilon, &tmp_epsilon, sizeof(tmp_epsilon));
  if (raw_epsilon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_epsilon(), target);
  }

  // int64 feature_index = 25;
  if (this->_internal_feature_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_feature_index(), target);
  }

  // int64 channel_id = 26;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_channel_id(), target);
  }

  // bytes infeed_config = 27;
  if (!this->_internal_infeed_config().empty()) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_infeed_config(), target);
  }

  // string custom_call_target = 28;
  if (!this->_internal_custom_call_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_call_target().data(), static_cast<int>(this->_internal_custom_call_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloInstructionProto.custom_call_target");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_custom_call_target(), target);
  }

  // .xla.ShapeProto outfeed_shape = 29;
  if (this->_internal_has_outfeed_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::outfeed_shape(this),
        _Internal::outfeed_shape(this).GetCachedSize(), target, stream);
  }

  // .xla.DotDimensionNumbers dot_dimension_numbers = 30;
  if (this->_internal_has_dot_dimension_numbers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::dot_dimension_numbers(this),
        _Internal::dot_dimension_numbers(this).GetCachedSize(), target, stream);
  }

  // .xla.FftType fft_type = 31;
  if (this->_internal_fft_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_fft_type(), target);
  }

  // repeated int64 fft_length = 32;
  {
    int byte_size = _impl_._fft_length_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          32, _internal_fft_length(), byte_size, target);
    }
  }

  // .xla.GatherDimensionNumbers gather_dimension_numbers = 33;
  if (this->_internal_has_gather_dimension_numbers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::gather_dimension_numbers(this),
        _Internal::gather_dimension_numbers(this).GetCachedSize(), target, stream);
  }

  // repeated int64 gather_slice_sizes = 34;
  {
    int byte_size = _impl_._gather_slice_sizes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          34, _internal_gather_slice_sizes(), byte_size, target);
    }
  }

  // int64 id = 35;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(35, this->_internal_id(), target);
  }

  // repeated int64 operand_ids = 36;
  {
    int byte_size = _impl_._operand_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          36, _internal_operand_ids(), byte_size, target);
    }
  }

  // repeated int64 control_predecessor_ids = 37;
  {
    int byte_size = _impl_._control_predecessor_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          37, _internal_control_predecessor_ids(), byte_size, target);
    }
  }

  // repeated int64 called_computation_ids = 38;
  {
    int byte_size = _impl_._called_computation_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          38, _internal_called_computation_ids(), byte_size, target);
    }
  }

  // .xla.OpSharding sharding = 40;
  if (this->_internal_has_sharding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::sharding(this),
        _Internal::sharding(this).GetCachedSize(), target, stream);
  }

  // bytes backend_config = 43;
  if (!this->_internal_backend_config().empty()) {
    target = stream->WriteBytesMaybeAliased(
        43, this->_internal_backend_config(), target);
  }

  // int64 all_reduce_id = 45 [deprecated = true];
  if (this->_internal_all_reduce_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(45, this->_internal_all_reduce_id(), target);
  }

  // bool is_host_transfer = 47;
  if (this->_internal_is_host_transfer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(47, this->_internal_is_host_transfer(), target);
  }

  // .xla.ScatterDimensionNumbers scatter_dimension_numbers = 48;
  if (this->_internal_has_scatter_dimension_numbers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::scatter_dimension_numbers(this),
        _Internal::scatter_dimension_numbers(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.ReplicaGroup replica_groups = 49 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_replica_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_replica_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 feature_group_count = 50;
  if (this->_internal_feature_group_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(50, this->_internal_feature_group_count(), target);
  }

  // .xla.PrecisionConfig precision_config = 51;
  if (this->_internal_has_precision_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::precision_config(this),
        _Internal::precision_config(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.SourceTarget source_target_pairs = 52;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_target_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_target_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(52, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.OpSharding domain_entry_sharding = 54;
  if (this->_internal_has_domain_entry_sharding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::domain_entry_sharding(this),
        _Internal::domain_entry_sharding(this).GetCachedSize(), target, stream);
  }

  // .xla.OpSharding domain_exit_sharding = 55;
  if (this->_internal_has_domain_exit_sharding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::domain_exit_sharding(this),
        _Internal::domain_exit_sharding(this).GetCachedSize(), target, stream);
  }

  // bool constrain_layout = 56;
  if (this->_internal_constrain_layout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(56, this->_internal_constrain_layout(), target);
  }

  // repeated .xla.ShapeProto operand_shapes_with_layout = 57;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operand_shapes_with_layout_size()); i < n; i++) {
    const auto& repfield = this->_internal_operand_shapes_with_layout(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(57, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 batch_group_count = 58;
  if (this->_internal_batch_group_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(58, this->_internal_batch_group_count(), target);
  }

  // .xla.TriangularSolveOptions triangular_solve_options = 59;
  if (this->_internal_has_triangular_solve_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::triangular_solve_options(this),
        _Internal::triangular_solve_options(this).GetCachedSize(), target, stream);
  }

  // bool is_stable = 60;
  if (this->_internal_is_stable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_is_stable(), target);
  }

  // .xla.ParameterReplication parameter_replication = 61;
  if (this->_internal_has_parameter_replication()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::parameter_replication(this),
        _Internal::parameter_replication(this).GetCachedSize(), target, stream);
  }

  // .xla.CholeskyOptions cholesky_options = 62;
  if (this->_internal_has_cholesky_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::cholesky_options(this),
        _Internal::cholesky_options(this).GetCachedSize(), target, stream);
  }

  // string comparison_direction = 63;
  if (!this->_internal_comparison_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comparison_direction().data(), static_cast<int>(this->_internal_comparison_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloInstructionProto.comparison_direction");
    target = stream->WriteStringMaybeAliased(
        63, this->_internal_comparison_direction(), target);
  }

  // bool custom_call_has_side_effect = 65;
  if (this->_internal_custom_call_has_side_effect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_custom_call_has_side_effect(), target);
  }

  // int64 delta = 66;
  if (this->_internal_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(66, this->_internal_delta(), target);
  }

  // bool indices_are_sorted = 67;
  if (this->_internal_indices_are_sorted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_indices_are_sorted(), target);
  }

  // .xla.FrontendAttributes frontend_attributes = 68;
  if (this->_internal_has_frontend_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(68, _Internal::frontend_attributes(this),
        _Internal::frontend_attributes(this).GetCachedSize(), target, stream);
  }

  // bool unique_indices = 69;
  if (this->_internal_unique_indices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(69, this->_internal_unique_indices(), target);
  }

  // .xla.RandomAlgorithm rng_algorithm = 70;
  if (this->_internal_rng_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      70, this->_internal_rng_algorithm(), target);
  }

  // bool use_global_device_ids = 71;
  if (this->_internal_use_global_device_ids() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(71, this->_internal_use_global_device_ids(), target);
  }

  // string comparison_type = 72;
  if (!this->_internal_comparison_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comparison_type().data(), static_cast<int>(this->_internal_comparison_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloInstructionProto.comparison_type");
    target = stream->WriteStringMaybeAliased(
        72, this->_internal_comparison_type(), target);
  }

  // bool is_cross_program_prefetch = 73 [deprecated = true];
  if (this->_internal_is_cross_program_prefetch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_is_cross_program_prefetch(), target);
  }

  // repeated .xla.OutputOperandAliasing output_operand_aliasing = 74;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_output_operand_aliasing_size()); i < n; i++) {
    const auto& repfield = this->_internal_output_operand_aliasing(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(74, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.PaddingType padding_type = 75;
  if (this->_internal_padding_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      75, this->_internal_padding_type(), target);
  }

  // .xla.CustomCallSchedule custom_call_schedule = 76;
  if (this->_internal_custom_call_schedule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      76, this->_internal_custom_call_schedule(), target);
  }

  // .xla.CustomCallApiVersion custom_call_api_version = 77;
  if (this->_internal_custom_call_api_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      77, this->_internal_custom_call_api_version(), target);
  }

  // string async_execution_thread = 79;
  if (!this->_internal_async_execution_thread().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_async_execution_thread().data(), static_cast<int>(this->_internal_async_execution_thread().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloInstructionProto.async_execution_thread");
    target = stream->WriteStringMaybeAliased(
        79, this->_internal_async_execution_thread(), target);
  }

  // int32 cross_program_prefetch_index = 80;
  if (_internal_has_cross_program_prefetch_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(80, this->_internal_cross_program_prefetch_index(), target);
  }

  // int64 k = 81;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(81, this->_internal_k(), target);
  }

  // .xla.StatisticsViz statistics_viz = 82;
  if (this->_internal_has_statistics_viz()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(82, _Internal::statistics_viz(this),
        _Internal::statistics_viz(this).GetCachedSize(), target, stream);
  }

  // bool largest = 85;
  if (this->_internal_largest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(85, this->_internal_largest(), target);
  }

  // repeated .xla.SparsityDescriptor dot_sparsity = 86;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dot_sparsity_size()); i < n; i++) {
    const auto& repfield = this->_internal_dot_sparsity(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(86, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.CollectiveDeviceListProto collective_device_list = 87;
  if (this->_internal_has_collective_device_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(87, _Internal::collective_device_list(this),
        _Internal::collective_device_list(this).GetCachedSize(), target, stream);
  }

  // .xla.OriginalValueProto original_value = 88;
  if (this->_internal_has_original_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(88, _Internal::original_value(this),
        _Internal::original_value(this).GetCachedSize(), target, stream);
  }

  // bool is_composite = 89;
  if (this->_internal_is_composite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(89, this->_internal_is_composite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloInstructionProto)
  return target;
}

size_t HloInstructionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloInstructionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dimensions = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.HloInstructionProto.SliceDimensions slice_dimensions = 17;
  total_size += 2UL * this->_internal_slice_dimensions_size();
  for (const auto& msg : this->_impl_.slice_dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 dynamic_slice_sizes = 20;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dynamic_slice_sizes_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dynamic_slice_sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 fft_length = 32;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.fft_length_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._fft_length_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 gather_slice_sizes = 34;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.gather_slice_sizes_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._gather_slice_sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 operand_ids = 36;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.operand_ids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._operand_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 control_predecessor_ids = 37;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.control_predecessor_ids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._control_predecessor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 called_computation_ids = 38;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.called_computation_ids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._called_computation_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.ReplicaGroup replica_groups = 49 [deprecated = true];
  total_size += 2UL * this->_internal_replica_groups_size();
  for (const auto& msg : this->_impl_.replica_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.SourceTarget source_target_pairs = 52;
  total_size += 2UL * this->_internal_source_target_pairs_size();
  for (const auto& msg : this->_impl_.source_target_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.ShapeProto operand_shapes_with_layout = 57;
  total_size += 2UL * this->_internal_operand_shapes_with_layout_size();
  for (const auto& msg : this->_impl_.operand_shapes_with_layout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.OutputOperandAliasing output_operand_aliasing = 74;
  total_size += 2UL * this->_internal_output_operand_aliasing_size();
  for (const auto& msg : this->_impl_.output_operand_aliasing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.SparsityDescriptor dot_sparsity = 86;
  total_size += 2UL * this->_internal_dot_sparsity_size();
  for (const auto& msg : this->_impl_.dot_sparsity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string opcode = 2;
  if (!this->_internal_opcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opcode());
  }

  // string fusion_kind = 11;
  if (!this->_internal_fusion_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fusion_kind());
  }

  // bytes outfeed_config = 22;
  if (!this->_internal_outfeed_config().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_outfeed_config());
  }

  // bytes infeed_config = 27;
  if (!this->_internal_infeed_config().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_infeed_config());
  }

  // string custom_call_target = 28;
  if (!this->_internal_custom_call_target().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_call_target());
  }

  // bytes backend_config = 43;
  if (!this->_internal_backend_config().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_backend_config());
  }

  // string comparison_direction = 63;
  if (!this->_internal_comparison_direction().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comparison_direction());
  }

  // string comparison_type = 72;
  if (!this->_internal_comparison_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comparison_type());
  }

  // string async_execution_thread = 79;
  if (!this->_internal_async_execution_thread().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_async_execution_thread());
  }

  // .xla.ShapeProto shape = 3;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // .xla.OpMetadata metadata = 7;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .xla.LiteralProto literal = 8;
  if (this->_internal_has_literal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.literal_);
  }

  // .xla.Window window = 15;
  if (this->_internal_has_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_);
  }

  // .xla.ConvolutionDimensionNumbers convolution_dimension_numbers = 16;
  if (this->_internal_has_convolution_dimension_numbers()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.convolution_dimension_numbers_);
  }

  // .xla.PaddingConfig padding_config = 21;
  if (this->_internal_has_padding_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.padding_config_);
  }

  // .xla.ShapeProto outfeed_shape = 29;
  if (this->_internal_has_outfeed_shape()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outfeed_shape_);
  }

  // .xla.DotDimensionNumbers dot_dimension_numbers = 30;
  if (this->_internal_has_dot_dimension_numbers()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dot_dimension_numbers_);
  }

  // .xla.GatherDimensionNumbers gather_dimension_numbers = 33;
  if (this->_internal_has_gather_dimension_numbers()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gather_dimension_numbers_);
  }

  // .xla.OpSharding sharding = 40;
  if (this->_internal_has_sharding()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sharding_);
  }

  // .xla.ScatterDimensionNumbers scatter_dimension_numbers = 48;
  if (this->_internal_has_scatter_dimension_numbers()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scatter_dimension_numbers_);
  }

  // .xla.PrecisionConfig precision_config = 51;
  if (this->_internal_has_precision_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.precision_config_);
  }

  // .xla.OpSharding domain_entry_sharding = 54;
  if (this->_internal_has_domain_entry_sharding()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.domain_entry_sharding_);
  }

  // .xla.OpSharding domain_exit_sharding = 55;
  if (this->_internal_has_domain_exit_sharding()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.domain_exit_sharding_);
  }

  // .xla.TriangularSolveOptions triangular_solve_options = 59;
  if (this->_internal_has_triangular_solve_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.triangular_solve_options_);
  }

  // .xla.ParameterReplication parameter_replication = 61;
  if (this->_internal_has_parameter_replication()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parameter_replication_);
  }

  // .xla.CholeskyOptions cholesky_options = 62;
  if (this->_internal_has_cholesky_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cholesky_options_);
  }

  // .xla.FrontendAttributes frontend_attributes = 68;
  if (this->_internal_has_frontend_attributes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frontend_attributes_);
  }

  // .xla.StatisticsViz statistics_viz = 82;
  if (this->_internal_has_statistics_viz()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statistics_viz_);
  }

  // .xla.CollectiveDeviceListProto collective_device_list = 87;
  if (this->_internal_has_collective_device_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collective_device_list_);
  }

  // .xla.OriginalValueProto original_value = 88;
  if (this->_internal_has_original_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_value_);
  }

  // int64 parameter_number = 9;
  if (this->_internal_parameter_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parameter_number());
  }

  // int64 tuple_index = 13;
  if (this->_internal_tuple_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tuple_index());
  }

  // int32 exponent_bits = 18;
  if (this->_internal_exponent_bits() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exponent_bits());
  }

  // int32 mantissa_bits = 19;
  if (this->_internal_mantissa_bits() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mantissa_bits());
  }

  // .xla.RandomDistribution distribution = 23;
  if (this->_internal_distribution() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_distribution());
  }

  // float epsilon = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_epsilon = this->_internal_epsilon();
  uint32_t raw_epsilon;
  memcpy(&raw_epsilon, &tmp_epsilon, sizeof(tmp_epsilon));
  if (raw_epsilon != 0) {
    total_size += 2 + 4;
  }

  // int64 feature_index = 25;
  if (this->_internal_feature_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_feature_index());
  }

  // int64 channel_id = 26;
  if (this->_internal_channel_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_channel_id());
  }

  // int64 id = 35;
  if (this->_internal_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 all_reduce_id = 45 [deprecated = true];
  if (this->_internal_all_reduce_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_all_reduce_id());
  }

  // int64 feature_group_count = 50;
  if (this->_internal_feature_group_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_feature_group_count());
  }

  // .xla.FftType fft_type = 31;
  if (this->_internal_fft_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fft_type());
  }

  // bool use_global_device_ids = 71;
  if (this->_internal_use_global_device_ids() != 0) {
    total_size += 2 + 1;
  }

  // bool is_host_transfer = 47;
  if (this->_internal_is_host_transfer() != 0) {
    total_size += 2 + 1;
  }

  // bool is_stable = 60;
  if (this->_internal_is_stable() != 0) {
    total_size += 2 + 1;
  }

  // bool constrain_layout = 56;
  if (this->_internal_constrain_layout() != 0) {
    total_size += 2 + 1;
  }

  // int64 batch_group_count = 58;
  if (this->_internal_batch_group_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_batch_group_count());
  }

  // int64 delta = 66;
  if (this->_internal_delta() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_delta());
  }

  // bool custom_call_has_side_effect = 65;
  if (this->_internal_custom_call_has_side_effect() != 0) {
    total_size += 2 + 1;
  }

  // bool indices_are_sorted = 67;
  if (this->_internal_indices_are_sorted() != 0) {
    total_size += 2 + 1;
  }

  // bool unique_indices = 69;
  if (this->_internal_unique_indices() != 0) {
    total_size += 2 + 1;
  }

  // bool is_cross_program_prefetch = 73 [deprecated = true];
  if (this->_internal_is_cross_program_prefetch() != 0) {
    total_size += 2 + 1;
  }

  // .xla.RandomAlgorithm rng_algorithm = 70;
  if (this->_internal_rng_algorithm() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rng_algorithm());
  }

  // .xla.PaddingType padding_type = 75;
  if (this->_internal_padding_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_padding_type());
  }

  // .xla.CustomCallSchedule custom_call_schedule = 76;
  if (this->_internal_custom_call_schedule() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_call_schedule());
  }

  // int64 k = 81;
  if (this->_internal_k() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_k());
  }

  // .xla.CustomCallApiVersion custom_call_api_version = 77;
  if (this->_internal_custom_call_api_version() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_call_api_version());
  }

  // bool largest = 85;
  if (this->_internal_largest() != 0) {
    total_size += 2 + 1;
  }

  // bool is_composite = 89;
  if (this->_internal_is_composite() != 0) {
    total_size += 2 + 1;
  }

  switch (optional_cross_program_prefetch_index_case()) {
    // int32 cross_program_prefetch_index = 80;
    case kCrossProgramPrefetchIndex: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_cross_program_prefetch_index());
      break;
    }
    case OPTIONAL_CROSS_PROGRAM_PREFETCH_INDEX_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloInstructionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloInstructionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloInstructionProto::GetClassData() const { return &_class_data_; }


void HloInstructionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloInstructionProto*>(&to_msg);
  auto& from = static_cast<const HloInstructionProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloInstructionProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_impl_.slice_dimensions_.MergeFrom(from._impl_.slice_dimensions_);
  _this->_impl_.dynamic_slice_sizes_.MergeFrom(from._impl_.dynamic_slice_sizes_);
  _this->_impl_.fft_length_.MergeFrom(from._impl_.fft_length_);
  _this->_impl_.gather_slice_sizes_.MergeFrom(from._impl_.gather_slice_sizes_);
  _this->_impl_.operand_ids_.MergeFrom(from._impl_.operand_ids_);
  _this->_impl_.control_predecessor_ids_.MergeFrom(from._impl_.control_predecessor_ids_);
  _this->_impl_.called_computation_ids_.MergeFrom(from._impl_.called_computation_ids_);
  _this->_impl_.replica_groups_.MergeFrom(from._impl_.replica_groups_);
  _this->_impl_.source_target_pairs_.MergeFrom(from._impl_.source_target_pairs_);
  _this->_impl_.operand_shapes_with_layout_.MergeFrom(from._impl_.operand_shapes_with_layout_);
  _this->_impl_.output_operand_aliasing_.MergeFrom(from._impl_.output_operand_aliasing_);
  _this->_impl_.dot_sparsity_.MergeFrom(from._impl_.dot_sparsity_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_opcode().empty()) {
    _this->_internal_set_opcode(from._internal_opcode());
  }
  if (!from._internal_fusion_kind().empty()) {
    _this->_internal_set_fusion_kind(from._internal_fusion_kind());
  }
  if (!from._internal_outfeed_config().empty()) {
    _this->_internal_set_outfeed_config(from._internal_outfeed_config());
  }
  if (!from._internal_infeed_config().empty()) {
    _this->_internal_set_infeed_config(from._internal_infeed_config());
  }
  if (!from._internal_custom_call_target().empty()) {
    _this->_internal_set_custom_call_target(from._internal_custom_call_target());
  }
  if (!from._internal_backend_config().empty()) {
    _this->_internal_set_backend_config(from._internal_backend_config());
  }
  if (!from._internal_comparison_direction().empty()) {
    _this->_internal_set_comparison_direction(from._internal_comparison_direction());
  }
  if (!from._internal_comparison_type().empty()) {
    _this->_internal_set_comparison_type(from._internal_comparison_type());
  }
  if (!from._internal_async_execution_thread().empty()) {
    _this->_internal_set_async_execution_thread(from._internal_async_execution_thread());
  }
  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::xla::ShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::xla::OpMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_literal()) {
    _this->_internal_mutable_literal()->::xla::LiteralProto::MergeFrom(
        from._internal_literal());
  }
  if (from._internal_has_window()) {
    _this->_internal_mutable_window()->::xla::Window::MergeFrom(
        from._internal_window());
  }
  if (from._internal_has_convolution_dimension_numbers()) {
    _this->_internal_mutable_convolution_dimension_numbers()->::xla::ConvolutionDimensionNumbers::MergeFrom(
        from._internal_convolution_dimension_numbers());
  }
  if (from._internal_has_padding_config()) {
    _this->_internal_mutable_padding_config()->::xla::PaddingConfig::MergeFrom(
        from._internal_padding_config());
  }
  if (from._internal_has_outfeed_shape()) {
    _this->_internal_mutable_outfeed_shape()->::xla::ShapeProto::MergeFrom(
        from._internal_outfeed_shape());
  }
  if (from._internal_has_dot_dimension_numbers()) {
    _this->_internal_mutable_dot_dimension_numbers()->::xla::DotDimensionNumbers::MergeFrom(
        from._internal_dot_dimension_numbers());
  }
  if (from._internal_has_gather_dimension_numbers()) {
    _this->_internal_mutable_gather_dimension_numbers()->::xla::GatherDimensionNumbers::MergeFrom(
        from._internal_gather_dimension_numbers());
  }
  if (from._internal_has_sharding()) {
    _this->_internal_mutable_sharding()->::xla::OpSharding::MergeFrom(
        from._internal_sharding());
  }
  if (from._internal_has_scatter_dimension_numbers()) {
    _this->_internal_mutable_scatter_dimension_numbers()->::xla::ScatterDimensionNumbers::MergeFrom(
        from._internal_scatter_dimension_numbers());
  }
  if (from._internal_has_precision_config()) {
    _this->_internal_mutable_precision_config()->::xla::PrecisionConfig::MergeFrom(
        from._internal_precision_config());
  }
  if (from._internal_has_domain_entry_sharding()) {
    _this->_internal_mutable_domain_entry_sharding()->::xla::OpSharding::MergeFrom(
        from._internal_domain_entry_sharding());
  }
  if (from._internal_has_domain_exit_sharding()) {
    _this->_internal_mutable_domain_exit_sharding()->::xla::OpSharding::MergeFrom(
        from._internal_domain_exit_sharding());
  }
  if (from._internal_has_triangular_solve_options()) {
    _this->_internal_mutable_triangular_solve_options()->::xla::TriangularSolveOptions::MergeFrom(
        from._internal_triangular_solve_options());
  }
  if (from._internal_has_parameter_replication()) {
    _this->_internal_mutable_parameter_replication()->::xla::ParameterReplication::MergeFrom(
        from._internal_parameter_replication());
  }
  if (from._internal_has_cholesky_options()) {
    _this->_internal_mutable_cholesky_options()->::xla::CholeskyOptions::MergeFrom(
        from._internal_cholesky_options());
  }
  if (from._internal_has_frontend_attributes()) {
    _this->_internal_mutable_frontend_attributes()->::xla::FrontendAttributes::MergeFrom(
        from._internal_frontend_attributes());
  }
  if (from._internal_has_statistics_viz()) {
    _this->_internal_mutable_statistics_viz()->::xla::StatisticsViz::MergeFrom(
        from._internal_statistics_viz());
  }
  if (from._internal_has_collective_device_list()) {
    _this->_internal_mutable_collective_device_list()->::xla::CollectiveDeviceListProto::MergeFrom(
        from._internal_collective_device_list());
  }
  if (from._internal_has_original_value()) {
    _this->_internal_mutable_original_value()->::xla::OriginalValueProto::MergeFrom(
        from._internal_original_value());
  }
  if (from._internal_parameter_number() != 0) {
    _this->_internal_set_parameter_number(from._internal_parameter_number());
  }
  if (from._internal_tuple_index() != 0) {
    _this->_internal_set_tuple_index(from._internal_tuple_index());
  }
  if (from._internal_exponent_bits() != 0) {
    _this->_internal_set_exponent_bits(from._internal_exponent_bits());
  }
  if (from._internal_mantissa_bits() != 0) {
    _this->_internal_set_mantissa_bits(from._internal_mantissa_bits());
  }
  if (from._internal_distribution() != 0) {
    _this->_internal_set_distribution(from._internal_distribution());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_epsilon = from._internal_epsilon();
  uint32_t raw_epsilon;
  memcpy(&raw_epsilon, &tmp_epsilon, sizeof(tmp_epsilon));
  if (raw_epsilon != 0) {
    _this->_internal_set_epsilon(from._internal_epsilon());
  }
  if (from._internal_feature_index() != 0) {
    _this->_internal_set_feature_index(from._internal_feature_index());
  }
  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_all_reduce_id() != 0) {
    _this->_internal_set_all_reduce_id(from._internal_all_reduce_id());
  }
  if (from._internal_feature_group_count() != 0) {
    _this->_internal_set_feature_group_count(from._internal_feature_group_count());
  }
  if (from._internal_fft_type() != 0) {
    _this->_internal_set_fft_type(from._internal_fft_type());
  }
  if (from._internal_use_global_device_ids() != 0) {
    _this->_internal_set_use_global_device_ids(from._internal_use_global_device_ids());
  }
  if (from._internal_is_host_transfer() != 0) {
    _this->_internal_set_is_host_transfer(from._internal_is_host_transfer());
  }
  if (from._internal_is_stable() != 0) {
    _this->_internal_set_is_stable(from._internal_is_stable());
  }
  if (from._internal_constrain_layout() != 0) {
    _this->_internal_set_constrain_layout(from._internal_constrain_layout());
  }
  if (from._internal_batch_group_count() != 0) {
    _this->_internal_set_batch_group_count(from._internal_batch_group_count());
  }
  if (from._internal_delta() != 0) {
    _this->_internal_set_delta(from._internal_delta());
  }
  if (from._internal_custom_call_has_side_effect() != 0) {
    _this->_internal_set_custom_call_has_side_effect(from._internal_custom_call_has_side_effect());
  }
  if (from._internal_indices_are_sorted() != 0) {
    _this->_internal_set_indices_are_sorted(from._internal_indices_are_sorted());
  }
  if (from._internal_unique_indices() != 0) {
    _this->_internal_set_unique_indices(from._internal_unique_indices());
  }
  if (from._internal_is_cross_program_prefetch() != 0) {
    _this->_internal_set_is_cross_program_prefetch(from._internal_is_cross_program_prefetch());
  }
  if (from._internal_rng_algorithm() != 0) {
    _this->_internal_set_rng_algorithm(from._internal_rng_algorithm());
  }
  if (from._internal_padding_type() != 0) {
    _this->_internal_set_padding_type(from._internal_padding_type());
  }
  if (from._internal_custom_call_schedule() != 0) {
    _this->_internal_set_custom_call_schedule(from._internal_custom_call_schedule());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_custom_call_api_version() != 0) {
    _this->_internal_set_custom_call_api_version(from._internal_custom_call_api_version());
  }
  if (from._internal_largest() != 0) {
    _this->_internal_set_largest(from._internal_largest());
  }
  if (from._internal_is_composite() != 0) {
    _this->_internal_set_is_composite(from._internal_is_composite());
  }
  switch (from.optional_cross_program_prefetch_index_case()) {
    case kCrossProgramPrefetchIndex: {
      _this->_internal_set_cross_program_prefetch_index(from._internal_cross_program_prefetch_index());
      break;
    }
    case OPTIONAL_CROSS_PROGRAM_PREFETCH_INDEX_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloInstructionProto::CopyFrom(const HloInstructionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloInstructionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloInstructionProto::IsInitialized() const {
  return true;
}

void HloInstructionProto::InternalSwap(HloInstructionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
  _impl_.slice_dimensions_.InternalSwap(&other->_impl_.slice_dimensions_);
  _impl_.dynamic_slice_sizes_.InternalSwap(&other->_impl_.dynamic_slice_sizes_);
  _impl_.fft_length_.InternalSwap(&other->_impl_.fft_length_);
  _impl_.gather_slice_sizes_.InternalSwap(&other->_impl_.gather_slice_sizes_);
  _impl_.operand_ids_.InternalSwap(&other->_impl_.operand_ids_);
  _impl_.control_predecessor_ids_.InternalSwap(&other->_impl_.control_predecessor_ids_);
  _impl_.called_computation_ids_.InternalSwap(&other->_impl_.called_computation_ids_);
  _impl_.replica_groups_.InternalSwap(&other->_impl_.replica_groups_);
  _impl_.source_target_pairs_.InternalSwap(&other->_impl_.source_target_pairs_);
  _impl_.operand_shapes_with_layout_.InternalSwap(&other->_impl_.operand_shapes_with_layout_);
  _impl_.output_operand_aliasing_.InternalSwap(&other->_impl_.output_operand_aliasing_);
  _impl_.dot_sparsity_.InternalSwap(&other->_impl_.dot_sparsity_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.opcode_, lhs_arena,
      &other->_impl_.opcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fusion_kind_, lhs_arena,
      &other->_impl_.fusion_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outfeed_config_, lhs_arena,
      &other->_impl_.outfeed_config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.infeed_config_, lhs_arena,
      &other->_impl_.infeed_config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_call_target_, lhs_arena,
      &other->_impl_.custom_call_target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backend_config_, lhs_arena,
      &other->_impl_.backend_config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comparison_direction_, lhs_arena,
      &other->_impl_.comparison_direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comparison_type_, lhs_arena,
      &other->_impl_.comparison_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.async_execution_thread_, lhs_arena,
      &other->_impl_.async_execution_thread_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloInstructionProto, _impl_.is_composite_)
      + sizeof(HloInstructionProto::_impl_.is_composite_)
      - PROTOBUF_FIELD_OFFSET(HloInstructionProto, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
  swap(_impl_.optional_cross_program_prefetch_index_, other->_impl_.optional_cross_program_prefetch_index_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloInstructionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[1]);
}

// ===================================================================

class HloComputationProto::_Internal {
 public:
  static const ::xla::ProgramShapeProto& program_shape(const HloComputationProto* msg);
};

const ::xla::ProgramShapeProto&
HloComputationProto::_Internal::program_shape(const HloComputationProto* msg) {
  return *msg->_impl_.program_shape_;
}
void HloComputationProto::clear_program_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.program_shape_ != nullptr) {
    delete _impl_.program_shape_;
  }
  _impl_.program_shape_ = nullptr;
}
HloComputationProto::HloComputationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloComputationProto)
}
HloComputationProto::HloComputationProto(const HloComputationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloComputationProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instructions_){from._impl_.instructions_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.execution_thread_){}
    , decltype(_impl_.program_shape_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.root_id_){}
    , decltype(_impl_.is_fusion_computation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.execution_thread_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_thread_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_thread().empty()) {
    _this->_impl_.execution_thread_.Set(from._internal_execution_thread(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_program_shape()) {
    _this->_impl_.program_shape_ = new ::xla::ProgramShapeProto(*from._impl_.program_shape_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_fusion_computation_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_fusion_computation_));
  // @@protoc_insertion_point(copy_constructor:xla.HloComputationProto)
}

inline void HloComputationProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instructions_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.execution_thread_){}
    , decltype(_impl_.program_shape_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.root_id_){int64_t{0}}
    , decltype(_impl_.is_fusion_computation_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_thread_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_thread_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloComputationProto::~HloComputationProto() {
  // @@protoc_insertion_point(destructor:xla.HloComputationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloComputationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instructions_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.execution_thread_.Destroy();
  if (this != internal_default_instance()) delete _impl_.program_shape_;
}

void HloComputationProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloComputationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloComputationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instructions_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.execution_thread_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.program_shape_ != nullptr) {
    delete _impl_.program_shape_;
  }
  _impl_.program_shape_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_fusion_computation_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_fusion_computation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloComputationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloComputationProto.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloInstructionProto instructions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instructions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.ProgramShapeProto program_shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_program_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 root_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.root_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_fusion_computation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_fusion_computation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string execution_thread = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_execution_thread();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloComputationProto.execution_thread"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloComputationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloComputationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloComputationProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .xla.HloInstructionProto instructions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instructions_size()); i < n; i++) {
    const auto& repfield = this->_internal_instructions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.ProgramShapeProto program_shape = 4;
  if (this->_internal_has_program_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::program_shape(this),
        _Internal::program_shape(this).GetCachedSize(), target, stream);
  }

  // int64 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_id(), target);
  }

  // int64 root_id = 6;
  if (this->_internal_root_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_root_id(), target);
  }

  // bool is_fusion_computation = 7;
  if (this->_internal_is_fusion_computation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_fusion_computation(), target);
  }

  // string execution_thread = 8;
  if (!this->_internal_execution_thread().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_thread().data(), static_cast<int>(this->_internal_execution_thread().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloComputationProto.execution_thread");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_execution_thread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloComputationProto)
  return target;
}

size_t HloComputationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloComputationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HloInstructionProto instructions = 2;
  total_size += 1UL * this->_internal_instructions_size();
  for (const auto& msg : this->_impl_.instructions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string execution_thread = 8;
  if (!this->_internal_execution_thread().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_thread());
  }

  // .xla.ProgramShapeProto program_shape = 4;
  if (this->_internal_has_program_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.program_shape_);
  }

  // int64 id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 root_id = 6;
  if (this->_internal_root_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_root_id());
  }

  // bool is_fusion_computation = 7;
  if (this->_internal_is_fusion_computation() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloComputationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloComputationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloComputationProto::GetClassData() const { return &_class_data_; }


void HloComputationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloComputationProto*>(&to_msg);
  auto& from = static_cast<const HloComputationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloComputationProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instructions_.MergeFrom(from._impl_.instructions_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_execution_thread().empty()) {
    _this->_internal_set_execution_thread(from._internal_execution_thread());
  }
  if (from._internal_has_program_shape()) {
    _this->_internal_mutable_program_shape()->::xla::ProgramShapeProto::MergeFrom(
        from._internal_program_shape());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_root_id() != 0) {
    _this->_internal_set_root_id(from._internal_root_id());
  }
  if (from._internal_is_fusion_computation() != 0) {
    _this->_internal_set_is_fusion_computation(from._internal_is_fusion_computation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloComputationProto::CopyFrom(const HloComputationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloComputationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloComputationProto::IsInitialized() const {
  return true;
}

void HloComputationProto::InternalSwap(HloComputationProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instructions_.InternalSwap(&other->_impl_.instructions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execution_thread_, lhs_arena,
      &other->_impl_.execution_thread_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloComputationProto, _impl_.is_fusion_computation_)
      + sizeof(HloComputationProto::_impl_.is_fusion_computation_)
      - PROTOBUF_FIELD_OFFSET(HloComputationProto, _impl_.program_shape_)>(
          reinterpret_cast<char*>(&_impl_.program_shape_),
          reinterpret_cast<char*>(&other->_impl_.program_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloComputationProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[2]);
}

// ===================================================================

class HloScheduleProto_InstructionSequence::_Internal {
 public:
};

HloScheduleProto_InstructionSequence::HloScheduleProto_InstructionSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloScheduleProto.InstructionSequence)
}
HloScheduleProto_InstructionSequence::HloScheduleProto_InstructionSequence(const HloScheduleProto_InstructionSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloScheduleProto_InstructionSequence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruction_ids_){from._impl_.instruction_ids_}
    , /*decltype(_impl_._instruction_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.HloScheduleProto.InstructionSequence)
}

inline void HloScheduleProto_InstructionSequence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruction_ids_){arena}
    , /*decltype(_impl_._instruction_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloScheduleProto_InstructionSequence::~HloScheduleProto_InstructionSequence() {
  // @@protoc_insertion_point(destructor:xla.HloScheduleProto.InstructionSequence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloScheduleProto_InstructionSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruction_ids_.~RepeatedField();
}

void HloScheduleProto_InstructionSequence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloScheduleProto_InstructionSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloScheduleProto.InstructionSequence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruction_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloScheduleProto_InstructionSequence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 instruction_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_instruction_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_instruction_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloScheduleProto_InstructionSequence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloScheduleProto.InstructionSequence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 instruction_ids = 1;
  {
    int byte_size = _impl_._instruction_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_instruction_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloScheduleProto.InstructionSequence)
  return target;
}

size_t HloScheduleProto_InstructionSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloScheduleProto.InstructionSequence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 instruction_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.instruction_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._instruction_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloScheduleProto_InstructionSequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloScheduleProto_InstructionSequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloScheduleProto_InstructionSequence::GetClassData() const { return &_class_data_; }


void HloScheduleProto_InstructionSequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloScheduleProto_InstructionSequence*>(&to_msg);
  auto& from = static_cast<const HloScheduleProto_InstructionSequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloScheduleProto.InstructionSequence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruction_ids_.MergeFrom(from._impl_.instruction_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloScheduleProto_InstructionSequence::CopyFrom(const HloScheduleProto_InstructionSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloScheduleProto.InstructionSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloScheduleProto_InstructionSequence::IsInitialized() const {
  return true;
}

void HloScheduleProto_InstructionSequence::InternalSwap(HloScheduleProto_InstructionSequence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruction_ids_.InternalSwap(&other->_impl_.instruction_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloScheduleProto_InstructionSequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[3]);
}

// ===================================================================

HloScheduleProto_SequencesEntry_DoNotUse::HloScheduleProto_SequencesEntry_DoNotUse() {}
HloScheduleProto_SequencesEntry_DoNotUse::HloScheduleProto_SequencesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HloScheduleProto_SequencesEntry_DoNotUse::MergeFrom(const HloScheduleProto_SequencesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HloScheduleProto_SequencesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[4]);
}

// ===================================================================

class HloScheduleProto::_Internal {
 public:
};

HloScheduleProto::HloScheduleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HloScheduleProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:xla.HloScheduleProto)
}
HloScheduleProto::HloScheduleProto(const HloScheduleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloScheduleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sequences_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sequences_.MergeFrom(from._impl_.sequences_);
  // @@protoc_insertion_point(copy_constructor:xla.HloScheduleProto)
}

inline void HloScheduleProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sequences_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloScheduleProto::~HloScheduleProto() {
  // @@protoc_insertion_point(destructor:xla.HloScheduleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HloScheduleProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sequences_.Destruct();
  _impl_.sequences_.~MapField();
}

void HloScheduleProto::ArenaDtor(void* object) {
  HloScheduleProto* _this = reinterpret_cast< HloScheduleProto* >(object);
  _this->_impl_.sequences_.Destruct();
}
void HloScheduleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloScheduleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloScheduleProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sequences_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloScheduleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int64, .xla.HloScheduleProto.InstructionSequence> sequences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sequences_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloScheduleProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloScheduleProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .xla.HloScheduleProto.InstructionSequence> sequences = 1;
  if (!this->_internal_sequences().empty()) {
    using MapType = ::_pb::Map<int64_t, ::xla::HloScheduleProto_InstructionSequence>;
    using WireHelper = HloScheduleProto_SequencesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sequences();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloScheduleProto)
  return target;
}

size_t HloScheduleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloScheduleProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .xla.HloScheduleProto.InstructionSequence> sequences = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sequences_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::xla::HloScheduleProto_InstructionSequence >::const_iterator
      it = this->_internal_sequences().begin();
      it != this->_internal_sequences().end(); ++it) {
    total_size += HloScheduleProto_SequencesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloScheduleProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloScheduleProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloScheduleProto::GetClassData() const { return &_class_data_; }


void HloScheduleProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloScheduleProto*>(&to_msg);
  auto& from = static_cast<const HloScheduleProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloScheduleProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sequences_.MergeFrom(from._impl_.sequences_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloScheduleProto::CopyFrom(const HloScheduleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloScheduleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloScheduleProto::IsInitialized() const {
  return true;
}

void HloScheduleProto::InternalSwap(HloScheduleProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sequences_.InternalSwap(&other->_impl_.sequences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloScheduleProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[5]);
}

// ===================================================================

class HloInputOutputAliasProto_AliasEntryProto::_Internal {
 public:
};

HloInputOutputAliasProto_AliasEntryProto::HloInputOutputAliasProto_AliasEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloInputOutputAliasProto.AliasEntryProto)
}
HloInputOutputAliasProto_AliasEntryProto::HloInputOutputAliasProto_AliasEntryProto(const HloInputOutputAliasProto_AliasEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloInputOutputAliasProto_AliasEntryProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_shape_index_){from._impl_.output_shape_index_}
    , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parameter_shape_index_){from._impl_.parameter_shape_index_}
    , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parameter_number_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.parameter_number_, &from._impl_.parameter_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.parameter_number_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:xla.HloInputOutputAliasProto.AliasEntryProto)
}

inline void HloInputOutputAliasProto_AliasEntryProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_shape_index_){arena}
    , /*decltype(_impl_._output_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parameter_shape_index_){arena}
    , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parameter_number_){int64_t{0}}
    , decltype(_impl_.kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloInputOutputAliasProto_AliasEntryProto::~HloInputOutputAliasProto_AliasEntryProto() {
  // @@protoc_insertion_point(destructor:xla.HloInputOutputAliasProto.AliasEntryProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloInputOutputAliasProto_AliasEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_shape_index_.~RepeatedField();
  _impl_.parameter_shape_index_.~RepeatedField();
}

void HloInputOutputAliasProto_AliasEntryProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloInputOutputAliasProto_AliasEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloInputOutputAliasProto.AliasEntryProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_shape_index_.Clear();
  _impl_.parameter_shape_index_.Clear();
  ::memset(&_impl_.parameter_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.kind_) -
      reinterpret_cast<char*>(&_impl_.parameter_number_)) + sizeof(_impl_.kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloInputOutputAliasProto_AliasEntryProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 output_shape_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_output_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 parameter_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.parameter_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 parameter_shape_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_parameter_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_parameter_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.Kind kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::xla::Kind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloInputOutputAliasProto_AliasEntryProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloInputOutputAliasProto.AliasEntryProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 output_shape_index = 1;
  {
    int byte_size = _impl_._output_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_output_shape_index(), byte_size, target);
    }
  }

  // int64 parameter_number = 2;
  if (this->_internal_parameter_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_parameter_number(), target);
  }

  // repeated int64 parameter_shape_index = 3;
  {
    int byte_size = _impl_._parameter_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_parameter_shape_index(), byte_size, target);
    }
  }

  // .xla.Kind kind = 4;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloInputOutputAliasProto.AliasEntryProto)
  return target;
}

size_t HloInputOutputAliasProto_AliasEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloInputOutputAliasProto.AliasEntryProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 output_shape_index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 parameter_shape_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.parameter_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parameter_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 parameter_number = 2;
  if (this->_internal_parameter_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parameter_number());
  }

  // .xla.Kind kind = 4;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloInputOutputAliasProto_AliasEntryProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloInputOutputAliasProto_AliasEntryProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloInputOutputAliasProto_AliasEntryProto::GetClassData() const { return &_class_data_; }


void HloInputOutputAliasProto_AliasEntryProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloInputOutputAliasProto_AliasEntryProto*>(&to_msg);
  auto& from = static_cast<const HloInputOutputAliasProto_AliasEntryProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloInputOutputAliasProto.AliasEntryProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.output_shape_index_.MergeFrom(from._impl_.output_shape_index_);
  _this->_impl_.parameter_shape_index_.MergeFrom(from._impl_.parameter_shape_index_);
  if (from._internal_parameter_number() != 0) {
    _this->_internal_set_parameter_number(from._internal_parameter_number());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloInputOutputAliasProto_AliasEntryProto::CopyFrom(const HloInputOutputAliasProto_AliasEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloInputOutputAliasProto.AliasEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloInputOutputAliasProto_AliasEntryProto::IsInitialized() const {
  return true;
}

void HloInputOutputAliasProto_AliasEntryProto::InternalSwap(HloInputOutputAliasProto_AliasEntryProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.output_shape_index_.InternalSwap(&other->_impl_.output_shape_index_);
  _impl_.parameter_shape_index_.InternalSwap(&other->_impl_.parameter_shape_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloInputOutputAliasProto_AliasEntryProto, _impl_.kind_)
      + sizeof(HloInputOutputAliasProto_AliasEntryProto::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(HloInputOutputAliasProto_AliasEntryProto, _impl_.parameter_number_)>(
          reinterpret_cast<char*>(&_impl_.parameter_number_),
          reinterpret_cast<char*>(&other->_impl_.parameter_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloInputOutputAliasProto_AliasEntryProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[6]);
}

// ===================================================================

class HloInputOutputAliasProto::_Internal {
 public:
};

HloInputOutputAliasProto::HloInputOutputAliasProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloInputOutputAliasProto)
}
HloInputOutputAliasProto::HloInputOutputAliasProto(const HloInputOutputAliasProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloInputOutputAliasProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.HloInputOutputAliasProto)
}

inline void HloInputOutputAliasProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloInputOutputAliasProto::~HloInputOutputAliasProto() {
  // @@protoc_insertion_point(destructor:xla.HloInputOutputAliasProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloInputOutputAliasProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void HloInputOutputAliasProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloInputOutputAliasProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloInputOutputAliasProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloInputOutputAliasProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.HloInputOutputAliasProto.AliasEntryProto entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloInputOutputAliasProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloInputOutputAliasProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.HloInputOutputAliasProto.AliasEntryProto entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloInputOutputAliasProto)
  return target;
}

size_t HloInputOutputAliasProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloInputOutputAliasProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HloInputOutputAliasProto.AliasEntryProto entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloInputOutputAliasProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloInputOutputAliasProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloInputOutputAliasProto::GetClassData() const { return &_class_data_; }


void HloInputOutputAliasProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloInputOutputAliasProto*>(&to_msg);
  auto& from = static_cast<const HloInputOutputAliasProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloInputOutputAliasProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloInputOutputAliasProto::CopyFrom(const HloInputOutputAliasProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloInputOutputAliasProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloInputOutputAliasProto::IsInitialized() const {
  return true;
}

void HloInputOutputAliasProto::InternalSwap(HloInputOutputAliasProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloInputOutputAliasProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[7]);
}

// ===================================================================

class HloBufferDonorProto_BufferDonorEntryProto::_Internal {
 public:
};

HloBufferDonorProto_BufferDonorEntryProto::HloBufferDonorProto_BufferDonorEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloBufferDonorProto.BufferDonorEntryProto)
}
HloBufferDonorProto_BufferDonorEntryProto::HloBufferDonorProto_BufferDonorEntryProto(const HloBufferDonorProto_BufferDonorEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloBufferDonorProto_BufferDonorEntryProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_shape_index_){from._impl_.parameter_shape_index_}
    , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parameter_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.parameter_number_ = from._impl_.parameter_number_;
  // @@protoc_insertion_point(copy_constructor:xla.HloBufferDonorProto.BufferDonorEntryProto)
}

inline void HloBufferDonorProto_BufferDonorEntryProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_shape_index_){arena}
    , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.parameter_number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloBufferDonorProto_BufferDonorEntryProto::~HloBufferDonorProto_BufferDonorEntryProto() {
  // @@protoc_insertion_point(destructor:xla.HloBufferDonorProto.BufferDonorEntryProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloBufferDonorProto_BufferDonorEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameter_shape_index_.~RepeatedField();
}

void HloBufferDonorProto_BufferDonorEntryProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloBufferDonorProto_BufferDonorEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloBufferDonorProto.BufferDonorEntryProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameter_shape_index_.Clear();
  _impl_.parameter_number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloBufferDonorProto_BufferDonorEntryProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 parameter_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.parameter_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 parameter_shape_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_parameter_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_parameter_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloBufferDonorProto_BufferDonorEntryProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloBufferDonorProto.BufferDonorEntryProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 parameter_number = 1;
  if (this->_internal_parameter_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_parameter_number(), target);
  }

  // repeated int64 parameter_shape_index = 2;
  {
    int byte_size = _impl_._parameter_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_parameter_shape_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloBufferDonorProto.BufferDonorEntryProto)
  return target;
}

size_t HloBufferDonorProto_BufferDonorEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloBufferDonorProto.BufferDonorEntryProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 parameter_shape_index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.parameter_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parameter_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 parameter_number = 1;
  if (this->_internal_parameter_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parameter_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloBufferDonorProto_BufferDonorEntryProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloBufferDonorProto_BufferDonorEntryProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloBufferDonorProto_BufferDonorEntryProto::GetClassData() const { return &_class_data_; }


void HloBufferDonorProto_BufferDonorEntryProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloBufferDonorProto_BufferDonorEntryProto*>(&to_msg);
  auto& from = static_cast<const HloBufferDonorProto_BufferDonorEntryProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloBufferDonorProto.BufferDonorEntryProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameter_shape_index_.MergeFrom(from._impl_.parameter_shape_index_);
  if (from._internal_parameter_number() != 0) {
    _this->_internal_set_parameter_number(from._internal_parameter_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloBufferDonorProto_BufferDonorEntryProto::CopyFrom(const HloBufferDonorProto_BufferDonorEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloBufferDonorProto.BufferDonorEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloBufferDonorProto_BufferDonorEntryProto::IsInitialized() const {
  return true;
}

void HloBufferDonorProto_BufferDonorEntryProto::InternalSwap(HloBufferDonorProto_BufferDonorEntryProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameter_shape_index_.InternalSwap(&other->_impl_.parameter_shape_index_);
  swap(_impl_.parameter_number_, other->_impl_.parameter_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloBufferDonorProto_BufferDonorEntryProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[8]);
}

// ===================================================================

class HloBufferDonorProto::_Internal {
 public:
};

HloBufferDonorProto::HloBufferDonorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloBufferDonorProto)
}
HloBufferDonorProto::HloBufferDonorProto(const HloBufferDonorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloBufferDonorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.HloBufferDonorProto)
}

inline void HloBufferDonorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloBufferDonorProto::~HloBufferDonorProto() {
  // @@protoc_insertion_point(destructor:xla.HloBufferDonorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloBufferDonorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void HloBufferDonorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloBufferDonorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloBufferDonorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloBufferDonorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.HloBufferDonorProto.BufferDonorEntryProto entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloBufferDonorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloBufferDonorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.HloBufferDonorProto.BufferDonorEntryProto entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloBufferDonorProto)
  return target;
}

size_t HloBufferDonorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloBufferDonorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HloBufferDonorProto.BufferDonorEntryProto entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloBufferDonorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloBufferDonorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloBufferDonorProto::GetClassData() const { return &_class_data_; }


void HloBufferDonorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloBufferDonorProto*>(&to_msg);
  auto& from = static_cast<const HloBufferDonorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloBufferDonorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloBufferDonorProto::CopyFrom(const HloBufferDonorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloBufferDonorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloBufferDonorProto::IsInitialized() const {
  return true;
}

void HloBufferDonorProto::InternalSwap(HloBufferDonorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloBufferDonorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[9]);
}

// ===================================================================

class CrossProgramPrefetch::_Internal {
 public:
};

CrossProgramPrefetch::CrossProgramPrefetch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.CrossProgramPrefetch)
}
CrossProgramPrefetch::CrossProgramPrefetch(const CrossProgramPrefetch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CrossProgramPrefetch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){from._impl_.index_}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.parameter_){}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.parameter_, &from._impl_.parameter_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.parameter_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:xla.CrossProgramPrefetch)
}

inline void CrossProgramPrefetch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){arena}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.parameter_){int64_t{0}}
    , decltype(_impl_.offset_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CrossProgramPrefetch::~CrossProgramPrefetch() {
  // @@protoc_insertion_point(destructor:xla.CrossProgramPrefetch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossProgramPrefetch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_.~RepeatedField();
}

void CrossProgramPrefetch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrossProgramPrefetch::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CrossProgramPrefetch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  ::memset(&_impl_.parameter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.parameter_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossProgramPrefetch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossProgramPrefetch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.CrossProgramPrefetch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 parameter = 1;
  if (this->_internal_parameter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_parameter(), target);
  }

  // repeated int64 index = 2;
  {
    int byte_size = _impl_._index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_index(), byte_size, target);
    }
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.CrossProgramPrefetch)
  return target;
}

size_t CrossProgramPrefetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CrossProgramPrefetch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 parameter = 1;
  if (this->_internal_parameter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parameter());
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossProgramPrefetch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CrossProgramPrefetch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossProgramPrefetch::GetClassData() const { return &_class_data_; }


void CrossProgramPrefetch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CrossProgramPrefetch*>(&to_msg);
  auto& from = static_cast<const CrossProgramPrefetch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.CrossProgramPrefetch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_.MergeFrom(from._impl_.index_);
  if (from._internal_parameter() != 0) {
    _this->_internal_set_parameter(from._internal_parameter());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossProgramPrefetch::CopyFrom(const CrossProgramPrefetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CrossProgramPrefetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossProgramPrefetch::IsInitialized() const {
  return true;
}

void CrossProgramPrefetch::InternalSwap(CrossProgramPrefetch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossProgramPrefetch, _impl_.offset_)
      + sizeof(CrossProgramPrefetch::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(CrossProgramPrefetch, _impl_.parameter_)>(
          reinterpret_cast<char*>(&_impl_.parameter_),
          reinterpret_cast<char*>(&other->_impl_.parameter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossProgramPrefetch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[10]);
}

// ===================================================================

class StackFrameIndexProto_FileLocation::_Internal {
 public:
};

StackFrameIndexProto_FileLocation::StackFrameIndexProto_FileLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.StackFrameIndexProto.FileLocation)
}
StackFrameIndexProto_FileLocation::StackFrameIndexProto_FileLocation(const StackFrameIndexProto_FileLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StackFrameIndexProto_FileLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_id_){}
    , decltype(_impl_.function_name_id_){}
    , decltype(_impl_.line_){}
    , decltype(_impl_.column_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.file_name_id_, &from._impl_.file_name_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_) -
    reinterpret_cast<char*>(&_impl_.file_name_id_)) + sizeof(_impl_.column_));
  // @@protoc_insertion_point(copy_constructor:xla.StackFrameIndexProto.FileLocation)
}

inline void StackFrameIndexProto_FileLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_id_){0}
    , decltype(_impl_.function_name_id_){0}
    , decltype(_impl_.line_){0}
    , decltype(_impl_.column_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StackFrameIndexProto_FileLocation::~StackFrameIndexProto_FileLocation() {
  // @@protoc_insertion_point(destructor:xla.StackFrameIndexProto.FileLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StackFrameIndexProto_FileLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StackFrameIndexProto_FileLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StackFrameIndexProto_FileLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.StackFrameIndexProto.FileLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.file_name_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.column_) -
      reinterpret_cast<char*>(&_impl_.file_name_id_)) + sizeof(_impl_.column_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackFrameIndexProto_FileLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 file_name_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.file_name_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 function_name_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.function_name_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StackFrameIndexProto_FileLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.StackFrameIndexProto.FileLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 file_name_id = 1;
  if (this->_internal_file_name_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_file_name_id(), target);
  }

  // int32 function_name_id = 2;
  if (this->_internal_function_name_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_function_name_id(), target);
  }

  // int32 line = 3;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_line(), target);
  }

  // int32 column = 4;
  if (this->_internal_column() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.StackFrameIndexProto.FileLocation)
  return target;
}

size_t StackFrameIndexProto_FileLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.StackFrameIndexProto.FileLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 file_name_id = 1;
  if (this->_internal_file_name_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_name_id());
  }

  // int32 function_name_id = 2;
  if (this->_internal_function_name_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_function_name_id());
  }

  // int32 line = 3;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
  }

  // int32 column = 4;
  if (this->_internal_column() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_column());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StackFrameIndexProto_FileLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StackFrameIndexProto_FileLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StackFrameIndexProto_FileLocation::GetClassData() const { return &_class_data_; }


void StackFrameIndexProto_FileLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StackFrameIndexProto_FileLocation*>(&to_msg);
  auto& from = static_cast<const StackFrameIndexProto_FileLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.StackFrameIndexProto.FileLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_file_name_id() != 0) {
    _this->_internal_set_file_name_id(from._internal_file_name_id());
  }
  if (from._internal_function_name_id() != 0) {
    _this->_internal_set_function_name_id(from._internal_function_name_id());
  }
  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  if (from._internal_column() != 0) {
    _this->_internal_set_column(from._internal_column());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StackFrameIndexProto_FileLocation::CopyFrom(const StackFrameIndexProto_FileLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.StackFrameIndexProto.FileLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackFrameIndexProto_FileLocation::IsInitialized() const {
  return true;
}

void StackFrameIndexProto_FileLocation::InternalSwap(StackFrameIndexProto_FileLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StackFrameIndexProto_FileLocation, _impl_.column_)
      + sizeof(StackFrameIndexProto_FileLocation::_impl_.column_)
      - PROTOBUF_FIELD_OFFSET(StackFrameIndexProto_FileLocation, _impl_.file_name_id_)>(
          reinterpret_cast<char*>(&_impl_.file_name_id_),
          reinterpret_cast<char*>(&other->_impl_.file_name_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StackFrameIndexProto_FileLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[11]);
}

// ===================================================================

class StackFrameIndexProto_StackFrame::_Internal {
 public:
};

StackFrameIndexProto_StackFrame::StackFrameIndexProto_StackFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.StackFrameIndexProto.StackFrame)
}
StackFrameIndexProto_StackFrame::StackFrameIndexProto_StackFrame(const StackFrameIndexProto_StackFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StackFrameIndexProto_StackFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_location_id_){}
    , decltype(_impl_.parent_frame_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.file_location_id_, &from._impl_.file_location_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.parent_frame_id_) -
    reinterpret_cast<char*>(&_impl_.file_location_id_)) + sizeof(_impl_.parent_frame_id_));
  // @@protoc_insertion_point(copy_constructor:xla.StackFrameIndexProto.StackFrame)
}

inline void StackFrameIndexProto_StackFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_location_id_){0}
    , decltype(_impl_.parent_frame_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StackFrameIndexProto_StackFrame::~StackFrameIndexProto_StackFrame() {
  // @@protoc_insertion_point(destructor:xla.StackFrameIndexProto.StackFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StackFrameIndexProto_StackFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StackFrameIndexProto_StackFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StackFrameIndexProto_StackFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.StackFrameIndexProto.StackFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.file_location_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.parent_frame_id_) -
      reinterpret_cast<char*>(&_impl_.file_location_id_)) + sizeof(_impl_.parent_frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackFrameIndexProto_StackFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 file_location_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.file_location_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parent_frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.parent_frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StackFrameIndexProto_StackFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.StackFrameIndexProto.StackFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 file_location_id = 1;
  if (this->_internal_file_location_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_file_location_id(), target);
  }

  // int32 parent_frame_id = 2;
  if (this->_internal_parent_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_parent_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.StackFrameIndexProto.StackFrame)
  return target;
}

size_t StackFrameIndexProto_StackFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.StackFrameIndexProto.StackFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 file_location_id = 1;
  if (this->_internal_file_location_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_location_id());
  }

  // int32 parent_frame_id = 2;
  if (this->_internal_parent_frame_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StackFrameIndexProto_StackFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StackFrameIndexProto_StackFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StackFrameIndexProto_StackFrame::GetClassData() const { return &_class_data_; }


void StackFrameIndexProto_StackFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StackFrameIndexProto_StackFrame*>(&to_msg);
  auto& from = static_cast<const StackFrameIndexProto_StackFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.StackFrameIndexProto.StackFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_file_location_id() != 0) {
    _this->_internal_set_file_location_id(from._internal_file_location_id());
  }
  if (from._internal_parent_frame_id() != 0) {
    _this->_internal_set_parent_frame_id(from._internal_parent_frame_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StackFrameIndexProto_StackFrame::CopyFrom(const StackFrameIndexProto_StackFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.StackFrameIndexProto.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackFrameIndexProto_StackFrame::IsInitialized() const {
  return true;
}

void StackFrameIndexProto_StackFrame::InternalSwap(StackFrameIndexProto_StackFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StackFrameIndexProto_StackFrame, _impl_.parent_frame_id_)
      + sizeof(StackFrameIndexProto_StackFrame::_impl_.parent_frame_id_)
      - PROTOBUF_FIELD_OFFSET(StackFrameIndexProto_StackFrame, _impl_.file_location_id_)>(
          reinterpret_cast<char*>(&_impl_.file_location_id_),
          reinterpret_cast<char*>(&other->_impl_.file_location_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StackFrameIndexProto_StackFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[12]);
}

// ===================================================================

class StackFrameIndexProto::_Internal {
 public:
};

StackFrameIndexProto::StackFrameIndexProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.StackFrameIndexProto)
}
StackFrameIndexProto::StackFrameIndexProto(const StackFrameIndexProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StackFrameIndexProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_names_){from._impl_.file_names_}
    , decltype(_impl_.function_names_){from._impl_.function_names_}
    , decltype(_impl_.file_locations_){from._impl_.file_locations_}
    , decltype(_impl_.stack_frames_){from._impl_.stack_frames_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.StackFrameIndexProto)
}

inline void StackFrameIndexProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_names_){arena}
    , decltype(_impl_.function_names_){arena}
    , decltype(_impl_.file_locations_){arena}
    , decltype(_impl_.stack_frames_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StackFrameIndexProto::~StackFrameIndexProto() {
  // @@protoc_insertion_point(destructor:xla.StackFrameIndexProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StackFrameIndexProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_names_.~RepeatedPtrField();
  _impl_.function_names_.~RepeatedPtrField();
  _impl_.file_locations_.~RepeatedPtrField();
  _impl_.stack_frames_.~RepeatedPtrField();
}

void StackFrameIndexProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StackFrameIndexProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.StackFrameIndexProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_names_.Clear();
  _impl_.function_names_.Clear();
  _impl_.file_locations_.Clear();
  _impl_.stack_frames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackFrameIndexProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string file_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.StackFrameIndexProto.file_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string function_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_function_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.StackFrameIndexProto.function_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.StackFrameIndexProto.FileLocation file_locations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.StackFrameIndexProto.StackFrame stack_frames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StackFrameIndexProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.StackFrameIndexProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_names = 1;
  for (int i = 0, n = this->_internal_file_names_size(); i < n; i++) {
    const auto& s = this->_internal_file_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.StackFrameIndexProto.file_names");
    target = stream->WriteString(1, s, target);
  }

  // repeated string function_names = 2;
  for (int i = 0, n = this->_internal_function_names_size(); i < n; i++) {
    const auto& s = this->_internal_function_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.StackFrameIndexProto.function_names");
    target = stream->WriteString(2, s, target);
  }

  // repeated .xla.StackFrameIndexProto.FileLocation file_locations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_locations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xla.StackFrameIndexProto.StackFrame stack_frames = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stack_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_stack_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.StackFrameIndexProto)
  return target;
}

size_t StackFrameIndexProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.StackFrameIndexProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.file_names_.size());
  for (int i = 0, n = _impl_.file_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.file_names_.Get(i));
  }

  // repeated string function_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.function_names_.size());
  for (int i = 0, n = _impl_.function_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.function_names_.Get(i));
  }

  // repeated .xla.StackFrameIndexProto.FileLocation file_locations = 3;
  total_size += 1UL * this->_internal_file_locations_size();
  for (const auto& msg : this->_impl_.file_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.StackFrameIndexProto.StackFrame stack_frames = 4;
  total_size += 1UL * this->_internal_stack_frames_size();
  for (const auto& msg : this->_impl_.stack_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StackFrameIndexProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StackFrameIndexProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StackFrameIndexProto::GetClassData() const { return &_class_data_; }


void StackFrameIndexProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StackFrameIndexProto*>(&to_msg);
  auto& from = static_cast<const StackFrameIndexProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.StackFrameIndexProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_names_.MergeFrom(from._impl_.file_names_);
  _this->_impl_.function_names_.MergeFrom(from._impl_.function_names_);
  _this->_impl_.file_locations_.MergeFrom(from._impl_.file_locations_);
  _this->_impl_.stack_frames_.MergeFrom(from._impl_.stack_frames_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StackFrameIndexProto::CopyFrom(const StackFrameIndexProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.StackFrameIndexProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackFrameIndexProto::IsInitialized() const {
  return true;
}

void StackFrameIndexProto::InternalSwap(StackFrameIndexProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_names_.InternalSwap(&other->_impl_.file_names_);
  _impl_.function_names_.InternalSwap(&other->_impl_.function_names_);
  _impl_.file_locations_.InternalSwap(&other->_impl_.file_locations_);
  _impl_.stack_frames_.InternalSwap(&other->_impl_.stack_frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StackFrameIndexProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[13]);
}

// ===================================================================

class HloModuleProto_ProfileInfo::_Internal {
 public:
};

HloModuleProto_ProfileInfo::HloModuleProto_ProfileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleProto.ProfileInfo)
}
HloModuleProto_ProfileInfo::HloModuleProto_ProfileInfo(const HloModuleProto_ProfileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleProto_ProfileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fingerprint_){}
    , decltype(_impl_.relative_speedup_){}
    , decltype(_impl_.profile_type_){}
    , decltype(_impl_.profile_source_){}
    , decltype(_impl_.compilation_event_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fingerprint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fingerprint().empty()) {
    _this->_impl_.fingerprint_.Set(from._internal_fingerprint(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.relative_speedup_, &from._impl_.relative_speedup_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compilation_event_) -
    reinterpret_cast<char*>(&_impl_.relative_speedup_)) + sizeof(_impl_.compilation_event_));
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleProto.ProfileInfo)
}

inline void HloModuleProto_ProfileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fingerprint_){}
    , decltype(_impl_.relative_speedup_){0}
    , decltype(_impl_.profile_type_){0}
    , decltype(_impl_.profile_source_){0}
    , decltype(_impl_.compilation_event_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fingerprint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloModuleProto_ProfileInfo::~HloModuleProto_ProfileInfo() {
  // @@protoc_insertion_point(destructor:xla.HloModuleProto.ProfileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloModuleProto_ProfileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fingerprint_.Destroy();
}

void HloModuleProto_ProfileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleProto_ProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleProto.ProfileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fingerprint_.ClearToEmpty();
  ::memset(&_impl_.relative_speedup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compilation_event_) -
      reinterpret_cast<char*>(&_impl_.relative_speedup_)) + sizeof(_impl_.compilation_event_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleProto_ProfileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.HloModuleProto.ProfileType profile_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_profile_type(static_cast<::xla::HloModuleProto_ProfileType>(val));
        } else
          goto handle_unusual;
        continue;
      // double relative_speedup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.relative_speedup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .xla.ProfileSource profile_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_profile_source(static_cast<::xla::ProfileSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .xla.CompilationEvent compilation_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compilation_event(static_cast<::xla::CompilationEvent>(val));
        } else
          goto handle_unusual;
        continue;
      // string fingerprint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloModuleProto.ProfileInfo.fingerprint"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleProto_ProfileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleProto.ProfileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.HloModuleProto.ProfileType profile_type = 1;
  if (this->_internal_profile_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_profile_type(), target);
  }

  // double relative_speedup = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_speedup = this->_internal_relative_speedup();
  uint64_t raw_relative_speedup;
  memcpy(&raw_relative_speedup, &tmp_relative_speedup, sizeof(tmp_relative_speedup));
  if (raw_relative_speedup != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_relative_speedup(), target);
  }

  // .xla.ProfileSource profile_source = 3;
  if (this->_internal_profile_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_profile_source(), target);
  }

  // .xla.CompilationEvent compilation_event = 4;
  if (this->_internal_compilation_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_compilation_event(), target);
  }

  // string fingerprint = 5;
  if (!this->_internal_fingerprint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloModuleProto.ProfileInfo.fingerprint");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fingerprint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleProto.ProfileInfo)
  return target;
}

size_t HloModuleProto_ProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleProto.ProfileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fingerprint = 5;
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  // double relative_speedup = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_speedup = this->_internal_relative_speedup();
  uint64_t raw_relative_speedup;
  memcpy(&raw_relative_speedup, &tmp_relative_speedup, sizeof(tmp_relative_speedup));
  if (raw_relative_speedup != 0) {
    total_size += 1 + 8;
  }

  // .xla.HloModuleProto.ProfileType profile_type = 1;
  if (this->_internal_profile_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_profile_type());
  }

  // .xla.ProfileSource profile_source = 3;
  if (this->_internal_profile_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_profile_source());
  }

  // .xla.CompilationEvent compilation_event = 4;
  if (this->_internal_compilation_event() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compilation_event());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleProto_ProfileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleProto_ProfileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleProto_ProfileInfo::GetClassData() const { return &_class_data_; }


void HloModuleProto_ProfileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleProto_ProfileInfo*>(&to_msg);
  auto& from = static_cast<const HloModuleProto_ProfileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleProto.ProfileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fingerprint().empty()) {
    _this->_internal_set_fingerprint(from._internal_fingerprint());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_speedup = from._internal_relative_speedup();
  uint64_t raw_relative_speedup;
  memcpy(&raw_relative_speedup, &tmp_relative_speedup, sizeof(tmp_relative_speedup));
  if (raw_relative_speedup != 0) {
    _this->_internal_set_relative_speedup(from._internal_relative_speedup());
  }
  if (from._internal_profile_type() != 0) {
    _this->_internal_set_profile_type(from._internal_profile_type());
  }
  if (from._internal_profile_source() != 0) {
    _this->_internal_set_profile_source(from._internal_profile_source());
  }
  if (from._internal_compilation_event() != 0) {
    _this->_internal_set_compilation_event(from._internal_compilation_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleProto_ProfileInfo::CopyFrom(const HloModuleProto_ProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleProto.ProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleProto_ProfileInfo::IsInitialized() const {
  return true;
}

void HloModuleProto_ProfileInfo::InternalSwap(HloModuleProto_ProfileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fingerprint_, lhs_arena,
      &other->_impl_.fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloModuleProto_ProfileInfo, _impl_.compilation_event_)
      + sizeof(HloModuleProto_ProfileInfo::_impl_.compilation_event_)
      - PROTOBUF_FIELD_OFFSET(HloModuleProto_ProfileInfo, _impl_.relative_speedup_)>(
          reinterpret_cast<char*>(&_impl_.relative_speedup_),
          reinterpret_cast<char*>(&other->_impl_.relative_speedup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleProto_ProfileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[14]);
}

// ===================================================================

class HloModuleProto::_Internal {
 public:
  static const ::xla::ProgramShapeProto& host_program_shape(const HloModuleProto* msg);
  static const ::xla::HloScheduleProto& schedule(const HloModuleProto* msg);
  static const ::xla::HloInputOutputAliasProto& input_output_alias(const HloModuleProto* msg);
  static const ::xla::HloBufferDonorProto& buffer_donor(const HloModuleProto* msg);
  static const ::xla::OpSharding& spmd_output_sharding(const HloModuleProto* msg);
  static const ::xla::DeviceAssignmentProto& device_assignment(const HloModuleProto* msg);
  static const ::xla::StackFrameIndexProto& stack_frame_index(const HloModuleProto* msg);
  static const ::xla::FrontendAttributes& frontend_attributes(const HloModuleProto* msg);
};

const ::xla::ProgramShapeProto&
HloModuleProto::_Internal::host_program_shape(const HloModuleProto* msg) {
  return *msg->_impl_.host_program_shape_;
}
const ::xla::HloScheduleProto&
HloModuleProto::_Internal::schedule(const HloModuleProto* msg) {
  return *msg->_impl_.schedule_;
}
const ::xla::HloInputOutputAliasProto&
HloModuleProto::_Internal::input_output_alias(const HloModuleProto* msg) {
  return *msg->_impl_.input_output_alias_;
}
const ::xla::HloBufferDonorProto&
HloModuleProto::_Internal::buffer_donor(const HloModuleProto* msg) {
  return *msg->_impl_.buffer_donor_;
}
const ::xla::OpSharding&
HloModuleProto::_Internal::spmd_output_sharding(const HloModuleProto* msg) {
  return *msg->_impl_.spmd_output_sharding_;
}
const ::xla::DeviceAssignmentProto&
HloModuleProto::_Internal::device_assignment(const HloModuleProto* msg) {
  return *msg->_impl_.device_assignment_;
}
const ::xla::StackFrameIndexProto&
HloModuleProto::_Internal::stack_frame_index(const HloModuleProto* msg) {
  return *msg->_impl_.stack_frame_index_;
}
const ::xla::FrontendAttributes&
HloModuleProto::_Internal::frontend_attributes(const HloModuleProto* msg) {
  return *msg->_impl_.frontend_attributes_;
}
void HloModuleProto::clear_host_program_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.host_program_shape_ != nullptr) {
    delete _impl_.host_program_shape_;
  }
  _impl_.host_program_shape_ = nullptr;
}
void HloModuleProto::clear_spmd_output_sharding() {
  if (GetArenaForAllocation() == nullptr && _impl_.spmd_output_sharding_ != nullptr) {
    delete _impl_.spmd_output_sharding_;
  }
  _impl_.spmd_output_sharding_ = nullptr;
}
void HloModuleProto::clear_spmd_parameters_shardings() {
  _impl_.spmd_parameters_shardings_.Clear();
}
void HloModuleProto::clear_device_assignment() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_assignment_ != nullptr) {
    delete _impl_.device_assignment_;
  }
  _impl_.device_assignment_ = nullptr;
}
void HloModuleProto::clear_frontend_attributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.frontend_attributes_ != nullptr) {
    delete _impl_.frontend_attributes_;
  }
  _impl_.frontend_attributes_ = nullptr;
}
HloModuleProto::HloModuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleProto)
}
HloModuleProto::HloModuleProto(const HloModuleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.computations_){from._impl_.computations_}
    , decltype(_impl_.cross_program_prefetches_){from._impl_.cross_program_prefetches_}
    , decltype(_impl_.profile_info_){from._impl_.profile_info_}
    , decltype(_impl_.spmd_parameters_shardings_){from._impl_.spmd_parameters_shardings_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.entry_computation_name_){}
    , decltype(_impl_.host_program_shape_){nullptr}
    , decltype(_impl_.schedule_){nullptr}
    , decltype(_impl_.input_output_alias_){nullptr}
    , decltype(_impl_.spmd_output_sharding_){nullptr}
    , decltype(_impl_.device_assignment_){nullptr}
    , decltype(_impl_.stack_frame_index_){nullptr}
    , decltype(_impl_.buffer_donor_){nullptr}
    , decltype(_impl_.frontend_attributes_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.entry_computation_id_){}
    , decltype(_impl_.is_dynamic_){}
    , decltype(_impl_.use_auto_spmd_partitioning_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entry_computation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entry_computation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entry_computation_name().empty()) {
    _this->_impl_.entry_computation_name_.Set(from._internal_entry_computation_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_host_program_shape()) {
    _this->_impl_.host_program_shape_ = new ::xla::ProgramShapeProto(*from._impl_.host_program_shape_);
  }
  if (from._internal_has_schedule()) {
    _this->_impl_.schedule_ = new ::xla::HloScheduleProto(*from._impl_.schedule_);
  }
  if (from._internal_has_input_output_alias()) {
    _this->_impl_.input_output_alias_ = new ::xla::HloInputOutputAliasProto(*from._impl_.input_output_alias_);
  }
  if (from._internal_has_spmd_output_sharding()) {
    _this->_impl_.spmd_output_sharding_ = new ::xla::OpSharding(*from._impl_.spmd_output_sharding_);
  }
  if (from._internal_has_device_assignment()) {
    _this->_impl_.device_assignment_ = new ::xla::DeviceAssignmentProto(*from._impl_.device_assignment_);
  }
  if (from._internal_has_stack_frame_index()) {
    _this->_impl_.stack_frame_index_ = new ::xla::StackFrameIndexProto(*from._impl_.stack_frame_index_);
  }
  if (from._internal_has_buffer_donor()) {
    _this->_impl_.buffer_donor_ = new ::xla::HloBufferDonorProto(*from._impl_.buffer_donor_);
  }
  if (from._internal_has_frontend_attributes()) {
    _this->_impl_.frontend_attributes_ = new ::xla::FrontendAttributes(*from._impl_.frontend_attributes_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_auto_spmd_partitioning_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.use_auto_spmd_partitioning_));
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleProto)
}

inline void HloModuleProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.computations_){arena}
    , decltype(_impl_.cross_program_prefetches_){arena}
    , decltype(_impl_.profile_info_){arena}
    , decltype(_impl_.spmd_parameters_shardings_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.entry_computation_name_){}
    , decltype(_impl_.host_program_shape_){nullptr}
    , decltype(_impl_.schedule_){nullptr}
    , decltype(_impl_.input_output_alias_){nullptr}
    , decltype(_impl_.spmd_output_sharding_){nullptr}
    , decltype(_impl_.device_assignment_){nullptr}
    , decltype(_impl_.stack_frame_index_){nullptr}
    , decltype(_impl_.buffer_donor_){nullptr}
    , decltype(_impl_.frontend_attributes_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.entry_computation_id_){int64_t{0}}
    , decltype(_impl_.is_dynamic_){false}
    , decltype(_impl_.use_auto_spmd_partitioning_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entry_computation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entry_computation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloModuleProto::~HloModuleProto() {
  // @@protoc_insertion_point(destructor:xla.HloModuleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloModuleProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.computations_.~RepeatedPtrField();
  _impl_.cross_program_prefetches_.~RepeatedPtrField();
  _impl_.profile_info_.~RepeatedPtrField();
  _impl_.spmd_parameters_shardings_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.entry_computation_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.host_program_shape_;
  if (this != internal_default_instance()) delete _impl_.schedule_;
  if (this != internal_default_instance()) delete _impl_.input_output_alias_;
  if (this != internal_default_instance()) delete _impl_.spmd_output_sharding_;
  if (this != internal_default_instance()) delete _impl_.device_assignment_;
  if (this != internal_default_instance()) delete _impl_.stack_frame_index_;
  if (this != internal_default_instance()) delete _impl_.buffer_donor_;
  if (this != internal_default_instance()) delete _impl_.frontend_attributes_;
}

void HloModuleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.computations_.Clear();
  _impl_.cross_program_prefetches_.Clear();
  _impl_.profile_info_.Clear();
  _impl_.spmd_parameters_shardings_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.entry_computation_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.host_program_shape_ != nullptr) {
    delete _impl_.host_program_shape_;
  }
  _impl_.host_program_shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.schedule_ != nullptr) {
    delete _impl_.schedule_;
  }
  _impl_.schedule_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_output_alias_ != nullptr) {
    delete _impl_.input_output_alias_;
  }
  _impl_.input_output_alias_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spmd_output_sharding_ != nullptr) {
    delete _impl_.spmd_output_sharding_;
  }
  _impl_.spmd_output_sharding_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.device_assignment_ != nullptr) {
    delete _impl_.device_assignment_;
  }
  _impl_.device_assignment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stack_frame_index_ != nullptr) {
    delete _impl_.stack_frame_index_;
  }
  _impl_.stack_frame_index_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buffer_donor_ != nullptr) {
    delete _impl_.buffer_donor_;
  }
  _impl_.buffer_donor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.frontend_attributes_ != nullptr) {
    delete _impl_.frontend_attributes_;
  }
  _impl_.frontend_attributes_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_auto_spmd_partitioning_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.use_auto_spmd_partitioning_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloModuleProto.name"));
        } else
          goto handle_unusual;
        continue;
      // string entry_computation_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_entry_computation_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloModuleProto.entry_computation_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloComputationProto computations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_computations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.ProgramShapeProto host_program_shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_program_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 entry_computation_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.entry_computation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.HloScheduleProto schedule = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.HloInputOutputAliasProto input_output_alias = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_output_alias(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.CrossProgramPrefetch cross_program_prefetches = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cross_program_prefetches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_dynamic = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.OpSharding spmd_output_sharding = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_spmd_output_sharding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloModuleProto.ProfileInfo profile_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profile_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.OpSharding spmd_parameters_shardings = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spmd_parameters_shardings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.DeviceAssignmentProto device_assignment = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_assignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_auto_spmd_partitioning = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.use_auto_spmd_partitioning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.StackFrameIndexProto stack_frame_index = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_stack_frame_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.HloBufferDonorProto buffer_donor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer_donor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.FrontendAttributes frontend_attributes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_frontend_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloModuleProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string entry_computation_name = 2;
  if (!this->_internal_entry_computation_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entry_computation_name().data(), static_cast<int>(this->_internal_entry_computation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloModuleProto.entry_computation_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entry_computation_name(), target);
  }

  // repeated .xla.HloComputationProto computations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_computations_size()); i < n; i++) {
    const auto& repfield = this->_internal_computations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.ProgramShapeProto host_program_shape = 4;
  if (this->_internal_has_host_program_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::host_program_shape(this),
        _Internal::host_program_shape(this).GetCachedSize(), target, stream);
  }

  // int64 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_id(), target);
  }

  // int64 entry_computation_id = 6;
  if (this->_internal_entry_computation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_entry_computation_id(), target);
  }

  // .xla.HloScheduleProto schedule = 7;
  if (this->_internal_has_schedule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::schedule(this),
        _Internal::schedule(this).GetCachedSize(), target, stream);
  }

  // .xla.HloInputOutputAliasProto input_output_alias = 8;
  if (this->_internal_has_input_output_alias()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::input_output_alias(this),
        _Internal::input_output_alias(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.CrossProgramPrefetch cross_program_prefetches = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cross_program_prefetches_size()); i < n; i++) {
    const auto& repfield = this->_internal_cross_program_prefetches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_dynamic = 11;
  if (this->_internal_is_dynamic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_dynamic(), target);
  }

  // .xla.OpSharding spmd_output_sharding = 12;
  if (this->_internal_has_spmd_output_sharding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::spmd_output_sharding(this),
        _Internal::spmd_output_sharding(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.HloModuleProto.ProfileInfo profile_info = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_profile_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_profile_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xla.OpSharding spmd_parameters_shardings = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spmd_parameters_shardings_size()); i < n; i++) {
    const auto& repfield = this->_internal_spmd_parameters_shardings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.DeviceAssignmentProto device_assignment = 15;
  if (this->_internal_has_device_assignment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::device_assignment(this),
        _Internal::device_assignment(this).GetCachedSize(), target, stream);
  }

  // bool use_auto_spmd_partitioning = 16;
  if (this->_internal_use_auto_spmd_partitioning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_use_auto_spmd_partitioning(), target);
  }

  // .xla.StackFrameIndexProto stack_frame_index = 17;
  if (this->_internal_has_stack_frame_index()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::stack_frame_index(this),
        _Internal::stack_frame_index(this).GetCachedSize(), target, stream);
  }

  // .xla.HloBufferDonorProto buffer_donor = 18;
  if (this->_internal_has_buffer_donor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::buffer_donor(this),
        _Internal::buffer_donor(this).GetCachedSize(), target, stream);
  }

  // .xla.FrontendAttributes frontend_attributes = 19;
  if (this->_internal_has_frontend_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::frontend_attributes(this),
        _Internal::frontend_attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleProto)
  return target;
}

size_t HloModuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HloComputationProto computations = 3;
  total_size += 1UL * this->_internal_computations_size();
  for (const auto& msg : this->_impl_.computations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.CrossProgramPrefetch cross_program_prefetches = 10;
  total_size += 1UL * this->_internal_cross_program_prefetches_size();
  for (const auto& msg : this->_impl_.cross_program_prefetches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.HloModuleProto.ProfileInfo profile_info = 13;
  total_size += 1UL * this->_internal_profile_info_size();
  for (const auto& msg : this->_impl_.profile_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.OpSharding spmd_parameters_shardings = 14;
  total_size += 1UL * this->_internal_spmd_parameters_shardings_size();
  for (const auto& msg : this->_impl_.spmd_parameters_shardings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string entry_computation_name = 2;
  if (!this->_internal_entry_computation_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry_computation_name());
  }

  // .xla.ProgramShapeProto host_program_shape = 4;
  if (this->_internal_has_host_program_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.host_program_shape_);
  }

  // .xla.HloScheduleProto schedule = 7;
  if (this->_internal_has_schedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schedule_);
  }

  // .xla.HloInputOutputAliasProto input_output_alias = 8;
  if (this->_internal_has_input_output_alias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_output_alias_);
  }

  // .xla.OpSharding spmd_output_sharding = 12;
  if (this->_internal_has_spmd_output_sharding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spmd_output_sharding_);
  }

  // .xla.DeviceAssignmentProto device_assignment = 15;
  if (this->_internal_has_device_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_assignment_);
  }

  // .xla.StackFrameIndexProto stack_frame_index = 17;
  if (this->_internal_has_stack_frame_index()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stack_frame_index_);
  }

  // .xla.HloBufferDonorProto buffer_donor = 18;
  if (this->_internal_has_buffer_donor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buffer_donor_);
  }

  // .xla.FrontendAttributes frontend_attributes = 19;
  if (this->_internal_has_frontend_attributes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frontend_attributes_);
  }

  // int64 id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 entry_computation_id = 6;
  if (this->_internal_entry_computation_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_entry_computation_id());
  }

  // bool is_dynamic = 11;
  if (this->_internal_is_dynamic() != 0) {
    total_size += 1 + 1;
  }

  // bool use_auto_spmd_partitioning = 16;
  if (this->_internal_use_auto_spmd_partitioning() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleProto::GetClassData() const { return &_class_data_; }


void HloModuleProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleProto*>(&to_msg);
  auto& from = static_cast<const HloModuleProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.computations_.MergeFrom(from._impl_.computations_);
  _this->_impl_.cross_program_prefetches_.MergeFrom(from._impl_.cross_program_prefetches_);
  _this->_impl_.profile_info_.MergeFrom(from._impl_.profile_info_);
  _this->_impl_.spmd_parameters_shardings_.MergeFrom(from._impl_.spmd_parameters_shardings_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_entry_computation_name().empty()) {
    _this->_internal_set_entry_computation_name(from._internal_entry_computation_name());
  }
  if (from._internal_has_host_program_shape()) {
    _this->_internal_mutable_host_program_shape()->::xla::ProgramShapeProto::MergeFrom(
        from._internal_host_program_shape());
  }
  if (from._internal_has_schedule()) {
    _this->_internal_mutable_schedule()->::xla::HloScheduleProto::MergeFrom(
        from._internal_schedule());
  }
  if (from._internal_has_input_output_alias()) {
    _this->_internal_mutable_input_output_alias()->::xla::HloInputOutputAliasProto::MergeFrom(
        from._internal_input_output_alias());
  }
  if (from._internal_has_spmd_output_sharding()) {
    _this->_internal_mutable_spmd_output_sharding()->::xla::OpSharding::MergeFrom(
        from._internal_spmd_output_sharding());
  }
  if (from._internal_has_device_assignment()) {
    _this->_internal_mutable_device_assignment()->::xla::DeviceAssignmentProto::MergeFrom(
        from._internal_device_assignment());
  }
  if (from._internal_has_stack_frame_index()) {
    _this->_internal_mutable_stack_frame_index()->::xla::StackFrameIndexProto::MergeFrom(
        from._internal_stack_frame_index());
  }
  if (from._internal_has_buffer_donor()) {
    _this->_internal_mutable_buffer_donor()->::xla::HloBufferDonorProto::MergeFrom(
        from._internal_buffer_donor());
  }
  if (from._internal_has_frontend_attributes()) {
    _this->_internal_mutable_frontend_attributes()->::xla::FrontendAttributes::MergeFrom(
        from._internal_frontend_attributes());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_entry_computation_id() != 0) {
    _this->_internal_set_entry_computation_id(from._internal_entry_computation_id());
  }
  if (from._internal_is_dynamic() != 0) {
    _this->_internal_set_is_dynamic(from._internal_is_dynamic());
  }
  if (from._internal_use_auto_spmd_partitioning() != 0) {
    _this->_internal_set_use_auto_spmd_partitioning(from._internal_use_auto_spmd_partitioning());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleProto::CopyFrom(const HloModuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleProto::IsInitialized() const {
  return true;
}

void HloModuleProto::InternalSwap(HloModuleProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.computations_.InternalSwap(&other->_impl_.computations_);
  _impl_.cross_program_prefetches_.InternalSwap(&other->_impl_.cross_program_prefetches_);
  _impl_.profile_info_.InternalSwap(&other->_impl_.profile_info_);
  _impl_.spmd_parameters_shardings_.InternalSwap(&other->_impl_.spmd_parameters_shardings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entry_computation_name_, lhs_arena,
      &other->_impl_.entry_computation_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloModuleProto, _impl_.use_auto_spmd_partitioning_)
      + sizeof(HloModuleProto::_impl_.use_auto_spmd_partitioning_)
      - PROTOBUF_FIELD_OFFSET(HloModuleProto, _impl_.host_program_shape_)>(
          reinterpret_cast<char*>(&_impl_.host_program_shape_),
          reinterpret_cast<char*>(&other->_impl_.host_program_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[15]);
}

// ===================================================================

class LogicalBufferProto_Location::_Internal {
 public:
};

LogicalBufferProto_Location::LogicalBufferProto_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.LogicalBufferProto.Location)
}
LogicalBufferProto_Location::LogicalBufferProto_Location(const LogicalBufferProto_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalBufferProto_Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_index_){from._impl_.shape_index_}
    , /*decltype(_impl_._shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.instruction_name_){}
    , decltype(_impl_.instruction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instruction_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instruction_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instruction_name().empty()) {
    _this->_impl_.instruction_name_.Set(from._internal_instruction_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.instruction_id_ = from._impl_.instruction_id_;
  // @@protoc_insertion_point(copy_constructor:xla.LogicalBufferProto.Location)
}

inline void LogicalBufferProto_Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_index_){arena}
    , /*decltype(_impl_._shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.instruction_name_){}
    , decltype(_impl_.instruction_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instruction_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instruction_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogicalBufferProto_Location::~LogicalBufferProto_Location() {
  // @@protoc_insertion_point(destructor:xla.LogicalBufferProto.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalBufferProto_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_index_.~RepeatedField();
  _impl_.instruction_name_.Destroy();
}

void LogicalBufferProto_Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalBufferProto_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.LogicalBufferProto.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_index_.Clear();
  _impl_.instruction_name_.ClearToEmpty();
  _impl_.instruction_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalBufferProto_Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instruction_name = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instruction_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.LogicalBufferProto.Location.instruction_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 shape_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 instruction_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.instruction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalBufferProto_Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.LogicalBufferProto.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instruction_name = 2 [deprecated = true];
  if (!this->_internal_instruction_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instruction_name().data(), static_cast<int>(this->_internal_instruction_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.LogicalBufferProto.Location.instruction_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instruction_name(), target);
  }

  // repeated int64 shape_index = 3;
  {
    int byte_size = _impl_._shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_shape_index(), byte_size, target);
    }
  }

  // int64 instruction_id = 4;
  if (this->_internal_instruction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_instruction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.LogicalBufferProto.Location)
  return target;
}

size_t LogicalBufferProto_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.LogicalBufferProto.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string instruction_name = 2 [deprecated = true];
  if (!this->_internal_instruction_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instruction_name());
  }

  // int64 instruction_id = 4;
  if (this->_internal_instruction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_instruction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalBufferProto_Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalBufferProto_Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalBufferProto_Location::GetClassData() const { return &_class_data_; }


void LogicalBufferProto_Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalBufferProto_Location*>(&to_msg);
  auto& from = static_cast<const LogicalBufferProto_Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.LogicalBufferProto.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_index_.MergeFrom(from._impl_.shape_index_);
  if (!from._internal_instruction_name().empty()) {
    _this->_internal_set_instruction_name(from._internal_instruction_name());
  }
  if (from._internal_instruction_id() != 0) {
    _this->_internal_set_instruction_id(from._internal_instruction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalBufferProto_Location::CopyFrom(const LogicalBufferProto_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.LogicalBufferProto.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalBufferProto_Location::IsInitialized() const {
  return true;
}

void LogicalBufferProto_Location::InternalSwap(LogicalBufferProto_Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_index_.InternalSwap(&other->_impl_.shape_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instruction_name_, lhs_arena,
      &other->_impl_.instruction_name_, rhs_arena
  );
  swap(_impl_.instruction_id_, other->_impl_.instruction_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalBufferProto_Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[16]);
}

// ===================================================================

class LogicalBufferProto::_Internal {
 public:
  static const ::xla::LogicalBufferProto_Location& defined_at(const LogicalBufferProto* msg);
};

const ::xla::LogicalBufferProto_Location&
LogicalBufferProto::_Internal::defined_at(const LogicalBufferProto* msg) {
  return *msg->_impl_.defined_at_;
}
LogicalBufferProto::LogicalBufferProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.LogicalBufferProto)
}
LogicalBufferProto::LogicalBufferProto(const LogicalBufferProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalBufferProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.defined_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defined_at()) {
    _this->_impl_.defined_at_ = new ::xla::LogicalBufferProto_Location(*from._impl_.defined_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:xla.LogicalBufferProto)
}

inline void LogicalBufferProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.defined_at_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.color_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogicalBufferProto::~LogicalBufferProto() {
  // @@protoc_insertion_point(destructor:xla.LogicalBufferProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalBufferProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.defined_at_;
}

void LogicalBufferProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalBufferProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.LogicalBufferProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.defined_at_ != nullptr) {
    delete _impl_.defined_at_;
  }
  _impl_.defined_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalBufferProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.LogicalBufferProto.Location defined_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_defined_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalBufferProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.LogicalBufferProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // .xla.LogicalBufferProto.Location defined_at = 3;
  if (this->_internal_has_defined_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::defined_at(this),
        _Internal::defined_at(this).GetCachedSize(), target, stream);
  }

  // int64 color = 4;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.LogicalBufferProto)
  return target;
}

size_t LogicalBufferProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.LogicalBufferProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xla.LogicalBufferProto.Location defined_at = 3;
  if (this->_internal_has_defined_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.defined_at_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 color = 4;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalBufferProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalBufferProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalBufferProto::GetClassData() const { return &_class_data_; }


void LogicalBufferProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalBufferProto*>(&to_msg);
  auto& from = static_cast<const LogicalBufferProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.LogicalBufferProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_defined_at()) {
    _this->_internal_mutable_defined_at()->::xla::LogicalBufferProto_Location::MergeFrom(
        from._internal_defined_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalBufferProto::CopyFrom(const LogicalBufferProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.LogicalBufferProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalBufferProto::IsInitialized() const {
  return true;
}

void LogicalBufferProto::InternalSwap(LogicalBufferProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalBufferProto, _impl_.color_)
      + sizeof(LogicalBufferProto::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(LogicalBufferProto, _impl_.defined_at_)>(
          reinterpret_cast<char*>(&_impl_.defined_at_),
          reinterpret_cast<char*>(&other->_impl_.defined_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalBufferProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[17]);
}

// ===================================================================

class BufferAllocationProto_Assigned::_Internal {
 public:
};

BufferAllocationProto_Assigned::BufferAllocationProto_Assigned(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.BufferAllocationProto.Assigned)
}
BufferAllocationProto_Assigned::BufferAllocationProto_Assigned(const BufferAllocationProto_Assigned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BufferAllocationProto_Assigned* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logical_buffer_id_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.logical_buffer_id_, &from._impl_.logical_buffer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.logical_buffer_id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:xla.BufferAllocationProto.Assigned)
}

inline void BufferAllocationProto_Assigned::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logical_buffer_id_){int64_t{0}}
    , decltype(_impl_.offset_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BufferAllocationProto_Assigned::~BufferAllocationProto_Assigned() {
  // @@protoc_insertion_point(destructor:xla.BufferAllocationProto.Assigned)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferAllocationProto_Assigned::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BufferAllocationProto_Assigned::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BufferAllocationProto_Assigned::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.BufferAllocationProto.Assigned)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.logical_buffer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.logical_buffer_id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferAllocationProto_Assigned::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 logical_buffer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.logical_buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferAllocationProto_Assigned::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.BufferAllocationProto.Assigned)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 logical_buffer_id = 1;
  if (this->_internal_logical_buffer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_logical_buffer_id(), target);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.BufferAllocationProto.Assigned)
  return target;
}

size_t BufferAllocationProto_Assigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.BufferAllocationProto.Assigned)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 logical_buffer_id = 1;
  if (this->_internal_logical_buffer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_logical_buffer_id());
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferAllocationProto_Assigned::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BufferAllocationProto_Assigned::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferAllocationProto_Assigned::GetClassData() const { return &_class_data_; }


void BufferAllocationProto_Assigned::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BufferAllocationProto_Assigned*>(&to_msg);
  auto& from = static_cast<const BufferAllocationProto_Assigned&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.BufferAllocationProto.Assigned)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_logical_buffer_id() != 0) {
    _this->_internal_set_logical_buffer_id(from._internal_logical_buffer_id());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferAllocationProto_Assigned::CopyFrom(const BufferAllocationProto_Assigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.BufferAllocationProto.Assigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferAllocationProto_Assigned::IsInitialized() const {
  return true;
}

void BufferAllocationProto_Assigned::InternalSwap(BufferAllocationProto_Assigned* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferAllocationProto_Assigned, _impl_.size_)
      + sizeof(BufferAllocationProto_Assigned::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(BufferAllocationProto_Assigned, _impl_.logical_buffer_id_)>(
          reinterpret_cast<char*>(&_impl_.logical_buffer_id_),
          reinterpret_cast<char*>(&other->_impl_.logical_buffer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferAllocationProto_Assigned::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[18]);
}

// ===================================================================

class BufferAllocationProto::_Internal {
 public:
};

BufferAllocationProto::BufferAllocationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.BufferAllocationProto)
}
BufferAllocationProto::BufferAllocationProto(const BufferAllocationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BufferAllocationProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.assigned_){from._impl_.assigned_}
    , decltype(_impl_.parameter_shape_index_){from._impl_.parameter_shape_index_}
    , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.index_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.parameter_number_){}
    , decltype(_impl_.maybe_live_out_){}
    , decltype(_impl_.is_thread_local_){}
    , decltype(_impl_.is_tuple_){}
    , decltype(_impl_.is_entry_computation_parameter_){}
    , decltype(_impl_.is_constant_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:xla.BufferAllocationProto)
}

inline void BufferAllocationProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.assigned_){arena}
    , decltype(_impl_.parameter_shape_index_){arena}
    , /*decltype(_impl_._parameter_shape_index_cached_byte_size_)*/{0}
    , decltype(_impl_.index_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.parameter_number_){int64_t{0}}
    , decltype(_impl_.maybe_live_out_){false}
    , decltype(_impl_.is_thread_local_){false}
    , decltype(_impl_.is_tuple_){false}
    , decltype(_impl_.is_entry_computation_parameter_){false}
    , decltype(_impl_.is_constant_){false}
    , decltype(_impl_.color_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BufferAllocationProto::~BufferAllocationProto() {
  // @@protoc_insertion_point(destructor:xla.BufferAllocationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferAllocationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assigned_.~RepeatedPtrField();
  _impl_.parameter_shape_index_.~RepeatedField();
}

void BufferAllocationProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BufferAllocationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.BufferAllocationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assigned_.Clear();
  _impl_.parameter_shape_index_.Clear();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferAllocationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_thread_local = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_thread_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_entry_computation_parameter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_entry_computation_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 parameter_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.parameter_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool maybe_live_out = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.maybe_live_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.BufferAllocationProto.Assigned assigned = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 parameter_shape_index = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_parameter_shape_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_parameter_shape_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_tuple = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_tuple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_constant = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferAllocationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.BufferAllocationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // bool is_thread_local = 3;
  if (this->_internal_is_thread_local() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_thread_local(), target);
  }

  // bool is_entry_computation_parameter = 5;
  if (this->_internal_is_entry_computation_parameter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_entry_computation_parameter(), target);
  }

  // int64 parameter_number = 6;
  if (this->_internal_parameter_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_parameter_number(), target);
  }

  // bool maybe_live_out = 7;
  if (this->_internal_maybe_live_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_maybe_live_out(), target);
  }

  // int64 color = 8;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_color(), target);
  }

  // repeated .xla.BufferAllocationProto.Assigned assigned = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assigned_size()); i < n; i++) {
    const auto& repfield = this->_internal_assigned(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 parameter_shape_index = 10;
  {
    int byte_size = _impl_._parameter_shape_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_parameter_shape_index(), byte_size, target);
    }
  }

  // bool is_tuple = 11;
  if (this->_internal_is_tuple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_tuple(), target);
  }

  // bool is_constant = 12;
  if (this->_internal_is_constant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_constant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.BufferAllocationProto)
  return target;
}

size_t BufferAllocationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.BufferAllocationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.BufferAllocationProto.Assigned assigned = 9;
  total_size += 1UL * this->_internal_assigned_size();
  for (const auto& msg : this->_impl_.assigned_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 parameter_shape_index = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.parameter_shape_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parameter_shape_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 parameter_number = 6;
  if (this->_internal_parameter_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parameter_number());
  }

  // bool maybe_live_out = 7;
  if (this->_internal_maybe_live_out() != 0) {
    total_size += 1 + 1;
  }

  // bool is_thread_local = 3;
  if (this->_internal_is_thread_local() != 0) {
    total_size += 1 + 1;
  }

  // bool is_tuple = 11;
  if (this->_internal_is_tuple() != 0) {
    total_size += 1 + 1;
  }

  // bool is_entry_computation_parameter = 5;
  if (this->_internal_is_entry_computation_parameter() != 0) {
    total_size += 1 + 1;
  }

  // bool is_constant = 12;
  if (this->_internal_is_constant() != 0) {
    total_size += 1 + 1;
  }

  // int64 color = 8;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferAllocationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BufferAllocationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferAllocationProto::GetClassData() const { return &_class_data_; }


void BufferAllocationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BufferAllocationProto*>(&to_msg);
  auto& from = static_cast<const BufferAllocationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.BufferAllocationProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.assigned_.MergeFrom(from._impl_.assigned_);
  _this->_impl_.parameter_shape_index_.MergeFrom(from._impl_.parameter_shape_index_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_parameter_number() != 0) {
    _this->_internal_set_parameter_number(from._internal_parameter_number());
  }
  if (from._internal_maybe_live_out() != 0) {
    _this->_internal_set_maybe_live_out(from._internal_maybe_live_out());
  }
  if (from._internal_is_thread_local() != 0) {
    _this->_internal_set_is_thread_local(from._internal_is_thread_local());
  }
  if (from._internal_is_tuple() != 0) {
    _this->_internal_set_is_tuple(from._internal_is_tuple());
  }
  if (from._internal_is_entry_computation_parameter() != 0) {
    _this->_internal_set_is_entry_computation_parameter(from._internal_is_entry_computation_parameter());
  }
  if (from._internal_is_constant() != 0) {
    _this->_internal_set_is_constant(from._internal_is_constant());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferAllocationProto::CopyFrom(const BufferAllocationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.BufferAllocationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferAllocationProto::IsInitialized() const {
  return true;
}

void BufferAllocationProto::InternalSwap(BufferAllocationProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assigned_.InternalSwap(&other->_impl_.assigned_);
  _impl_.parameter_shape_index_.InternalSwap(&other->_impl_.parameter_shape_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferAllocationProto, _impl_.color_)
      + sizeof(BufferAllocationProto::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(BufferAllocationProto, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferAllocationProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[19]);
}

// ===================================================================

class HeapSimulatorTrace_Event::_Internal {
 public:
};

HeapSimulatorTrace_Event::HeapSimulatorTrace_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HeapSimulatorTrace.Event)
}
HeapSimulatorTrace_Event::HeapSimulatorTrace_Event(const HeapSimulatorTrace_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapSimulatorTrace_Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.computation_name_){}
    , decltype(_impl_.instruction_name_){}
    , decltype(_impl_.buffer_id_){}
    , decltype(_impl_.share_with_canonical_id_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.computation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.computation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_computation_name().empty()) {
    _this->_impl_.computation_name_.Set(from._internal_computation_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instruction_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instruction_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instruction_name().empty()) {
    _this->_impl_.instruction_name_.Set(from._internal_instruction_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buffer_id_, &from._impl_.buffer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.buffer_id_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:xla.HeapSimulatorTrace.Event)
}

inline void HeapSimulatorTrace_Event::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.computation_name_){}
    , decltype(_impl_.instruction_name_){}
    , decltype(_impl_.buffer_id_){int64_t{0}}
    , decltype(_impl_.share_with_canonical_id_){int64_t{0}}
    , decltype(_impl_.kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.computation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.computation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instruction_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instruction_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeapSimulatorTrace_Event::~HeapSimulatorTrace_Event() {
  // @@protoc_insertion_point(destructor:xla.HeapSimulatorTrace.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapSimulatorTrace_Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.computation_name_.Destroy();
  _impl_.instruction_name_.Destroy();
}

void HeapSimulatorTrace_Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapSimulatorTrace_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HeapSimulatorTrace.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.computation_name_.ClearToEmpty();
  _impl_.instruction_name_.ClearToEmpty();
  ::memset(&_impl_.buffer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.kind_) -
      reinterpret_cast<char*>(&_impl_.buffer_id_)) + sizeof(_impl_.kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapSimulatorTrace_Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.HeapSimulatorTrace.Event.Kind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::xla::HeapSimulatorTrace_Event_Kind>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 buffer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string computation_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_computation_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HeapSimulatorTrace.Event.computation_name"));
        } else
          goto handle_unusual;
        continue;
      // string instruction_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instruction_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HeapSimulatorTrace.Event.instruction_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 share_with_canonical_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.share_with_canonical_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapSimulatorTrace_Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HeapSimulatorTrace.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.HeapSimulatorTrace.Event.Kind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // int64 buffer_id = 2;
  if (this->_internal_buffer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_buffer_id(), target);
  }

  // string computation_name = 3;
  if (!this->_internal_computation_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_computation_name().data(), static_cast<int>(this->_internal_computation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HeapSimulatorTrace.Event.computation_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_computation_name(), target);
  }

  // string instruction_name = 4;
  if (!this->_internal_instruction_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instruction_name().data(), static_cast<int>(this->_internal_instruction_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HeapSimulatorTrace.Event.instruction_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instruction_name(), target);
  }

  // int64 share_with_canonical_id = 5;
  if (this->_internal_share_with_canonical_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_share_with_canonical_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HeapSimulatorTrace.Event)
  return target;
}

size_t HeapSimulatorTrace_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HeapSimulatorTrace.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string computation_name = 3;
  if (!this->_internal_computation_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_computation_name());
  }

  // string instruction_name = 4;
  if (!this->_internal_instruction_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instruction_name());
  }

  // int64 buffer_id = 2;
  if (this->_internal_buffer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buffer_id());
  }

  // int64 share_with_canonical_id = 5;
  if (this->_internal_share_with_canonical_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_share_with_canonical_id());
  }

  // .xla.HeapSimulatorTrace.Event.Kind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapSimulatorTrace_Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapSimulatorTrace_Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapSimulatorTrace_Event::GetClassData() const { return &_class_data_; }


void HeapSimulatorTrace_Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapSimulatorTrace_Event*>(&to_msg);
  auto& from = static_cast<const HeapSimulatorTrace_Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HeapSimulatorTrace.Event)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_computation_name().empty()) {
    _this->_internal_set_computation_name(from._internal_computation_name());
  }
  if (!from._internal_instruction_name().empty()) {
    _this->_internal_set_instruction_name(from._internal_instruction_name());
  }
  if (from._internal_buffer_id() != 0) {
    _this->_internal_set_buffer_id(from._internal_buffer_id());
  }
  if (from._internal_share_with_canonical_id() != 0) {
    _this->_internal_set_share_with_canonical_id(from._internal_share_with_canonical_id());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapSimulatorTrace_Event::CopyFrom(const HeapSimulatorTrace_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HeapSimulatorTrace.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapSimulatorTrace_Event::IsInitialized() const {
  return true;
}

void HeapSimulatorTrace_Event::InternalSwap(HeapSimulatorTrace_Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.computation_name_, lhs_arena,
      &other->_impl_.computation_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instruction_name_, lhs_arena,
      &other->_impl_.instruction_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapSimulatorTrace_Event, _impl_.kind_)
      + sizeof(HeapSimulatorTrace_Event::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(HeapSimulatorTrace_Event, _impl_.buffer_id_)>(
          reinterpret_cast<char*>(&_impl_.buffer_id_),
          reinterpret_cast<char*>(&other->_impl_.buffer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapSimulatorTrace_Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[20]);
}

// ===================================================================

class HeapSimulatorTrace::_Internal {
 public:
};

HeapSimulatorTrace::HeapSimulatorTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HeapSimulatorTrace)
}
HeapSimulatorTrace::HeapSimulatorTrace(const HeapSimulatorTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapSimulatorTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.buffer_allocation_index_){}
    , decltype(_impl_.whole_module_simulation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.buffer_allocation_index_, &from._impl_.buffer_allocation_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.whole_module_simulation_) -
    reinterpret_cast<char*>(&_impl_.buffer_allocation_index_)) + sizeof(_impl_.whole_module_simulation_));
  // @@protoc_insertion_point(copy_constructor:xla.HeapSimulatorTrace)
}

inline void HeapSimulatorTrace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.buffer_allocation_index_){int64_t{0}}
    , decltype(_impl_.whole_module_simulation_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeapSimulatorTrace::~HeapSimulatorTrace() {
  // @@protoc_insertion_point(destructor:xla.HeapSimulatorTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapSimulatorTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void HeapSimulatorTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapSimulatorTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HeapSimulatorTrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  ::memset(&_impl_.buffer_allocation_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.whole_module_simulation_) -
      reinterpret_cast<char*>(&_impl_.buffer_allocation_index_)) + sizeof(_impl_.whole_module_simulation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapSimulatorTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.HeapSimulatorTrace.Event events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool whole_module_simulation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.whole_module_simulation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buffer_allocation_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buffer_allocation_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapSimulatorTrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HeapSimulatorTrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.HeapSimulatorTrace.Event events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool whole_module_simulation = 2;
  if (this->_internal_whole_module_simulation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_whole_module_simulation(), target);
  }

  // int64 buffer_allocation_index = 3;
  if (this->_internal_buffer_allocation_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_buffer_allocation_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HeapSimulatorTrace)
  return target;
}

size_t HeapSimulatorTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HeapSimulatorTrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HeapSimulatorTrace.Event events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 buffer_allocation_index = 3;
  if (this->_internal_buffer_allocation_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buffer_allocation_index());
  }

  // bool whole_module_simulation = 2;
  if (this->_internal_whole_module_simulation() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapSimulatorTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapSimulatorTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapSimulatorTrace::GetClassData() const { return &_class_data_; }


void HeapSimulatorTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapSimulatorTrace*>(&to_msg);
  auto& from = static_cast<const HeapSimulatorTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HeapSimulatorTrace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_buffer_allocation_index() != 0) {
    _this->_internal_set_buffer_allocation_index(from._internal_buffer_allocation_index());
  }
  if (from._internal_whole_module_simulation() != 0) {
    _this->_internal_set_whole_module_simulation(from._internal_whole_module_simulation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapSimulatorTrace::CopyFrom(const HeapSimulatorTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HeapSimulatorTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapSimulatorTrace::IsInitialized() const {
  return true;
}

void HeapSimulatorTrace::InternalSwap(HeapSimulatorTrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapSimulatorTrace, _impl_.whole_module_simulation_)
      + sizeof(HeapSimulatorTrace::_impl_.whole_module_simulation_)
      - PROTOBUF_FIELD_OFFSET(HeapSimulatorTrace, _impl_.buffer_allocation_index_)>(
          reinterpret_cast<char*>(&_impl_.buffer_allocation_index_),
          reinterpret_cast<char*>(&other->_impl_.buffer_allocation_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapSimulatorTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[21]);
}

// ===================================================================

class HloModuleGroupProto::_Internal {
 public:
};

HloModuleGroupProto::HloModuleGroupProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleGroupProto)
}
HloModuleGroupProto::HloModuleGroupProto(const HloModuleGroupProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleGroupProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hlo_modules_){from._impl_.hlo_modules_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleGroupProto)
}

inline void HloModuleGroupProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hlo_modules_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloModuleGroupProto::~HloModuleGroupProto() {
  // @@protoc_insertion_point(destructor:xla.HloModuleGroupProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloModuleGroupProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hlo_modules_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void HloModuleGroupProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleGroupProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleGroupProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hlo_modules_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleGroupProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloModuleGroupProto.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloModuleProto hlo_modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hlo_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleGroupProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleGroupProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloModuleGroupProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .xla.HloModuleProto hlo_modules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hlo_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_hlo_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleGroupProto)
  return target;
}

size_t HloModuleGroupProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleGroupProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HloModuleProto hlo_modules = 2;
  total_size += 1UL * this->_internal_hlo_modules_size();
  for (const auto& msg : this->_impl_.hlo_modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleGroupProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleGroupProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleGroupProto::GetClassData() const { return &_class_data_; }


void HloModuleGroupProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleGroupProto*>(&to_msg);
  auto& from = static_cast<const HloModuleGroupProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleGroupProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hlo_modules_.MergeFrom(from._impl_.hlo_modules_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleGroupProto::CopyFrom(const HloModuleGroupProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleGroupProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleGroupProto::IsInitialized() const {
  return true;
}

void HloModuleGroupProto::InternalSwap(HloModuleGroupProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hlo_modules_.InternalSwap(&other->_impl_.hlo_modules_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleGroupProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[22]);
}

// ===================================================================

class BufferAssignmentProto_BufferAlias::_Internal {
 public:
  static const ::xla::LogicalBufferProto_Location& location(const BufferAssignmentProto_BufferAlias* msg);
};

const ::xla::LogicalBufferProto_Location&
BufferAssignmentProto_BufferAlias::_Internal::location(const BufferAssignmentProto_BufferAlias* msg) {
  return *msg->_impl_.location_;
}
BufferAssignmentProto_BufferAlias::BufferAssignmentProto_BufferAlias(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.BufferAssignmentProto.BufferAlias)
}
BufferAssignmentProto_BufferAlias::BufferAssignmentProto_BufferAlias(const BufferAssignmentProto_BufferAlias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BufferAssignmentProto_BufferAlias* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.source_buffer_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::xla::LogicalBufferProto_Location(*from._impl_.location_);
  }
  _this->_impl_.source_buffer_id_ = from._impl_.source_buffer_id_;
  // @@protoc_insertion_point(copy_constructor:xla.BufferAssignmentProto.BufferAlias)
}

inline void BufferAssignmentProto_BufferAlias::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.source_buffer_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BufferAssignmentProto_BufferAlias::~BufferAssignmentProto_BufferAlias() {
  // @@protoc_insertion_point(destructor:xla.BufferAssignmentProto.BufferAlias)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferAssignmentProto_BufferAlias::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void BufferAssignmentProto_BufferAlias::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BufferAssignmentProto_BufferAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.BufferAssignmentProto.BufferAlias)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _impl_.source_buffer_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferAssignmentProto_BufferAlias::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 source_buffer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.source_buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.LogicalBufferProto.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferAssignmentProto_BufferAlias::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.BufferAssignmentProto.BufferAlias)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 source_buffer_id = 1;
  if (this->_internal_source_buffer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_source_buffer_id(), target);
  }

  // .xla.LogicalBufferProto.Location location = 2;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.BufferAssignmentProto.BufferAlias)
  return target;
}

size_t BufferAssignmentProto_BufferAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.BufferAssignmentProto.BufferAlias)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xla.LogicalBufferProto.Location location = 2;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // int64 source_buffer_id = 1;
  if (this->_internal_source_buffer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_source_buffer_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferAssignmentProto_BufferAlias::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BufferAssignmentProto_BufferAlias::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferAssignmentProto_BufferAlias::GetClassData() const { return &_class_data_; }


void BufferAssignmentProto_BufferAlias::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BufferAssignmentProto_BufferAlias*>(&to_msg);
  auto& from = static_cast<const BufferAssignmentProto_BufferAlias&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.BufferAssignmentProto.BufferAlias)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::xla::LogicalBufferProto_Location::MergeFrom(
        from._internal_location());
  }
  if (from._internal_source_buffer_id() != 0) {
    _this->_internal_set_source_buffer_id(from._internal_source_buffer_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferAssignmentProto_BufferAlias::CopyFrom(const BufferAssignmentProto_BufferAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.BufferAssignmentProto.BufferAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferAssignmentProto_BufferAlias::IsInitialized() const {
  return true;
}

void BufferAssignmentProto_BufferAlias::InternalSwap(BufferAssignmentProto_BufferAlias* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferAssignmentProto_BufferAlias, _impl_.source_buffer_id_)
      + sizeof(BufferAssignmentProto_BufferAlias::_impl_.source_buffer_id_)
      - PROTOBUF_FIELD_OFFSET(BufferAssignmentProto_BufferAlias, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferAssignmentProto_BufferAlias::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[23]);
}

// ===================================================================

class BufferAssignmentProto::_Internal {
 public:
};

BufferAssignmentProto::BufferAssignmentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.BufferAssignmentProto)
}
BufferAssignmentProto::BufferAssignmentProto(const BufferAssignmentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BufferAssignmentProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logical_buffers_){from._impl_.logical_buffers_}
    , decltype(_impl_.buffer_aliases_){from._impl_.buffer_aliases_}
    , decltype(_impl_.buffer_allocations_){from._impl_.buffer_allocations_}
    , decltype(_impl_.heap_simulator_traces_){from._impl_.heap_simulator_traces_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.BufferAssignmentProto)
}

inline void BufferAssignmentProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logical_buffers_){arena}
    , decltype(_impl_.buffer_aliases_){arena}
    , decltype(_impl_.buffer_allocations_){arena}
    , decltype(_impl_.heap_simulator_traces_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BufferAssignmentProto::~BufferAssignmentProto() {
  // @@protoc_insertion_point(destructor:xla.BufferAssignmentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferAssignmentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logical_buffers_.~RepeatedPtrField();
  _impl_.buffer_aliases_.~RepeatedPtrField();
  _impl_.buffer_allocations_.~RepeatedPtrField();
  _impl_.heap_simulator_traces_.~RepeatedPtrField();
}

void BufferAssignmentProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BufferAssignmentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.BufferAssignmentProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logical_buffers_.Clear();
  _impl_.buffer_aliases_.Clear();
  _impl_.buffer_allocations_.Clear();
  _impl_.heap_simulator_traces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferAssignmentProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.LogicalBufferProto logical_buffers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.BufferAssignmentProto.BufferAlias buffer_aliases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffer_aliases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.BufferAllocationProto buffer_allocations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffer_allocations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HeapSimulatorTrace heap_simulator_traces = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heap_simulator_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferAssignmentProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.BufferAssignmentProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.LogicalBufferProto logical_buffers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logical_buffers_size()); i < n; i++) {
    const auto& repfield = this->_internal_logical_buffers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xla.BufferAssignmentProto.BufferAlias buffer_aliases = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffer_aliases_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffer_aliases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xla.BufferAllocationProto buffer_allocations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffer_allocations_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffer_allocations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xla.HeapSimulatorTrace heap_simulator_traces = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_heap_simulator_traces_size()); i < n; i++) {
    const auto& repfield = this->_internal_heap_simulator_traces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.BufferAssignmentProto)
  return target;
}

size_t BufferAssignmentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.BufferAssignmentProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.LogicalBufferProto logical_buffers = 1;
  total_size += 1UL * this->_internal_logical_buffers_size();
  for (const auto& msg : this->_impl_.logical_buffers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.BufferAssignmentProto.BufferAlias buffer_aliases = 2;
  total_size += 1UL * this->_internal_buffer_aliases_size();
  for (const auto& msg : this->_impl_.buffer_aliases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.BufferAllocationProto buffer_allocations = 3;
  total_size += 1UL * this->_internal_buffer_allocations_size();
  for (const auto& msg : this->_impl_.buffer_allocations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xla.HeapSimulatorTrace heap_simulator_traces = 4;
  total_size += 1UL * this->_internal_heap_simulator_traces_size();
  for (const auto& msg : this->_impl_.heap_simulator_traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferAssignmentProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BufferAssignmentProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferAssignmentProto::GetClassData() const { return &_class_data_; }


void BufferAssignmentProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BufferAssignmentProto*>(&to_msg);
  auto& from = static_cast<const BufferAssignmentProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.BufferAssignmentProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.logical_buffers_.MergeFrom(from._impl_.logical_buffers_);
  _this->_impl_.buffer_aliases_.MergeFrom(from._impl_.buffer_aliases_);
  _this->_impl_.buffer_allocations_.MergeFrom(from._impl_.buffer_allocations_);
  _this->_impl_.heap_simulator_traces_.MergeFrom(from._impl_.heap_simulator_traces_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferAssignmentProto::CopyFrom(const BufferAssignmentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.BufferAssignmentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferAssignmentProto::IsInitialized() const {
  return true;
}

void BufferAssignmentProto::InternalSwap(BufferAssignmentProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.logical_buffers_.InternalSwap(&other->_impl_.logical_buffers_);
  _impl_.buffer_aliases_.InternalSwap(&other->_impl_.buffer_aliases_);
  _impl_.buffer_allocations_.InternalSwap(&other->_impl_.buffer_allocations_);
  _impl_.heap_simulator_traces_.InternalSwap(&other->_impl_.heap_simulator_traces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferAssignmentProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[24]);
}

// ===================================================================

class HloProto::_Internal {
 public:
  static const ::xla::HloModuleProto& hlo_module(const HloProto* msg);
  static const ::xla::BufferAssignmentProto& buffer_assignment(const HloProto* msg);
};

const ::xla::HloModuleProto&
HloProto::_Internal::hlo_module(const HloProto* msg) {
  return *msg->_impl_.hlo_module_;
}
const ::xla::BufferAssignmentProto&
HloProto::_Internal::buffer_assignment(const HloProto* msg) {
  return *msg->_impl_.buffer_assignment_;
}
HloProto::HloProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloProto)
}
HloProto::HloProto(const HloProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hlo_module_){nullptr}
    , decltype(_impl_.buffer_assignment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hlo_module()) {
    _this->_impl_.hlo_module_ = new ::xla::HloModuleProto(*from._impl_.hlo_module_);
  }
  if (from._internal_has_buffer_assignment()) {
    _this->_impl_.buffer_assignment_ = new ::xla::BufferAssignmentProto(*from._impl_.buffer_assignment_);
  }
  // @@protoc_insertion_point(copy_constructor:xla.HloProto)
}

inline void HloProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hlo_module_){nullptr}
    , decltype(_impl_.buffer_assignment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HloProto::~HloProto() {
  // @@protoc_insertion_point(destructor:xla.HloProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hlo_module_;
  if (this != internal_default_instance()) delete _impl_.buffer_assignment_;
}

void HloProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hlo_module_ != nullptr) {
    delete _impl_.hlo_module_;
  }
  _impl_.hlo_module_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buffer_assignment_ != nullptr) {
    delete _impl_.buffer_assignment_;
  }
  _impl_.buffer_assignment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.HloModuleProto hlo_module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hlo_module(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.BufferAssignmentProto buffer_assignment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer_assignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.HloModuleProto hlo_module = 1;
  if (this->_internal_has_hlo_module()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hlo_module(this),
        _Internal::hlo_module(this).GetCachedSize(), target, stream);
  }

  // .xla.BufferAssignmentProto buffer_assignment = 3;
  if (this->_internal_has_buffer_assignment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::buffer_assignment(this),
        _Internal::buffer_assignment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloProto)
  return target;
}

size_t HloProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xla.HloModuleProto hlo_module = 1;
  if (this->_internal_has_hlo_module()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hlo_module_);
  }

  // .xla.BufferAssignmentProto buffer_assignment = 3;
  if (this->_internal_has_buffer_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buffer_assignment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloProto::GetClassData() const { return &_class_data_; }


void HloProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloProto*>(&to_msg);
  auto& from = static_cast<const HloProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hlo_module()) {
    _this->_internal_mutable_hlo_module()->::xla::HloModuleProto::MergeFrom(
        from._internal_hlo_module());
  }
  if (from._internal_has_buffer_assignment()) {
    _this->_internal_mutable_buffer_assignment()->::xla::BufferAssignmentProto::MergeFrom(
        from._internal_buffer_assignment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloProto::CopyFrom(const HloProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloProto::IsInitialized() const {
  return true;
}

void HloProto::InternalSwap(HloProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloProto, _impl_.buffer_assignment_)
      + sizeof(HloProto::_impl_.buffer_assignment_)
      - PROTOBUF_FIELD_OFFSET(HloProto, _impl_.hlo_module_)>(
          reinterpret_cast<char*>(&_impl_.hlo_module_),
          reinterpret_cast<char*>(&other->_impl_.hlo_module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[25]);
}

// ===================================================================

class HloSnapshot::_Internal {
 public:
  static const ::xla::HloProto& hlo(const HloSnapshot* msg);
  static const ::xla::LiteralProto& result(const HloSnapshot* msg);
};

const ::xla::HloProto&
HloSnapshot::_Internal::hlo(const HloSnapshot* msg) {
  return *msg->_impl_.hlo_;
}
const ::xla::LiteralProto&
HloSnapshot::_Internal::result(const HloSnapshot* msg) {
  return *msg->_impl_.result_;
}
void HloSnapshot::clear_arguments() {
  _impl_.arguments_.Clear();
}
void HloSnapshot::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
HloSnapshot::HloSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloSnapshot)
}
HloSnapshot::HloSnapshot(const HloSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.execution_platform_){}
    , decltype(_impl_.hlo_){nullptr}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.execution_platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_platform().empty()) {
    _this->_impl_.execution_platform_.Set(from._internal_execution_platform(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hlo()) {
    _this->_impl_.hlo_ = new ::xla::HloProto(*from._impl_.hlo_);
  }
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::xla::LiteralProto(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:xla.HloSnapshot)
}

inline void HloSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arguments_){arena}
    , decltype(_impl_.execution_platform_){}
    , decltype(_impl_.hlo_){nullptr}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.execution_platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloSnapshot::~HloSnapshot() {
  // @@protoc_insertion_point(destructor:xla.HloSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arguments_.~RepeatedPtrField();
  _impl_.execution_platform_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hlo_;
  if (this != internal_default_instance()) delete _impl_.result_;
}

void HloSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  _impl_.execution_platform_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.hlo_ != nullptr) {
    delete _impl_.hlo_;
  }
  _impl_.hlo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xla.HloProto hlo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hlo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.LiteralProto arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xla.LiteralProto result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string execution_platform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_execution_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloSnapshot.execution_platform"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.HloProto hlo = 1;
  if (this->_internal_has_hlo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hlo(this),
        _Internal::hlo(this).GetCachedSize(), target, stream);
  }

  // repeated .xla.LiteralProto arguments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arguments_size()); i < n; i++) {
    const auto& repfield = this->_internal_arguments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .xla.LiteralProto result = 3;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string execution_platform = 4;
  if (!this->_internal_execution_platform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_platform().data(), static_cast<int>(this->_internal_execution_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloSnapshot.execution_platform");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_execution_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloSnapshot)
  return target;
}

size_t HloSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.LiteralProto arguments = 2;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->_impl_.arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string execution_platform = 4;
  if (!this->_internal_execution_platform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_platform());
  }

  // .xla.HloProto hlo = 1;
  if (this->_internal_has_hlo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hlo_);
  }

  // .xla.LiteralProto result = 3;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloSnapshot::GetClassData() const { return &_class_data_; }


void HloSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloSnapshot*>(&to_msg);
  auto& from = static_cast<const HloSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (!from._internal_execution_platform().empty()) {
    _this->_internal_set_execution_platform(from._internal_execution_platform());
  }
  if (from._internal_has_hlo()) {
    _this->_internal_mutable_hlo()->::xla::HloProto::MergeFrom(
        from._internal_hlo());
  }
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::xla::LiteralProto::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloSnapshot::CopyFrom(const HloSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloSnapshot::IsInitialized() const {
  return true;
}

void HloSnapshot::InternalSwap(HloSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execution_platform_, lhs_arena,
      &other->_impl_.execution_platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloSnapshot, _impl_.result_)
      + sizeof(HloSnapshot::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(HloSnapshot, _impl_.hlo_)>(
          reinterpret_cast<char*>(&_impl_.hlo_),
          reinterpret_cast<char*>(&other->_impl_.hlo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[26]);
}

// ===================================================================

class HloModuleMetadataProto::_Internal {
 public:
};

HloModuleMetadataProto::HloModuleMetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleMetadataProto)
}
HloModuleMetadataProto::HloModuleMetadataProto(const HloModuleMetadataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloModuleMetadataProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitioned_module_ids_){from._impl_.partitioned_module_ids_}
    , /*decltype(_impl_._partitioned_module_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.pass_metadata_){from._impl_.pass_metadata_}
    , decltype(_impl_.module_group_name_){}
    , decltype(_impl_.canonical_module_id_){}
    , decltype(_impl_.original_module_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_group_name().empty()) {
    _this->_impl_.module_group_name_.Set(from._internal_module_group_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.canonical_module_id_, &from._impl_.canonical_module_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.original_module_id_) -
    reinterpret_cast<char*>(&_impl_.canonical_module_id_)) + sizeof(_impl_.original_module_id_));
  // @@protoc_insertion_point(copy_constructor:xla.HloModuleMetadataProto)
}

inline void HloModuleMetadataProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitioned_module_ids_){arena}
    , /*decltype(_impl_._partitioned_module_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.pass_metadata_){arena}
    , decltype(_impl_.module_group_name_){}
    , decltype(_impl_.canonical_module_id_){int64_t{0}}
    , decltype(_impl_.original_module_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloModuleMetadataProto::~HloModuleMetadataProto() {
  // @@protoc_insertion_point(destructor:xla.HloModuleMetadataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloModuleMetadataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitioned_module_ids_.~RepeatedField();
  _impl_.pass_metadata_.~RepeatedPtrField();
  _impl_.module_group_name_.Destroy();
}

void HloModuleMetadataProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloModuleMetadataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleMetadataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitioned_module_ids_.Clear();
  _impl_.pass_metadata_.Clear();
  _impl_.module_group_name_.ClearToEmpty();
  ::memset(&_impl_.canonical_module_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.original_module_id_) -
      reinterpret_cast<char*>(&_impl_.canonical_module_id_)) + sizeof(_impl_.original_module_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloModuleMetadataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 canonical_module_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.canonical_module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string module_group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloModuleMetadataProto.module_group_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 original_module_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.original_module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitioned_module_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitioned_module_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_partitioned_module_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloPassMetadata pass_metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pass_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloModuleMetadataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleMetadataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 canonical_module_id = 1;
  if (this->_internal_canonical_module_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_canonical_module_id(), target);
  }

  // string module_group_name = 2;
  if (!this->_internal_module_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_group_name().data(), static_cast<int>(this->_internal_module_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloModuleMetadataProto.module_group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_group_name(), target);
  }

  // int64 original_module_id = 3;
  if (this->_internal_original_module_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_original_module_id(), target);
  }

  // repeated int64 partitioned_module_ids = 4;
  {
    int byte_size = _impl_._partitioned_module_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_partitioned_module_ids(), byte_size, target);
    }
  }

  // repeated .xla.HloPassMetadata pass_metadata = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pass_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_pass_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleMetadataProto)
  return target;
}

size_t HloModuleMetadataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloModuleMetadataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partitioned_module_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitioned_module_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitioned_module_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xla.HloPassMetadata pass_metadata = 5;
  total_size += 1UL * this->_internal_pass_metadata_size();
  for (const auto& msg : this->_impl_.pass_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string module_group_name = 2;
  if (!this->_internal_module_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_group_name());
  }

  // int64 canonical_module_id = 1;
  if (this->_internal_canonical_module_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_canonical_module_id());
  }

  // int64 original_module_id = 3;
  if (this->_internal_original_module_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_original_module_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloModuleMetadataProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloModuleMetadataProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloModuleMetadataProto::GetClassData() const { return &_class_data_; }


void HloModuleMetadataProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloModuleMetadataProto*>(&to_msg);
  auto& from = static_cast<const HloModuleMetadataProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleMetadataProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitioned_module_ids_.MergeFrom(from._impl_.partitioned_module_ids_);
  _this->_impl_.pass_metadata_.MergeFrom(from._impl_.pass_metadata_);
  if (!from._internal_module_group_name().empty()) {
    _this->_internal_set_module_group_name(from._internal_module_group_name());
  }
  if (from._internal_canonical_module_id() != 0) {
    _this->_internal_set_canonical_module_id(from._internal_canonical_module_id());
  }
  if (from._internal_original_module_id() != 0) {
    _this->_internal_set_original_module_id(from._internal_original_module_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleMetadataProto::CopyFrom(const HloModuleMetadataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleMetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloModuleMetadataProto::IsInitialized() const {
  return true;
}

void HloModuleMetadataProto::InternalSwap(HloModuleMetadataProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitioned_module_ids_.InternalSwap(&other->_impl_.partitioned_module_ids_);
  _impl_.pass_metadata_.InternalSwap(&other->_impl_.pass_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_group_name_, lhs_arena,
      &other->_impl_.module_group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloModuleMetadataProto, _impl_.original_module_id_)
      + sizeof(HloModuleMetadataProto::_impl_.original_module_id_)
      - PROTOBUF_FIELD_OFFSET(HloModuleMetadataProto, _impl_.canonical_module_id_)>(
          reinterpret_cast<char*>(&_impl_.canonical_module_id_),
          reinterpret_cast<char*>(&other->_impl_.canonical_module_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloModuleMetadataProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[27]);
}

// ===================================================================

class HloPassMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& custom_metadata(const HloPassMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
HloPassMetadata::_Internal::custom_metadata(const HloPassMetadata* msg) {
  return *msg->_impl_.custom_metadata_;
}
void HloPassMetadata::clear_custom_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.custom_metadata_ != nullptr) {
    delete _impl_.custom_metadata_;
  }
  _impl_.custom_metadata_ = nullptr;
}
HloPassMetadata::HloPassMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloPassMetadata)
}
HloPassMetadata::HloPassMetadata(const HloPassMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloPassMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dump_filenames_){from._impl_.dump_filenames_}
    , decltype(_impl_.module_group_module_ids_){from._impl_.module_group_module_ids_}
    , /*decltype(_impl_._module_group_module_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.pass_name_){}
    , decltype(_impl_.pipeline_name_){}
    , decltype(_impl_.custom_metadata_){nullptr}
    , decltype(_impl_.pass_id_){}
    , decltype(_impl_.module_id_){}
    , decltype(_impl_.start_timestamp_usec_){}
    , decltype(_impl_.end_timestamp_usec_){}
    , decltype(_impl_.module_changed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pass_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pass_name().empty()) {
    _this->_impl_.pass_name_.Set(from._internal_pass_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pipeline_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pipeline_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pipeline_name().empty()) {
    _this->_impl_.pipeline_name_.Set(from._internal_pipeline_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_custom_metadata()) {
    _this->_impl_.custom_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.custom_metadata_);
  }
  ::memcpy(&_impl_.pass_id_, &from._impl_.pass_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.module_changed_) -
    reinterpret_cast<char*>(&_impl_.pass_id_)) + sizeof(_impl_.module_changed_));
  // @@protoc_insertion_point(copy_constructor:xla.HloPassMetadata)
}

inline void HloPassMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dump_filenames_){arena}
    , decltype(_impl_.module_group_module_ids_){arena}
    , /*decltype(_impl_._module_group_module_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.pass_name_){}
    , decltype(_impl_.pipeline_name_){}
    , decltype(_impl_.custom_metadata_){nullptr}
    , decltype(_impl_.pass_id_){int64_t{0}}
    , decltype(_impl_.module_id_){int64_t{0}}
    , decltype(_impl_.start_timestamp_usec_){int64_t{0}}
    , decltype(_impl_.end_timestamp_usec_){int64_t{0}}
    , decltype(_impl_.module_changed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pass_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pipeline_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pipeline_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloPassMetadata::~HloPassMetadata() {
  // @@protoc_insertion_point(destructor:xla.HloPassMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloPassMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dump_filenames_.~RepeatedPtrField();
  _impl_.module_group_module_ids_.~RepeatedField();
  _impl_.pass_name_.Destroy();
  _impl_.pipeline_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.custom_metadata_;
}

void HloPassMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloPassMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloPassMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dump_filenames_.Clear();
  _impl_.module_group_module_ids_.Clear();
  _impl_.pass_name_.ClearToEmpty();
  _impl_.pipeline_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.custom_metadata_ != nullptr) {
    delete _impl_.custom_metadata_;
  }
  _impl_.custom_metadata_ = nullptr;
  ::memset(&_impl_.pass_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.module_changed_) -
      reinterpret_cast<char*>(&_impl_.pass_id_)) + sizeof(_impl_.module_changed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloPassMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 pass_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pass_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pass_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pass_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloPassMetadata.pass_name"));
        } else
          goto handle_unusual;
        continue;
      // string pipeline_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloPassMetadata.pipeline_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string dump_filenames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dump_filenames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "xla.HloPassMetadata.dump_filenames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool module_changed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.module_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 module_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 module_group_module_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_module_group_module_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_module_group_module_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_timestamp_usec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.start_timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_timestamp_usec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.end_timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any custom_metadata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloPassMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloPassMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pass_id = 1;
  if (this->_internal_pass_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_pass_id(), target);
  }

  // string pass_name = 2;
  if (!this->_internal_pass_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pass_name().data(), static_cast<int>(this->_internal_pass_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloPassMetadata.pass_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pass_name(), target);
  }

  // string pipeline_name = 3;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloPassMetadata.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pipeline_name(), target);
  }

  // repeated string dump_filenames = 4;
  for (int i = 0, n = this->_internal_dump_filenames_size(); i < n; i++) {
    const auto& s = this->_internal_dump_filenames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloPassMetadata.dump_filenames");
    target = stream->WriteString(4, s, target);
  }

  // bool module_changed = 5;
  if (this->_internal_module_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_module_changed(), target);
  }

  // int64 module_id = 6;
  if (this->_internal_module_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_module_id(), target);
  }

  // repeated int64 module_group_module_ids = 7;
  {
    int byte_size = _impl_._module_group_module_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_module_group_module_ids(), byte_size, target);
    }
  }

  // int64 start_timestamp_usec = 8;
  if (this->_internal_start_timestamp_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_start_timestamp_usec(), target);
  }

  // int64 end_timestamp_usec = 9;
  if (this->_internal_end_timestamp_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_end_timestamp_usec(), target);
  }

  // .google.protobuf.Any custom_metadata = 10;
  if (this->_internal_has_custom_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::custom_metadata(this),
        _Internal::custom_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloPassMetadata)
  return target;
}

size_t HloPassMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloPassMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dump_filenames = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dump_filenames_.size());
  for (int i = 0, n = _impl_.dump_filenames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dump_filenames_.Get(i));
  }

  // repeated int64 module_group_module_ids = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.module_group_module_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._module_group_module_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string pass_name = 2;
  if (!this->_internal_pass_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pass_name());
  }

  // string pipeline_name = 3;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // .google.protobuf.Any custom_metadata = 10;
  if (this->_internal_has_custom_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.custom_metadata_);
  }

  // int64 pass_id = 1;
  if (this->_internal_pass_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pass_id());
  }

  // int64 module_id = 6;
  if (this->_internal_module_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_module_id());
  }

  // int64 start_timestamp_usec = 8;
  if (this->_internal_start_timestamp_usec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_timestamp_usec());
  }

  // int64 end_timestamp_usec = 9;
  if (this->_internal_end_timestamp_usec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_timestamp_usec());
  }

  // bool module_changed = 5;
  if (this->_internal_module_changed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloPassMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloPassMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloPassMetadata::GetClassData() const { return &_class_data_; }


void HloPassMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloPassMetadata*>(&to_msg);
  auto& from = static_cast<const HloPassMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloPassMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dump_filenames_.MergeFrom(from._impl_.dump_filenames_);
  _this->_impl_.module_group_module_ids_.MergeFrom(from._impl_.module_group_module_ids_);
  if (!from._internal_pass_name().empty()) {
    _this->_internal_set_pass_name(from._internal_pass_name());
  }
  if (!from._internal_pipeline_name().empty()) {
    _this->_internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (from._internal_has_custom_metadata()) {
    _this->_internal_mutable_custom_metadata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_custom_metadata());
  }
  if (from._internal_pass_id() != 0) {
    _this->_internal_set_pass_id(from._internal_pass_id());
  }
  if (from._internal_module_id() != 0) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  if (from._internal_start_timestamp_usec() != 0) {
    _this->_internal_set_start_timestamp_usec(from._internal_start_timestamp_usec());
  }
  if (from._internal_end_timestamp_usec() != 0) {
    _this->_internal_set_end_timestamp_usec(from._internal_end_timestamp_usec());
  }
  if (from._internal_module_changed() != 0) {
    _this->_internal_set_module_changed(from._internal_module_changed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloPassMetadata::CopyFrom(const HloPassMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloPassMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloPassMetadata::IsInitialized() const {
  return true;
}

void HloPassMetadata::InternalSwap(HloPassMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dump_filenames_.InternalSwap(&other->_impl_.dump_filenames_);
  _impl_.module_group_module_ids_.InternalSwap(&other->_impl_.module_group_module_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_name_, lhs_arena,
      &other->_impl_.pass_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pipeline_name_, lhs_arena,
      &other->_impl_.pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloPassMetadata, _impl_.module_changed_)
      + sizeof(HloPassMetadata::_impl_.module_changed_)
      - PROTOBUF_FIELD_OFFSET(HloPassMetadata, _impl_.custom_metadata_)>(
          reinterpret_cast<char*>(&_impl_.custom_metadata_),
          reinterpret_cast<char*>(&other->_impl_.custom_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloPassMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xla::HloInstructionProto_SliceDimensions*
Arena::CreateMaybeMessage< ::xla::HloInstructionProto_SliceDimensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloInstructionProto_SliceDimensions >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloInstructionProto*
Arena::CreateMaybeMessage< ::xla::HloInstructionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloInstructionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloComputationProto*
Arena::CreateMaybeMessage< ::xla::HloComputationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloComputationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloScheduleProto_InstructionSequence*
Arena::CreateMaybeMessage< ::xla::HloScheduleProto_InstructionSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloScheduleProto_InstructionSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloScheduleProto_SequencesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xla::HloScheduleProto_SequencesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloScheduleProto_SequencesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloScheduleProto*
Arena::CreateMaybeMessage< ::xla::HloScheduleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloScheduleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloInputOutputAliasProto_AliasEntryProto*
Arena::CreateMaybeMessage< ::xla::HloInputOutputAliasProto_AliasEntryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloInputOutputAliasProto_AliasEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloInputOutputAliasProto*
Arena::CreateMaybeMessage< ::xla::HloInputOutputAliasProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloInputOutputAliasProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloBufferDonorProto_BufferDonorEntryProto*
Arena::CreateMaybeMessage< ::xla::HloBufferDonorProto_BufferDonorEntryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloBufferDonorProto_BufferDonorEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloBufferDonorProto*
Arena::CreateMaybeMessage< ::xla::HloBufferDonorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloBufferDonorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::CrossProgramPrefetch*
Arena::CreateMaybeMessage< ::xla::CrossProgramPrefetch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::CrossProgramPrefetch >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::StackFrameIndexProto_FileLocation*
Arena::CreateMaybeMessage< ::xla::StackFrameIndexProto_FileLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::StackFrameIndexProto_FileLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::StackFrameIndexProto_StackFrame*
Arena::CreateMaybeMessage< ::xla::StackFrameIndexProto_StackFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::StackFrameIndexProto_StackFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::StackFrameIndexProto*
Arena::CreateMaybeMessage< ::xla::StackFrameIndexProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::StackFrameIndexProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleProto_ProfileInfo*
Arena::CreateMaybeMessage< ::xla::HloModuleProto_ProfileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleProto_ProfileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleProto*
Arena::CreateMaybeMessage< ::xla::HloModuleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::LogicalBufferProto_Location*
Arena::CreateMaybeMessage< ::xla::LogicalBufferProto_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::LogicalBufferProto_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::LogicalBufferProto*
Arena::CreateMaybeMessage< ::xla::LogicalBufferProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::LogicalBufferProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::BufferAllocationProto_Assigned*
Arena::CreateMaybeMessage< ::xla::BufferAllocationProto_Assigned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::BufferAllocationProto_Assigned >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::BufferAllocationProto*
Arena::CreateMaybeMessage< ::xla::BufferAllocationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::BufferAllocationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HeapSimulatorTrace_Event*
Arena::CreateMaybeMessage< ::xla::HeapSimulatorTrace_Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HeapSimulatorTrace_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HeapSimulatorTrace*
Arena::CreateMaybeMessage< ::xla::HeapSimulatorTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HeapSimulatorTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleGroupProto*
Arena::CreateMaybeMessage< ::xla::HloModuleGroupProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleGroupProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::BufferAssignmentProto_BufferAlias*
Arena::CreateMaybeMessage< ::xla::BufferAssignmentProto_BufferAlias >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::BufferAssignmentProto_BufferAlias >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::BufferAssignmentProto*
Arena::CreateMaybeMessage< ::xla::BufferAssignmentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::BufferAssignmentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloProto*
Arena::CreateMaybeMessage< ::xla::HloProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloSnapshot*
Arena::CreateMaybeMessage< ::xla::HloSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloModuleMetadataProto*
Arena::CreateMaybeMessage< ::xla::HloModuleMetadataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloModuleMetadataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloPassMetadata*
Arena::CreateMaybeMessage< ::xla::HloPassMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloPassMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
