// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/metrics.proto

#include "xla/service/metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xla {
PROTOBUF_CONSTEXPR PassMetrics::PassMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pass_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pass_duration_)*/nullptr
  , /*decltype(_impl_.custom_metrics_)*/nullptr
  , /*decltype(_impl_.module_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PassMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassMetricsDefaultTypeInternal() {}
  union {
    PassMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassMetricsDefaultTypeInternal _PassMetrics_default_instance_;
PROTOBUF_CONSTEXPR JobInfo::JobInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/int64_t{0}
  , /*decltype(_impl_.task_id_)*/int64_t{0}
  , /*decltype(_impl_.task_uid_)*/int64_t{0}} {}
struct JobInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobInfoDefaultTypeInternal() {}
  union {
    JobInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobInfoDefaultTypeInternal _JobInfo_default_instance_;
PROTOBUF_CONSTEXPR CompilationLogEntry::CompilationLogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pass_metrics_)*/{}
  , /*decltype(_impl_.module_ids_)*/{}
  , /*decltype(_impl_._module_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_.job_info_)*/nullptr
  , /*decltype(_impl_.stage_)*/0
  , /*decltype(_impl_.task_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompilationLogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompilationLogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompilationLogEntryDefaultTypeInternal() {}
  union {
    CompilationLogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompilationLogEntryDefaultTypeInternal _CompilationLogEntry_default_instance_;
}  // namespace xla
static ::_pb::Metadata file_level_metadata_xla_2fservice_2fmetrics_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_xla_2fservice_2fmetrics_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xla_2fservice_2fmetrics_2eproto = nullptr;

const uint32_t TableStruct_xla_2fservice_2fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::PassMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::PassMetrics, _impl_.module_id_),
  PROTOBUF_FIELD_OFFSET(::xla::PassMetrics, _impl_.pass_name_),
  PROTOBUF_FIELD_OFFSET(::xla::PassMetrics, _impl_.pass_duration_),
  PROTOBUF_FIELD_OFFSET(::xla::PassMetrics, _impl_.custom_metrics_),
  PROTOBUF_FIELD_OFFSET(::xla::JobInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::JobInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::JobInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::xla::JobInfo, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::xla::JobInfo, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::xla::JobInfo, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::xla::JobInfo, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::xla::JobInfo, _impl_.task_uid_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::CompilationLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::CompilationLogEntry, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::xla::CompilationLogEntry, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::xla::CompilationLogEntry, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::xla::CompilationLogEntry, _impl_.task_index_),
  PROTOBUF_FIELD_OFFSET(::xla::CompilationLogEntry, _impl_.pass_metrics_),
  PROTOBUF_FIELD_OFFSET(::xla::CompilationLogEntry, _impl_.module_ids_),
  PROTOBUF_FIELD_OFFSET(::xla::CompilationLogEntry, _impl_.job_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xla::PassMetrics)},
  { 10, 22, -1, sizeof(::xla::JobInfo)},
  { 28, -1, -1, sizeof(::xla::CompilationLogEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xla::_PassMetrics_default_instance_._instance,
  &::xla::_JobInfo_default_instance_._instance,
  &::xla::_CompilationLogEntry_default_instance_._instance,
};

const char descriptor_table_protodef_xla_2fservice_2fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031xla/service/metrics.proto\022\003xla\032\031google"
  "/protobuf/any.proto\032\036google/protobuf/dur"
  "ation.proto\032\037google/protobuf/timestamp.p"
  "roto\"\223\001\n\013PassMetrics\022\021\n\tmodule_id\030\001 \001(\004\022"
  "\021\n\tpass_name\030\002 \001(\t\0220\n\rpass_duration\030\003 \001("
  "\0132\031.google.protobuf.Duration\022,\n\016custom_m"
  "etrics\030\004 \001(\0132\024.google.protobuf.Any\"\275\001\n\007J"
  "obInfo\022\021\n\004name\030\001 \001(\tH\000\210\001\001\022\021\n\004cell\030\002 \001(\tH"
  "\001\210\001\001\022\021\n\004user\030\003 \001(\tH\002\210\001\001\022\020\n\003uid\030\004 \001(\003H\003\210\001"
  "\001\022\024\n\007task_id\030\005 \001(\003H\004\210\001\001\022\025\n\010task_uid\030\006 \001("
  "\003H\005\210\001\001B\007\n\005_nameB\007\n\005_cellB\007\n\005_userB\006\n\004_ui"
  "dB\n\n\010_task_idB\013\n\t_task_uid\"\211\003\n\023Compilati"
  "onLogEntry\022-\n\ttimestamp\030\001 \001(\0132\032.google.p"
  "rotobuf.Timestamp\0228\n\005stage\030\002 \001(\0162).xla.C"
  "ompilationLogEntry.CompilationStage\022+\n\010d"
  "uration\030\003 \001(\0132\031.google.protobuf.Duration"
  "\022\022\n\ntask_index\030\004 \001(\005\022&\n\014pass_metrics\030\005 \003"
  "(\0132\020.xla.PassMetrics\022\022\n\nmodule_ids\030\006 \003(\004"
  "\022\036\n\010job_info\030\007 \001(\0132\014.xla.JobInfo\"l\n\020Comp"
  "ilationStage\022\017\n\013UNSPECIFIED\020\000\022\016\n\nEND_TO_"
  "END\020\001\022\016\n\nHLO_PASSES\020\002\022\023\n\017CODE_GENERATION"
  "\020\003\022\022\n\016BACKEND_PASSES\020\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_xla_2fservice_2fmetrics_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_xla_2fservice_2fmetrics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xla_2fservice_2fmetrics_2eproto = {
    false, false, 870, descriptor_table_protodef_xla_2fservice_2fmetrics_2eproto,
    "xla/service/metrics.proto",
    &descriptor_table_xla_2fservice_2fmetrics_2eproto_once, descriptor_table_xla_2fservice_2fmetrics_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_xla_2fservice_2fmetrics_2eproto::offsets,
    file_level_metadata_xla_2fservice_2fmetrics_2eproto, file_level_enum_descriptors_xla_2fservice_2fmetrics_2eproto,
    file_level_service_descriptors_xla_2fservice_2fmetrics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xla_2fservice_2fmetrics_2eproto_getter() {
  return &descriptor_table_xla_2fservice_2fmetrics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xla_2fservice_2fmetrics_2eproto(&descriptor_table_xla_2fservice_2fmetrics_2eproto);
namespace xla {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompilationLogEntry_CompilationStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xla_2fservice_2fmetrics_2eproto);
  return file_level_enum_descriptors_xla_2fservice_2fmetrics_2eproto[0];
}
bool CompilationLogEntry_CompilationStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CompilationLogEntry_CompilationStage CompilationLogEntry::UNSPECIFIED;
constexpr CompilationLogEntry_CompilationStage CompilationLogEntry::END_TO_END;
constexpr CompilationLogEntry_CompilationStage CompilationLogEntry::HLO_PASSES;
constexpr CompilationLogEntry_CompilationStage CompilationLogEntry::CODE_GENERATION;
constexpr CompilationLogEntry_CompilationStage CompilationLogEntry::BACKEND_PASSES;
constexpr CompilationLogEntry_CompilationStage CompilationLogEntry::CompilationStage_MIN;
constexpr CompilationLogEntry_CompilationStage CompilationLogEntry::CompilationStage_MAX;
constexpr int CompilationLogEntry::CompilationStage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PassMetrics::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& pass_duration(const PassMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& custom_metrics(const PassMetrics* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
PassMetrics::_Internal::pass_duration(const PassMetrics* msg) {
  return *msg->_impl_.pass_duration_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
PassMetrics::_Internal::custom_metrics(const PassMetrics* msg) {
  return *msg->_impl_.custom_metrics_;
}
void PassMetrics::clear_pass_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.pass_duration_ != nullptr) {
    delete _impl_.pass_duration_;
  }
  _impl_.pass_duration_ = nullptr;
}
void PassMetrics::clear_custom_metrics() {
  if (GetArenaForAllocation() == nullptr && _impl_.custom_metrics_ != nullptr) {
    delete _impl_.custom_metrics_;
  }
  _impl_.custom_metrics_ = nullptr;
}
PassMetrics::PassMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.PassMetrics)
}
PassMetrics::PassMetrics(const PassMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PassMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pass_name_){}
    , decltype(_impl_.pass_duration_){nullptr}
    , decltype(_impl_.custom_metrics_){nullptr}
    , decltype(_impl_.module_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pass_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pass_name().empty()) {
    _this->_impl_.pass_name_.Set(from._internal_pass_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pass_duration()) {
    _this->_impl_.pass_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.pass_duration_);
  }
  if (from._internal_has_custom_metrics()) {
    _this->_impl_.custom_metrics_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.custom_metrics_);
  }
  _this->_impl_.module_id_ = from._impl_.module_id_;
  // @@protoc_insertion_point(copy_constructor:xla.PassMetrics)
}

inline void PassMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pass_name_){}
    , decltype(_impl_.pass_duration_){nullptr}
    , decltype(_impl_.custom_metrics_){nullptr}
    , decltype(_impl_.module_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pass_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PassMetrics::~PassMetrics() {
  // @@protoc_insertion_point(destructor:xla.PassMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PassMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pass_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pass_duration_;
  if (this != internal_default_instance()) delete _impl_.custom_metrics_;
}

void PassMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PassMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.PassMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pass_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pass_duration_ != nullptr) {
    delete _impl_.pass_duration_;
  }
  _impl_.pass_duration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.custom_metrics_ != nullptr) {
    delete _impl_.custom_metrics_;
  }
  _impl_.custom_metrics_ = nullptr;
  _impl_.module_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PassMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 module_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pass_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pass_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.PassMetrics.pass_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration pass_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pass_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any custom_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PassMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.PassMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 module_id = 1;
  if (this->_internal_module_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_module_id(), target);
  }

  // string pass_name = 2;
  if (!this->_internal_pass_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pass_name().data(), static_cast<int>(this->_internal_pass_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.PassMetrics.pass_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pass_name(), target);
  }

  // .google.protobuf.Duration pass_duration = 3;
  if (this->_internal_has_pass_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pass_duration(this),
        _Internal::pass_duration(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any custom_metrics = 4;
  if (this->_internal_has_custom_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::custom_metrics(this),
        _Internal::custom_metrics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.PassMetrics)
  return target;
}

size_t PassMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.PassMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pass_name = 2;
  if (!this->_internal_pass_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pass_name());
  }

  // .google.protobuf.Duration pass_duration = 3;
  if (this->_internal_has_pass_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pass_duration_);
  }

  // .google.protobuf.Any custom_metrics = 4;
  if (this->_internal_has_custom_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.custom_metrics_);
  }

  // uint64 module_id = 1;
  if (this->_internal_module_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_module_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PassMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PassMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PassMetrics::GetClassData() const { return &_class_data_; }


void PassMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PassMetrics*>(&to_msg);
  auto& from = static_cast<const PassMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.PassMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pass_name().empty()) {
    _this->_internal_set_pass_name(from._internal_pass_name());
  }
  if (from._internal_has_pass_duration()) {
    _this->_internal_mutable_pass_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_pass_duration());
  }
  if (from._internal_has_custom_metrics()) {
    _this->_internal_mutable_custom_metrics()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_custom_metrics());
  }
  if (from._internal_module_id() != 0) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PassMetrics::CopyFrom(const PassMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.PassMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassMetrics::IsInitialized() const {
  return true;
}

void PassMetrics::InternalSwap(PassMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_name_, lhs_arena,
      &other->_impl_.pass_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PassMetrics, _impl_.module_id_)
      + sizeof(PassMetrics::_impl_.module_id_)
      - PROTOBUF_FIELD_OFFSET(PassMetrics, _impl_.pass_duration_)>(
          reinterpret_cast<char*>(&_impl_.pass_duration_),
          reinterpret_cast<char*>(&other->_impl_.pass_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PassMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fmetrics_2eproto_getter, &descriptor_table_xla_2fservice_2fmetrics_2eproto_once,
      file_level_metadata_xla_2fservice_2fmetrics_2eproto[0]);
}

// ===================================================================

class JobInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<JobInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_task_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

JobInfo::JobInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.JobInfo)
}
JobInfo::JobInfo(const JobInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JobInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.cell_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.task_uid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cell()) {
    _this->_impl_.cell_.Set(from._internal_cell(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.task_uid_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.task_uid_));
  // @@protoc_insertion_point(copy_constructor:xla.JobInfo)
}

inline void JobInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.cell_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.uid_){int64_t{0}}
    , decltype(_impl_.task_id_){int64_t{0}}
    , decltype(_impl_.task_uid_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JobInfo::~JobInfo() {
  // @@protoc_insertion_point(destructor:xla.JobInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JobInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.cell_.Destroy();
  _impl_.user_.Destroy();
}

void JobInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JobInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.JobInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cell_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.user_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.task_uid_) -
        reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.task_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.JobInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.JobInfo.cell"));
        } else
          goto handle_unusual;
        continue;
      // optional string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.JobInfo.user"));
        } else
          goto handle_unusual;
        continue;
      // optional int64 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 task_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_task_id(&has_bits);
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 task_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_task_uid(&has_bits);
          _impl_.task_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.JobInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.JobInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string cell = 2;
  if (_internal_has_cell()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cell().data(), static_cast<int>(this->_internal_cell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.JobInfo.cell");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cell(), target);
  }

  // optional string user = 3;
  if (_internal_has_user()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.JobInfo.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  // optional int64 uid = 4;
  if (_internal_has_uid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_uid(), target);
  }

  // optional int64 task_id = 5;
  if (_internal_has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_task_id(), target);
  }

  // optional int64 task_uid = 6;
  if (_internal_has_task_uid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_task_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.JobInfo)
  return target;
}

size_t JobInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.JobInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string cell = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cell());
    }

    // optional string user = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user());
    }

    // optional int64 uid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uid());
    }

    // optional int64 task_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_task_id());
    }

    // optional int64 task_uid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_task_uid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JobInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobInfo::GetClassData() const { return &_class_data_; }


void JobInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JobInfo*>(&to_msg);
  auto& from = static_cast<const JobInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.JobInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cell(from._internal_cell());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_user(from._internal_user());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.uid_ = from._impl_.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.task_id_ = from._impl_.task_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.task_uid_ = from._impl_.task_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobInfo::CopyFrom(const JobInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.JobInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobInfo::IsInitialized() const {
  return true;
}

void JobInfo::InternalSwap(JobInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cell_, lhs_arena,
      &other->_impl_.cell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JobInfo, _impl_.task_uid_)
      + sizeof(JobInfo::_impl_.task_uid_)
      - PROTOBUF_FIELD_OFFSET(JobInfo, _impl_.uid_)>(
          reinterpret_cast<char*>(&_impl_.uid_),
          reinterpret_cast<char*>(&other->_impl_.uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fmetrics_2eproto_getter, &descriptor_table_xla_2fservice_2fmetrics_2eproto_once,
      file_level_metadata_xla_2fservice_2fmetrics_2eproto[1]);
}

// ===================================================================

class CompilationLogEntry::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CompilationLogEntry* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const CompilationLogEntry* msg);
  static const ::xla::JobInfo& job_info(const CompilationLogEntry* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CompilationLogEntry::_Internal::timestamp(const CompilationLogEntry* msg) {
  return *msg->_impl_.timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
CompilationLogEntry::_Internal::duration(const CompilationLogEntry* msg) {
  return *msg->_impl_.duration_;
}
const ::xla::JobInfo&
CompilationLogEntry::_Internal::job_info(const CompilationLogEntry* msg) {
  return *msg->_impl_.job_info_;
}
void CompilationLogEntry::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void CompilationLogEntry::clear_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
}
CompilationLogEntry::CompilationLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.CompilationLogEntry)
}
CompilationLogEntry::CompilationLogEntry(const CompilationLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompilationLogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pass_metrics_){from._impl_.pass_metrics_}
    , decltype(_impl_.module_ids_){from._impl_.module_ids_}
    , /*decltype(_impl_._module_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.job_info_){nullptr}
    , decltype(_impl_.stage_){}
    , decltype(_impl_.task_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  if (from._internal_has_job_info()) {
    _this->_impl_.job_info_ = new ::xla::JobInfo(*from._impl_.job_info_);
  }
  ::memcpy(&_impl_.stage_, &from._impl_.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.task_index_) -
    reinterpret_cast<char*>(&_impl_.stage_)) + sizeof(_impl_.task_index_));
  // @@protoc_insertion_point(copy_constructor:xla.CompilationLogEntry)
}

inline void CompilationLogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pass_metrics_){arena}
    , decltype(_impl_.module_ids_){arena}
    , /*decltype(_impl_._module_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.job_info_){nullptr}
    , decltype(_impl_.stage_){0}
    , decltype(_impl_.task_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompilationLogEntry::~CompilationLogEntry() {
  // @@protoc_insertion_point(destructor:xla.CompilationLogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompilationLogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pass_metrics_.~RepeatedPtrField();
  _impl_.module_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.duration_;
  if (this != internal_default_instance()) delete _impl_.job_info_;
}

void CompilationLogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompilationLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CompilationLogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pass_metrics_.Clear();
  _impl_.module_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.job_info_ != nullptr) {
    delete _impl_.job_info_;
  }
  _impl_.job_info_ = nullptr;
  ::memset(&_impl_.stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.task_index_) -
      reinterpret_cast<char*>(&_impl_.stage_)) + sizeof(_impl_.task_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompilationLogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.CompilationLogEntry.CompilationStage stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stage(static_cast<::xla::CompilationLogEntry_CompilationStage>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.task_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.PassMetrics pass_metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pass_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 module_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_module_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_module_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xla.JobInfo job_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompilationLogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.CompilationLogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .xla.CompilationLogEntry.CompilationStage stage = 2;
  if (this->_internal_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stage(), target);
  }

  // .google.protobuf.Duration duration = 3;
  if (this->_internal_has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  // int32 task_index = 4;
  if (this->_internal_task_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_task_index(), target);
  }

  // repeated .xla.PassMetrics pass_metrics = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pass_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_pass_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 module_ids = 6;
  {
    int byte_size = _impl_._module_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_module_ids(), byte_size, target);
    }
  }

  // .xla.JobInfo job_info = 7;
  if (this->_internal_has_job_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::job_info(this),
        _Internal::job_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.CompilationLogEntry)
  return target;
}

size_t CompilationLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CompilationLogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.PassMetrics pass_metrics = 5;
  total_size += 1UL * this->_internal_pass_metrics_size();
  for (const auto& msg : this->_impl_.pass_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 module_ids = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.module_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._module_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .google.protobuf.Duration duration = 3;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  // .xla.JobInfo job_info = 7;
  if (this->_internal_has_job_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.job_info_);
  }

  // .xla.CompilationLogEntry.CompilationStage stage = 2;
  if (this->_internal_stage() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stage());
  }

  // int32 task_index = 4;
  if (this->_internal_task_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompilationLogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompilationLogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompilationLogEntry::GetClassData() const { return &_class_data_; }


void CompilationLogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompilationLogEntry*>(&to_msg);
  auto& from = static_cast<const CompilationLogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.CompilationLogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pass_metrics_.MergeFrom(from._impl_.pass_metrics_);
  _this->_impl_.module_ids_.MergeFrom(from._impl_.module_ids_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_duration()) {
    _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration());
  }
  if (from._internal_has_job_info()) {
    _this->_internal_mutable_job_info()->::xla::JobInfo::MergeFrom(
        from._internal_job_info());
  }
  if (from._internal_stage() != 0) {
    _this->_internal_set_stage(from._internal_stage());
  }
  if (from._internal_task_index() != 0) {
    _this->_internal_set_task_index(from._internal_task_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompilationLogEntry::CopyFrom(const CompilationLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CompilationLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompilationLogEntry::IsInitialized() const {
  return true;
}

void CompilationLogEntry::InternalSwap(CompilationLogEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pass_metrics_.InternalSwap(&other->_impl_.pass_metrics_);
  _impl_.module_ids_.InternalSwap(&other->_impl_.module_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompilationLogEntry, _impl_.task_index_)
      + sizeof(CompilationLogEntry::_impl_.task_index_)
      - PROTOBUF_FIELD_OFFSET(CompilationLogEntry, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompilationLogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fmetrics_2eproto_getter, &descriptor_table_xla_2fservice_2fmetrics_2eproto_once,
      file_level_metadata_xla_2fservice_2fmetrics_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xla::PassMetrics*
Arena::CreateMaybeMessage< ::xla::PassMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::PassMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::JobInfo*
Arena::CreateMaybeMessage< ::xla::JobInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::JobInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::CompilationLogEntry*
Arena::CreateMaybeMessage< ::xla::CompilationLogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::CompilationLogEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
