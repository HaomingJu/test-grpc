// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/hlo_profile_printer_data.proto

#include "xla/service/hlo_profile_printer_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xla {
PROTOBUF_CONSTEXPR HloProfilePrinterData_HloInstructionInfo::HloProfilePrinterData_HloInstructionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.long_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.short_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flop_count_)*/0
  , /*decltype(_impl_.transcendental_count_)*/0
  , /*decltype(_impl_.profile_index_)*/int64_t{0}
  , /*decltype(_impl_.bytes_accessed_)*/int64_t{0}
  , /*decltype(_impl_.optimal_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloProfilePrinterData_HloInstructionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloProfilePrinterData_HloInstructionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloProfilePrinterData_HloInstructionInfoDefaultTypeInternal() {}
  union {
    HloProfilePrinterData_HloInstructionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloProfilePrinterData_HloInstructionInfoDefaultTypeInternal _HloProfilePrinterData_HloInstructionInfo_default_instance_;
PROTOBUF_CONSTEXPR HloProfilePrinterData_HloComputationInfo::HloProfilePrinterData_HloComputationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruction_infos_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_index_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloProfilePrinterData_HloComputationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloProfilePrinterData_HloComputationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloProfilePrinterData_HloComputationInfoDefaultTypeInternal() {}
  union {
    HloProfilePrinterData_HloComputationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloProfilePrinterData_HloComputationInfoDefaultTypeInternal _HloProfilePrinterData_HloComputationInfo_default_instance_;
PROTOBUF_CONSTEXPR HloProfilePrinterData_ExtraMetricsEntry_DoNotUse::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HloProfilePrinterData_ExtraMetricsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloProfilePrinterData_ExtraMetricsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloProfilePrinterData_ExtraMetricsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HloProfilePrinterData_ExtraMetricsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloProfilePrinterData_ExtraMetricsEntry_DoNotUseDefaultTypeInternal _HloProfilePrinterData_ExtraMetricsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HloProfilePrinterData::HloProfilePrinterData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.computation_infos_)*/{}
  , /*decltype(_impl_.extra_metrics_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.entry_computation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_counters_size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HloProfilePrinterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloProfilePrinterDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloProfilePrinterDataDefaultTypeInternal() {}
  union {
    HloProfilePrinterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloProfilePrinterDataDefaultTypeInternal _HloProfilePrinterData_default_instance_;
}  // namespace xla
static ::_pb::Metadata file_level_metadata_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto = nullptr;

const uint32_t TableStruct_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _impl_.long_name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _impl_.short_name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _impl_.flop_count_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _impl_.transcendental_count_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _impl_.bytes_accessed_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _impl_.optimal_seconds_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloInstructionInfo, _impl_.profile_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloComputationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloComputationInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloComputationInfo, _impl_.profile_index_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_HloComputationInfo, _impl_.instruction_infos_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData, _impl_.computation_infos_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData, _impl_.profile_counters_size_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData, _impl_.extra_metrics_),
  PROTOBUF_FIELD_OFFSET(::xla::HloProfilePrinterData, _impl_.entry_computation_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xla::HloProfilePrinterData_HloInstructionInfo)},
  { 14, -1, -1, sizeof(::xla::HloProfilePrinterData_HloComputationInfo)},
  { 23, 31, -1, sizeof(::xla::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse)},
  { 33, -1, -1, sizeof(::xla::HloProfilePrinterData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xla::_HloProfilePrinterData_HloInstructionInfo_default_instance_._instance,
  &::xla::_HloProfilePrinterData_HloComputationInfo_default_instance_._instance,
  &::xla::_HloProfilePrinterData_ExtraMetricsEntry_DoNotUse_default_instance_._instance,
  &::xla::_HloProfilePrinterData_default_instance_._instance,
};

const char descriptor_table_protodef_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*xla/service/hlo_profile_printer_data.p"
  "roto\022\003xla\"\353\004\n\025HloProfilePrinterData\022H\n\021c"
  "omputation_infos\030\001 \003(\0132-.xla.HloProfileP"
  "rinterData.HloComputationInfo\022\035\n\025profile"
  "_counters_size\030\002 \001(\003\022C\n\rextra_metrics\030\003 "
  "\003(\0132,.xla.HloProfilePrinterData.ExtraMet"
  "ricsEntry\022\031\n\021entry_computation\030\004 \001(\t\032\315\001\n"
  "\022HloInstructionInfo\022\021\n\tlong_name\030\001 \001(\t\022\022"
  "\n\nshort_name\030\002 \001(\t\022\020\n\010category\030\003 \001(\t\022\022\n\n"
  "flop_count\030\004 \001(\002\022\034\n\024transcendental_count"
  "\030\005 \001(\002\022\026\n\016bytes_accessed\030\t \001(\003\022\027\n\017optima"
  "l_seconds\030\007 \001(\002\022\025\n\rprofile_index\030\010 \001(\003J\004"
  "\010\006\020\007\032\203\001\n\022HloComputationInfo\022\014\n\004name\030\001 \001("
  "\t\022\025\n\rprofile_index\030\002 \001(\003\022H\n\021instruction_"
  "infos\030\003 \003(\0132-.xla.HloProfilePrinterData."
  "HloInstructionInfo\0323\n\021ExtraMetricsEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001B\003\370\001\001b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto = {
    false, false, 684, descriptor_table_protodef_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto,
    "xla/service/hlo_profile_printer_data.proto",
    &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto::offsets,
    file_level_metadata_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto, file_level_enum_descriptors_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto,
    file_level_service_descriptors_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_getter() {
  return &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto(&descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto);
namespace xla {

// ===================================================================

class HloProfilePrinterData_HloInstructionInfo::_Internal {
 public:
};

HloProfilePrinterData_HloInstructionInfo::HloProfilePrinterData_HloInstructionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloProfilePrinterData.HloInstructionInfo)
}
HloProfilePrinterData_HloInstructionInfo::HloProfilePrinterData_HloInstructionInfo(const HloProfilePrinterData_HloInstructionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloProfilePrinterData_HloInstructionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.long_name_){}
    , decltype(_impl_.short_name_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.flop_count_){}
    , decltype(_impl_.transcendental_count_){}
    , decltype(_impl_.profile_index_){}
    , decltype(_impl_.bytes_accessed_){}
    , decltype(_impl_.optimal_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.long_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_long_name().empty()) {
    _this->_impl_.long_name_.Set(from._internal_long_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_short_name().empty()) {
    _this->_impl_.short_name_.Set(from._internal_short_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.flop_count_, &from._impl_.flop_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optimal_seconds_) -
    reinterpret_cast<char*>(&_impl_.flop_count_)) + sizeof(_impl_.optimal_seconds_));
  // @@protoc_insertion_point(copy_constructor:xla.HloProfilePrinterData.HloInstructionInfo)
}

inline void HloProfilePrinterData_HloInstructionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.long_name_){}
    , decltype(_impl_.short_name_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.flop_count_){0}
    , decltype(_impl_.transcendental_count_){0}
    , decltype(_impl_.profile_index_){int64_t{0}}
    , decltype(_impl_.bytes_accessed_){int64_t{0}}
    , decltype(_impl_.optimal_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.long_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloProfilePrinterData_HloInstructionInfo::~HloProfilePrinterData_HloInstructionInfo() {
  // @@protoc_insertion_point(destructor:xla.HloProfilePrinterData.HloInstructionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloProfilePrinterData_HloInstructionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.long_name_.Destroy();
  _impl_.short_name_.Destroy();
  _impl_.category_.Destroy();
}

void HloProfilePrinterData_HloInstructionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloProfilePrinterData_HloInstructionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloProfilePrinterData.HloInstructionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.long_name_.ClearToEmpty();
  _impl_.short_name_.ClearToEmpty();
  _impl_.category_.ClearToEmpty();
  ::memset(&_impl_.flop_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.optimal_seconds_) -
      reinterpret_cast<char*>(&_impl_.flop_count_)) + sizeof(_impl_.optimal_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloProfilePrinterData_HloInstructionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string long_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_long_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloProfilePrinterData.HloInstructionInfo.long_name"));
        } else
          goto handle_unusual;
        continue;
      // string short_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_short_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloProfilePrinterData.HloInstructionInfo.short_name"));
        } else
          goto handle_unusual;
        continue;
      // string category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloProfilePrinterData.HloInstructionInfo.category"));
        } else
          goto handle_unusual;
        continue;
      // float flop_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.flop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float transcendental_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.transcendental_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float optimal_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.optimal_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 profile_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.profile_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_accessed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.bytes_accessed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloProfilePrinterData_HloInstructionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloProfilePrinterData.HloInstructionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string long_name = 1;
  if (!this->_internal_long_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_long_name().data(), static_cast<int>(this->_internal_long_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloProfilePrinterData.HloInstructionInfo.long_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_long_name(), target);
  }

  // string short_name = 2;
  if (!this->_internal_short_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloProfilePrinterData.HloInstructionInfo.short_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_short_name(), target);
  }

  // string category = 3;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloProfilePrinterData.HloInstructionInfo.category");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_category(), target);
  }

  // float flop_count = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_flop_count = this->_internal_flop_count();
  uint32_t raw_flop_count;
  memcpy(&raw_flop_count, &tmp_flop_count, sizeof(tmp_flop_count));
  if (raw_flop_count != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_flop_count(), target);
  }

  // float transcendental_count = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_transcendental_count = this->_internal_transcendental_count();
  uint32_t raw_transcendental_count;
  memcpy(&raw_transcendental_count, &tmp_transcendental_count, sizeof(tmp_transcendental_count));
  if (raw_transcendental_count != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_transcendental_count(), target);
  }

  // float optimal_seconds = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_optimal_seconds = this->_internal_optimal_seconds();
  uint32_t raw_optimal_seconds;
  memcpy(&raw_optimal_seconds, &tmp_optimal_seconds, sizeof(tmp_optimal_seconds));
  if (raw_optimal_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_optimal_seconds(), target);
  }

  // int64 profile_index = 8;
  if (this->_internal_profile_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_profile_index(), target);
  }

  // int64 bytes_accessed = 9;
  if (this->_internal_bytes_accessed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_bytes_accessed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloProfilePrinterData.HloInstructionInfo)
  return target;
}

size_t HloProfilePrinterData_HloInstructionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloProfilePrinterData.HloInstructionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string long_name = 1;
  if (!this->_internal_long_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_long_name());
  }

  // string short_name = 2;
  if (!this->_internal_short_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_short_name());
  }

  // string category = 3;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // float flop_count = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_flop_count = this->_internal_flop_count();
  uint32_t raw_flop_count;
  memcpy(&raw_flop_count, &tmp_flop_count, sizeof(tmp_flop_count));
  if (raw_flop_count != 0) {
    total_size += 1 + 4;
  }

  // float transcendental_count = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_transcendental_count = this->_internal_transcendental_count();
  uint32_t raw_transcendental_count;
  memcpy(&raw_transcendental_count, &tmp_transcendental_count, sizeof(tmp_transcendental_count));
  if (raw_transcendental_count != 0) {
    total_size += 1 + 4;
  }

  // int64 profile_index = 8;
  if (this->_internal_profile_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_profile_index());
  }

  // int64 bytes_accessed = 9;
  if (this->_internal_bytes_accessed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_accessed());
  }

  // float optimal_seconds = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_optimal_seconds = this->_internal_optimal_seconds();
  uint32_t raw_optimal_seconds;
  memcpy(&raw_optimal_seconds, &tmp_optimal_seconds, sizeof(tmp_optimal_seconds));
  if (raw_optimal_seconds != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloProfilePrinterData_HloInstructionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloProfilePrinterData_HloInstructionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloProfilePrinterData_HloInstructionInfo::GetClassData() const { return &_class_data_; }


void HloProfilePrinterData_HloInstructionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloProfilePrinterData_HloInstructionInfo*>(&to_msg);
  auto& from = static_cast<const HloProfilePrinterData_HloInstructionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloProfilePrinterData.HloInstructionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_long_name().empty()) {
    _this->_internal_set_long_name(from._internal_long_name());
  }
  if (!from._internal_short_name().empty()) {
    _this->_internal_set_short_name(from._internal_short_name());
  }
  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_flop_count = from._internal_flop_count();
  uint32_t raw_flop_count;
  memcpy(&raw_flop_count, &tmp_flop_count, sizeof(tmp_flop_count));
  if (raw_flop_count != 0) {
    _this->_internal_set_flop_count(from._internal_flop_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_transcendental_count = from._internal_transcendental_count();
  uint32_t raw_transcendental_count;
  memcpy(&raw_transcendental_count, &tmp_transcendental_count, sizeof(tmp_transcendental_count));
  if (raw_transcendental_count != 0) {
    _this->_internal_set_transcendental_count(from._internal_transcendental_count());
  }
  if (from._internal_profile_index() != 0) {
    _this->_internal_set_profile_index(from._internal_profile_index());
  }
  if (from._internal_bytes_accessed() != 0) {
    _this->_internal_set_bytes_accessed(from._internal_bytes_accessed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_optimal_seconds = from._internal_optimal_seconds();
  uint32_t raw_optimal_seconds;
  memcpy(&raw_optimal_seconds, &tmp_optimal_seconds, sizeof(tmp_optimal_seconds));
  if (raw_optimal_seconds != 0) {
    _this->_internal_set_optimal_seconds(from._internal_optimal_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloProfilePrinterData_HloInstructionInfo::CopyFrom(const HloProfilePrinterData_HloInstructionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloProfilePrinterData.HloInstructionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloProfilePrinterData_HloInstructionInfo::IsInitialized() const {
  return true;
}

void HloProfilePrinterData_HloInstructionInfo::InternalSwap(HloProfilePrinterData_HloInstructionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.long_name_, lhs_arena,
      &other->_impl_.long_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.short_name_, lhs_arena,
      &other->_impl_.short_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloProfilePrinterData_HloInstructionInfo, _impl_.optimal_seconds_)
      + sizeof(HloProfilePrinterData_HloInstructionInfo::_impl_.optimal_seconds_)
      - PROTOBUF_FIELD_OFFSET(HloProfilePrinterData_HloInstructionInfo, _impl_.flop_count_)>(
          reinterpret_cast<char*>(&_impl_.flop_count_),
          reinterpret_cast<char*>(&other->_impl_.flop_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HloProfilePrinterData_HloInstructionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto[0]);
}

// ===================================================================

class HloProfilePrinterData_HloComputationInfo::_Internal {
 public:
};

HloProfilePrinterData_HloComputationInfo::HloProfilePrinterData_HloComputationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.HloProfilePrinterData.HloComputationInfo)
}
HloProfilePrinterData_HloComputationInfo::HloProfilePrinterData_HloComputationInfo(const HloProfilePrinterData_HloComputationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloProfilePrinterData_HloComputationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruction_infos_){from._impl_.instruction_infos_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.profile_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.profile_index_ = from._impl_.profile_index_;
  // @@protoc_insertion_point(copy_constructor:xla.HloProfilePrinterData.HloComputationInfo)
}

inline void HloProfilePrinterData_HloComputationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruction_infos_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.profile_index_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloProfilePrinterData_HloComputationInfo::~HloProfilePrinterData_HloComputationInfo() {
  // @@protoc_insertion_point(destructor:xla.HloProfilePrinterData.HloComputationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HloProfilePrinterData_HloComputationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruction_infos_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void HloProfilePrinterData_HloComputationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloProfilePrinterData_HloComputationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloProfilePrinterData.HloComputationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruction_infos_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.profile_index_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloProfilePrinterData_HloComputationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloProfilePrinterData.HloComputationInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 profile_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.profile_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xla.HloProfilePrinterData.HloInstructionInfo instruction_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruction_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloProfilePrinterData_HloComputationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloProfilePrinterData.HloComputationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloProfilePrinterData.HloComputationInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 profile_index = 2;
  if (this->_internal_profile_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_profile_index(), target);
  }

  // repeated .xla.HloProfilePrinterData.HloInstructionInfo instruction_infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruction_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruction_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloProfilePrinterData.HloComputationInfo)
  return target;
}

size_t HloProfilePrinterData_HloComputationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloProfilePrinterData.HloComputationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HloProfilePrinterData.HloInstructionInfo instruction_infos = 3;
  total_size += 1UL * this->_internal_instruction_infos_size();
  for (const auto& msg : this->_impl_.instruction_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 profile_index = 2;
  if (this->_internal_profile_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_profile_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloProfilePrinterData_HloComputationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloProfilePrinterData_HloComputationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloProfilePrinterData_HloComputationInfo::GetClassData() const { return &_class_data_; }


void HloProfilePrinterData_HloComputationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloProfilePrinterData_HloComputationInfo*>(&to_msg);
  auto& from = static_cast<const HloProfilePrinterData_HloComputationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloProfilePrinterData.HloComputationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruction_infos_.MergeFrom(from._impl_.instruction_infos_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_profile_index() != 0) {
    _this->_internal_set_profile_index(from._internal_profile_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloProfilePrinterData_HloComputationInfo::CopyFrom(const HloProfilePrinterData_HloComputationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloProfilePrinterData.HloComputationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloProfilePrinterData_HloComputationInfo::IsInitialized() const {
  return true;
}

void HloProfilePrinterData_HloComputationInfo::InternalSwap(HloProfilePrinterData_HloComputationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruction_infos_.InternalSwap(&other->_impl_.instruction_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.profile_index_, other->_impl_.profile_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloProfilePrinterData_HloComputationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto[1]);
}

// ===================================================================

HloProfilePrinterData_ExtraMetricsEntry_DoNotUse::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse() {}
HloProfilePrinterData_ExtraMetricsEntry_DoNotUse::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HloProfilePrinterData_ExtraMetricsEntry_DoNotUse::MergeFrom(const HloProfilePrinterData_ExtraMetricsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HloProfilePrinterData_ExtraMetricsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto[2]);
}

// ===================================================================

class HloProfilePrinterData::_Internal {
 public:
};

HloProfilePrinterData::HloProfilePrinterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HloProfilePrinterData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:xla.HloProfilePrinterData)
}
HloProfilePrinterData::HloProfilePrinterData(const HloProfilePrinterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HloProfilePrinterData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.computation_infos_){from._impl_.computation_infos_}
    , /*decltype(_impl_.extra_metrics_)*/{}
    , decltype(_impl_.entry_computation_){}
    , decltype(_impl_.profile_counters_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.extra_metrics_.MergeFrom(from._impl_.extra_metrics_);
  _impl_.entry_computation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entry_computation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entry_computation().empty()) {
    _this->_impl_.entry_computation_.Set(from._internal_entry_computation(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.profile_counters_size_ = from._impl_.profile_counters_size_;
  // @@protoc_insertion_point(copy_constructor:xla.HloProfilePrinterData)
}

inline void HloProfilePrinterData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.computation_infos_){arena}
    , /*decltype(_impl_.extra_metrics_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.entry_computation_){}
    , decltype(_impl_.profile_counters_size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entry_computation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entry_computation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HloProfilePrinterData::~HloProfilePrinterData() {
  // @@protoc_insertion_point(destructor:xla.HloProfilePrinterData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HloProfilePrinterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.computation_infos_.~RepeatedPtrField();
  _impl_.extra_metrics_.Destruct();
  _impl_.extra_metrics_.~MapField();
  _impl_.entry_computation_.Destroy();
}

void HloProfilePrinterData::ArenaDtor(void* object) {
  HloProfilePrinterData* _this = reinterpret_cast< HloProfilePrinterData* >(object);
  _this->_impl_.extra_metrics_.Destruct();
}
void HloProfilePrinterData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HloProfilePrinterData::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloProfilePrinterData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.computation_infos_.Clear();
  _impl_.extra_metrics_.Clear();
  _impl_.entry_computation_.ClearToEmpty();
  _impl_.profile_counters_size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HloProfilePrinterData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xla.HloProfilePrinterData.HloComputationInfo computation_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_computation_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 profile_counters_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.profile_counters_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> extra_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.extra_metrics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string entry_computation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_entry_computation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xla.HloProfilePrinterData.entry_computation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HloProfilePrinterData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.HloProfilePrinterData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xla.HloProfilePrinterData.HloComputationInfo computation_infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_computation_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_computation_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 profile_counters_size = 2;
  if (this->_internal_profile_counters_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_profile_counters_size(), target);
  }

  // map<string, int64> extra_metrics = 3;
  if (!this->_internal_extra_metrics().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = HloProfilePrinterData_ExtraMetricsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_extra_metrics();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xla.HloProfilePrinterData.ExtraMetricsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string entry_computation = 4;
  if (!this->_internal_entry_computation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entry_computation().data(), static_cast<int>(this->_internal_entry_computation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xla.HloProfilePrinterData.entry_computation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_entry_computation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.HloProfilePrinterData)
  return target;
}

size_t HloProfilePrinterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.HloProfilePrinterData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xla.HloProfilePrinterData.HloComputationInfo computation_infos = 1;
  total_size += 1UL * this->_internal_computation_infos_size();
  for (const auto& msg : this->_impl_.computation_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, int64> extra_metrics = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extra_metrics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_extra_metrics().begin();
      it != this->_internal_extra_metrics().end(); ++it) {
    total_size += HloProfilePrinterData_ExtraMetricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string entry_computation = 4;
  if (!this->_internal_entry_computation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry_computation());
  }

  // int64 profile_counters_size = 2;
  if (this->_internal_profile_counters_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_profile_counters_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HloProfilePrinterData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HloProfilePrinterData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HloProfilePrinterData::GetClassData() const { return &_class_data_; }


void HloProfilePrinterData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HloProfilePrinterData*>(&to_msg);
  auto& from = static_cast<const HloProfilePrinterData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloProfilePrinterData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.computation_infos_.MergeFrom(from._impl_.computation_infos_);
  _this->_impl_.extra_metrics_.MergeFrom(from._impl_.extra_metrics_);
  if (!from._internal_entry_computation().empty()) {
    _this->_internal_set_entry_computation(from._internal_entry_computation());
  }
  if (from._internal_profile_counters_size() != 0) {
    _this->_internal_set_profile_counters_size(from._internal_profile_counters_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HloProfilePrinterData::CopyFrom(const HloProfilePrinterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloProfilePrinterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HloProfilePrinterData::IsInitialized() const {
  return true;
}

void HloProfilePrinterData::InternalSwap(HloProfilePrinterData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.computation_infos_.InternalSwap(&other->_impl_.computation_infos_);
  _impl_.extra_metrics_.InternalSwap(&other->_impl_.extra_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entry_computation_, lhs_arena,
      &other->_impl_.entry_computation_, rhs_arena
  );
  swap(_impl_.profile_counters_size_, other->_impl_.profile_counters_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HloProfilePrinterData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_getter, &descriptor_table_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto_once,
      file_level_metadata_xla_2fservice_2fhlo_5fprofile_5fprinter_5fdata_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xla::HloProfilePrinterData_HloInstructionInfo*
Arena::CreateMaybeMessage< ::xla::HloProfilePrinterData_HloInstructionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloProfilePrinterData_HloInstructionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloProfilePrinterData_HloComputationInfo*
Arena::CreateMaybeMessage< ::xla::HloProfilePrinterData_HloComputationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloProfilePrinterData_HloComputationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xla::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloProfilePrinterData_ExtraMetricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xla::HloProfilePrinterData*
Arena::CreateMaybeMessage< ::xla::HloProfilePrinterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::HloProfilePrinterData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
