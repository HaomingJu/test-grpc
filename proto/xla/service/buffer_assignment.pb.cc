// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/buffer_assignment.proto

#include "xla/service/buffer_assignment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xla {
namespace buffer_assignment {
PROTOBUF_CONSTEXPR BufferIsolationConfig::BufferIsolationConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isolation_colors_)*/{}
  , /*decltype(_impl_._isolation_colors_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_offset_bytes_)*/int64_t{0}
  , /*decltype(_impl_.isolation_fuel_)*/int64_t{0}
  , /*decltype(_impl_.isolation_padding_bytes_)*/int64_t{0}
  , /*decltype(_impl_.isolation_order_salt_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferIsolationConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferIsolationConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferIsolationConfigDefaultTypeInternal() {}
  union {
    BufferIsolationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferIsolationConfigDefaultTypeInternal _BufferIsolationConfig_default_instance_;
}  // namespace buffer_assignment
}  // namespace xla
static ::_pb::Metadata file_level_metadata_xla_2fservice_2fbuffer_5fassignment_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_xla_2fservice_2fbuffer_5fassignment_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xla_2fservice_2fbuffer_5fassignment_2eproto = nullptr;

const uint32_t TableStruct_xla_2fservice_2fbuffer_5fassignment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xla::buffer_assignment::BufferIsolationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xla::buffer_assignment::BufferIsolationConfig, _impl_.base_offset_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::buffer_assignment::BufferIsolationConfig, _impl_.isolation_fuel_),
  PROTOBUF_FIELD_OFFSET(::xla::buffer_assignment::BufferIsolationConfig, _impl_.isolation_padding_bytes_),
  PROTOBUF_FIELD_OFFSET(::xla::buffer_assignment::BufferIsolationConfig, _impl_.isolation_order_salt_),
  PROTOBUF_FIELD_OFFSET(::xla::buffer_assignment::BufferIsolationConfig, _impl_.isolation_colors_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xla::buffer_assignment::BufferIsolationConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xla::buffer_assignment::_BufferIsolationConfig_default_instance_._instance,
};

const char descriptor_table_protodef_xla_2fservice_2fbuffer_5fassignment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#xla/service/buffer_assignment.proto\022\025x"
  "la.buffer_assignment\"\243\001\n\025BufferIsolation"
  "Config\022\031\n\021base_offset_bytes\030\001 \001(\003\022\026\n\016iso"
  "lation_fuel\030\002 \001(\003\022\037\n\027isolation_padding_b"
  "ytes\030\003 \001(\003\022\034\n\024isolation_order_salt\030\004 \001(\004"
  "\022\030\n\020isolation_colors\030\005 \003(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_xla_2fservice_2fbuffer_5fassignment_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xla_2fservice_2fbuffer_5fassignment_2eproto = {
    false, false, 234, descriptor_table_protodef_xla_2fservice_2fbuffer_5fassignment_2eproto,
    "xla/service/buffer_assignment.proto",
    &descriptor_table_xla_2fservice_2fbuffer_5fassignment_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_xla_2fservice_2fbuffer_5fassignment_2eproto::offsets,
    file_level_metadata_xla_2fservice_2fbuffer_5fassignment_2eproto, file_level_enum_descriptors_xla_2fservice_2fbuffer_5fassignment_2eproto,
    file_level_service_descriptors_xla_2fservice_2fbuffer_5fassignment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xla_2fservice_2fbuffer_5fassignment_2eproto_getter() {
  return &descriptor_table_xla_2fservice_2fbuffer_5fassignment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xla_2fservice_2fbuffer_5fassignment_2eproto(&descriptor_table_xla_2fservice_2fbuffer_5fassignment_2eproto);
namespace xla {
namespace buffer_assignment {

// ===================================================================

class BufferIsolationConfig::_Internal {
 public:
};

BufferIsolationConfig::BufferIsolationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xla.buffer_assignment.BufferIsolationConfig)
}
BufferIsolationConfig::BufferIsolationConfig(const BufferIsolationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BufferIsolationConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isolation_colors_){from._impl_.isolation_colors_}
    , /*decltype(_impl_._isolation_colors_cached_byte_size_)*/{0}
    , decltype(_impl_.base_offset_bytes_){}
    , decltype(_impl_.isolation_fuel_){}
    , decltype(_impl_.isolation_padding_bytes_){}
    , decltype(_impl_.isolation_order_salt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.base_offset_bytes_, &from._impl_.base_offset_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isolation_order_salt_) -
    reinterpret_cast<char*>(&_impl_.base_offset_bytes_)) + sizeof(_impl_.isolation_order_salt_));
  // @@protoc_insertion_point(copy_constructor:xla.buffer_assignment.BufferIsolationConfig)
}

inline void BufferIsolationConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isolation_colors_){arena}
    , /*decltype(_impl_._isolation_colors_cached_byte_size_)*/{0}
    , decltype(_impl_.base_offset_bytes_){int64_t{0}}
    , decltype(_impl_.isolation_fuel_){int64_t{0}}
    , decltype(_impl_.isolation_padding_bytes_){int64_t{0}}
    , decltype(_impl_.isolation_order_salt_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BufferIsolationConfig::~BufferIsolationConfig() {
  // @@protoc_insertion_point(destructor:xla.buffer_assignment.BufferIsolationConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferIsolationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.isolation_colors_.~RepeatedField();
}

void BufferIsolationConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BufferIsolationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.buffer_assignment.BufferIsolationConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isolation_colors_.Clear();
  ::memset(&_impl_.base_offset_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isolation_order_salt_) -
      reinterpret_cast<char*>(&_impl_.base_offset_bytes_)) + sizeof(_impl_.isolation_order_salt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferIsolationConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 base_offset_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.base_offset_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 isolation_fuel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isolation_fuel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 isolation_padding_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isolation_padding_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 isolation_order_salt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isolation_order_salt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 isolation_colors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_isolation_colors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_isolation_colors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferIsolationConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xla.buffer_assignment.BufferIsolationConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 base_offset_bytes = 1;
  if (this->_internal_base_offset_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_base_offset_bytes(), target);
  }

  // int64 isolation_fuel = 2;
  if (this->_internal_isolation_fuel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_isolation_fuel(), target);
  }

  // int64 isolation_padding_bytes = 3;
  if (this->_internal_isolation_padding_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_isolation_padding_bytes(), target);
  }

  // uint64 isolation_order_salt = 4;
  if (this->_internal_isolation_order_salt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_isolation_order_salt(), target);
  }

  // repeated int32 isolation_colors = 5;
  {
    int byte_size = _impl_._isolation_colors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_isolation_colors(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xla.buffer_assignment.BufferIsolationConfig)
  return target;
}

size_t BufferIsolationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.buffer_assignment.BufferIsolationConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 isolation_colors = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.isolation_colors_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._isolation_colors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 base_offset_bytes = 1;
  if (this->_internal_base_offset_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_base_offset_bytes());
  }

  // int64 isolation_fuel = 2;
  if (this->_internal_isolation_fuel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_isolation_fuel());
  }

  // int64 isolation_padding_bytes = 3;
  if (this->_internal_isolation_padding_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_isolation_padding_bytes());
  }

  // uint64 isolation_order_salt = 4;
  if (this->_internal_isolation_order_salt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_isolation_order_salt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferIsolationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BufferIsolationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferIsolationConfig::GetClassData() const { return &_class_data_; }


void BufferIsolationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BufferIsolationConfig*>(&to_msg);
  auto& from = static_cast<const BufferIsolationConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.buffer_assignment.BufferIsolationConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.isolation_colors_.MergeFrom(from._impl_.isolation_colors_);
  if (from._internal_base_offset_bytes() != 0) {
    _this->_internal_set_base_offset_bytes(from._internal_base_offset_bytes());
  }
  if (from._internal_isolation_fuel() != 0) {
    _this->_internal_set_isolation_fuel(from._internal_isolation_fuel());
  }
  if (from._internal_isolation_padding_bytes() != 0) {
    _this->_internal_set_isolation_padding_bytes(from._internal_isolation_padding_bytes());
  }
  if (from._internal_isolation_order_salt() != 0) {
    _this->_internal_set_isolation_order_salt(from._internal_isolation_order_salt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferIsolationConfig::CopyFrom(const BufferIsolationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.buffer_assignment.BufferIsolationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferIsolationConfig::IsInitialized() const {
  return true;
}

void BufferIsolationConfig::InternalSwap(BufferIsolationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.isolation_colors_.InternalSwap(&other->_impl_.isolation_colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferIsolationConfig, _impl_.isolation_order_salt_)
      + sizeof(BufferIsolationConfig::_impl_.isolation_order_salt_)
      - PROTOBUF_FIELD_OFFSET(BufferIsolationConfig, _impl_.base_offset_bytes_)>(
          reinterpret_cast<char*>(&_impl_.base_offset_bytes_),
          reinterpret_cast<char*>(&other->_impl_.base_offset_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferIsolationConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xla_2fservice_2fbuffer_5fassignment_2eproto_getter, &descriptor_table_xla_2fservice_2fbuffer_5fassignment_2eproto_once,
      file_level_metadata_xla_2fservice_2fbuffer_5fassignment_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace buffer_assignment
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xla::buffer_assignment::BufferIsolationConfig*
Arena::CreateMaybeMessage< ::xla::buffer_assignment::BufferIsolationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xla::buffer_assignment::BufferIsolationConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
