// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/test_compilation_environment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto;
namespace xla {
namespace test {
class TestCompilationEnvironment1;
struct TestCompilationEnvironment1DefaultTypeInternal;
extern TestCompilationEnvironment1DefaultTypeInternal _TestCompilationEnvironment1_default_instance_;
class TestCompilationEnvironment2;
struct TestCompilationEnvironment2DefaultTypeInternal;
extern TestCompilationEnvironment2DefaultTypeInternal _TestCompilationEnvironment2_default_instance_;
class TestCompilationEnvironment3;
struct TestCompilationEnvironment3DefaultTypeInternal;
extern TestCompilationEnvironment3DefaultTypeInternal _TestCompilationEnvironment3_default_instance_;
}  // namespace test
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::test::TestCompilationEnvironment1* Arena::CreateMaybeMessage<::xla::test::TestCompilationEnvironment1>(Arena*);
template<> ::xla::test::TestCompilationEnvironment2* Arena::CreateMaybeMessage<::xla::test::TestCompilationEnvironment2>(Arena*);
template<> ::xla::test::TestCompilationEnvironment3* Arena::CreateMaybeMessage<::xla::test::TestCompilationEnvironment3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {
namespace test {

// ===================================================================

class TestCompilationEnvironment1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.test.TestCompilationEnvironment1) */ {
 public:
  inline TestCompilationEnvironment1() : TestCompilationEnvironment1(nullptr) {}
  ~TestCompilationEnvironment1() override;
  explicit PROTOBUF_CONSTEXPR TestCompilationEnvironment1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestCompilationEnvironment1(const TestCompilationEnvironment1& from);
  TestCompilationEnvironment1(TestCompilationEnvironment1&& from) noexcept
    : TestCompilationEnvironment1() {
    *this = ::std::move(from);
  }

  inline TestCompilationEnvironment1& operator=(const TestCompilationEnvironment1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCompilationEnvironment1& operator=(TestCompilationEnvironment1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestCompilationEnvironment1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestCompilationEnvironment1* internal_default_instance() {
    return reinterpret_cast<const TestCompilationEnvironment1*>(
               &_TestCompilationEnvironment1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestCompilationEnvironment1& a, TestCompilationEnvironment1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCompilationEnvironment1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCompilationEnvironment1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestCompilationEnvironment1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestCompilationEnvironment1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestCompilationEnvironment1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestCompilationEnvironment1& from) {
    TestCompilationEnvironment1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCompilationEnvironment1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.test.TestCompilationEnvironment1";
  }
  protected:
  explicit TestCompilationEnvironment1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeFlagFieldNumber = 1,
  };
  // uint32 some_flag = 1;
  void clear_some_flag();
  uint32_t some_flag() const;
  void set_some_flag(uint32_t value);
  private:
  uint32_t _internal_some_flag() const;
  void _internal_set_some_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xla.test.TestCompilationEnvironment1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t some_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto;
};
// -------------------------------------------------------------------

class TestCompilationEnvironment2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.test.TestCompilationEnvironment2) */ {
 public:
  inline TestCompilationEnvironment2() : TestCompilationEnvironment2(nullptr) {}
  ~TestCompilationEnvironment2() override;
  explicit PROTOBUF_CONSTEXPR TestCompilationEnvironment2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestCompilationEnvironment2(const TestCompilationEnvironment2& from);
  TestCompilationEnvironment2(TestCompilationEnvironment2&& from) noexcept
    : TestCompilationEnvironment2() {
    *this = ::std::move(from);
  }

  inline TestCompilationEnvironment2& operator=(const TestCompilationEnvironment2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCompilationEnvironment2& operator=(TestCompilationEnvironment2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestCompilationEnvironment2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestCompilationEnvironment2* internal_default_instance() {
    return reinterpret_cast<const TestCompilationEnvironment2*>(
               &_TestCompilationEnvironment2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestCompilationEnvironment2& a, TestCompilationEnvironment2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCompilationEnvironment2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCompilationEnvironment2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestCompilationEnvironment2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestCompilationEnvironment2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestCompilationEnvironment2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestCompilationEnvironment2& from) {
    TestCompilationEnvironment2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCompilationEnvironment2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.test.TestCompilationEnvironment2";
  }
  protected:
  explicit TestCompilationEnvironment2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeOtherFlagFieldNumber = 1,
  };
  // uint32 some_other_flag = 1;
  void clear_some_other_flag();
  uint32_t some_other_flag() const;
  void set_some_other_flag(uint32_t value);
  private:
  uint32_t _internal_some_other_flag() const;
  void _internal_set_some_other_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xla.test.TestCompilationEnvironment2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t some_other_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto;
};
// -------------------------------------------------------------------

class TestCompilationEnvironment3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.test.TestCompilationEnvironment3) */ {
 public:
  inline TestCompilationEnvironment3() : TestCompilationEnvironment3(nullptr) {}
  ~TestCompilationEnvironment3() override;
  explicit PROTOBUF_CONSTEXPR TestCompilationEnvironment3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestCompilationEnvironment3(const TestCompilationEnvironment3& from);
  TestCompilationEnvironment3(TestCompilationEnvironment3&& from) noexcept
    : TestCompilationEnvironment3() {
    *this = ::std::move(from);
  }

  inline TestCompilationEnvironment3& operator=(const TestCompilationEnvironment3& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCompilationEnvironment3& operator=(TestCompilationEnvironment3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestCompilationEnvironment3& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestCompilationEnvironment3* internal_default_instance() {
    return reinterpret_cast<const TestCompilationEnvironment3*>(
               &_TestCompilationEnvironment3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestCompilationEnvironment3& a, TestCompilationEnvironment3& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCompilationEnvironment3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCompilationEnvironment3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestCompilationEnvironment3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestCompilationEnvironment3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestCompilationEnvironment3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestCompilationEnvironment3& from) {
    TestCompilationEnvironment3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCompilationEnvironment3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.test.TestCompilationEnvironment3";
  }
  protected:
  explicit TestCompilationEnvironment3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAThirdFlagFieldNumber = 1,
  };
  // uint32 a_third_flag = 1;
  void clear_a_third_flag();
  uint32_t a_third_flag() const;
  void set_a_third_flag(uint32_t value);
  private:
  uint32_t _internal_a_third_flag() const;
  void _internal_set_a_third_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xla.test.TestCompilationEnvironment3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t a_third_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestCompilationEnvironment1

// uint32 some_flag = 1;
inline void TestCompilationEnvironment1::clear_some_flag() {
  _impl_.some_flag_ = 0u;
}
inline uint32_t TestCompilationEnvironment1::_internal_some_flag() const {
  return _impl_.some_flag_;
}
inline uint32_t TestCompilationEnvironment1::some_flag() const {
  // @@protoc_insertion_point(field_get:xla.test.TestCompilationEnvironment1.some_flag)
  return _internal_some_flag();
}
inline void TestCompilationEnvironment1::_internal_set_some_flag(uint32_t value) {
  
  _impl_.some_flag_ = value;
}
inline void TestCompilationEnvironment1::set_some_flag(uint32_t value) {
  _internal_set_some_flag(value);
  // @@protoc_insertion_point(field_set:xla.test.TestCompilationEnvironment1.some_flag)
}

// -------------------------------------------------------------------

// TestCompilationEnvironment2

// uint32 some_other_flag = 1;
inline void TestCompilationEnvironment2::clear_some_other_flag() {
  _impl_.some_other_flag_ = 0u;
}
inline uint32_t TestCompilationEnvironment2::_internal_some_other_flag() const {
  return _impl_.some_other_flag_;
}
inline uint32_t TestCompilationEnvironment2::some_other_flag() const {
  // @@protoc_insertion_point(field_get:xla.test.TestCompilationEnvironment2.some_other_flag)
  return _internal_some_other_flag();
}
inline void TestCompilationEnvironment2::_internal_set_some_other_flag(uint32_t value) {
  
  _impl_.some_other_flag_ = value;
}
inline void TestCompilationEnvironment2::set_some_other_flag(uint32_t value) {
  _internal_set_some_other_flag(value);
  // @@protoc_insertion_point(field_set:xla.test.TestCompilationEnvironment2.some_other_flag)
}

// -------------------------------------------------------------------

// TestCompilationEnvironment3

// uint32 a_third_flag = 1;
inline void TestCompilationEnvironment3::clear_a_third_flag() {
  _impl_.a_third_flag_ = 0u;
}
inline uint32_t TestCompilationEnvironment3::_internal_a_third_flag() const {
  return _impl_.a_third_flag_;
}
inline uint32_t TestCompilationEnvironment3::a_third_flag() const {
  // @@protoc_insertion_point(field_get:xla.test.TestCompilationEnvironment3.a_third_flag)
  return _internal_a_third_flag();
}
inline void TestCompilationEnvironment3::_internal_set_a_third_flag(uint32_t value) {
  
  _impl_.a_third_flag_ = value;
}
inline void TestCompilationEnvironment3::set_a_third_flag(uint32_t value) {
  _internal_set_a_third_flag(value);
  // @@protoc_insertion_point(field_set:xla.test.TestCompilationEnvironment3.a_third_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2ftest_5fcompilation_5fenvironment_2eproto
